
OLED Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ddc  08008910  08008910  00018910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096ec  080096ec  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096f4  080096f4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096f4  080096f4  000196f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096f8  080096f8  000196f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080096fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001628  20000184  08009880  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017ac  08009880  000217ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5d3  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f66  00000000  00000000  0002f7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00032730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fe  00000000  00000000  00033490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b93  00000000  00000000  00033e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129b0  00000000  00000000  00049a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079cf7  00000000  00000000  0005c3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035a0  00000000  00000000  000d60c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000d9668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	080088f8 	.word	0x080088f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	080088f8 	.word	0x080088f8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000482:	f000 fcb3 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000486:	f000 f85b 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048a:	f000 f8d9 	bl	8000640 <MX_GPIO_Init>
  MX_I2C1_Init();
 800048e:	f000 f8a9 	bl	80005e4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000492:	f007 fd7b 	bl	8007f8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Init display
  if (ssd1306_Init(&hi2c1) != 0) {
 8000496:	4826      	ldr	r0, [pc, #152]	; (8000530 <main+0xb4>)
 8000498:	f000 fa16 	bl	80008c8 <ssd1306_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <main+0x2a>
    Error_Handler();
 80004a2:	f000 f925 	bl	80006f0 <Error_Handler>
  }
  HAL_Delay(1000);
 80004a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004aa:	f000 fd0d 	bl	8000ec8 <HAL_Delay>

  ssd1306_Fill(Black);
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 fb2a 	bl	8000b08 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 80004b4:	481e      	ldr	r0, [pc, #120]	; (8000530 <main+0xb4>)
 80004b6:	f000 fb49 	bl	8000b4c <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 80004ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004be:	f000 fd03 	bl	8000ec8 <HAL_Delay>

  // Write data to local screenbuffer
  ssd1306_SetCursor(0, 0);
 80004c2:	2100      	movs	r1, #0
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fc79 	bl	8000dbc <ssd1306_SetCursor>
  ssd1306_WriteString("NSE Labs", Font_11x18, White);
 80004ca:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <main+0xb8>)
 80004cc:	2301      	movs	r3, #1
 80004ce:	ca06      	ldmia	r2, {r1, r2}
 80004d0:	4819      	ldr	r0, [pc, #100]	; (8000538 <main+0xbc>)
 80004d2:	f000 fc4d 	bl	8000d70 <ssd1306_WriteString>

  ssd1306_SetCursor(0, 36);
 80004d6:	2124      	movs	r1, #36	; 0x24
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 fc6f 	bl	8000dbc <ssd1306_SetCursor>
  ssd1306_WriteString("OLED", Font_11x18, White);
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <main+0xb8>)
 80004e0:	2301      	movs	r3, #1
 80004e2:	ca06      	ldmia	r2, {r1, r2}
 80004e4:	4815      	ldr	r0, [pc, #84]	; (800053c <main+0xc0>)
 80004e6:	f000 fc43 	bl	8000d70 <ssd1306_WriteString>

  // Draw rectangle on screen
  for (uint8_t i=0; i<28; i++) {
 80004ea:	2300      	movs	r3, #0
 80004ec:	71fb      	strb	r3, [r7, #7]
 80004ee:	e013      	b.n	8000518 <main+0x9c>
      for (uint8_t j=0; j<64; j++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	71bb      	strb	r3, [r7, #6]
 80004f4:	e00a      	b.n	800050c <main+0x90>
          ssd1306_DrawPixel(100+i, 0+j, White);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	3364      	adds	r3, #100	; 0x64
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	79b9      	ldrb	r1, [r7, #6]
 80004fe:	2201      	movs	r2, #1
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fb55 	bl	8000bb0 <ssd1306_DrawPixel>
      for (uint8_t j=0; j<64; j++) {
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	3301      	adds	r3, #1
 800050a:	71bb      	strb	r3, [r7, #6]
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	2b3f      	cmp	r3, #63	; 0x3f
 8000510:	d9f1      	bls.n	80004f6 <main+0x7a>
  for (uint8_t i=0; i<28; i++) {
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	3301      	adds	r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b1b      	cmp	r3, #27
 800051c:	d9e8      	bls.n	80004f0 <main+0x74>
      }
  }

  // Copy all data from local screenbuffer to the screen
  ssd1306_UpdateScreen(&hi2c1);
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0xb4>)
 8000520:	f000 fb14 	bl	8000b4c <ssd1306_UpdateScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_Delay(500);
 8000524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000528:	f000 fcce 	bl	8000ec8 <HAL_Delay>
 800052c:	e7fa      	b.n	8000524 <main+0xa8>
 800052e:	bf00      	nop
 8000530:	200001a0 	.word	0x200001a0
 8000534:	20000004 	.word	0x20000004
 8000538:	08008910 	.word	0x08008910
 800053c:	0800891c 	.word	0x0800891c

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f008 f9a6 	bl	80088a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xa0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800056a:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <SystemClock_Config+0xa0>)
 800056c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000570:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000572:	2303      	movs	r3, #3
 8000574:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800058c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4618      	mov	r0, r3
 800059e:	f003 f8df 	bl	8003760 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005a8:	f000 f8a2 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fbfa 	bl	8003dc0 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 f88d 	bl	80006f0 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3748      	adds	r7, #72	; 0x48
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x50>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_I2C1_Init+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_I2C1_Init+0x58>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_I2C1_Init+0x50>)
 8000602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_I2C1_Init+0x50>)
 8000622:	f000 ff19 	bl	8001458 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 f860 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200001a0 	.word	0x200001a0
 8000638:	40005400 	.word	0x40005400
 800063c:	000186a0 	.word	0x000186a0

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_GPIO_Init+0xa8>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <MX_GPIO_Init+0xa8>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_GPIO_Init+0xa8>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_GPIO_Init+0xa8>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <MX_GPIO_Init+0xa8>)
 8000674:	f043 0320 	orr.w	r3, r3, #32
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_GPIO_Init+0xa8>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 0320 	and.w	r3, r3, #32
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_GPIO_Init+0xa8>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <MX_GPIO_Init+0xa8>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_GPIO_Init+0xa8>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_GPIO_Init+0xa8>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <MX_GPIO_Init+0xa8>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_GPIO_Init+0xa8>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <MX_GPIO_Init+0xac>)
 80006be:	f000 feb3 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_GPIO_Init+0xac>)
 80006dc:	f000 fd24 	bl	8001128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020800 	.word	0x40020800

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_MspInit+0x58>)
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <HAL_MspInit+0x58>)
 8000708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800070c:	6253      	str	r3, [r2, #36]	; 0x24
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_MspInit+0x58>)
 8000710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_MspInit+0x58>)
 800071c:	6a1b      	ldr	r3, [r3, #32]
 800071e:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <HAL_MspInit+0x58>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6213      	str	r3, [r2, #32]
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_MspInit+0x58>)
 8000728:	6a1b      	ldr	r3, [r3, #32]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_MspInit+0x58>)
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_MspInit+0x58>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	6253      	str	r3, [r2, #36]	; 0x24
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_MspInit+0x58>)
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_I2C_MspInit+0x7c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d127      	bne.n	80007ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000792:	23c0      	movs	r3, #192	; 0xc0
 8000794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000796:	2312      	movs	r3, #18
 8000798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a2:	2304      	movs	r3, #4
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <HAL_I2C_MspInit+0x84>)
 80007ae:	f000 fcbb 	bl	8001128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	6253      	str	r3, [r2, #36]	; 0x24
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40005400 	.word	0x40005400
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020400 	.word	0x40020400

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 fb33 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <USB_LP_IRQHandler+0x10>)
 8000836:	f001 fbb3 	bl	8001fa0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200012a0 	.word	0x200012a0

08000844 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000850:	f7ff fff8 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000856:	490c      	ldr	r1, [pc, #48]	; (8000888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <LoopFillZerobss+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800086c:	4c09      	ldr	r4, [pc, #36]	; (8000894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087a:	f008 f819 	bl	80088b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fdfd 	bl	800047c <main>
  bx lr
 8000882:	4770      	bx	lr
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800088c:	080096fc 	.word	0x080096fc
  ldr r2, =_sbss
 8000890:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000894:	200017ac 	.word	0x200017ac

08000898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_IRQHandler>

0800089a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af04      	add	r7, sp, #16
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80008a6:	230a      	movs	r3, #10
 80008a8:	9302      	str	r3, [sp, #8]
 80008aa:	2301      	movs	r3, #1
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	1cfb      	adds	r3, r7, #3
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2301      	movs	r3, #1
 80008b4:	2200      	movs	r2, #0
 80008b6:	2178      	movs	r1, #120	; 0x78
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 ff11 	bl	80016e0 <HAL_I2C_Mem_Write>
 80008be:	4603      	mov	r3, r0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80008d0:	2064      	movs	r0, #100	; 0x64
 80008d2:	f000 faf9 	bl	8000ec8 <HAL_Delay>
    int status = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80008da:	21ae      	movs	r1, #174	; 0xae
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ffdc 	bl	800089a <ssd1306_WriteCommand>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80008ec:	2120      	movs	r1, #32
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffd3 	bl	800089a <ssd1306_WriteCommand>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008fe:	2110      	movs	r1, #16
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ffca 	bl	800089a <ssd1306_WriteCommand>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000910:	21b0      	movs	r1, #176	; 0xb0
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ffc1 	bl	800089a <ssd1306_WriteCommand>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000922:	21c8      	movs	r1, #200	; 0xc8
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ffb8 	bl	800089a <ssd1306_WriteCommand>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000934:	2100      	movs	r1, #0
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ffaf 	bl	800089a <ssd1306_WriteCommand>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000946:	2110      	movs	r1, #16
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ffa6 	bl	800089a <ssd1306_WriteCommand>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ff9d 	bl	800089a <ssd1306_WriteCommand>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800096a:	2181      	movs	r1, #129	; 0x81
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff94 	bl	800089a <ssd1306_WriteCommand>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800097c:	21ff      	movs	r1, #255	; 0xff
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff8b 	bl	800089a <ssd1306_WriteCommand>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800098e:	21a1      	movs	r1, #161	; 0xa1
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff82 	bl	800089a <ssd1306_WriteCommand>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80009a0:	21a6      	movs	r1, #166	; 0xa6
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ff79 	bl	800089a <ssd1306_WriteCommand>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80009b2:	21a8      	movs	r1, #168	; 0xa8
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff70 	bl	800089a <ssd1306_WriteCommand>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80009c4:	213f      	movs	r1, #63	; 0x3f
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ff67 	bl	800089a <ssd1306_WriteCommand>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009d6:	21a4      	movs	r1, #164	; 0xa4
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff5e 	bl	800089a <ssd1306_WriteCommand>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4413      	add	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80009e8:	21d3      	movs	r1, #211	; 0xd3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ff55 	bl	800089a <ssd1306_WriteCommand>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80009fa:	2100      	movs	r1, #0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff4c 	bl	800089a <ssd1306_WriteCommand>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4413      	add	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000a0c:	21d5      	movs	r1, #213	; 0xd5
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff43 	bl	800089a <ssd1306_WriteCommand>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000a1e:	21f0      	movs	r1, #240	; 0xf0
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff3a 	bl	800089a <ssd1306_WriteCommand>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000a30:	21d9      	movs	r1, #217	; 0xd9
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff31 	bl	800089a <ssd1306_WriteCommand>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000a42:	2122      	movs	r1, #34	; 0x22
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff28 	bl	800089a <ssd1306_WriteCommand>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000a54:	21da      	movs	r1, #218	; 0xda
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ff1f 	bl	800089a <ssd1306_WriteCommand>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000a66:	2112      	movs	r1, #18
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff16 	bl	800089a <ssd1306_WriteCommand>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4413      	add	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000a78:	21db      	movs	r1, #219	; 0xdb
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff0d 	bl	800089a <ssd1306_WriteCommand>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff04 	bl	800089a <ssd1306_WriteCommand>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4413      	add	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000a9c:	218d      	movs	r1, #141	; 0x8d
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fefb 	bl	800089a <ssd1306_WriteCommand>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000aae:	2114      	movs	r1, #20
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff fef2 	bl	800089a <ssd1306_WriteCommand>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4413      	add	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000ac0:	21af      	movs	r1, #175	; 0xaf
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fee9 	bl	800089a <ssd1306_WriteCommand>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <ssd1306_Init+0x214>
        return 1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e00f      	b.n	8000afc <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 f813 	bl	8000b08 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f832 	bl	8000b4c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <ssd1306_Init+0x23c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <ssd1306_Init+0x23c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <ssd1306_Init+0x23c>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	715a      	strb	r2, [r3, #5]

    return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200005f4 	.word	0x200005f4

08000b08 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e00d      	b.n	8000b34 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <ssd1306_Fill+0x1a>
 8000b1e:	2100      	movs	r1, #0
 8000b20:	e000      	b.n	8000b24 <ssd1306_Fill+0x1c>
 8000b22:	21ff      	movs	r1, #255	; 0xff
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <ssd1306_Fill+0x40>)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4413      	add	r3, r2
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3a:	d3ed      	bcc.n	8000b18 <ssd1306_Fill+0x10>
    }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	200001f4 	.word	0x200001f4

08000b4c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af04      	add	r7, sp, #16
 8000b52:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e020      	b.n	8000b9c <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	3b50      	subs	r3, #80	; 0x50
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fe99 	bl	800089a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe95 	bl	800089a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000b70:	2110      	movs	r1, #16
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fe91 	bl	800089a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	01db      	lsls	r3, r3, #7
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <ssd1306_UpdateScreen+0x60>)
 8000b7e:	4413      	add	r3, r2
 8000b80:	2264      	movs	r2, #100	; 0x64
 8000b82:	9202      	str	r2, [sp, #8]
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	9201      	str	r2, [sp, #4]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	2240      	movs	r2, #64	; 0x40
 8000b8e:	2178      	movs	r1, #120	; 0x78
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 fda5 	bl	80016e0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	2b07      	cmp	r3, #7
 8000ba0:	d9db      	bls.n	8000b5a <ssd1306_UpdateScreen+0xe>
    }
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001f4 	.word	0x200001f4

08000bb0 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	71bb      	strb	r3, [r7, #6]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db48      	blt.n	8000c5c <ssd1306_DrawPixel+0xac>
 8000bca:	79bb      	ldrb	r3, [r7, #6]
 8000bcc:	2b3f      	cmp	r3, #63	; 0x3f
 8000bce:	d845      	bhi.n	8000c5c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <ssd1306_DrawPixel+0xb8>)
 8000bd2:	791b      	ldrb	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000bd8:	797b      	ldrb	r3, [r7, #5]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf0c      	ite	eq
 8000bde:	2301      	moveq	r3, #1
 8000be0:	2300      	movne	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000be6:	797b      	ldrb	r3, [r7, #5]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d11a      	bne.n	8000c22 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	b2d8      	uxtb	r0, r3
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	01db      	lsls	r3, r3, #7
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <ssd1306_DrawPixel+0xbc>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	b25a      	sxtb	r2, r3
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	2101      	movs	r1, #1
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b259      	sxtb	r1, r3
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	4603      	mov	r3, r0
 8000c16:	01db      	lsls	r3, r3, #7
 8000c18:	4413      	add	r3, r2
 8000c1a:	b2c9      	uxtb	r1, r1
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <ssd1306_DrawPixel+0xbc>)
 8000c1e:	54d1      	strb	r1, [r2, r3]
 8000c20:	e01d      	b.n	8000c5e <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c22:	79fa      	ldrb	r2, [r7, #7]
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	08db      	lsrs	r3, r3, #3
 8000c28:	b2d8      	uxtb	r0, r3
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	01db      	lsls	r3, r3, #7
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <ssd1306_DrawPixel+0xbc>)
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	b259      	sxtb	r1, r3
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	4603      	mov	r3, r0
 8000c50:	01db      	lsls	r3, r3, #7
 8000c52:	4413      	add	r3, r2
 8000c54:	b2c9      	uxtb	r1, r1
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <ssd1306_DrawPixel+0xbc>)
 8000c58:	54d1      	strb	r1, [r2, r3]
 8000c5a:	e000      	b.n	8000c5e <ssd1306_DrawPixel+0xae>
        return;
 8000c5c:	bf00      	nop
    }
}
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200005f4 	.word	0x200005f4
 8000c6c:	200001f4 	.word	0x200001f4

08000c70 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4604      	mov	r4, r0
 8000c78:	1d38      	adds	r0, r7, #4
 8000c7a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4623      	mov	r3, r4
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	4613      	mov	r3, r2
 8000c86:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <ssd1306_WriteChar+0xfc>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	793b      	ldrb	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	2b7f      	cmp	r3, #127	; 0x7f
 8000c94:	dc06      	bgt.n	8000ca4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000c96:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <ssd1306_WriteChar+0xfc>)
 8000c98:	885b      	ldrh	r3, [r3, #2]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	797b      	ldrb	r3, [r7, #5]
 8000c9e:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000ca0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca2:	dd01      	ble.n	8000ca8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e05d      	b.n	8000d64 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	e04c      	b.n	8000d48 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	3b20      	subs	r3, #32
 8000cb4:	7979      	ldrb	r1, [r7, #5]
 8000cb6:	fb01 f303 	mul.w	r3, r1, r3
 8000cba:	4619      	mov	r1, r3
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	440b      	add	r3, r1
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	e034      	b.n	8000d38 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d012      	beq.n	8000d04 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <ssd1306_WriteChar+0xfc>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	4413      	add	r3, r2
 8000cea:	b2d8      	uxtb	r0, r3
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <ssd1306_WriteChar+0xfc>)
 8000cee:	885b      	ldrh	r3, [r3, #2]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	7bba      	ldrb	r2, [r7, #14]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f7ff ff57 	bl	8000bb0 <ssd1306_DrawPixel>
 8000d02:	e016      	b.n	8000d32 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <ssd1306_WriteChar+0xfc>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2d8      	uxtb	r0, r3
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <ssd1306_WriteChar+0xfc>)
 8000d14:	885b      	ldrh	r3, [r3, #2]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2d9      	uxtb	r1, r3
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf0c      	ite	eq
 8000d26:	2301      	moveq	r3, #1
 8000d28:	2300      	movne	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	f7ff ff3f 	bl	8000bb0 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	3301      	adds	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d3c5      	bcc.n	8000cce <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3301      	adds	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d3ad      	bcc.n	8000cae <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <ssd1306_WriteChar+0xfc>)
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	793b      	ldrb	r3, [r7, #4]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <ssd1306_WriteChar+0xfc>)
 8000d60:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3724      	adds	r7, #36	; 0x24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}
 8000d6c:	200005f4 	.word	0x200005f4

08000d70 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	1d38      	adds	r0, r7, #4
 8000d7a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d7e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000d80:	e012      	b.n	8000da8 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	7818      	ldrb	r0, [r3, #0]
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	1d3a      	adds	r2, r7, #4
 8000d8a:	ca06      	ldmia	r2, {r1, r2}
 8000d8c:	f7ff ff70 	bl	8000c70 <ssd1306_WriteChar>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d002      	beq.n	8000da2 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	e008      	b.n	8000db4 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e8      	bne.n	8000d82 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	781b      	ldrb	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <ssd1306_SetCursor+0x2c>)
 8000dd2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <ssd1306_SetCursor+0x2c>)
 8000dda:	805a      	strh	r2, [r3, #2]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200005f4 	.word	0x200005f4

08000dec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f000 f954 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f000 f80d 	bl	8000e1c <HAL_InitTick>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	e001      	b.n	8000e12 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0e:	f7ff fc75 	bl	80006fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e12:	79fb      	ldrb	r3, [r7, #7]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_InitTick+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d022      	beq.n	8000e76 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_InitTick+0x6c>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_InitTick+0x68>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f962 	bl	800110e <HAL_SYSTICK_Config>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10f      	bne.n	8000e70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	d809      	bhi.n	8000e6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e56:	2200      	movs	r2, #0
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5e:	f000 f92c 	bl	80010ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_InitTick+0x70>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e004      	b.n	8000e7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e001      	b.n	8000e7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000010 	.word	0x20000010
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	2000000c 	.word	0x2000000c

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_IncTick+0x1c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a03      	ldr	r2, [pc, #12]	; (8000eac <HAL_IncTick+0x1c>)
 8000ea0:	6013      	str	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200005fc 	.word	0x200005fc
 8000eb0:	20000010 	.word	0x20000010

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <HAL_GetTick+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	200005fc 	.word	0x200005fc

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff fff0 	bl	8000eb4 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d004      	beq.n	8000eec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_Delay+0x40>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eec:	bf00      	nop
 8000eee:	f7ff ffe1 	bl	8000eb4 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d8f7      	bhi.n	8000eee <HAL_Delay+0x26>
  {
  }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000010 	.word	0x20000010

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <__NVIC_EnableIRQ+0x34>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff90 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff2d 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff42 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff35 	bl	8000f70 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa2 	bl	8001060 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800113e:	e154      	b.n	80013ea <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8146 	beq.w	80013e4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800116c:	2b02      	cmp	r3, #2
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d017      	beq.n	800120e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	6939      	ldr	r1, [r7, #16]
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0203 	and.w	r2, r3, #3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80a0 	beq.w	80013e4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	4b58      	ldr	r3, [pc, #352]	; (8001408 <HAL_GPIO_Init+0x2e0>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4a57      	ldr	r2, [pc, #348]	; (8001408 <HAL_GPIO_Init+0x2e0>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6213      	str	r3, [r2, #32]
 80012b0:	4b55      	ldr	r3, [pc, #340]	; (8001408 <HAL_GPIO_Init+0x2e0>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80012bc:	4a53      	ldr	r2, [pc, #332]	; (800140c <HAL_GPIO_Init+0x2e4>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <HAL_GPIO_Init+0x2e8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d019      	beq.n	800131c <HAL_GPIO_Init+0x1f4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <HAL_GPIO_Init+0x2ec>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1f0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a49      	ldr	r2, [pc, #292]	; (8001418 <HAL_GPIO_Init+0x2f0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1ec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a48      	ldr	r2, [pc, #288]	; (800141c <HAL_GPIO_Init+0x2f4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a47      	ldr	r2, [pc, #284]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1e4>
 8001308:	2304      	movs	r3, #4
 800130a:	e008      	b.n	800131e <HAL_GPIO_Init+0x1f6>
 800130c:	2305      	movs	r3, #5
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x1f6>
 8001310:	2303      	movs	r3, #3
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x1f6>
 8001314:	2302      	movs	r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x1f6>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x1f6>
 800131c:	2300      	movs	r3, #0
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800132e:	4937      	ldr	r1, [pc, #220]	; (800140c <HAL_GPIO_Init+0x2e4>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133c:	4b39      	ldr	r3, [pc, #228]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001360:	4a30      	ldr	r2, [pc, #192]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800138a:	4a26      	ldr	r2, [pc, #152]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013de:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f47f aea3 	bne.w	8001140 <HAL_GPIO_Init+0x18>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40010000 	.word	0x40010000
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e12b      	b.n	80016c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff f96a 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014bc:	f002 febc 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 80014c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a81      	ldr	r2, [pc, #516]	; (80016cc <HAL_I2C_Init+0x274>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d807      	bhi.n	80014dc <HAL_I2C_Init+0x84>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4a80      	ldr	r2, [pc, #512]	; (80016d0 <HAL_I2C_Init+0x278>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	bf94      	ite	ls
 80014d4:	2301      	movls	r3, #1
 80014d6:	2300      	movhi	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	e006      	b.n	80014ea <HAL_I2C_Init+0x92>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4a7d      	ldr	r2, [pc, #500]	; (80016d4 <HAL_I2C_Init+0x27c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bf94      	ite	ls
 80014e4:	2301      	movls	r3, #1
 80014e6:	2300      	movhi	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0e7      	b.n	80016c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4a78      	ldr	r2, [pc, #480]	; (80016d8 <HAL_I2C_Init+0x280>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9b      	lsrs	r3, r3, #18
 80014fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4a6a      	ldr	r2, [pc, #424]	; (80016cc <HAL_I2C_Init+0x274>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d802      	bhi.n	800152c <HAL_I2C_Init+0xd4>
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3301      	adds	r3, #1
 800152a:	e009      	b.n	8001540 <HAL_I2C_Init+0xe8>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	4a69      	ldr	r2, [pc, #420]	; (80016dc <HAL_I2C_Init+0x284>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	3301      	adds	r3, #1
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	430b      	orrs	r3, r1
 8001546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	495c      	ldr	r1, [pc, #368]	; (80016cc <HAL_I2C_Init+0x274>)
 800155c:	428b      	cmp	r3, r1
 800155e:	d819      	bhi.n	8001594 <HAL_I2C_Init+0x13c>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1e59      	subs	r1, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fbb1 f3f3 	udiv	r3, r1, r3
 800156e:	1c59      	adds	r1, r3, #1
 8001570:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001574:	400b      	ands	r3, r1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00a      	beq.n	8001590 <HAL_I2C_Init+0x138>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1e59      	subs	r1, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fbb1 f3f3 	udiv	r3, r1, r3
 8001588:	3301      	adds	r3, #1
 800158a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158e:	e051      	b.n	8001634 <HAL_I2C_Init+0x1dc>
 8001590:	2304      	movs	r3, #4
 8001592:	e04f      	b.n	8001634 <HAL_I2C_Init+0x1dc>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d111      	bne.n	80015c0 <HAL_I2C_Init+0x168>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e58      	subs	r0, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	440b      	add	r3, r1
 80015aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	e012      	b.n	80015e6 <HAL_I2C_Init+0x18e>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1e58      	subs	r0, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	0099      	lsls	r1, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_Init+0x196>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e022      	b.n	8001634 <HAL_I2C_Init+0x1dc>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10e      	bne.n	8001614 <HAL_I2C_Init+0x1bc>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1e58      	subs	r0, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6859      	ldr	r1, [r3, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	440b      	add	r3, r1
 8001604:	fbb0 f3f3 	udiv	r3, r0, r3
 8001608:	3301      	adds	r3, #1
 800160a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001612:	e00f      	b.n	8001634 <HAL_I2C_Init+0x1dc>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1e58      	subs	r0, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	0099      	lsls	r1, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	fbb0 f3f3 	udiv	r3, r0, r3
 800162a:	3301      	adds	r3, #1
 800162c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	6809      	ldr	r1, [r1, #0]
 8001638:	4313      	orrs	r3, r2
 800163a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69da      	ldr	r2, [r3, #28]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6911      	ldr	r1, [r2, #16]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68d2      	ldr	r2, [r2, #12]
 800166e:	4311      	orrs	r1, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	430b      	orrs	r3, r1
 8001676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2220      	movs	r2, #32
 80016ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	000186a0 	.word	0x000186a0
 80016d0:	001e847f 	.word	0x001e847f
 80016d4:	003d08ff 	.word	0x003d08ff
 80016d8:	431bde83 	.word	0x431bde83
 80016dc:	10624dd3 	.word	0x10624dd3

080016e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	817b      	strh	r3, [r7, #10]
 80016f2:	460b      	mov	r3, r1
 80016f4:	813b      	strh	r3, [r7, #8]
 80016f6:	4613      	mov	r3, r2
 80016f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016fa:	f7ff fbdb 	bl	8000eb4 <HAL_GetTick>
 80016fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b20      	cmp	r3, #32
 800170a:	f040 80d9 	bne.w	80018c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2319      	movs	r3, #25
 8001714:	2201      	movs	r2, #1
 8001716:	496d      	ldr	r1, [pc, #436]	; (80018cc <HAL_I2C_Mem_Write+0x1ec>)
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f971 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001724:	2302      	movs	r3, #2
 8001726:	e0cc      	b.n	80018c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_I2C_Mem_Write+0x56>
 8001732:	2302      	movs	r3, #2
 8001734:	e0c5      	b.n	80018c2 <HAL_I2C_Mem_Write+0x1e2>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b01      	cmp	r3, #1
 800174a:	d007      	beq.n	800175c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2221      	movs	r2, #33	; 0x21
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2240      	movs	r2, #64	; 0x40
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a3a      	ldr	r2, [r7, #32]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800178c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_I2C_Mem_Write+0x1f0>)
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800179e:	88f8      	ldrh	r0, [r7, #6]
 80017a0:	893a      	ldrh	r2, [r7, #8]
 80017a2:	8979      	ldrh	r1, [r7, #10]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4603      	mov	r3, r0
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f890 	bl	80018d4 <I2C_RequestMemoryWrite>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d052      	beq.n	8001860 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e081      	b.n	80018c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fa36 	bl	8001c34 <I2C_WaitOnTXEFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d107      	bne.n	80017e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06b      	b.n	80018c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b04      	cmp	r3, #4
 8001826:	d11b      	bne.n	8001860 <HAL_I2C_Mem_Write+0x180>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d017      	beq.n	8001860 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1aa      	bne.n	80017be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 fa29 	bl	8001cc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00d      	beq.n	8001894 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	2b04      	cmp	r3, #4
 800187e:	d107      	bne.n	8001890 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e016      	b.n	80018c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018c0:	2302      	movs	r3, #2
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	00100002 	.word	0x00100002
 80018d0:	ffff0000 	.word	0xffff0000

080018d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	460b      	mov	r3, r1
 80018e8:	813b      	strh	r3, [r7, #8]
 80018ea:	4613      	mov	r3, r2
 80018ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2200      	movs	r2, #0
 8001906:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f878 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001924:	d103      	bne.n	800192e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e05f      	b.n	80019f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001940:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	6a3a      	ldr	r2, [r7, #32]
 8001946:	492d      	ldr	r1, [pc, #180]	; (80019fc <I2C_RequestMemoryWrite+0x128>)
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 f8d3 	bl	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e04c      	b.n	80019f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800196e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f95e 	bl	8001c34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00d      	beq.n	800199a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2b04      	cmp	r3, #4
 8001984:	d107      	bne.n	8001996 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001994:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e02b      	b.n	80019f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	e021      	b.n	80019f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019ac:	893b      	ldrh	r3, [r7, #8]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	6a39      	ldr	r1, [r7, #32]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f938 	bl	8001c34 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d107      	bne.n	80019e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e005      	b.n	80019f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019e6:	893b      	ldrh	r3, [r7, #8]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	00010002 	.word	0x00010002

08001a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a10:	e048      	b.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d044      	beq.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1a:	f7ff fa4b 	bl	8000eb4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d302      	bcc.n	8001a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d139      	bne.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10d      	bne.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4013      	ands	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	e00c      	b.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4013      	ands	r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d116      	bne.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e023      	b.n	8001aec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10d      	bne.n	8001aca <I2C_WaitOnFlagUntilTimeout+0xca>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	e00c      	b.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d093      	beq.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b02:	e071      	b.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d123      	bne.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f043 0204 	orr.w	r2, r3, #4
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e067      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b62:	d041      	beq.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b64:	f7ff f9a6 	bl	8000eb4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d302      	bcc.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d136      	bne.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10c      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	2300      	moveq	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e00b      	b.n	8001bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e021      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d10c      	bne.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e00b      	b.n	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f af6d 	bne.w	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c40:	e034      	b.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f886 	bl	8001d54 <I2C_IsAcknowledgeFailed>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e034      	b.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d028      	beq.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c5a:	f7ff f92b 	bl	8000eb4 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d302      	bcc.n	8001c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11d      	bne.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b80      	cmp	r3, #128	; 0x80
 8001c7c:	d016      	beq.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f043 0220 	orr.w	r2, r3, #32
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e007      	b.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b80      	cmp	r3, #128	; 0x80
 8001cb8:	d1c3      	bne.n	8001c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd0:	e034      	b.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f83e 	bl	8001d54 <I2C_IsAcknowledgeFailed>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e034      	b.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d028      	beq.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cea:	f7ff f8e3 	bl	8000eb4 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d302      	bcc.n	8001d00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11d      	bne.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d016      	beq.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e007      	b.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d1c3      	bne.n	8001cd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6a:	d11b      	bne.n	8001da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f043 0204 	orr.w	r2, r3, #4
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db2:	b08b      	sub	sp, #44	; 0x2c
 8001db4:	af06      	add	r7, sp, #24
 8001db6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0c4      	b.n	8001f4c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f006 fac2 	bl	8008360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2203      	movs	r2, #3
 8001de0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 faaf 	bl	800434c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e040      	b.n	8001e76 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3301      	adds	r3, #1
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3303      	adds	r3, #3
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3338      	adds	r3, #56	; 0x38
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	333c      	adds	r3, #60	; 0x3c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3340      	adds	r3, #64	; 0x40
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	3301      	adds	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3b9      	bcc.n	8001df4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e044      	b.n	8001f10 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d3b5      	bcc.n	8001e86 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	687e      	ldr	r6, [r7, #4]
 8001f22:	466d      	mov	r5, sp
 8001f24:	f106 0410 	add.w	r4, r6, #16
 8001f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	602b      	str	r3, [r5, #0]
 8001f30:	1d33      	adds	r3, r6, #4
 8001f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f34:	6838      	ldr	r0, [r7, #0]
 8001f36:	f002 fa23 	bl	8004380 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_Start+0x16>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e016      	b.n	8001f98 <HAL_PCD_Start+0x44>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f002 f9d2 	bl	8004320 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f006 f9d0 	bl	8008324 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fc86 	bl	800689a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 fc7e 	bl	80068ae <USB_ReadInterrupts>
 8001fb2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fab1 	bl	8002526 <PCD_EP_ISR_Handler>

    return;
 8001fc4:	e0bd      	b.n	8002142 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f006 fa34 	bl	8008456 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001fee:	2100      	movs	r1, #0
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8a9 	bl	8002148 <HAL_PCD_SetAddress>

    return;
 8001ff6:	e0a4      	b.n	8002142 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200a:	b29a      	uxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002014:	b292      	uxth	r2, r2
 8002016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800201a:	e092      	b.n	8002142 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800202e:	b29a      	uxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002038:	b292      	uxth	r2, r2
 800203a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800203e:	e080      	b.n	8002142 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d027      	beq.n	800209a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0204 	bic.w	r2, r2, #4
 800205c:	b292      	uxth	r2, r2
 800205e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800206a:	b29a      	uxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0208 	bic.w	r2, r2, #8
 8002074:	b292      	uxth	r2, r2
 8002076:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f006 fa24 	bl	80084c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002092:	b292      	uxth	r2, r2
 8002094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002098:	e053      	b.n	8002142 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d027      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0208 	orr.w	r2, r2, #8
 80020b6:	b292      	uxth	r2, r2
 80020b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ce:	b292      	uxth	r2, r2
 80020d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020dc:	b29a      	uxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0204 	orr.w	r2, r2, #4
 80020e6:	b292      	uxth	r2, r2
 80020e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f006 f9d1 	bl	8008494 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020f2:	e026      	b.n	8002142 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00f      	beq.n	800211e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002110:	b292      	uxth	r2, r2
 8002112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f006 f98f 	bl	800843a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800211c:	e011      	b.n	8002142 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800213a:	b292      	uxth	r2, r2
 800213c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002140:	bf00      	nop
  }
}
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_PCD_SetAddress+0x1a>
 800215e:	2302      	movs	r3, #2
 8002160:	e013      	b.n	800218a <HAL_PCD_SetAddress+0x42>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f004 fb7a 	bl	8006874 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	4608      	mov	r0, r1
 800219c:	4611      	mov	r1, r2
 800219e:	461a      	mov	r2, r3
 80021a0:	4603      	mov	r3, r0
 80021a2:	70fb      	strb	r3, [r7, #3]
 80021a4:	460b      	mov	r3, r1
 80021a6:	803b      	strh	r3, [r7, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da0e      	bge.n	80021d6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	705a      	strb	r2, [r3, #1]
 80021d4:	e00e      	b.n	80021f4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 0207 	and.w	r2, r3, #7
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002200:	883a      	ldrh	r2, [r7, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	78ba      	ldrb	r2, [r7, #2]
 800220a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800220c:	78bb      	ldrb	r3, [r7, #2]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d102      	bne.n	8002218 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_PCD_EP_Open+0x94>
 8002222:	2302      	movs	r3, #2
 8002224:	e00e      	b.n	8002244 <HAL_PCD_EP_Open+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	4618      	mov	r0, r3
 8002236:	f002 f8c3 	bl	80043c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002242:	7afb      	ldrb	r3, [r7, #11]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225c:	2b00      	cmp	r3, #0
 800225e:	da0e      	bge.n	800227e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	705a      	strb	r2, [r3, #1]
 800227c:	e00e      	b.n	800229c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	f003 0207 	and.w	r2, r3, #7
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_PCD_EP_Close+0x6a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e00e      	b.n	80022d4 <HAL_PCD_EP_Close+0x88>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 fc3b 	bl	8004b40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	460b      	mov	r3, r1
 80022ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	f003 0207 	and.w	r2, r3, #7
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2200      	movs	r2, #0
 800231a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	b2da      	uxtb	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6979      	ldr	r1, [r7, #20]
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fdf2 	bl	8004f18 <USB_EPStartXfer>

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 0207 	and.w	r2, r3, #7
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002360:	681b      	ldr	r3, [r3, #0]
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	460b      	mov	r3, r1
 800237a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2201      	movs	r2, #1
 80023b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6979      	ldr	r1, [r7, #20]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 fda4 	bl	8004f18 <USB_EPStartXfer>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 0207 	and.w	r2, r3, #7
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d901      	bls.n	80023f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e03e      	b.n	8002476 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	da0e      	bge.n	800241e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	705a      	strb	r2, [r3, #1]
 800241c:	e00c      	b.n	8002438 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_PCD_EP_SetStall+0x7e>
 8002454:	2302      	movs	r3, #2
 8002456:	e00e      	b.n	8002476 <HAL_PCD_EP_SetStall+0x9c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	4618      	mov	r0, r3
 8002468:	f004 f907 	bl	800667a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d901      	bls.n	800249c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e040      	b.n	800251e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800249c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0e      	bge.n	80024c2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	705a      	strb	r2, [r3, #1]
 80024c0:	e00e      	b.n	80024e0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	f003 0207 	and.w	r2, r3, #7
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_PCD_EP_ClrStall+0x82>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e00e      	b.n	800251e <HAL_PCD_EP_ClrStall+0xa0>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68f9      	ldr	r1, [r7, #12]
 800250e:	4618      	mov	r0, r3
 8002510:	f004 f903 	bl	800671a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b096      	sub	sp, #88	; 0x58
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800252e:	e3bf      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002538:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800253c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800254a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8179 	bne.w	8002846 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002554:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d152      	bne.n	8002606 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	81fb      	strh	r3, [r7, #14]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800257c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002580:	b29b      	uxth	r3, r3
 8002582:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3328      	adds	r3, #40	; 0x28
 8002588:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	3302      	adds	r3, #2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	441a      	add	r2, r3
 80025c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025c4:	2100      	movs	r1, #0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f005 ff1d 	bl	8008406 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 836b 	beq.w	8002cb0 <PCD_EP_ISR_Handler+0x78a>
 80025da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 8366 	bne.w	8002cb0 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b292      	uxth	r2, r2
 80025f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002604:	e354      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800260c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002618:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800261c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002620:	2b00      	cmp	r3, #0
 8002622:	d034      	beq.n	800268e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	3306      	adds	r3, #6
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800264c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800265e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002660:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002662:	b29b      	uxth	r3, r3
 8002664:	f004 f977 	bl	8006956 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29a      	uxth	r2, r3
 8002670:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002674:	4013      	ands	r3, r2
 8002676:	823b      	strh	r3, [r7, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	8a3a      	ldrh	r2, [r7, #16]
 800267e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002682:	b292      	uxth	r2, r2
 8002684:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f005 fe90 	bl	80083ac <HAL_PCD_SetupStageCallback>
 800268c:	e310      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800268e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002692:	2b00      	cmp	r3, #0
 8002694:	f280 830c 	bge.w	8002cb0 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026a4:	4013      	ands	r3, r2
 80026a6:	83fb      	strh	r3, [r7, #30]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	8bfa      	ldrh	r2, [r7, #30]
 80026ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b2:	b292      	uxth	r2, r2
 80026b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	3306      	adds	r3, #6
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d019      	beq.n	800271e <PCD_EP_ISR_Handler+0x1f8>
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d015      	beq.n	800271e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f8:	6959      	ldr	r1, [r3, #20]
 80026fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002702:	b29b      	uxth	r3, r3
 8002704:	f004 f927 	bl	8006956 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	441a      	add	r2, r3
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002716:	2100      	movs	r1, #0
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f005 fe59 	bl	80083d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002728:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800272c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 82bd 	bne.w	8002cb0 <PCD_EP_ISR_Handler+0x78a>
 8002736:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800273a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800273e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002742:	f000 82b5 	beq.w	8002cb0 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002770:	b29a      	uxth	r2, r3
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	801a      	strh	r2, [r3, #0]
 8002776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b3e      	cmp	r3, #62	; 0x3e
 800277c:	d91d      	bls.n	80027ba <PCD_EP_ISR_Handler+0x294>
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	647b      	str	r3, [r7, #68]	; 0x44
 8002786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <PCD_EP_ISR_Handler+0x272>
 8002792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002794:	3b01      	subs	r3, #1
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29a      	uxth	r2, r3
 800279e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	801a      	strh	r2, [r3, #0]
 80027b8:	e026      	b.n	8002808 <PCD_EP_ISR_Handler+0x2e2>
 80027ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <PCD_EP_ISR_Handler+0x2b2>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	e017      	b.n	8002808 <PCD_EP_ISR_Handler+0x2e2>
 80027d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	647b      	str	r3, [r7, #68]	; 0x44
 80027e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <PCD_EP_ISR_Handler+0x2cc>
 80027ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ee:	3301      	adds	r3, #1
 80027f0:	647b      	str	r3, [r7, #68]	; 0x44
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	029b      	lsls	r3, r3, #10
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b29a      	uxth	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002818:	827b      	strh	r3, [r7, #18]
 800281a:	8a7b      	ldrh	r3, [r7, #18]
 800281c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002820:	827b      	strh	r3, [r7, #18]
 8002822:	8a7b      	ldrh	r3, [r7, #18]
 8002824:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002828:	827b      	strh	r3, [r7, #18]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	8a7b      	ldrh	r3, [r7, #18]
 8002830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002840:	b29b      	uxth	r3, r3
 8002842:	8013      	strh	r3, [r2, #0]
 8002844:	e234      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800285a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800285e:	2b00      	cmp	r3, #0
 8002860:	f280 80fc 	bge.w	8002a5c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29a      	uxth	r2, r3
 8002876:	f640 738f 	movw	r3, #3983	; 0xf8f
 800287a:	4013      	ands	r3, r2
 800287c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002896:	b292      	uxth	r2, r2
 8002898:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800289a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b2:	7b1b      	ldrb	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d125      	bne.n	8002904 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	3306      	adds	r3, #6
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80028e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8092 	beq.w	8002a12 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	6959      	ldr	r1, [r3, #20]
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	88da      	ldrh	r2, [r3, #6]
 80028fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028fe:	f004 f82a 	bl	8006956 <USB_ReadPMA>
 8002902:	e086      	b.n	8002a12 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002906:	78db      	ldrb	r3, [r3, #3]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d10a      	bne.n	8002922 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800290c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002910:	461a      	mov	r2, r3
 8002912:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f9d9 	bl	8002ccc <HAL_PCD_EP_DB_Receive>
 800291a:	4603      	mov	r3, r0
 800291c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002920:	e077      	b.n	8002a12 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	441a      	add	r2, r3
 800294e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800295a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002962:	b29b      	uxth	r3, r3
 8002964:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d024      	beq.n	80029ca <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	3302      	adds	r3, #2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d02e      	beq.n	8002a12 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	6959      	ldr	r1, [r3, #20]
 80029bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029be:	891a      	ldrh	r2, [r3, #8]
 80029c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029c4:	f003 ffc7 	bl	8006956 <USB_ReadPMA>
 80029c8:	e023      	b.n	8002a12 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	3306      	adds	r3, #6
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a04:	6959      	ldr	r1, [r3, #20]
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	895a      	ldrh	r2, [r3, #10]
 8002a0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a0e:	f003 ffa2 	bl	8006956 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a1a:	441a      	add	r2, r3
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a28:	441a      	add	r2, r3
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <PCD_EP_ISR_Handler+0x51c>
 8002a36:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d206      	bcs.n	8002a50 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f005 fcc1 	bl	80083d0 <HAL_PCD_DataOutStageCallback>
 8002a4e:	e005      	b.n	8002a5c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 fa5e 	bl	8004f18 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8123 	beq.w	8002cb0 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a6a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abc:	78db      	ldrb	r3, [r3, #3]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	f040 80a2 	bne.w	8002c08 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	7b1b      	ldrb	r3, [r3, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8093 	beq.w	8002bfa <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ad4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d046      	beq.n	8002b6e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d126      	bne.n	8002b36 <PCD_EP_ISR_Handler+0x610>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	4413      	add	r3, r2
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	011a      	lsls	r2, r3, #4
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	4413      	add	r3, r2
 8002b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	e061      	b.n	8002bfa <PCD_EP_ISR_Handler+0x6d4>
 8002b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b38:	785b      	ldrb	r3, [r3, #1]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d15d      	bne.n	8002bfa <PCD_EP_ISR_Handler+0x6d4>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	4413      	add	r3, r2
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	011a      	lsls	r2, r3, #4
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	4413      	add	r3, r2
 8002b60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	2200      	movs	r2, #0
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	e045      	b.n	8002bfa <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d126      	bne.n	8002bca <PCD_EP_ISR_Handler+0x6a4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	4413      	add	r3, r2
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
 8002b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	011a      	lsls	r2, r3, #4
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	e017      	b.n	8002bfa <PCD_EP_ISR_Handler+0x6d4>
 8002bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d113      	bne.n	8002bfa <PCD_EP_ISR_Handler+0x6d4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	4413      	add	r3, r2
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	011a      	lsls	r2, r3, #4
 8002bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bec:	4413      	add	r3, r2
 8002bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f005 fc00 	bl	8008406 <HAL_PCD_DataInStageCallback>
 8002c06:	e053      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d146      	bne.n	8002ca2 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d907      	bls.n	8002c5c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c54:	1ad2      	subs	r2, r2, r3
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	619a      	str	r2, [r3, #24]
 8002c5a:	e002      	b.n	8002c62 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f005 fbc8 	bl	8008406 <HAL_PCD_DataInStageCallback>
 8002c76:	e01b      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c80:	441a      	add	r2, r3
 8002c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c84:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c8e:	441a      	add	r2, r3
 8002c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c92:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 f93c 	bl	8004f18 <USB_EPStartXfer>
 8002ca0:	e006      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ca2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f91b 	bl	8002ee6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f6ff ac37 	blt.w	8002530 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3758      	adds	r7, #88	; 0x58
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d07e      	beq.n	8002de2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	8b7b      	ldrh	r3, [r7, #26]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d306      	bcc.n	8002d26 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	8b7b      	ldrh	r3, [r7, #26]
 8002d1e:	1ad2      	subs	r2, r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	619a      	str	r2, [r3, #24]
 8002d24:	e002      	b.n	8002d2c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d123      	bne.n	8002d7c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	833b      	strh	r3, [r7, #24]
 8002d50:	8b3b      	ldrh	r3, [r7, #24]
 8002d52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d56:	833b      	strh	r3, [r7, #24]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	8b3b      	ldrh	r3, [r7, #24]
 8002d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01f      	beq.n	8002dc6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da0:	82fb      	strh	r3, [r7, #22]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	441a      	add	r2, r3
 8002db0:	8afb      	ldrh	r3, [r7, #22]
 8002db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dc6:	8b7b      	ldrh	r3, [r7, #26]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8087 	beq.w	8002edc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6959      	ldr	r1, [r3, #20]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	891a      	ldrh	r2, [r3, #8]
 8002dda:	8b7b      	ldrh	r3, [r7, #26]
 8002ddc:	f003 fdbb 	bl	8006956 <USB_ReadPMA>
 8002de0:	e07c      	b.n	8002edc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	3306      	adds	r3, #6
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	8b7b      	ldrh	r3, [r7, #26]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d306      	bcc.n	8002e24 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	8b7b      	ldrh	r3, [r7, #26]
 8002e1c:	1ad2      	subs	r2, r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	619a      	str	r2, [r3, #24]
 8002e22:	e002      	b.n	8002e2a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d123      	bne.n	8002e7a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4c:	83fb      	strh	r3, [r7, #30]
 8002e4e:	8bfb      	ldrh	r3, [r7, #30]
 8002e50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e54:	83fb      	strh	r3, [r7, #30]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	8bfb      	ldrh	r3, [r7, #30]
 8002e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11f      	bne.n	8002ec4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	83bb      	strh	r3, [r7, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	8bbb      	ldrh	r3, [r7, #28]
 8002eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ec4:	8b7b      	ldrh	r3, [r7, #26]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	6959      	ldr	r1, [r3, #20]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	895a      	ldrh	r2, [r3, #10]
 8002ed6:	8b7b      	ldrh	r3, [r7, #26]
 8002ed8:	f003 fd3d 	bl	8006956 <USB_ReadPMA>
    }
  }

  return count;
 8002edc:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b0a4      	sub	sp, #144	; 0x90
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 81dd 	beq.w	80032ba <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	3302      	adds	r3, #2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f28:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d907      	bls.n	8002f48 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f40:	1ad2      	subs	r2, r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	619a      	str	r2, [r3, #24]
 8002f46:	e002      	b.n	8002f4e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 80b9 	bne.w	80030ca <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	785b      	ldrb	r3, [r3, #1]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d126      	bne.n	8002fae <HAL_PCD_EP_DB_Transmit+0xc8>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f74:	4413      	add	r3, r2
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	011a      	lsls	r2, r3, #4
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	4413      	add	r3, r2
 8002f82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	801a      	strh	r2, [r3, #0]
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	801a      	strh	r2, [r3, #0]
 8002fac:	e01a      	b.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d116      	bne.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	4413      	add	r3, r2
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	011a      	lsls	r2, r3, #4
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d126      	bne.n	8003040 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	011a      	lsls	r2, r3, #4
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4413      	add	r3, r2
 8003014:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003024:	b29a      	uxth	r2, r3
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003038:	b29a      	uxth	r2, r3
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	e017      	b.n	8003070 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d113      	bne.n	8003070 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	4413      	add	r3, r2
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	011a      	lsls	r2, r3, #4
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	4413      	add	r3, r2
 8003064:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	2200      	movs	r2, #0
 800306e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4619      	mov	r1, r3
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f005 f9c5 	bl	8008406 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 82fc 	beq.w	8003680 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a2:	82fb      	strh	r3, [r7, #22]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	441a      	add	r2, r3
 80030b2:	8afb      	ldrh	r3, [r7, #22]
 80030b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	8013      	strh	r3, [r2, #0]
 80030c8:	e2da      	b.n	8003680 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d021      	beq.n	8003118 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	441a      	add	r2, r3
 8003100:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800310c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	b29b      	uxth	r3, r3
 8003116:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800311e:	2b01      	cmp	r3, #1
 8003120:	f040 82ae 	bne.w	8003680 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800312c:	441a      	add	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800313a:	441a      	add	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d30b      	bcc.n	8003164 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800315c:	1ad2      	subs	r2, r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	621a      	str	r2, [r3, #32]
 8003162:	e017      	b.n	8003194 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d108      	bne.n	800317e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800316c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800317c:	e00a      	b.n	8003194 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d165      	bne.n	8003268 <HAL_PCD_EP_DB_Transmit+0x382>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b0:	4413      	add	r3, r2
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	011a      	lsls	r2, r3, #4
 80031ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031bc:	4413      	add	r3, r2
 80031be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d2:	801a      	strh	r2, [r3, #0]
 80031d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d8:	2b3e      	cmp	r3, #62	; 0x3e
 80031da:	d91d      	bls.n	8003218 <HAL_PCD_EP_DB_Transmit+0x332>
 80031dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x310>
 80031f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f2:	3b01      	subs	r3, #1
 80031f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fe:	b29b      	uxth	r3, r3
 8003200:	029b      	lsls	r3, r3, #10
 8003202:	b29b      	uxth	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003210:	b29a      	uxth	r2, r3
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	801a      	strh	r2, [r3, #0]
 8003216:	e044      	b.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <HAL_PCD_EP_DB_Transmit+0x350>
 8003220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800322a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322e:	b29a      	uxth	r2, r3
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	801a      	strh	r2, [r3, #0]
 8003234:	e035      	b.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	64bb      	str	r3, [r7, #72]	; 0x48
 800323e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_PCD_EP_DB_Transmit+0x36a>
 800324a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800324c:	3301      	adds	r3, #1
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29a      	uxth	r2, r3
 8003256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003258:	b29b      	uxth	r3, r3
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	b29b      	uxth	r3, r3
 800325e:	4313      	orrs	r3, r2
 8003260:	b29a      	uxth	r2, r3
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	e01c      	b.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	785b      	ldrb	r3, [r3, #1]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d118      	bne.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003284:	4413      	add	r3, r2
 8003286:	647b      	str	r3, [r7, #68]	; 0x44
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	011a      	lsls	r2, r3, #4
 800328e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003290:	4413      	add	r3, r2
 8003292:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003296:	643b      	str	r3, [r7, #64]	; 0x40
 8003298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329c:	b29a      	uxth	r2, r3
 800329e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	6959      	ldr	r1, [r3, #20]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	891a      	ldrh	r2, [r3, #8]
 80032ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f003 fb0a 	bl	80068cc <USB_WritePMA>
 80032b8:	e1e2      	b.n	8003680 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	3306      	adds	r3, #6
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d307      	bcc.n	8003302 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032fa:	1ad2      	subs	r2, r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	619a      	str	r2, [r3, #24]
 8003300:	e002      	b.n	8003308 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 80c0 	bne.w	8003492 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	785b      	ldrb	r3, [r3, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d126      	bne.n	8003368 <HAL_PCD_EP_DB_Transmit+0x482>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003328:	b29b      	uxth	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800332e:	4413      	add	r3, r2
 8003330:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	011a      	lsls	r2, r3, #4
 8003338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800333a:	4413      	add	r3, r2
 800333c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003340:	67bb      	str	r3, [r7, #120]	; 0x78
 8003342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800334c:	b29a      	uxth	r2, r3
 800334e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003360:	b29a      	uxth	r2, r3
 8003362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	e01a      	b.n	800339e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d116      	bne.n	800339e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	667b      	str	r3, [r7, #100]	; 0x64
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003384:	4413      	add	r3, r2
 8003386:	667b      	str	r3, [r7, #100]	; 0x64
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	011a      	lsls	r2, r3, #4
 800338e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003390:	4413      	add	r3, r2
 8003392:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003396:	663b      	str	r3, [r7, #96]	; 0x60
 8003398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800339a:	2200      	movs	r2, #0
 800339c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	677b      	str	r3, [r7, #116]	; 0x74
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d12b      	bne.n	8003404 <HAL_PCD_EP_DB_Transmit+0x51e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	4413      	add	r3, r2
 80033c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	011a      	lsls	r2, r3, #4
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	4413      	add	r3, r2
 80033ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033e8:	801a      	strh	r2, [r3, #0]
 80033ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e017      	b.n	8003434 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d113      	bne.n	8003434 <HAL_PCD_EP_DB_Transmit+0x54e>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003414:	b29b      	uxth	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341a:	4413      	add	r3, r2
 800341c:	677b      	str	r3, [r7, #116]	; 0x74
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	011a      	lsls	r2, r3, #4
 8003424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003426:	4413      	add	r3, r2
 8003428:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800342c:	673b      	str	r3, [r7, #112]	; 0x70
 800342e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003430:	2200      	movs	r2, #0
 8003432:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	4619      	mov	r1, r3
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f004 ffe3 	bl	8008406 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 811a 	bne.w	8003680 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	441a      	add	r2, r3
 8003478:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800347c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	b29b      	uxth	r3, r3
 800348e:	8013      	strh	r3, [r2, #0]
 8003490:	e0f6      	b.n	8003680 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d121      	bne.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 80ca 	bne.w	8003680 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034f4:	441a      	add	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003502:	441a      	add	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d30b      	bcc.n	800352c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003524:	1ad2      	subs	r2, r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	621a      	str	r2, [r3, #32]
 800352a:	e017      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003534:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003544:	e00a      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	657b      	str	r3, [r7, #84]	; 0x54
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	785b      	ldrb	r3, [r3, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d165      	bne.n	8003636 <HAL_PCD_EP_DB_Transmit+0x750>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003578:	b29b      	uxth	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357e:	4413      	add	r3, r2
 8003580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	011a      	lsls	r2, r3, #4
 8003588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358a:	4413      	add	r3, r2
 800358c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003590:	65bb      	str	r3, [r7, #88]	; 0x58
 8003592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359c:	b29a      	uxth	r2, r3
 800359e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a6:	2b3e      	cmp	r3, #62	; 0x3e
 80035a8:	d91d      	bls.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x700>
 80035aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80035be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035c0:	3b01      	subs	r3, #1
 80035c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	029b      	lsls	r3, r3, #10
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4313      	orrs	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035de:	b29a      	uxth	r2, r3
 80035e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	e041      	b.n	800366a <HAL_PCD_EP_DB_Transmit+0x784>
 80035e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <HAL_PCD_EP_DB_Transmit+0x71e>
 80035ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	e032      	b.n	800366a <HAL_PCD_EP_DB_Transmit+0x784>
 8003604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	66bb      	str	r3, [r7, #104]	; 0x68
 800360c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_PCD_EP_DB_Transmit+0x738>
 8003618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361a:	3301      	adds	r3, #1
 800361c:	66bb      	str	r3, [r7, #104]	; 0x68
 800361e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	b29a      	uxth	r2, r3
 8003624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003626:	b29b      	uxth	r3, r3
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	b29b      	uxth	r3, r3
 800362c:	4313      	orrs	r3, r2
 800362e:	b29a      	uxth	r2, r3
 8003630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003632:	801a      	strh	r2, [r3, #0]
 8003634:	e019      	b.n	800366a <HAL_PCD_EP_DB_Transmit+0x784>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d115      	bne.n	800366a <HAL_PCD_EP_DB_Transmit+0x784>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003646:	b29b      	uxth	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	4413      	add	r3, r2
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	011a      	lsls	r2, r3, #4
 8003656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003658:	4413      	add	r3, r2
 800365a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800365e:	653b      	str	r3, [r7, #80]	; 0x50
 8003660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003664:	b29a      	uxth	r2, r3
 8003666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003668:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6959      	ldr	r1, [r3, #20]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	895a      	ldrh	r2, [r3, #10]
 8003676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800367a:	b29b      	uxth	r3, r3
 800367c:	f003 f926 	bl	80068cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369a:	82bb      	strh	r3, [r7, #20]
 800369c:	8abb      	ldrh	r3, [r7, #20]
 800369e:	f083 0310 	eor.w	r3, r3, #16
 80036a2:	82bb      	strh	r3, [r7, #20]
 80036a4:	8abb      	ldrh	r3, [r7, #20]
 80036a6:	f083 0320 	eor.w	r3, r3, #32
 80036aa:	82bb      	strh	r3, [r7, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	8abb      	ldrh	r3, [r7, #20]
 80036bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3790      	adds	r7, #144	; 0x90
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036da:	b480      	push	{r7}
 80036dc:	b087      	sub	sp, #28
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	817b      	strh	r3, [r7, #10]
 80036e8:	4613      	mov	r3, r2
 80036ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036ec:	897b      	ldrh	r3, [r7, #10]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00b      	beq.n	8003710 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f8:	897b      	ldrh	r3, [r7, #10]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e009      	b.n	8003724 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003710:	897a      	ldrh	r2, [r7, #10]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d107      	bne.n	800373a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2200      	movs	r2, #0
 800372e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	b29a      	uxth	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	80da      	strh	r2, [r3, #6]
 8003738:	e00b      	b.n	8003752 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2201      	movs	r2, #1
 800373e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	b29a      	uxth	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	b29a      	uxth	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
	...

08003760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e31d      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003772:	4b94      	ldr	r3, [pc, #592]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800377c:	4b91      	ldr	r3, [pc, #580]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003784:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d07b      	beq.n	800388a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d006      	beq.n	80037a6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d10f      	bne.n	80037be <HAL_RCC_OscConfig+0x5e>
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d10b      	bne.n	80037be <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a6:	4b87      	ldr	r3, [pc, #540]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d06a      	beq.n	8003888 <HAL_RCC_OscConfig+0x128>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d166      	bne.n	8003888 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e2f7      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x74>
 80037c6:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7e      	ldr	r2, [pc, #504]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e02d      	b.n	8003830 <HAL_RCC_OscConfig+0xd0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x96>
 80037dc:	4b79      	ldr	r3, [pc, #484]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a78      	ldr	r2, [pc, #480]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b76      	ldr	r3, [pc, #472]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a75      	ldr	r2, [pc, #468]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e01c      	b.n	8003830 <HAL_RCC_OscConfig+0xd0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0xb8>
 80037fe:	4b71      	ldr	r3, [pc, #452]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a70      	ldr	r2, [pc, #448]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b6e      	ldr	r3, [pc, #440]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6d      	ldr	r2, [pc, #436]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xd0>
 8003818:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a69      	ldr	r2, [pc, #420]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b67      	ldr	r3, [pc, #412]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a66      	ldr	r2, [pc, #408]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fd fb3c 	bl	8000eb4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003840:	f7fd fb38 	bl	8000eb4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e2ad      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003852:	4b5c      	ldr	r3, [pc, #368]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xe0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fd fb28 	bl	8000eb4 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd fb24 	bl	8000eb4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e299      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800387a:	4b52      	ldr	r3, [pc, #328]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x108>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d05a      	beq.n	800394c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_OscConfig+0x176>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a8:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_OscConfig+0x160>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e276      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c0:	4b40      	ldr	r3, [pc, #256]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	493d      	ldr	r1, [pc, #244]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d4:	e03a      	b.n	800394c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d020      	beq.n	8003920 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038de:	4b3a      	ldr	r3, [pc, #232]	; (80039c8 <HAL_RCC_OscConfig+0x268>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fd fae6 	bl	8000eb4 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd fae2 	bl	8000eb4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e257      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038fe:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b2e      	ldr	r3, [pc, #184]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	492a      	ldr	r1, [pc, #168]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e015      	b.n	800394c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <HAL_RCC_OscConfig+0x268>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd fac5 	bl	8000eb4 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392e:	f7fd fac1 	bl	8000eb4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e236      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003940:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80b8 	beq.w	8003aca <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d170      	bne.n	8003a42 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003960:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_OscConfig+0x218>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e21a      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1a      	ldr	r2, [r3, #32]
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003984:	429a      	cmp	r2, r3
 8003986:	d921      	bls.n	80039cc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fc67 	bl	8004260 <RCC_SetFlashLatencyFromMSIRange>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e208      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4906      	ldr	r1, [pc, #24]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	061b      	lsls	r3, r3, #24
 80039bc:	4901      	ldr	r1, [pc, #4]	; (80039c4 <HAL_RCC_OscConfig+0x264>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
 80039c2:	e020      	b.n	8003a06 <HAL_RCC_OscConfig+0x2a6>
 80039c4:	40023800 	.word	0x40023800
 80039c8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039cc:	4b99      	ldr	r3, [pc, #612]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4996      	ldr	r1, [pc, #600]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039de:	4b95      	ldr	r3, [pc, #596]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	061b      	lsls	r3, r3, #24
 80039ec:	4991      	ldr	r1, [pc, #580]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fc32 	bl	8004260 <RCC_SetFlashLatencyFromMSIRange>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1d3      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	0b5b      	lsrs	r3, r3, #13
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003a16:	4a87      	ldr	r2, [pc, #540]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	0912      	lsrs	r2, r2, #4
 8003a1c:	f002 020f 	and.w	r2, r2, #15
 8003a20:	4985      	ldr	r1, [pc, #532]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	5c8a      	ldrb	r2, [r1, r2]
 8003a24:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a26:	4a85      	ldr	r2, [pc, #532]	; (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a2a:	4b85      	ldr	r3, [pc, #532]	; (8003c40 <HAL_RCC_OscConfig+0x4e0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd f9f4 	bl	8000e1c <HAL_InitTick>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d045      	beq.n	8003aca <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	e1b5      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d029      	beq.n	8003a9e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a4a:	4b7e      	ldr	r3, [pc, #504]	; (8003c44 <HAL_RCC_OscConfig+0x4e4>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fd fa30 	bl	8000eb4 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a58:	f7fd fa2c 	bl	8000eb4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1a1      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a6a:	4b72      	ldr	r3, [pc, #456]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a76:	4b6f      	ldr	r3, [pc, #444]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	496c      	ldr	r1, [pc, #432]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a88:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	4967      	ldr	r1, [pc, #412]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a9e:	4b69      	ldr	r3, [pc, #420]	; (8003c44 <HAL_RCC_OscConfig+0x4e4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fa06 	bl	8000eb4 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aac:	f7fd fa02 	bl	8000eb4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e177      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003abe:	4b5d      	ldr	r3, [pc, #372]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d030      	beq.n	8003b38 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <HAL_RCC_OscConfig+0x4e8>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fd f9e6 	bl	8000eb4 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fd f9e2 	bl	8000eb4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e157      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003afe:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x38c>
 8003b0a:	e015      	b.n	8003b38 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0c:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <HAL_RCC_OscConfig+0x4e8>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fd f9cf 	bl	8000eb4 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fd f9cb 	bl	8000eb4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e140      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b2c:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80b5 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b46:	2300      	movs	r3, #0
 8003b48:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4a:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10d      	bne.n	8003b72 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	4a36      	ldr	r2, [pc, #216]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6253      	str	r3, [r2, #36]	; 0x24
 8003b62:	4b34      	ldr	r3, [pc, #208]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <HAL_RCC_OscConfig+0x4ec>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d118      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <HAL_RCC_OscConfig+0x4ec>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a32      	ldr	r2, [pc, #200]	; (8003c4c <HAL_RCC_OscConfig+0x4ec>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8a:	f7fd f993 	bl	8000eb4 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fd f98f 	bl	8000eb4 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e104      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <HAL_RCC_OscConfig+0x4ec>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x466>
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc2:	6353      	str	r3, [r2, #52]	; 0x34
 8003bc4:	e02d      	b.n	8003c22 <HAL_RCC_OscConfig+0x4c2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x488>
 8003bce:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd8:	6353      	str	r3, [r2, #52]	; 0x34
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003be4:	6353      	str	r3, [r2, #52]	; 0x34
 8003be6:	e01c      	b.n	8003c22 <HAL_RCC_OscConfig+0x4c2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4aa>
 8003bf0:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	4a0f      	ldr	r2, [pc, #60]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bfa:	6353      	str	r3, [r2, #52]	; 0x34
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6353      	str	r3, [r2, #52]	; 0x34
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x4c2>
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c14:	6353      	str	r3, [r2, #52]	; 0x34
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1a:	4a06      	ldr	r2, [pc, #24]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c20:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d024      	beq.n	8003c74 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd f943 	bl	8000eb4 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c30:	e019      	b.n	8003c66 <HAL_RCC_OscConfig+0x506>
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	08008978 	.word	0x08008978
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	2000000c 	.word	0x2000000c
 8003c44:	42470020 	.word	0x42470020
 8003c48:	42470680 	.word	0x42470680
 8003c4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd f930 	bl	8000eb4 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0a3      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ee      	beq.n	8003c50 <HAL_RCC_OscConfig+0x4f0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fd f91e 	bl	8000eb4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fd f91a 	bl	8000eb4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e08d      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c92:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ee      	bne.n	8003c7c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	4a43      	ldr	r2, [pc, #268]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d079      	beq.n	8003dac <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d056      	beq.n	8003d6c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d13b      	bne.n	8003d3e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b3d      	ldr	r3, [pc, #244]	; (8003dbc <HAL_RCC_OscConfig+0x65c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd f8f2 	bl	8000eb4 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fd f8ee 	bl	8000eb4 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e063      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ce6:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf2:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	4319      	orrs	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	492b      	ldr	r1, [pc, #172]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d10:	4b2a      	ldr	r3, [pc, #168]	; (8003dbc <HAL_RCC_OscConfig+0x65c>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fd f8cd 	bl	8000eb4 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd f8c9 	bl	8000eb4 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e03e      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x5be>
 8003d3c:	e036      	b.n	8003dac <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <HAL_RCC_OscConfig+0x65c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd f8b6 	bl	8000eb4 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fd f8b2 	bl	8000eb4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e027      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5ec>
 8003d6a:	e01f      	b.n	8003dac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e01a      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RCC_OscConfig+0x658>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d106      	bne.n	8003da8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	42470060 	.word	0x42470060

08003dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e11a      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b8f      	ldr	r3, [pc, #572]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d919      	bls.n	8003e16 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x34>
 8003de8:	4b8a      	ldr	r3, [pc, #552]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a89      	ldr	r2, [pc, #548]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003dee:	f043 0304 	orr.w	r3, r3, #4
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b87      	ldr	r3, [pc, #540]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 0201 	bic.w	r2, r3, #1
 8003dfc:	4985      	ldr	r1, [pc, #532]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e04:	4b83      	ldr	r3, [pc, #524]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0f9      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e22:	4b7d      	ldr	r3, [pc, #500]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	497a      	ldr	r1, [pc, #488]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 808e 	beq.w	8003f5e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e4a:	4b73      	ldr	r3, [pc, #460]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d121      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0d7      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e62:	4b6d      	ldr	r3, [pc, #436]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d115      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0cb      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e7a:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0bf      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e8a:	4b63      	ldr	r3, [pc, #396]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0b7      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b5f      	ldr	r3, [pc, #380]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	495c      	ldr	r1, [pc, #368]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eac:	f7fd f802 	bl	8000eb4 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d112      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ebc:	f7fc fffa 	bl	8000eb4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e09b      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed2:	4b51      	ldr	r3, [pc, #324]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d1ee      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xfc>
 8003ede:	e03e      	b.n	8003f5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d112      	bne.n	8003f0e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eea:	f7fc ffe3 	bl	8000eb4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e084      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f00:	4b45      	ldr	r3, [pc, #276]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b0c      	cmp	r3, #12
 8003f0a:	d1ee      	bne.n	8003eea <HAL_RCC_ClockConfig+0x12a>
 8003f0c:	e027      	b.n	8003f5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d11d      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f18:	f7fc ffcc 	bl	8000eb4 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e06d      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f2e:	4b3a      	ldr	r3, [pc, #232]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d1ee      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x158>
 8003f3a:	e010      	b.n	8003f5e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fc ffba 	bl	8000eb4 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e05b      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f52:	4b31      	ldr	r3, [pc, #196]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1ee      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d219      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x1be>
 8003f72:	4b28      	ldr	r3, [pc, #160]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a27      	ldr	r2, [pc, #156]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b25      	ldr	r3, [pc, #148]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	4923      	ldr	r1, [pc, #140]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_RCC_ClockConfig+0x254>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e034      	b.n	800400a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4917      	ldr	r1, [pc, #92]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	490f      	ldr	r1, [pc, #60]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fde:	f000 f823 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_RCC_ClockConfig+0x258>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	490b      	ldr	r1, [pc, #44]	; (800401c <HAL_RCC_ClockConfig+0x25c>)
 8003ff0:	5ccb      	ldrb	r3, [r1, r3]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc ff0c 	bl	8000e1c <HAL_InitTick>
 8004004:	4603      	mov	r3, r0
 8004006:	72fb      	strb	r3, [r7, #11]

  return status;
 8004008:	7afb      	ldrb	r3, [r7, #11]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023c00 	.word	0x40023c00
 8004018:	40023800 	.word	0x40023800
 800401c:	08008978 	.word	0x08008978
 8004020:	20000000 	.word	0x20000000
 8004024:	2000000c 	.word	0x2000000c

08004028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800402c:	b092      	sub	sp, #72	; 0x48
 800402e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004030:	4b79      	ldr	r3, [pc, #484]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d00d      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x34>
 8004040:	2b0c      	cmp	r3, #12
 8004042:	f200 80d5 	bhi.w	80041f0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004046:	2b04      	cmp	r3, #4
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x28>
 800404a:	2b08      	cmp	r3, #8
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x2e>
 800404e:	e0cf      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b72      	ldr	r3, [pc, #456]	; (800421c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004052:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004054:	e0da      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004056:	4b71      	ldr	r3, [pc, #452]	; (800421c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004058:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800405a:	e0d7      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	0c9b      	lsrs	r3, r3, #18
 8004060:	f003 020f 	and.w	r2, r3, #15
 8004064:	4b6e      	ldr	r3, [pc, #440]	; (8004220 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004066:	5c9b      	ldrb	r3, [r3, r2]
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406c:	0d9b      	lsrs	r3, r3, #22
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	3301      	adds	r3, #1
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004076:	4b68      	ldr	r3, [pc, #416]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d05d      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	2200      	movs	r2, #0
 8004086:	4618      	mov	r0, r3
 8004088:	4611      	mov	r1, r2
 800408a:	4604      	mov	r4, r0
 800408c:	460d      	mov	r5, r1
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	0159      	lsls	r1, r3, #5
 800409c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a0:	0150      	lsls	r0, r2, #5
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4621      	mov	r1, r4
 80040a8:	1a51      	subs	r1, r2, r1
 80040aa:	6139      	str	r1, [r7, #16]
 80040ac:	4629      	mov	r1, r5
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c0:	4659      	mov	r1, fp
 80040c2:	018b      	lsls	r3, r1, #6
 80040c4:	4651      	mov	r1, sl
 80040c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ca:	4651      	mov	r1, sl
 80040cc:	018a      	lsls	r2, r1, #6
 80040ce:	46d4      	mov	ip, sl
 80040d0:	ebb2 080c 	subs.w	r8, r2, ip
 80040d4:	4659      	mov	r1, fp
 80040d6:	eb63 0901 	sbc.w	r9, r3, r1
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ee:	4690      	mov	r8, r2
 80040f0:	4699      	mov	r9, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	eb18 0303 	adds.w	r3, r8, r3
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	462b      	mov	r3, r5
 80040fc:	eb49 0303 	adc.w	r3, r9, r3
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800410e:	4629      	mov	r1, r5
 8004110:	028b      	lsls	r3, r1, #10
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	4604      	mov	r4, r0
 8004118:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800411c:	4601      	mov	r1, r0
 800411e:	028a      	lsls	r2, r1, #10
 8004120:	4610      	mov	r0, r2
 8004122:	4619      	mov	r1, r3
 8004124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004126:	2200      	movs	r2, #0
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
 800412a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800412c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004130:	f7fc f824 	bl	800017c <__aeabi_uldivmod>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4613      	mov	r3, r2
 800413a:	647b      	str	r3, [r7, #68]	; 0x44
 800413c:	e055      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	2200      	movs	r2, #0
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	627a      	str	r2, [r7, #36]	; 0x24
 8004146:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800414a:	4642      	mov	r2, r8
 800414c:	464b      	mov	r3, r9
 800414e:	f04f 0000 	mov.w	r0, #0
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	0159      	lsls	r1, r3, #5
 8004158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415c:	0150      	lsls	r0, r2, #5
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	46c4      	mov	ip, r8
 8004164:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004168:	4640      	mov	r0, r8
 800416a:	4649      	mov	r1, r9
 800416c:	468c      	mov	ip, r1
 800416e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800417e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004182:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004186:	ebb2 040a 	subs.w	r4, r2, sl
 800418a:	eb63 050b 	sbc.w	r5, r3, fp
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	00eb      	lsls	r3, r5, #3
 8004198:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419c:	00e2      	lsls	r2, r4, #3
 800419e:	4614      	mov	r4, r2
 80041a0:	461d      	mov	r5, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	18e3      	adds	r3, r4, r3
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	460b      	mov	r3, r1
 80041aa:	eb45 0303 	adc.w	r3, r5, r3
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041bc:	4629      	mov	r1, r5
 80041be:	028b      	lsls	r3, r1, #10
 80041c0:	4620      	mov	r0, r4
 80041c2:	4629      	mov	r1, r5
 80041c4:	4604      	mov	r4, r0
 80041c6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80041ca:	4601      	mov	r1, r0
 80041cc:	028a      	lsls	r2, r1, #10
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	2200      	movs	r2, #0
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	61fa      	str	r2, [r7, #28]
 80041da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041de:	f7fb ffcd 	bl	800017c <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4613      	mov	r3, r2
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80041ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80041ee:	e00d      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80041f0:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	0b5b      	lsrs	r3, r3, #13
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	3301      	adds	r3, #1
 8004200:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800420a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800420e:	4618      	mov	r0, r3
 8004210:	3748      	adds	r7, #72	; 0x48
 8004212:	46bd      	mov	sp, r7
 8004214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004218:	40023800 	.word	0x40023800
 800421c:	00f42400 	.word	0x00f42400
 8004220:	0800896c 	.word	0x0800896c

08004224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004228:	4b02      	ldr	r3, [pc, #8]	; (8004234 <HAL_RCC_GetHCLKFreq+0x10>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	20000000 	.word	0x20000000

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800423c:	f7ff fff2 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	; (800425c <HAL_RCC_GetPCLK1Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	08008988 	.word	0x08008988

08004260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800426c:	4b29      	ldr	r3, [pc, #164]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d12c      	bne.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004278:	4b26      	ldr	r3, [pc, #152]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e016      	b.n	80042be <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004290:	4b20      	ldr	r3, [pc, #128]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429a:	6253      	str	r3, [r2, #36]	; 0x24
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80042b0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	4a17      	ldr	r2, [pc, #92]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80042c4:	d105      	bne.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042cc:	d101      	bne.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80042ce:	2301      	movs	r3, #1
 80042d0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80042d8:	4b10      	ldr	r3, [pc, #64]	; (800431c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0f      	ldr	r2, [pc, #60]	; (800431c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 0201 	bic.w	r2, r3, #1
 80042ec:	490b      	ldr	r1, [pc, #44]	; (800431c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d001      	beq.n	8004306 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
 8004318:	40007000 	.word	0x40007000
 800431c:	40023c00 	.word	0x40023c00

08004320 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004330:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004334:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004354:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004358:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	b29b      	uxth	r3, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	4013      	ands	r3, r2
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004380:	b084      	sub	sp, #16
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	f107 0014 	add.w	r0, r7, #20
 800438e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	b004      	add	sp, #16
 80043be:	4770      	bx	lr

080043c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b09d      	sub	sp, #116	; 0x74
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	78db      	ldrb	r3, [r3, #3]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d81f      	bhi.n	8004432 <USB_ActivateEndpoint+0x72>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <USB_ActivateEndpoint+0x38>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004409 	.word	0x08004409
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800443b 	.word	0x0800443b
 8004404:	08004417 	.word	0x08004417
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004408:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800440c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004410:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004414:	e012      	b.n	800443c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004416:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800441a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800441e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004422:	e00b      	b.n	800443c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004424:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800442c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004430:	e004      	b.n	800443c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004438:	e000      	b.n	800443c <USB_ActivateEndpoint+0x7c>
      break;
 800443a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	441a      	add	r2, r3
 8004446:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800444a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445a:	b29b      	uxth	r3, r3
 800445c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004474:	b29a      	uxth	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	4313      	orrs	r3, r2
 800447e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	7b1b      	ldrb	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f040 8178 	bne.w	800479e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8084 	beq.w	80045c0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4413      	add	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	011a      	lsls	r2, r3, #4
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	88db      	ldrh	r3, [r3, #6]
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	827b      	strh	r3, [r7, #18]
 80044fa:	8a7b      	ldrh	r3, [r7, #18]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <USB_ActivateEndpoint+0x17c>
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	823b      	strh	r3, [r7, #16]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	8a3b      	ldrh	r3, [r7, #16]
 8004528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004538:	b29b      	uxth	r3, r3
 800453a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	78db      	ldrb	r3, [r3, #3]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d020      	beq.n	8004586 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455a:	81bb      	strh	r3, [r7, #12]
 800455c:	89bb      	ldrh	r3, [r7, #12]
 800455e:	f083 0320 	eor.w	r3, r3, #32
 8004562:	81bb      	strh	r3, [r7, #12]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	89bb      	ldrh	r3, [r7, #12]
 8004570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004580:	b29b      	uxth	r3, r3
 8004582:	8013      	strh	r3, [r2, #0]
 8004584:	e2d5      	b.n	8004b32 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459c:	81fb      	strh	r3, [r7, #14]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	89fb      	ldrh	r3, [r7, #14]
 80045aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	8013      	strh	r3, [r2, #0]
 80045be:	e2b8      	b.n	8004b32 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	4413      	add	r3, r2
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	011a      	lsls	r2, r3, #4
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	88db      	ldrh	r3, [r3, #6]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fe:	b29b      	uxth	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	4413      	add	r3, r2
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	011a      	lsls	r2, r3, #4
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	4413      	add	r3, r2
 8004612:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004622:	b29a      	uxth	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b3e      	cmp	r3, #62	; 0x3e
 800462e:	d91d      	bls.n	800466c <USB_ActivateEndpoint+0x2ac>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	66bb      	str	r3, [r7, #104]	; 0x68
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <USB_ActivateEndpoint+0x28a>
 8004644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004646:	3b01      	subs	r3, #1
 8004648:	66bb      	str	r3, [r7, #104]	; 0x68
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29a      	uxth	r2, r3
 8004650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004652:	b29b      	uxth	r3, r3
 8004654:	029b      	lsls	r3, r3, #10
 8004656:	b29b      	uxth	r3, r3
 8004658:	4313      	orrs	r3, r2
 800465a:	b29b      	uxth	r3, r3
 800465c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004664:	b29a      	uxth	r2, r3
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e026      	b.n	80046ba <USB_ActivateEndpoint+0x2fa>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <USB_ActivateEndpoint+0x2ca>
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004682:	b29a      	uxth	r2, r3
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	e017      	b.n	80046ba <USB_ActivateEndpoint+0x2fa>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	66bb      	str	r3, [r7, #104]	; 0x68
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <USB_ActivateEndpoint+0x2e4>
 800469e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a0:	3301      	adds	r3, #1
 80046a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	029b      	lsls	r3, r3, #10
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	4313      	orrs	r3, r2
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80046c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01b      	beq.n	800470a <USB_ActivateEndpoint+0x34a>
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	843b      	strh	r3, [r7, #32]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	8c3b      	ldrh	r3, [r7, #32]
 80046f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d124      	bne.n	800475c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004728:	83bb      	strh	r3, [r7, #28]
 800472a:	8bbb      	ldrh	r3, [r7, #28]
 800472c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004730:	83bb      	strh	r3, [r7, #28]
 8004732:	8bbb      	ldrh	r3, [r7, #28]
 8004734:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004738:	83bb      	strh	r3, [r7, #28]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	441a      	add	r2, r3
 8004744:	8bbb      	ldrh	r3, [r7, #28]
 8004746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]
 800475a:	e1ea      	b.n	8004b32 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	83fb      	strh	r3, [r7, #30]
 8004774:	8bfb      	ldrh	r3, [r7, #30]
 8004776:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800477a:	83fb      	strh	r3, [r7, #30]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	441a      	add	r2, r3
 8004786:	8bfb      	ldrh	r3, [r7, #30]
 8004788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	b29b      	uxth	r3, r3
 800479a:	8013      	strh	r3, [r2, #0]
 800479c:	e1c9      	b.n	8004b32 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	78db      	ldrb	r3, [r3, #3]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d11e      	bne.n	80047e4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
 80047e2:	e01d      	b.n	8004820 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800480c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800482a:	b29b      	uxth	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004830:	4413      	add	r3, r2
 8004832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	011a      	lsls	r2, r3, #4
 800483a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800483c:	4413      	add	r3, r2
 800483e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004842:	65bb      	str	r3, [r7, #88]	; 0x58
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	891b      	ldrh	r3, [r3, #8]
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	b29b      	uxth	r3, r3
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	657b      	str	r3, [r7, #84]	; 0x54
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485e:	b29b      	uxth	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004864:	4413      	add	r3, r2
 8004866:	657b      	str	r3, [r7, #84]	; 0x54
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	011a      	lsls	r2, r3, #4
 800486e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004870:	4413      	add	r3, r2
 8004872:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	895b      	ldrh	r3, [r3, #10]
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	b29b      	uxth	r3, r3
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004886:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 8093 	bne.w	80049b8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01b      	beq.n	80048e6 <USB_ActivateEndpoint+0x526>
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80048f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01b      	beq.n	8004936 <USB_ActivateEndpoint+0x576>
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004914:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494c:	873b      	strh	r3, [r7, #56]	; 0x38
 800494e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004950:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004954:	873b      	strh	r3, [r7, #56]	; 0x38
 8004956:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800495c:	873b      	strh	r3, [r7, #56]	; 0x38
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800496a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004994:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	441a      	add	r2, r3
 80049a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	8013      	strh	r3, [r2, #0]
 80049b6:	e0bc      	b.n	8004b32 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01d      	beq.n	8004a10 <USB_ActivateEndpoint+0x650>
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01d      	beq.n	8004a68 <USB_ActivateEndpoint+0x6a8>
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	78db      	ldrb	r3, [r3, #3]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d024      	beq.n	8004aba <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a8e:	f083 0320 	eor.w	r3, r3, #32
 8004a92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]
 8004ab8:	e01d      	b.n	8004af6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004b32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3774      	adds	r7, #116	; 0x74
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b08d      	sub	sp, #52	; 0x34
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	7b1b      	ldrb	r3, [r3, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f040 808e 	bne.w	8004c70 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d044      	beq.n	8004be6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	81bb      	strh	r3, [r7, #12]
 8004b6a:	89bb      	ldrh	r3, [r7, #12]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01b      	beq.n	8004bac <USB_DeactivateEndpoint+0x6c>
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8a:	817b      	strh	r3, [r7, #10]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	897b      	ldrh	r3, [r7, #10]
 8004b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc2:	813b      	strh	r3, [r7, #8]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	893b      	ldrh	r3, [r7, #8]
 8004bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8013      	strh	r3, [r2, #0]
 8004be4:	e192      	b.n	8004f0c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	827b      	strh	r3, [r7, #18]
 8004bf4:	8a7b      	ldrh	r3, [r7, #18]
 8004bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01b      	beq.n	8004c36 <USB_DeactivateEndpoint+0xf6>
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c14:	823b      	strh	r3, [r7, #16]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	8a3b      	ldrh	r3, [r7, #16]
 8004c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4c:	81fb      	strh	r3, [r7, #14]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	89fb      	ldrh	r3, [r7, #14]
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]
 8004c6e:	e14d      	b.n	8004f0c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 80a5 	bne.w	8004dc4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	843b      	strh	r3, [r7, #32]
 8004c88:	8c3b      	ldrh	r3, [r7, #32]
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <USB_DeactivateEndpoint+0x18a>
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	83fb      	strh	r3, [r7, #30]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	8bfb      	ldrh	r3, [r7, #30]
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	83bb      	strh	r3, [r7, #28]
 8004cd8:	8bbb      	ldrh	r3, [r7, #28]
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01b      	beq.n	8004d1a <USB_DeactivateEndpoint+0x1da>
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf8:	837b      	strh	r3, [r7, #26]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	441a      	add	r2, r3
 8004d04:	8b7b      	ldrh	r3, [r7, #26]
 8004d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	833b      	strh	r3, [r7, #24]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	441a      	add	r2, r3
 8004d3c:	8b3b      	ldrh	r3, [r7, #24]
 8004d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	82fb      	strh	r3, [r7, #22]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	441a      	add	r2, r3
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da0:	82bb      	strh	r3, [r7, #20]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	441a      	add	r2, r3
 8004dac:	8abb      	ldrh	r3, [r7, #20]
 8004dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	8013      	strh	r3, [r2, #0]
 8004dc2:	e0a3      	b.n	8004f0c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004dd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <USB_DeactivateEndpoint+0x2d4>
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004e22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01b      	beq.n	8004e64 <USB_DeactivateEndpoint+0x324>
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	853b      	strh	r3, [r7, #40]	; 0x28
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	441a      	add	r2, r3
 8004ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	847b      	strh	r3, [r7, #34]	; 0x22
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3734      	adds	r7, #52	; 0x34
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b0c2      	sub	sp, #264	; 0x108
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f26:	6018      	str	r0, [r3, #0]
 8004f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f30:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	f040 86b7 	bne.w	8005cb2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d908      	bls.n	8004f72 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f70:	e007      	b.n	8004f82 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	7b1b      	ldrb	r3, [r3, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d13a      	bne.n	8005008 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6959      	ldr	r1, [r3, #20]
 8004f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	88da      	ldrh	r2, [r3, #6]
 8004faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004fb4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004fb8:	6800      	ldr	r0, [r0, #0]
 8004fba:	f001 fc87 	bl	80068cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	011a      	lsls	r2, r3, #4
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	f000 be1f 	b.w	8005c46 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800500c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	78db      	ldrb	r3, [r3, #3]
 8005014:	2b02      	cmp	r3, #2
 8005016:	f040 8462 	bne.w	80058de <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800501a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800501e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	429a      	cmp	r2, r3
 8005034:	f240 83df 	bls.w	80057f6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005088:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a4:	1ad2      	subs	r2, r2, r3
 80050a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 81c7 	beq.w	8005468 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d177      	bne.n	80051e6 <USB_EPStartXfer+0x2ce>
 80050f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
 8005102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	4413      	add	r3, r2
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
 800511a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	011a      	lsls	r2, r3, #4
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	4413      	add	r3, r2
 800512c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800513c:	b29a      	uxth	r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005146:	2b3e      	cmp	r3, #62	; 0x3e
 8005148:	d921      	bls.n	800518e <USB_EPStartXfer+0x276>
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <USB_EPStartXfer+0x252>
 8005160:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005164:	3b01      	subs	r3, #1
 8005166:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29a      	uxth	r2, r3
 8005170:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005174:	b29b      	uxth	r3, r3
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	b29b      	uxth	r3, r3
 800517a:	4313      	orrs	r3, r2
 800517c:	b29b      	uxth	r3, r3
 800517e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005186:	b29a      	uxth	r2, r3
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	e050      	b.n	8005230 <USB_EPStartXfer+0x318>
 800518e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <USB_EPStartXfer+0x294>
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	e041      	b.n	8005230 <USB_EPStartXfer+0x318>
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <USB_EPStartXfer+0x2b4>
 80051c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051c6:	3301      	adds	r3, #1
 80051c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	029b      	lsls	r3, r3, #10
 80051da:	b29b      	uxth	r3, r3
 80051dc:	4313      	orrs	r3, r2
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	e024      	b.n	8005230 <USB_EPStartXfer+0x318>
 80051e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d11c      	bne.n	8005230 <USB_EPStartXfer+0x318>
 80051f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	4413      	add	r3, r2
 800520c:	633b      	str	r3, [r7, #48]	; 0x30
 800520e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	011a      	lsls	r2, r3, #4
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	4413      	add	r3, r2
 8005220:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522a:	b29a      	uxth	r2, r3
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	895b      	ldrh	r3, [r3, #10]
 800523c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6959      	ldr	r1, [r3, #20]
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005250:	b29b      	uxth	r3, r3
 8005252:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005256:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800525a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800525e:	6800      	ldr	r0, [r0, #0]
 8005260:	f001 fb34 	bl	80068cc <USB_WritePMA>
            ep->xfer_buff += len;
 8005264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005274:	441a      	add	r2, r3
 8005276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	429a      	cmp	r2, r3
 800529c:	d90f      	bls.n	80052be <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800529e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a1a      	ldr	r2, [r3, #32]
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ae:	1ad2      	subs	r2, r2, r3
 80052b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	621a      	str	r2, [r3, #32]
 80052bc:	e00e      	b.n	80052dc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80052be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80052ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2200      	movs	r2, #0
 80052da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d177      	bne.n	80053dc <USB_EPStartXfer+0x4c4>
 80052ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	4413      	add	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	011a      	lsls	r2, r3, #4
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	4413      	add	r3, r2
 8005322:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005332:	b29a      	uxth	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533c:	2b3e      	cmp	r3, #62	; 0x3e
 800533e:	d921      	bls.n	8005384 <USB_EPStartXfer+0x46c>
 8005340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005344:	095b      	lsrs	r3, r3, #5
 8005346:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2b00      	cmp	r3, #0
 8005354:	d104      	bne.n	8005360 <USB_EPStartXfer+0x448>
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	3b01      	subs	r3, #1
 800535c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29a      	uxth	r2, r3
 8005366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536a:	b29b      	uxth	r3, r3
 800536c:	029b      	lsls	r3, r3, #10
 800536e:	b29b      	uxth	r3, r3
 8005370:	4313      	orrs	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537c:	b29a      	uxth	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	e056      	b.n	8005432 <USB_EPStartXfer+0x51a>
 8005384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <USB_EPStartXfer+0x48a>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539a:	b29a      	uxth	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	e047      	b.n	8005432 <USB_EPStartXfer+0x51a>
 80053a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <USB_EPStartXfer+0x4aa>
 80053b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053bc:	3301      	adds	r3, #1
 80053be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e02a      	b.n	8005432 <USB_EPStartXfer+0x51a>
 80053dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d122      	bne.n	8005432 <USB_EPStartXfer+0x51a>
 80053ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	623b      	str	r3, [r7, #32]
 80053f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005406:	b29b      	uxth	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	4413      	add	r3, r2
 800540e:	623b      	str	r3, [r7, #32]
 8005410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	011a      	lsls	r2, r3, #4
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	4413      	add	r3, r2
 8005422:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542c:	b29a      	uxth	r2, r3
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	891b      	ldrh	r3, [r3, #8]
 800543e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6959      	ldr	r1, [r3, #20]
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005452:	b29b      	uxth	r3, r3
 8005454:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005458:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800545c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005460:	6800      	ldr	r0, [r0, #0]
 8005462:	f001 fa33 	bl	80068cc <USB_WritePMA>
 8005466:	e3ee      	b.n	8005c46 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d177      	bne.n	8005568 <USB_EPStartXfer+0x650>
 8005478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
 8005484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005498:	4413      	add	r3, r2
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
 800549c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
 80054b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c8:	2b3e      	cmp	r3, #62	; 0x3e
 80054ca:	d921      	bls.n	8005510 <USB_EPStartXfer+0x5f8>
 80054cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <USB_EPStartXfer+0x5d4>
 80054e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054e6:	3b01      	subs	r3, #1
 80054e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e056      	b.n	80055be <USB_EPStartXfer+0x6a6>
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <USB_EPStartXfer+0x616>
 8005518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005526:	b29a      	uxth	r2, r3
 8005528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	e047      	b.n	80055be <USB_EPStartXfer+0x6a6>
 800552e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <USB_EPStartXfer+0x636>
 8005544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005548:	3301      	adds	r3, #1
 800554a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800554e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29a      	uxth	r2, r3
 8005554:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29b      	uxth	r3, r3
 800555e:	4313      	orrs	r3, r2
 8005560:	b29a      	uxth	r2, r3
 8005562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e02a      	b.n	80055be <USB_EPStartXfer+0x6a6>
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d122      	bne.n	80055be <USB_EPStartXfer+0x6a6>
 8005578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	653b      	str	r3, [r7, #80]	; 0x50
 8005584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005592:	b29b      	uxth	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005598:	4413      	add	r3, r2
 800559a:	653b      	str	r3, [r7, #80]	; 0x50
 800559c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	011a      	lsls	r2, r3, #4
 80055aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ac:	4413      	add	r3, r2
 80055ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	891b      	ldrh	r3, [r3, #8]
 80055ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6959      	ldr	r1, [r3, #20]
 80055da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055ec:	6800      	ldr	r0, [r0, #0]
 80055ee:	f001 f96d 	bl	80068cc <USB_WritePMA>
            ep->xfer_buff += len;
 80055f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005602:	441a      	add	r2, r3
 8005604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	429a      	cmp	r2, r3
 800562a:	d90f      	bls.n	800564c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800562c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a1a      	ldr	r2, [r3, #32]
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563c:	1ad2      	subs	r2, r2, r3
 800563e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	621a      	str	r2, [r3, #32]
 800564a:	e00e      	b.n	800566a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800564c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800565c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800566a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	643b      	str	r3, [r7, #64]	; 0x40
 8005676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d177      	bne.n	8005776 <USB_EPStartXfer+0x85e>
 8005686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	63bb      	str	r3, [r7, #56]	; 0x38
 8005692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	4413      	add	r3, r2
 80056a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	011a      	lsls	r2, r3, #4
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	4413      	add	r3, r2
 80056bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d6:	2b3e      	cmp	r3, #62	; 0x3e
 80056d8:	d921      	bls.n	800571e <USB_EPStartXfer+0x806>
 80056da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <USB_EPStartXfer+0x7e2>
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	3b01      	subs	r3, #1
 80056f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29a      	uxth	r2, r3
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	b29b      	uxth	r3, r3
 8005706:	029b      	lsls	r3, r3, #10
 8005708:	b29b      	uxth	r3, r3
 800570a:	4313      	orrs	r3, r2
 800570c:	b29b      	uxth	r3, r3
 800570e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005716:	b29a      	uxth	r2, r3
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	e050      	b.n	80057c0 <USB_EPStartXfer+0x8a8>
 800571e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <USB_EPStartXfer+0x824>
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005734:	b29a      	uxth	r2, r3
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e041      	b.n	80057c0 <USB_EPStartXfer+0x8a8>
 800573c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <USB_EPStartXfer+0x844>
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	3301      	adds	r3, #1
 8005758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29a      	uxth	r2, r3
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005766:	b29b      	uxth	r3, r3
 8005768:	029b      	lsls	r3, r3, #10
 800576a:	b29b      	uxth	r3, r3
 800576c:	4313      	orrs	r3, r2
 800576e:	b29a      	uxth	r2, r3
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e024      	b.n	80057c0 <USB_EPStartXfer+0x8a8>
 8005776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d11c      	bne.n	80057c0 <USB_EPStartXfer+0x8a8>
 8005786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579a:	4413      	add	r3, r2
 800579c:	643b      	str	r3, [r7, #64]	; 0x40
 800579e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	011a      	lsls	r2, r3, #4
 80057ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ae:	4413      	add	r3, r2
 80057b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	895b      	ldrh	r3, [r3, #10]
 80057cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6959      	ldr	r1, [r3, #20]
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057ee:	6800      	ldr	r0, [r0, #0]
 80057f0:	f001 f86c 	bl	80068cc <USB_WritePMA>
 80057f4:	e227      	b.n	8005c46 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	441a      	add	r2, r3
 800584a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800584e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585e:	b29b      	uxth	r3, r3
 8005860:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587c:	b29b      	uxth	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005882:	4413      	add	r3, r2
 8005884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	011a      	lsls	r2, r3, #4
 8005894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005896:	4413      	add	r3, r2
 8005898:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800589c:	65bb      	str	r3, [r7, #88]	; 0x58
 800589e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	891b      	ldrh	r3, [r3, #8]
 80058b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6959      	ldr	r1, [r3, #20]
 80058c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058d6:	6800      	ldr	r0, [r0, #0]
 80058d8:	f000 fff8 	bl	80068cc <USB_WritePMA>
 80058dc:	e1b3      	b.n	8005c46 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80058de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 80c6 	beq.w	8005ab0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	673b      	str	r3, [r7, #112]	; 0x70
 8005930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d177      	bne.n	8005a30 <USB_EPStartXfer+0xb18>
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	66bb      	str	r3, [r7, #104]	; 0x68
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005960:	4413      	add	r3, r2
 8005962:	66bb      	str	r3, [r7, #104]	; 0x68
 8005964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	011a      	lsls	r2, r3, #4
 8005972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005974:	4413      	add	r3, r2
 8005976:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800597a:	667b      	str	r3, [r7, #100]	; 0x64
 800597c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005986:	b29a      	uxth	r2, r3
 8005988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005990:	2b3e      	cmp	r3, #62	; 0x3e
 8005992:	d921      	bls.n	80059d8 <USB_EPStartXfer+0xac0>
 8005994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800599e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d104      	bne.n	80059b4 <USB_EPStartXfer+0xa9c>
 80059aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80059ae:	3b01      	subs	r3, #1
 80059b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80059b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80059be:	b29b      	uxth	r3, r3
 80059c0:	029b      	lsls	r3, r3, #10
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	4313      	orrs	r3, r2
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d4:	801a      	strh	r2, [r3, #0]
 80059d6:	e050      	b.n	8005a7a <USB_EPStartXfer+0xb62>
 80059d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <USB_EPStartXfer+0xade>
 80059e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	e041      	b.n	8005a7a <USB_EPStartXfer+0xb62>
 80059f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <USB_EPStartXfer+0xafe>
 8005a0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a10:	3301      	adds	r3, #1
 8005a12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a2c:	801a      	strh	r2, [r3, #0]
 8005a2e:	e024      	b.n	8005a7a <USB_EPStartXfer+0xb62>
 8005a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d11c      	bne.n	8005a7a <USB_EPStartXfer+0xb62>
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a54:	4413      	add	r3, r2
 8005a56:	673b      	str	r3, [r7, #112]	; 0x70
 8005a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	011a      	lsls	r2, r3, #4
 8005a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	895b      	ldrh	r3, [r3, #10]
 8005a86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6959      	ldr	r1, [r3, #20]
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005aa0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005aa4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	f000 ff0f 	bl	80068cc <USB_WritePMA>
 8005aae:	e0ca      	b.n	8005c46 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d177      	bne.n	8005bb0 <USB_EPStartXfer+0xc98>
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ae0:	4413      	add	r3, r2
 8005ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	011a      	lsls	r2, r3, #4
 8005af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005afa:	67bb      	str	r3, [r7, #120]	; 0x78
 8005afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b10:	2b3e      	cmp	r3, #62	; 0x3e
 8005b12:	d921      	bls.n	8005b58 <USB_EPStartXfer+0xc40>
 8005b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <USB_EPStartXfer+0xc1c>
 8005b2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e05c      	b.n	8005c12 <USB_EPStartXfer+0xcfa>
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <USB_EPStartXfer+0xc5e>
 8005b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	e04d      	b.n	8005c12 <USB_EPStartXfer+0xcfa>
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <USB_EPStartXfer+0xc7e>
 8005b8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b90:	3301      	adds	r3, #1
 8005b92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	029b      	lsls	r3, r3, #10
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	e030      	b.n	8005c12 <USB_EPStartXfer+0xcfa>
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d128      	bne.n	8005c12 <USB_EPStartXfer+0xcfa>
 8005bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be4:	4413      	add	r3, r2
 8005be6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	011a      	lsls	r2, r3, #4
 8005bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	891b      	ldrh	r3, [r3, #8]
 8005c1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6959      	ldr	r1, [r3, #20]
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c40:	6800      	ldr	r0, [r0, #0]
 8005c42:	f000 fe43 	bl	80068cc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6c:	817b      	strh	r3, [r7, #10]
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	f083 0310 	eor.w	r3, r3, #16
 8005c74:	817b      	strh	r3, [r7, #10]
 8005c76:	897b      	ldrh	r3, [r7, #10]
 8005c78:	f083 0320 	eor.w	r3, r3, #32
 8005c7c:	817b      	strh	r3, [r7, #10]
 8005c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	897b      	ldrh	r3, [r7, #10]
 8005c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	8013      	strh	r3, [r2, #0]
 8005cae:	f000 bcde 	b.w	800666e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	7b1b      	ldrb	r3, [r3, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 80bb 	bne.w	8005e3a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d917      	bls.n	8005d10 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699a      	ldr	r2, [r3, #24]
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d00:	1ad2      	subs	r2, r2, r3
 8005d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	619a      	str	r2, [r3, #24]
 8005d0e:	e00e      	b.n	8005d2e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d52:	4413      	add	r3, r2
 8005d54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	011a      	lsls	r2, r3, #4
 8005d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d8e:	d924      	bls.n	8005dda <USB_EPStartXfer+0xec2>
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <USB_EPStartXfer+0xe98>
 8005da6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005daa:	3b01      	subs	r3, #1
 8005dac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	029b      	lsls	r3, r3, #10
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	f000 bc10 	b.w	80065fa <USB_EPStartXfer+0x16e2>
 8005dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10c      	bne.n	8005dfc <USB_EPStartXfer+0xee4>
 8005de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	e3fe      	b.n	80065fa <USB_EPStartXfer+0x16e2>
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <USB_EPStartXfer+0xf04>
 8005e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e16:	3301      	adds	r3, #1
 8005e18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	029b      	lsls	r3, r3, #10
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	e3df      	b.n	80065fa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	78db      	ldrb	r3, [r3, #3]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	f040 8218 	bne.w	800627c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 809d 	bne.w	8005f98 <USB_EPStartXfer+0x1080>
 8005e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e82:	4413      	add	r3, r2
 8005e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	011a      	lsls	r2, r3, #4
 8005e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ec6:	d92b      	bls.n	8005f20 <USB_EPStartXfer+0x1008>
 8005ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <USB_EPStartXfer+0xfe0>
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	029b      	lsls	r3, r3, #10
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	e070      	b.n	8006002 <USB_EPStartXfer+0x10ea>
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10c      	bne.n	8005f4a <USB_EPStartXfer+0x1032>
 8005f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e05b      	b.n	8006002 <USB_EPStartXfer+0x10ea>
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	085b      	lsrs	r3, r3, #1
 8005f58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <USB_EPStartXfer+0x1062>
 8005f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f74:	3301      	adds	r3, #1
 8005f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	029b      	lsls	r3, r3, #10
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e034      	b.n	8006002 <USB_EPStartXfer+0x10ea>
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d12c      	bne.n	8006002 <USB_EPStartXfer+0x10ea>
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fcc:	4413      	add	r3, r2
 8005fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	011a      	lsls	r2, r3, #4
 8005fe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 809d 	bne.w	800615c <USB_EPStartXfer+0x1244>
 8006022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603e:	b29b      	uxth	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006046:	4413      	add	r3, r2
 8006048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	011a      	lsls	r2, r3, #4
 800605a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800605e:	4413      	add	r3, r2
 8006060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006074:	b29a      	uxth	r2, r3
 8006076:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800607a:	801a      	strh	r2, [r3, #0]
 800607c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b3e      	cmp	r3, #62	; 0x3e
 800608a:	d92b      	bls.n	80060e4 <USB_EPStartXfer+0x11cc>
 800608c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800609e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d104      	bne.n	80060bc <USB_EPStartXfer+0x11a4>
 80060b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b6:	3b01      	subs	r3, #1
 80060b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	029b      	lsls	r3, r3, #10
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e069      	b.n	80061b8 <USB_EPStartXfer+0x12a0>
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10c      	bne.n	800610e <USB_EPStartXfer+0x11f6>
 80060f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e054      	b.n	80061b8 <USB_EPStartXfer+0x12a0>
 800610e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <USB_EPStartXfer+0x1226>
 8006134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006138:	3301      	adds	r3, #1
 800613a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800613e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29a      	uxth	r2, r3
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	b29b      	uxth	r3, r3
 800614c:	029b      	lsls	r3, r3, #10
 800614e:	b29b      	uxth	r3, r3
 8006150:	4313      	orrs	r3, r2
 8006152:	b29a      	uxth	r2, r3
 8006154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	e02d      	b.n	80061b8 <USB_EPStartXfer+0x12a0>
 800615c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d125      	bne.n	80061b8 <USB_EPStartXfer+0x12a0>
 800616c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006182:	4413      	add	r3, r2
 8006184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	011a      	lsls	r2, r3, #4
 8006196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800619a:	4413      	add	r3, r2
 800619c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061b6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80061b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8218 	beq.w	80065fa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80061ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80061ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <USB_EPStartXfer+0x12ea>
 80061f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10d      	bne.n	800621e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006202:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 81f5 	bne.w	80065fa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006210:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	f040 81ee 	bne.w	80065fa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800621e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006244:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]
 800627a:	e1be      	b.n	80065fa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800627c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	78db      	ldrb	r3, [r3, #3]
 8006288:	2b01      	cmp	r3, #1
 800628a:	f040 81b4 	bne.w	80065f6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800628e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d917      	bls.n	80062da <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80062aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80062ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ca:	1ad2      	subs	r2, r2, r3
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	619a      	str	r2, [r3, #24]
 80062d8:	e00e      	b.n	80062f8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80062ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8085 	bne.w	8006414 <USB_EPStartXfer+0x14fc>
 800630a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006326:	b29b      	uxth	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800632e:	4413      	add	r3, r2
 8006330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	011a      	lsls	r2, r3, #4
 8006342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006346:	4413      	add	r3, r2
 8006348:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800634c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635c:	b29a      	uxth	r2, r3
 800635e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006368:	2b3e      	cmp	r3, #62	; 0x3e
 800636a:	d923      	bls.n	80063b4 <USB_EPStartXfer+0x149c>
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <USB_EPStartXfer+0x1474>
 8006382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006386:	3b01      	subs	r3, #1
 8006388:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800638c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29a      	uxth	r2, r3
 8006394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006398:	b29b      	uxth	r3, r3
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	b29b      	uxth	r3, r3
 800639e:	4313      	orrs	r3, r2
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e060      	b.n	8006476 <USB_EPStartXfer+0x155e>
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <USB_EPStartXfer+0x14be>
 80063bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e04f      	b.n	8006476 <USB_EPStartXfer+0x155e>
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063da:	085b      	lsrs	r3, r3, #1
 80063dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <USB_EPStartXfer+0x14de>
 80063ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f0:	3301      	adds	r3, #1
 80063f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006402:	b29b      	uxth	r3, r3
 8006404:	029b      	lsls	r3, r3, #10
 8006406:	b29b      	uxth	r3, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	b29a      	uxth	r2, r3
 800640c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e030      	b.n	8006476 <USB_EPStartXfer+0x155e>
 8006414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d128      	bne.n	8006476 <USB_EPStartXfer+0x155e>
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006440:	b29b      	uxth	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006448:	4413      	add	r3, r2
 800644a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	011a      	lsls	r2, r3, #4
 800645c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006460:	4413      	add	r3, r2
 8006462:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006466:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646e:	b29a      	uxth	r2, r3
 8006470:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8085 	bne.w	80065a0 <USB_EPStartXfer+0x1688>
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	461a      	mov	r2, r3
 80064b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064ba:	4413      	add	r3, r2
 80064bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	011a      	lsls	r2, r3, #4
 80064ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064d2:	4413      	add	r3, r2
 80064d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f4:	2b3e      	cmp	r3, #62	; 0x3e
 80064f6:	d923      	bls.n	8006540 <USB_EPStartXfer+0x1628>
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <USB_EPStartXfer+0x1600>
 800650e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006512:	3b01      	subs	r3, #1
 8006514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29a      	uxth	r2, r3
 8006520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006524:	b29b      	uxth	r3, r3
 8006526:	029b      	lsls	r3, r3, #10
 8006528:	b29b      	uxth	r3, r3
 800652a:	4313      	orrs	r3, r2
 800652c:	b29b      	uxth	r3, r3
 800652e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006536:	b29a      	uxth	r2, r3
 8006538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	e05c      	b.n	80065fa <USB_EPStartXfer+0x16e2>
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10c      	bne.n	8006562 <USB_EPStartXfer+0x164a>
 8006548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006558:	b29a      	uxth	r2, r3
 800655a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	e04b      	b.n	80065fa <USB_EPStartXfer+0x16e2>
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <USB_EPStartXfer+0x166a>
 8006578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800657c:	3301      	adds	r3, #1
 800657e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658e:	b29b      	uxth	r3, r3
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b29b      	uxth	r3, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	b29a      	uxth	r2, r3
 8006598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	e02c      	b.n	80065fa <USB_EPStartXfer+0x16e2>
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d124      	bne.n	80065fa <USB_EPStartXfer+0x16e2>
 80065b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065be:	b29b      	uxth	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065c6:	4413      	add	r3, r2
 80065c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	011a      	lsls	r2, r3, #4
 80065da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065de:	4413      	add	r3, r2
 80065e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e001      	b.n	80065fa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e03a      	b.n	8006670 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800661c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006620:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006624:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800662c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006630:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006634:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006638:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	441a      	add	r2, r3
 8006656:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800665a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800665e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800666a:	b29b      	uxth	r3, r3
 800666c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	785b      	ldrb	r3, [r3, #1]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d020      	beq.n	80066ce <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a2:	81bb      	strh	r3, [r7, #12]
 80066a4:	89bb      	ldrh	r3, [r7, #12]
 80066a6:	f083 0310 	eor.w	r3, r3, #16
 80066aa:	81bb      	strh	r3, [r7, #12]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	89bb      	ldrh	r3, [r7, #12]
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
 80066cc:	e01f      	b.n	800670e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	81fb      	strh	r3, [r7, #14]
 80066e6:	89fb      	ldrh	r3, [r7, #14]
 80066e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066ec:	81fb      	strh	r3, [r7, #14]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	89fb      	ldrh	r3, [r7, #14]
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr

0800671a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800671a:	b480      	push	{r7}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	7b1b      	ldrb	r3, [r3, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 809d 	bne.w	8006868 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d04c      	beq.n	80067d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	823b      	strh	r3, [r7, #16]
 8006744:	8a3b      	ldrh	r3, [r7, #16]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01b      	beq.n	8006786 <USB_EPClearStall+0x6c>
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006764:	81fb      	strh	r3, [r7, #14]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	441a      	add	r2, r3
 8006770:	89fb      	ldrh	r3, [r7, #14]
 8006772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006782:	b29b      	uxth	r3, r3
 8006784:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	78db      	ldrb	r3, [r3, #3]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d06c      	beq.n	8006868 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a4:	81bb      	strh	r3, [r7, #12]
 80067a6:	89bb      	ldrh	r3, [r7, #12]
 80067a8:	f083 0320 	eor.w	r3, r3, #32
 80067ac:	81bb      	strh	r3, [r7, #12]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	441a      	add	r2, r3
 80067b8:	89bb      	ldrh	r3, [r7, #12]
 80067ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	8013      	strh	r3, [r2, #0]
 80067ce:	e04b      	b.n	8006868 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	82fb      	strh	r3, [r7, #22]
 80067de:	8afb      	ldrh	r3, [r7, #22]
 80067e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01b      	beq.n	8006820 <USB_EPClearStall+0x106>
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	82bb      	strh	r3, [r7, #20]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	441a      	add	r2, r3
 800680a:	8abb      	ldrh	r3, [r7, #20]
 800680c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681c:	b29b      	uxth	r3, r3
 800681e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	827b      	strh	r3, [r7, #18]
 8006838:	8a7b      	ldrh	r3, [r7, #18]
 800683a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800683e:	827b      	strh	r3, [r7, #18]
 8006840:	8a7b      	ldrh	r3, [r7, #18]
 8006842:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006846:	827b      	strh	r3, [r7, #18]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	8a7b      	ldrh	r3, [r7, #18]
 8006854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006864:	b29b      	uxth	r3, r3
 8006866:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2280      	movs	r2, #128	; 0x80
 800688a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr

0800689a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068bc:	b29b      	uxth	r3, r3
 80068be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr

080068cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b08b      	sub	sp, #44	; 0x2c
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4611      	mov	r1, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	460b      	mov	r3, r1
 80068dc:	80fb      	strh	r3, [r7, #6]
 80068de:	4613      	mov	r3, r2
 80068e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068e2:	88bb      	ldrh	r3, [r7, #4]
 80068e4:	3301      	adds	r3, #1
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	005a      	lsls	r2, r3, #1
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
 8006904:	e01e      	b.n	8006944 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3301      	adds	r3, #1
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	b21a      	sxth	r2, r3
 8006916:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800691a:	4313      	orrs	r3, r2
 800691c:	b21b      	sxth	r3, r3
 800691e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	8a7a      	ldrh	r2, [r7, #18]
 8006924:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	3302      	adds	r3, #2
 800692a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	3302      	adds	r3, #2
 8006930:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	3301      	adds	r3, #1
 8006936:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	3301      	adds	r3, #1
 800693c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	3b01      	subs	r3, #1
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1dd      	bne.n	8006906 <USB_WritePMA+0x3a>
  }
}
 800694a:	bf00      	nop
 800694c:	bf00      	nop
 800694e:	372c      	adds	r7, #44	; 0x2c
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr

08006956 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006956:	b480      	push	{r7}
 8006958:	b08b      	sub	sp, #44	; 0x2c
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	4611      	mov	r1, r2
 8006962:	461a      	mov	r2, r3
 8006964:	460b      	mov	r3, r1
 8006966:	80fb      	strh	r3, [r7, #6]
 8006968:	4613      	mov	r3, r2
 800696a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800696c:	88bb      	ldrh	r3, [r7, #4]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	b29b      	uxth	r3, r3
 8006972:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	005a      	lsls	r2, r3, #1
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006988:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
 800698e:	e01b      	b.n	80069c8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	3302      	adds	r3, #2
 800699c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	3301      	adds	r3, #1
 80069aa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	3301      	adds	r3, #1
 80069ba:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	3302      	adds	r3, #2
 80069c0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	3b01      	subs	r3, #1
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e0      	bne.n	8006990 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80069ce:	88bb      	ldrh	r3, [r7, #4]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	701a      	strb	r2, [r3, #0]
  }
}
 80069ea:	bf00      	nop
 80069ec:	372c      	adds	r7, #44	; 0x2c
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7c1b      	ldrb	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d115      	bne.n	8006a38 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a10:	2202      	movs	r2, #2
 8006a12:	2181      	movs	r1, #129	; 0x81
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fdda 	bl	80085ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a24:	2202      	movs	r2, #2
 8006a26:	2101      	movs	r1, #1
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fdd0 	bl	80085ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006a36:	e012      	b.n	8006a5e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a38:	2340      	movs	r3, #64	; 0x40
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	2181      	movs	r1, #129	; 0x81
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fdc5 	bl	80085ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	2101      	movs	r1, #1
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fdbc 	bl	80085ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a5e:	2308      	movs	r3, #8
 8006a60:	2203      	movs	r2, #3
 8006a62:	2182      	movs	r1, #130	; 0x82
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fdb2 	bl	80085ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006a70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a74:	f001 fed2 	bl	800881c <USBD_static_malloc>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e026      	b.n	8006ade <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a96:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7c1b      	ldrb	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 fe72 	bl	80087b0 <USBD_LL_PrepareReceive>
 8006acc:	e007      	b.n	8006ade <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ad4:	2340      	movs	r3, #64	; 0x40
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 fe69 	bl	80087b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006af8:	2181      	movs	r1, #129	; 0x81
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 fd8d 	bl	800861a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b06:	2101      	movs	r1, #1
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 fd86 	bl	800861a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b16:	2182      	movs	r1, #130	; 0x82
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fd7e 	bl	800861a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00e      	beq.n	8006b4c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 fe78 	bl	8008834 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b086      	sub	sp, #24
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b66:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d039      	beq.n	8006bf4 <USBD_CDC_Setup+0x9e>
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d17f      	bne.n	8006c84 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	88db      	ldrh	r3, [r3, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d029      	beq.n	8006be0 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	b25b      	sxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da11      	bge.n	8006bba <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006ba2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	88d2      	ldrh	r2, [r2, #6]
 8006ba8:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006baa:	6939      	ldr	r1, [r7, #16]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	88db      	ldrh	r3, [r3, #6]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f965 	bl	8007e82 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006bb8:	e06b      	b.n	8006c92 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	785a      	ldrb	r2, [r3, #1]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	88db      	ldrh	r3, [r3, #6]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006bd0:	6939      	ldr	r1, [r7, #16]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	88db      	ldrh	r3, [r3, #6]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 f980 	bl	8007ede <USBD_CtlPrepareRx>
    break;
 8006bde:	e058      	b.n	8006c92 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	7850      	ldrb	r0, [r2, #1]
 8006bec:	2200      	movs	r2, #0
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	4798      	blx	r3
    break;
 8006bf2:	e04e      	b.n	8006c92 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2b0b      	cmp	r3, #11
 8006bfa:	d02e      	beq.n	8006c5a <USBD_CDC_Setup+0x104>
 8006bfc:	2b0b      	cmp	r3, #11
 8006bfe:	dc38      	bgt.n	8006c72 <USBD_CDC_Setup+0x11c>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <USBD_CDC_Setup+0xb4>
 8006c04:	2b0a      	cmp	r3, #10
 8006c06:	d014      	beq.n	8006c32 <USBD_CDC_Setup+0xdc>
 8006c08:	e033      	b.n	8006c72 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d107      	bne.n	8006c24 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c14:	f107 030c 	add.w	r3, r7, #12
 8006c18:	2202      	movs	r2, #2
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f930 	bl	8007e82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c22:	e02e      	b.n	8006c82 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 f8c1 	bl	8007dae <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c30:	e027      	b.n	8006c82 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d107      	bne.n	8006c4c <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006c3c:	f107 030f 	add.w	r3, r7, #15
 8006c40:	2201      	movs	r2, #1
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f91c 	bl	8007e82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c4a:	e01a      	b.n	8006c82 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f8ad 	bl	8007dae <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	75fb      	strb	r3, [r7, #23]
      break;
 8006c58:	e013      	b.n	8006c82 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d00d      	beq.n	8006c80 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 f8a1 	bl	8007dae <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c70:	e006      	b.n	8006c80 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 f89a 	bl	8007dae <USBD_CtlError>
      ret = USBD_FAIL;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7e:	e000      	b.n	8006c82 <USBD_CDC_Setup+0x12c>
      break;
 8006c80:	bf00      	nop
    }
    break;
 8006c82:	e006      	b.n	8006c92 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 f891 	bl	8007dae <USBD_CtlError>
    ret = USBD_FAIL;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	75fb      	strb	r3, [r7, #23]
    break;
 8006c90:	bf00      	nop
  }

  return ret;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006cb6:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d03a      	beq.n	8006d38 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	331c      	adds	r3, #28
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d029      	beq.n	8006d2c <USBD_CDC_DataIn+0x90>
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	331c      	adds	r3, #28
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	78f9      	ldrb	r1, [r7, #3]
 8006cec:	68b8      	ldr	r0, [r7, #8]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	4403      	add	r3, r0
 8006cf8:	3338      	adds	r3, #56	; 0x38
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d00:	fb01 f303 	mul.w	r3, r1, r3
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d110      	bne.n	8006d2c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006d0a:	78fa      	ldrb	r2, [r7, #3]
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	331c      	adds	r3, #28
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006d1e:	78f9      	ldrb	r1, [r7, #3]
 8006d20:	2300      	movs	r3, #0
 8006d22:	2200      	movs	r2, #0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fd20 	bl	800876a <USBD_LL_Transmit>
 8006d2a:	e003      	b.n	8006d34 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e000      	b.n	8006d3a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d38:	2302      	movs	r3, #2
  }
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fd4b 	bl	80087f6 <USBD_LL_GetRxDataSize>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00d      	beq.n	8006d8e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d86:	4611      	mov	r1, r2
 8006d88:	4798      	blx	r3

    return USBD_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e000      	b.n	8006d90 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d8e:	2302      	movs	r3, #2
  }
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006da6:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d015      	beq.n	8006dde <USBD_CDC_EP0_RxReady+0x46>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006db8:	2bff      	cmp	r3, #255	; 0xff
 8006dba:	d010      	beq.n	8006dde <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006dca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006dd2:	b292      	uxth	r2, r2
 8006dd4:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	22ff      	movs	r2, #255	; 0xff
 8006dda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2243      	movs	r2, #67	; 0x43
 8006df4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006df6:	4b03      	ldr	r3, [pc, #12]	; (8006e04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	2000009c 	.word	0x2000009c

08006e08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2243      	movs	r2, #67	; 0x43
 8006e14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006e16:	4b03      	ldr	r3, [pc, #12]	; (8006e24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000058 	.word	0x20000058

08006e28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2243      	movs	r2, #67	; 0x43
 8006e34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e36:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	200000e0 	.word	0x200000e0

08006e48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	220a      	movs	r2, #10
 8006e54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e56:	4b03      	ldr	r3, [pc, #12]	; (8006e64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20000014 	.word	0x20000014

08006e68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e72:	2302      	movs	r3, #2
 8006e74:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ea8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006eb2:	88fa      	ldrh	r2, [r7, #6]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bc80      	pop	{r7}
 8006ec4:	4770      	bx	lr

08006ec6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ed6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d017      	beq.n	8006f36 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7c1b      	ldrb	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f18:	2101      	movs	r1, #1
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fc48 	bl	80087b0 <USBD_LL_PrepareReceive>
 8006f20:	e007      	b.n	8006f32 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f28:	2340      	movs	r3, #64	; 0x40
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fc3f 	bl	80087b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e000      	b.n	8006f38 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f36:	2302      	movs	r3, #2
  }
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e01a      	b.n	8006f8e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	79fa      	ldrb	r2, [r7, #7]
 8006f84:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f001 faac 	bl	80084e4 <USBD_LL_Init>

  return USBD_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d006      	beq.n	8006fb8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
 8006fb6:	e001      	b.n	8006fbc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fae1 	bl	8008598 <USBD_LL_Start>

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bc80      	pop	{r7}
 8006ff2:	4770      	bx	lr

08006ff4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007000:	2302      	movs	r3, #2
 8007002:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	4611      	mov	r1, r2
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	78fa      	ldrb	r2, [r7, #3]
 8007048:	4611      	mov	r1, r2
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fe63 	bl	8007d36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800707e:	461a      	mov	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	2b02      	cmp	r3, #2
 8007092:	d016      	beq.n	80070c2 <USBD_LL_SetupStage+0x6a>
 8007094:	2b02      	cmp	r3, #2
 8007096:	d81c      	bhi.n	80070d2 <USBD_LL_SetupStage+0x7a>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <USBD_LL_SetupStage+0x4a>
 800709c:	2b01      	cmp	r3, #1
 800709e:	d008      	beq.n	80070b2 <USBD_LL_SetupStage+0x5a>
 80070a0:	e017      	b.n	80070d2 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f9c6 	bl	800743c <USBD_StdDevReq>
    break;
 80070b0:	e01a      	b.n	80070e8 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa28 	bl	8007510 <USBD_StdItfReq>
    break;
 80070c0:	e012      	b.n	80070e8 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa68 	bl	80075a0 <USBD_StdEPReq>
    break;
 80070d0:	e00a      	b.n	80070e8 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80070d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fab9 	bl	8008658 <USBD_LL_StallEP>
    break;
 80070e6:	bf00      	nop
  }

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	460b      	mov	r3, r1
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007100:	7afb      	ldrb	r3, [r7, #11]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d14b      	bne.n	800719e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800710c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007114:	2b03      	cmp	r3, #3
 8007116:	d134      	bne.n	8007182 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	429a      	cmp	r2, r3
 8007122:	d919      	bls.n	8007158 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	1ad2      	subs	r2, r2, r3
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800713a:	429a      	cmp	r2, r3
 800713c:	d203      	bcs.n	8007146 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007142:	b29b      	uxth	r3, r3
 8007144:	e002      	b.n	800714c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800714a:	b29b      	uxth	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fee2 	bl	8007f1a <USBD_CtlContinueRx>
 8007156:	e038      	b.n	80071ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800716a:	2b03      	cmp	r3, #3
 800716c:	d105      	bne.n	800717a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fedf 	bl	8007f3e <USBD_CtlSendStatus>
 8007180:	e023      	b.n	80071ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007188:	2b05      	cmp	r3, #5
 800718a:	d11e      	bne.n	80071ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007194:	2100      	movs	r1, #0
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f001 fa5e 	bl	8008658 <USBD_LL_StallEP>
 800719c:	e015      	b.n	80071ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d108      	bne.n	80071c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	7afa      	ldrb	r2, [r7, #11]
 80071be:	4611      	mov	r1, r2
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	4798      	blx	r3
 80071c4:	e001      	b.n	80071ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071c6:	2302      	movs	r3, #2
 80071c8:	e000      	b.n	80071cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	460b      	mov	r3, r1
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d17f      	bne.n	80072e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3314      	adds	r3, #20
 80071ec:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d15c      	bne.n	80072b2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	429a      	cmp	r2, r3
 8007202:	d915      	bls.n	8007230 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	1ad2      	subs	r2, r2, r3
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	b29b      	uxth	r3, r3
 8007218:	461a      	mov	r2, r3
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 fe4c 	bl	8007eba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007222:	2300      	movs	r3, #0
 8007224:	2200      	movs	r2, #0
 8007226:	2100      	movs	r1, #0
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f001 fac1 	bl	80087b0 <USBD_LL_PrepareReceive>
 800722e:	e04e      	b.n	80072ce <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	6912      	ldr	r2, [r2, #16]
 8007238:	fbb3 f1f2 	udiv	r1, r3, r2
 800723c:	fb01 f202 	mul.w	r2, r1, r2
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d11c      	bne.n	8007280 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800724e:	429a      	cmp	r2, r3
 8007250:	d316      	bcc.n	8007280 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800725c:	429a      	cmp	r2, r3
 800725e:	d20f      	bcs.n	8007280 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007260:	2200      	movs	r2, #0
 8007262:	2100      	movs	r1, #0
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fe28 	bl	8007eba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007272:	2300      	movs	r3, #0
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f001 fa99 	bl	80087b0 <USBD_LL_PrepareReceive>
 800727e:	e026      	b.n	80072ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00a      	beq.n	80072a2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007292:	2b03      	cmp	r3, #3
 8007294:	d105      	bne.n	80072a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072a2:	2180      	movs	r1, #128	; 0x80
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f001 f9d7 	bl	8008658 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fe5a 	bl	8007f64 <USBD_CtlReceiveStatus>
 80072b0:	e00d      	b.n	80072ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d004      	beq.n	80072c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80072c6:	2180      	movs	r1, #128	; 0x80
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f001 f9c5 	bl	8008658 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d11d      	bne.n	8007314 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7ff fe81 	bl	8006fe0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80072e6:	e015      	b.n	8007314 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00d      	beq.n	8007310 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d108      	bne.n	8007310 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	7afa      	ldrb	r2, [r7, #11]
 8007308:	4611      	mov	r1, r2
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	4798      	blx	r3
 800730e:	e001      	b.n	8007314 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007310:	2302      	movs	r3, #2
 8007312:	e000      	b.n	8007316 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007326:	2340      	movs	r3, #64	; 0x40
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f94e 	bl	80085ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2240      	movs	r2, #64	; 0x40
 800733e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007342:	2340      	movs	r3, #64	; 0x40
 8007344:	2200      	movs	r2, #0
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 f940 	bl	80085ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2240      	movs	r2, #64	; 0x40
 8007358:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6852      	ldr	r2, [r2, #4]
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	4611      	mov	r1, r2
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
  }

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr

080073be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2204      	movs	r2, #4
 80073d6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr

080073e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr

08007406 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007414:	2b03      	cmp	r3, #3
 8007416:	d10b      	bne.n	8007430 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d005      	beq.n	8007462 <USBD_StdDevReq+0x26>
 8007456:	2b40      	cmp	r3, #64	; 0x40
 8007458:	d84f      	bhi.n	80074fa <USBD_StdDevReq+0xbe>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d009      	beq.n	8007472 <USBD_StdDevReq+0x36>
 800745e:	2b20      	cmp	r3, #32
 8007460:	d14b      	bne.n	80074fa <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
    break;
 8007470:	e048      	b.n	8007504 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	2b09      	cmp	r3, #9
 8007478:	d839      	bhi.n	80074ee <USBD_StdDevReq+0xb2>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <USBD_StdDevReq+0x44>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074d1 	.word	0x080074d1
 8007484:	080074e5 	.word	0x080074e5
 8007488:	080074ef 	.word	0x080074ef
 800748c:	080074db 	.word	0x080074db
 8007490:	080074ef 	.word	0x080074ef
 8007494:	080074b3 	.word	0x080074b3
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074ef 	.word	0x080074ef
 80074a0:	080074c7 	.word	0x080074c7
 80074a4:	080074bd 	.word	0x080074bd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f9da 	bl	8007864 <USBD_GetDescriptor>
      break;
 80074b0:	e022      	b.n	80074f8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 facf 	bl	8007a58 <USBD_SetAddress>
      break;
 80074ba:	e01d      	b.n	80074f8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fb0e 	bl	8007ae0 <USBD_SetConfig>
      break;
 80074c4:	e018      	b.n	80074f8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fb97 	bl	8007bfc <USBD_GetConfig>
      break;
 80074ce:	e013      	b.n	80074f8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fbc7 	bl	8007c66 <USBD_GetStatus>
      break;
 80074d8:	e00e      	b.n	80074f8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fbf5 	bl	8007ccc <USBD_SetFeature>
      break;
 80074e2:	e009      	b.n	80074f8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fc04 	bl	8007cf4 <USBD_ClrFeature>
      break;
 80074ec:	e004      	b.n	80074f8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fc5c 	bl	8007dae <USBD_CtlError>
      break;
 80074f6:	bf00      	nop
    }
    break;
 80074f8:	e004      	b.n	8007504 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fc56 	bl	8007dae <USBD_CtlError>
    break;
 8007502:	bf00      	nop
  }

  return ret;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop

08007510 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d005      	beq.n	8007536 <USBD_StdItfReq+0x26>
 800752a:	2b40      	cmp	r3, #64	; 0x40
 800752c:	d82e      	bhi.n	800758c <USBD_StdItfReq+0x7c>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <USBD_StdItfReq+0x26>
 8007532:	2b20      	cmp	r3, #32
 8007534:	d12a      	bne.n	800758c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800753c:	3b01      	subs	r3, #1
 800753e:	2b02      	cmp	r3, #2
 8007540:	d81d      	bhi.n	800757e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	889b      	ldrh	r3, [r3, #4]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	d813      	bhi.n	8007574 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
 800755a:	4603      	mov	r3, r0
 800755c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	88db      	ldrh	r3, [r3, #6]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d110      	bne.n	8007588 <USBD_StdItfReq+0x78>
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10d      	bne.n	8007588 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fce6 	bl	8007f3e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007572:	e009      	b.n	8007588 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fc19 	bl	8007dae <USBD_CtlError>
      break;
 800757c:	e004      	b.n	8007588 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fc14 	bl	8007dae <USBD_CtlError>
      break;
 8007586:	e000      	b.n	800758a <USBD_StdItfReq+0x7a>
      break;
 8007588:	bf00      	nop
    }
    break;
 800758a:	e004      	b.n	8007596 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fc0d 	bl	8007dae <USBD_CtlError>
    break;
 8007594:	bf00      	nop
  }

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	889b      	ldrh	r3, [r3, #4]
 80075b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	d007      	beq.n	80075d0 <USBD_StdEPReq+0x30>
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	f200 8144 	bhi.w	800784e <USBD_StdEPReq+0x2ae>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <USBD_StdEPReq+0x40>
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	f040 813f 	bne.w	800784e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
    break;
 80075de:	e13b      	b.n	8007858 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d10a      	bne.n	8007602 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]

      return ret;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	e12b      	b.n	800785a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b03      	cmp	r3, #3
 8007608:	d007      	beq.n	800761a <USBD_StdEPReq+0x7a>
 800760a:	2b03      	cmp	r3, #3
 800760c:	f300 8119 	bgt.w	8007842 <USBD_StdEPReq+0x2a2>
 8007610:	2b00      	cmp	r3, #0
 8007612:	d072      	beq.n	80076fa <USBD_StdEPReq+0x15a>
 8007614:	2b01      	cmp	r3, #1
 8007616:	d03a      	beq.n	800768e <USBD_StdEPReq+0xee>
 8007618:	e113      	b.n	8007842 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007620:	2b02      	cmp	r3, #2
 8007622:	d002      	beq.n	800762a <USBD_StdEPReq+0x8a>
 8007624:	2b03      	cmp	r3, #3
 8007626:	d015      	beq.n	8007654 <USBD_StdEPReq+0xb4>
 8007628:	e02b      	b.n	8007682 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00c      	beq.n	800764a <USBD_StdEPReq+0xaa>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b80      	cmp	r3, #128	; 0x80
 8007634:	d009      	beq.n	800764a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 f80c 	bl	8008658 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007640:	2180      	movs	r1, #128	; 0x80
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f808 	bl	8008658 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007648:	e020      	b.n	800768c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fbae 	bl	8007dae <USBD_CtlError>
        break;
 8007652:	e01b      	b.n	800768c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	885b      	ldrh	r3, [r3, #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10e      	bne.n	800767a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <USBD_StdEPReq+0xda>
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d008      	beq.n	800767a <USBD_StdEPReq+0xda>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	88db      	ldrh	r3, [r3, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ffef 	bl	8008658 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fc5f 	bl	8007f3e <USBD_CtlSendStatus>

        break;
 8007680:	e004      	b.n	800768c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fb92 	bl	8007dae <USBD_CtlError>
        break;
 800768a:	bf00      	nop
      }
      break;
 800768c:	e0de      	b.n	800784c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007694:	2b02      	cmp	r3, #2
 8007696:	d002      	beq.n	800769e <USBD_StdEPReq+0xfe>
 8007698:	2b03      	cmp	r3, #3
 800769a:	d015      	beq.n	80076c8 <USBD_StdEPReq+0x128>
 800769c:	e026      	b.n	80076ec <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00c      	beq.n	80076be <USBD_StdEPReq+0x11e>
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	d009      	beq.n	80076be <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 ffd2 	bl	8008658 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80076b4:	2180      	movs	r1, #128	; 0x80
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 ffce 	bl	8008658 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80076bc:	e01c      	b.n	80076f8 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb74 	bl	8007dae <USBD_CtlError>
        break;
 80076c6:	e017      	b.n	80076f8 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	885b      	ldrh	r3, [r3, #2]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d112      	bne.n	80076f6 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 ffd9 	bl	8008696 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fc2a 	bl	8007f3e <USBD_CtlSendStatus>
        }
        break;
 80076ea:	e004      	b.n	80076f6 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fb5d 	bl	8007dae <USBD_CtlError>
        break;
 80076f4:	e000      	b.n	80076f8 <USBD_StdEPReq+0x158>
        break;
 80076f6:	bf00      	nop
      }
      break;
 80076f8:	e0a8      	b.n	800784c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007700:	2b02      	cmp	r3, #2
 8007702:	d002      	beq.n	800770a <USBD_StdEPReq+0x16a>
 8007704:	2b03      	cmp	r3, #3
 8007706:	d031      	beq.n	800776c <USBD_StdEPReq+0x1cc>
 8007708:	e095      	b.n	8007836 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <USBD_StdEPReq+0x180>
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b80      	cmp	r3, #128	; 0x80
 8007714:	d004      	beq.n	8007720 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb48 	bl	8007dae <USBD_CtlError>
          break;
 800771e:	e08f      	b.n	8007840 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007724:	2b00      	cmp	r3, #0
 8007726:	da0b      	bge.n	8007740 <USBD_StdEPReq+0x1a0>
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	3310      	adds	r3, #16
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	4413      	add	r3, r2
 800773c:	3304      	adds	r3, #4
 800773e:	e00a      	b.n	8007756 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2202      	movs	r2, #2
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fb8c 	bl	8007e82 <USBD_CtlSendData>
          break;
 800776a:	e069      	b.n	8007840 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800776c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	da11      	bge.n	8007798 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	3318      	adds	r3, #24
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d117      	bne.n	80077be <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fb0c 	bl	8007dae <USBD_CtlError>
            break;
 8007796:	e053      	b.n	8007840 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	f003 020f 	and.w	r2, r3, #15
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	440b      	add	r3, r1
 80077aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 faf9 	bl	8007dae <USBD_CtlError>
            break;
 80077bc:	e040      	b.n	8007840 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	da0b      	bge.n	80077de <USBD_StdEPReq+0x23e>
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	3310      	adds	r3, #16
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	3304      	adds	r3, #4
 80077dc:	e00a      	b.n	80077f4 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <USBD_StdEPReq+0x262>
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b80      	cmp	r3, #128	; 0x80
 8007800:	d103      	bne.n	800780a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	e00e      	b.n	8007828 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 ff60 	bl	80086d4 <USBD_LL_IsStallEP>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2201      	movs	r2, #1
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	e002      	b.n	8007828 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2202      	movs	r2, #2
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fb27 	bl	8007e82 <USBD_CtlSendData>
          break;
 8007834:	e004      	b.n	8007840 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fab8 	bl	8007dae <USBD_CtlError>
        break;
 800783e:	bf00      	nop
      }
      break;
 8007840:	e004      	b.n	800784c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fab2 	bl	8007dae <USBD_CtlError>
      break;
 800784a:	bf00      	nop
    }
    break;
 800784c:	e004      	b.n	8007858 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 faac 	bl	8007dae <USBD_CtlError>
    break;
 8007856:	bf00      	nop
  }

  return ret;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	885b      	ldrh	r3, [r3, #2]
 8007872:	0a1b      	lsrs	r3, r3, #8
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	2b06      	cmp	r3, #6
 800787a:	f200 80c9 	bhi.w	8007a10 <USBD_GetDescriptor+0x1ac>
 800787e:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <USBD_GetDescriptor+0x20>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078a1 	.word	0x080078a1
 8007888:	080078b9 	.word	0x080078b9
 800788c:	080078f9 	.word	0x080078f9
 8007890:	08007a11 	.word	0x08007a11
 8007894:	08007a11 	.word	0x08007a11
 8007898:	080079bd 	.word	0x080079bd
 800789c:	080079e3 	.word	0x080079e3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	7c12      	ldrb	r2, [r2, #16]
 80078ac:	f107 010a 	add.w	r1, r7, #10
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
    break;
 80078b6:	e0b0      	b.n	8007a1a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	7c1b      	ldrb	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10d      	bne.n	80078dc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f107 020a 	add.w	r2, r7, #10
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
 80078d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	2202      	movs	r2, #2
 80078d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80078da:	e09e      	b.n	8007a1a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	f107 020a 	add.w	r2, r7, #10
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3301      	adds	r3, #1
 80078f2:	2202      	movs	r2, #2
 80078f4:	701a      	strb	r2, [r3, #0]
    break;
 80078f6:	e090      	b.n	8007a1a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b05      	cmp	r3, #5
 8007900:	d856      	bhi.n	80079b0 <USBD_GetDescriptor+0x14c>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <USBD_GetDescriptor+0xa4>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007921 	.word	0x08007921
 800790c:	08007939 	.word	0x08007939
 8007910:	08007951 	.word	0x08007951
 8007914:	08007969 	.word	0x08007969
 8007918:	08007981 	.word	0x08007981
 800791c:	08007999 	.word	0x08007999
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	7c12      	ldrb	r2, [r2, #16]
 800792c:	f107 010a 	add.w	r1, r7, #10
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
      break;
 8007936:	e040      	b.n	80079ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	7c12      	ldrb	r2, [r2, #16]
 8007944:	f107 010a 	add.w	r1, r7, #10
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	60f8      	str	r0, [r7, #12]
      break;
 800794e:	e034      	b.n	80079ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7c12      	ldrb	r2, [r2, #16]
 800795c:	f107 010a 	add.w	r1, r7, #10
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
 8007964:	60f8      	str	r0, [r7, #12]
      break;
 8007966:	e028      	b.n	80079ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	7c12      	ldrb	r2, [r2, #16]
 8007974:	f107 010a 	add.w	r1, r7, #10
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
 800797c:	60f8      	str	r0, [r7, #12]
      break;
 800797e:	e01c      	b.n	80079ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7c12      	ldrb	r2, [r2, #16]
 800798c:	f107 010a 	add.w	r1, r7, #10
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
 8007994:	60f8      	str	r0, [r7, #12]
      break;
 8007996:	e010      	b.n	80079ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	7c12      	ldrb	r2, [r2, #16]
 80079a4:	f107 010a 	add.w	r1, r7, #10
 80079a8:	4610      	mov	r0, r2
 80079aa:	4798      	blx	r3
 80079ac:	60f8      	str	r0, [r7, #12]
      break;
 80079ae:	e004      	b.n	80079ba <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9fb 	bl	8007dae <USBD_CtlError>
      return;
 80079b8:	e04b      	b.n	8007a52 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80079ba:	e02e      	b.n	8007a1a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7c1b      	ldrb	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079cc:	f107 020a 	add.w	r2, r7, #10
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
 80079d4:	60f8      	str	r0, [r7, #12]
      break;
 80079d6:	e020      	b.n	8007a1a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f9e7 	bl	8007dae <USBD_CtlError>
      return;
 80079e0:	e037      	b.n	8007a52 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7c1b      	ldrb	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10d      	bne.n	8007a06 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	f107 020a 	add.w	r2, r7, #10
 80079f6:	4610      	mov	r0, r2
 80079f8:	4798      	blx	r3
 80079fa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	2207      	movs	r2, #7
 8007a02:	701a      	strb	r2, [r3, #0]
      break;
 8007a04:	e009      	b.n	8007a1a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f9d0 	bl	8007dae <USBD_CtlError>
      return;
 8007a0e:	e020      	b.n	8007a52 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9cb 	bl	8007dae <USBD_CtlError>
    return;
 8007a18:	e01b      	b.n	8007a52 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007a1a:	897b      	ldrh	r3, [r7, #10]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d011      	beq.n	8007a44 <USBD_GetDescriptor+0x1e0>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	88db      	ldrh	r3, [r3, #6]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88da      	ldrh	r2, [r3, #6]
 8007a2c:	897b      	ldrh	r3, [r7, #10]
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	bf28      	it	cs
 8007a32:	4613      	movcs	r3, r2
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007a38:	897b      	ldrh	r3, [r7, #10]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	68f9      	ldr	r1, [r7, #12]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa1f 	bl	8007e82 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	88db      	ldrh	r3, [r3, #6]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa76 	bl	8007f3e <USBD_CtlSendStatus>
  }
}
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	889b      	ldrh	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d130      	bne.n	8007acc <USBD_SetAddress+0x74>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d12c      	bne.n	8007acc <USBD_SetAddress+0x74>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	885b      	ldrh	r3, [r3, #2]
 8007a76:	2b7f      	cmp	r3, #127	; 0x7f
 8007a78:	d828      	bhi.n	8007acc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d104      	bne.n	8007a9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f98b 	bl	8007dae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	e01d      	b.n	8007ad6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7bfa      	ldrb	r2, [r7, #15]
 8007a9e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fe40 	bl	800872c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa46 	bl	8007f3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac0:	e009      	b.n	8007ad6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	e004      	b.n	8007ad6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f96d 	bl	8007dae <USBD_CtlError>
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	4b41      	ldr	r3, [pc, #260]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007af2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007af4:	4b40      	ldr	r3, [pc, #256]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d904      	bls.n	8007b06 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f955 	bl	8007dae <USBD_CtlError>
 8007b04:	e075      	b.n	8007bf2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d002      	beq.n	8007b16 <USBD_SetConfig+0x36>
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d023      	beq.n	8007b5c <USBD_SetConfig+0x7c>
 8007b14:	e062      	b.n	8007bdc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007b16:	4b38      	ldr	r3, [pc, #224]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01a      	beq.n	8007b54 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007b1e:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b30:	4b31      	ldr	r3, [pc, #196]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fa5c 	bl	8006ff4 <USBD_SetClassConfig>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d104      	bne.n	8007b4c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f932 	bl	8007dae <USBD_CtlError>
          return;
 8007b4a:	e052      	b.n	8007bf2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9f6 	bl	8007f3e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007b52:	e04e      	b.n	8007bf2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9f2 	bl	8007f3e <USBD_CtlSendStatus>
      break;
 8007b5a:	e04a      	b.n	8007bf2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b5c:	4b26      	ldr	r3, [pc, #152]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d112      	bne.n	8007b8a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007b6c:	4b22      	ldr	r3, [pc, #136]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b76:	4b20      	ldr	r3, [pc, #128]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff fa58 	bl	8007032 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9db 	bl	8007f3e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007b88:	e033      	b.n	8007bf2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007b8a:	4b1b      	ldr	r3, [pc, #108]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d01d      	beq.n	8007bd4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff fa46 	bl	8007032 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ba6:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bb0:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff fa1c 	bl	8006ff4 <USBD_SetClassConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d104      	bne.n	8007bcc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f8f2 	bl	8007dae <USBD_CtlError>
          return;
 8007bca:	e012      	b.n	8007bf2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f9b6 	bl	8007f3e <USBD_CtlSendStatus>
      break;
 8007bd2:	e00e      	b.n	8007bf2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f9b2 	bl	8007f3e <USBD_CtlSendStatus>
      break;
 8007bda:	e00a      	b.n	8007bf2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8e5 	bl	8007dae <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff fa21 	bl	8007032 <USBD_ClrClassConfig>
      break;
 8007bf0:	bf00      	nop
    }
  }
}
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000600 	.word	0x20000600

08007bfc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	88db      	ldrh	r3, [r3, #6]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d004      	beq.n	8007c18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8cc 	bl	8007dae <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007c16:	e022      	b.n	8007c5e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	dc02      	bgt.n	8007c28 <USBD_GetConfig+0x2c>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dc03      	bgt.n	8007c2e <USBD_GetConfig+0x32>
 8007c26:	e015      	b.n	8007c54 <USBD_GetConfig+0x58>
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetConfig+0x48>
 8007c2c:	e012      	b.n	8007c54 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3308      	adds	r3, #8
 8007c38:	2201      	movs	r2, #1
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f920 	bl	8007e82 <USBD_CtlSendData>
      break;
 8007c42:	e00c      	b.n	8007c5e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f918 	bl	8007e82 <USBD_CtlSendData>
      break;
 8007c52:	e004      	b.n	8007c5e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f8a9 	bl	8007dae <USBD_CtlError>
      break;
 8007c5c:	bf00      	nop
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c76:	3b01      	subs	r3, #1
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d81e      	bhi.n	8007cba <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	88db      	ldrh	r3, [r3, #6]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d004      	beq.n	8007c8e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f891 	bl	8007dae <USBD_CtlError>
      break;
 8007c8c:	e01a      	b.n	8007cc4 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f043 0202 	orr.w	r2, r3, #2
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	330c      	adds	r3, #12
 8007cae:	2202      	movs	r2, #2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f8e5 	bl	8007e82 <USBD_CtlSendData>
    break;
 8007cb8:	e004      	b.n	8007cc4 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f876 	bl	8007dae <USBD_CtlError>
    break;
 8007cc2:	bf00      	nop
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	885b      	ldrh	r3, [r3, #2]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d106      	bne.n	8007cec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f929 	bl	8007f3e <USBD_CtlSendStatus>
  }

}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d04:	3b01      	subs	r3, #1
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d80b      	bhi.n	8007d22 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	885b      	ldrh	r3, [r3, #2]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d10c      	bne.n	8007d2c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f90f 	bl	8007f3e <USBD_CtlSendStatus>
    }
    break;
 8007d20:	e004      	b.n	8007d2c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f842 	bl	8007dae <USBD_CtlError>
    break;
 8007d2a:	e000      	b.n	8007d2e <USBD_ClrFeature+0x3a>
    break;
 8007d2c:	bf00      	nop
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	785a      	ldrb	r2, [r3, #1]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	3302      	adds	r3, #2
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	4413      	add	r3, r2
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	3305      	adds	r3, #5
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4413      	add	r3, r2
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3306      	adds	r3, #6
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	3307      	adds	r3, #7
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	80da      	strh	r2, [r3, #6]

}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr

08007dae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007db8:	2180      	movs	r1, #128	; 0x80
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fc4c 	bl	8008658 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fc48 	bl	8008658 <USBD_LL_StallEP>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d032      	beq.n	8007e4c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f834 	bl	8007e54 <USBD_GetLen>
 8007dec:	4603      	mov	r3, r0
 8007dee:	3301      	adds	r3, #1
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	75fa      	strb	r2, [r7, #23]
 8007e00:	461a      	mov	r2, r3
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4413      	add	r3, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	75fa      	strb	r2, [r7, #23]
 8007e12:	461a      	mov	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4413      	add	r3, r2
 8007e18:	2203      	movs	r2, #3
 8007e1a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e1c:	e012      	b.n	8007e44 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	60fa      	str	r2, [r7, #12]
 8007e24:	7dfa      	ldrb	r2, [r7, #23]
 8007e26:	1c51      	adds	r1, r2, #1
 8007e28:	75f9      	strb	r1, [r7, #23]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	440a      	add	r2, r1
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	75fa      	strb	r2, [r7, #23]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4413      	add	r3, r2
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e8      	bne.n	8007e1e <USBD_GetString+0x4e>
    }
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007e60:	e005      	b.n	8007e6e <USBD_GetLen+0x1a>
    {
        len++;
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	3301      	adds	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f5      	bne.n	8007e62 <USBD_GetLen+0xe>
    }

    return len;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bc80      	pop	{r7}
 8007e80:	4770      	bx	lr

08007e82 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007e98:	88fa      	ldrh	r2, [r7, #6]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e9e:	88fa      	ldrh	r2, [r7, #6]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007ea4:	88fb      	ldrh	r3, [r7, #6]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fc5d 	bl	800876a <USBD_LL_Transmit>

  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fc4b 	bl	800876a <USBD_LL_Transmit>

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2203      	movs	r2, #3
 8007ef0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007ef4:	88fa      	ldrh	r2, [r7, #6]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007efc:	88fa      	ldrh	r2, [r7, #6]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007f04:	88fb      	ldrh	r3, [r7, #6]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fc50 	bl	80087b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	4613      	mov	r3, r2
 8007f26:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 fc3e 	bl	80087b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2204      	movs	r2, #4
 8007f4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2200      	movs	r2, #0
 8007f52:	2100      	movs	r1, #0
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fc08 	bl	800876a <USBD_LL_Transmit>

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2205      	movs	r2, #5
 8007f70:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007f74:	2300      	movs	r3, #0
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fc18 	bl	80087b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f90:	2200      	movs	r2, #0
 8007f92:	4912      	ldr	r1, [pc, #72]	; (8007fdc <MX_USB_DEVICE_Init+0x50>)
 8007f94:	4812      	ldr	r0, [pc, #72]	; (8007fe0 <MX_USB_DEVICE_Init+0x54>)
 8007f96:	f7fe ffd3 	bl	8006f40 <USBD_Init>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fa0:	f7f8 fba6 	bl	80006f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fa4:	490f      	ldr	r1, [pc, #60]	; (8007fe4 <MX_USB_DEVICE_Init+0x58>)
 8007fa6:	480e      	ldr	r0, [pc, #56]	; (8007fe0 <MX_USB_DEVICE_Init+0x54>)
 8007fa8:	f7fe fff5 	bl	8006f96 <USBD_RegisterClass>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fb2:	f7f8 fb9d 	bl	80006f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fb6:	490c      	ldr	r1, [pc, #48]	; (8007fe8 <MX_USB_DEVICE_Init+0x5c>)
 8007fb8:	4809      	ldr	r0, [pc, #36]	; (8007fe0 <MX_USB_DEVICE_Init+0x54>)
 8007fba:	f7fe ff55 	bl	8006e68 <USBD_CDC_RegisterInterface>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fc4:	f7f8 fb94 	bl	80006f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fc8:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <MX_USB_DEVICE_Init+0x54>)
 8007fca:	f7fe fffd 	bl	8006fc8 <USBD_Start>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fd4:	f7f8 fb8c 	bl	80006f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fd8:	bf00      	nop
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20000134 	.word	0x20000134
 8007fe0:	20000604 	.word	0x20000604
 8007fe4:	20000020 	.word	0x20000020
 8007fe8:	20000124 	.word	0x20000124

08007fec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4905      	ldr	r1, [pc, #20]	; (8008008 <CDC_Init_FS+0x1c>)
 8007ff4:	4805      	ldr	r0, [pc, #20]	; (800800c <CDC_Init_FS+0x20>)
 8007ff6:	f7fe ff4d 	bl	8006e94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ffa:	4905      	ldr	r1, [pc, #20]	; (8008010 <CDC_Init_FS+0x24>)
 8007ffc:	4803      	ldr	r0, [pc, #12]	; (800800c <CDC_Init_FS+0x20>)
 8007ffe:	f7fe ff62 	bl	8006ec6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008002:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008004:	4618      	mov	r0, r3
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000ca0 	.word	0x20000ca0
 800800c:	20000604 	.word	0x20000604
 8008010:	200008a0 	.word	0x200008a0

08008014 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008018:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800801a:	4618      	mov	r0, r3
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr
	...

08008024 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
 8008030:	4613      	mov	r3, r2
 8008032:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	2b23      	cmp	r3, #35	; 0x23
 8008038:	d84a      	bhi.n	80080d0 <CDC_Control_FS+0xac>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <CDC_Control_FS+0x1c>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	080080d1 	.word	0x080080d1
 8008044:	080080d1 	.word	0x080080d1
 8008048:	080080d1 	.word	0x080080d1
 800804c:	080080d1 	.word	0x080080d1
 8008050:	080080d1 	.word	0x080080d1
 8008054:	080080d1 	.word	0x080080d1
 8008058:	080080d1 	.word	0x080080d1
 800805c:	080080d1 	.word	0x080080d1
 8008060:	080080d1 	.word	0x080080d1
 8008064:	080080d1 	.word	0x080080d1
 8008068:	080080d1 	.word	0x080080d1
 800806c:	080080d1 	.word	0x080080d1
 8008070:	080080d1 	.word	0x080080d1
 8008074:	080080d1 	.word	0x080080d1
 8008078:	080080d1 	.word	0x080080d1
 800807c:	080080d1 	.word	0x080080d1
 8008080:	080080d1 	.word	0x080080d1
 8008084:	080080d1 	.word	0x080080d1
 8008088:	080080d1 	.word	0x080080d1
 800808c:	080080d1 	.word	0x080080d1
 8008090:	080080d1 	.word	0x080080d1
 8008094:	080080d1 	.word	0x080080d1
 8008098:	080080d1 	.word	0x080080d1
 800809c:	080080d1 	.word	0x080080d1
 80080a0:	080080d1 	.word	0x080080d1
 80080a4:	080080d1 	.word	0x080080d1
 80080a8:	080080d1 	.word	0x080080d1
 80080ac:	080080d1 	.word	0x080080d1
 80080b0:	080080d1 	.word	0x080080d1
 80080b4:	080080d1 	.word	0x080080d1
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	080080d1 	.word	0x080080d1
 80080c0:	080080d1 	.word	0x080080d1
 80080c4:	080080d1 	.word	0x080080d1
 80080c8:	080080d1 	.word	0x080080d1
 80080cc:	080080d1 	.word	0x080080d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080d0:	bf00      	nop
  }

  return (USBD_OK);
 80080d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	4805      	ldr	r0, [pc, #20]	; (8008104 <CDC_Receive_FS+0x24>)
 80080ee:	f7fe feea 	bl	8006ec6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080f2:	4804      	ldr	r0, [pc, #16]	; (8008104 <CDC_Receive_FS+0x24>)
 80080f4:	f7fe fefa 	bl	8006eec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000604 	.word	0x20000604

08008108 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2212      	movs	r2, #18
 8008118:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800811a:	4b03      	ldr	r3, [pc, #12]	; (8008128 <USBD_FS_DeviceDescriptor+0x20>)
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20000150 	.word	0x20000150

0800812c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	6039      	str	r1, [r7, #0]
 8008136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2204      	movs	r2, #4
 800813c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800813e:	4b03      	ldr	r3, [pc, #12]	; (800814c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	bc80      	pop	{r7}
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	20000164 	.word	0x20000164

08008150 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d105      	bne.n	800816e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	4907      	ldr	r1, [pc, #28]	; (8008184 <USBD_FS_ProductStrDescriptor+0x34>)
 8008166:	4808      	ldr	r0, [pc, #32]	; (8008188 <USBD_FS_ProductStrDescriptor+0x38>)
 8008168:	f7ff fe32 	bl	8007dd0 <USBD_GetString>
 800816c:	e004      	b.n	8008178 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	4904      	ldr	r1, [pc, #16]	; (8008184 <USBD_FS_ProductStrDescriptor+0x34>)
 8008172:	4805      	ldr	r0, [pc, #20]	; (8008188 <USBD_FS_ProductStrDescriptor+0x38>)
 8008174:	f7ff fe2c 	bl	8007dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008178:	4b02      	ldr	r3, [pc, #8]	; (8008184 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200010a0 	.word	0x200010a0
 8008188:	08008924 	.word	0x08008924

0800818c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	4904      	ldr	r1, [pc, #16]	; (80081ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800819c:	4804      	ldr	r0, [pc, #16]	; (80081b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800819e:	f7ff fe17 	bl	8007dd0 <USBD_GetString>
  return USBD_StrDesc;
 80081a2:	4b02      	ldr	r3, [pc, #8]	; (80081ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	200010a0 	.word	0x200010a0
 80081b0:	0800893c 	.word	0x0800893c

080081b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	6039      	str	r1, [r7, #0]
 80081be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	221a      	movs	r2, #26
 80081c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081c6:	f000 f843 	bl	8008250 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081ca:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20000168 	.word	0x20000168

080081d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	6039      	str	r1, [r7, #0]
 80081e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d105      	bne.n	80081f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4907      	ldr	r1, [pc, #28]	; (800820c <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ee:	4808      	ldr	r0, [pc, #32]	; (8008210 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f0:	f7ff fdee 	bl	8007dd0 <USBD_GetString>
 80081f4:	e004      	b.n	8008200 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4904      	ldr	r1, [pc, #16]	; (800820c <USBD_FS_ConfigStrDescriptor+0x34>)
 80081fa:	4805      	ldr	r0, [pc, #20]	; (8008210 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081fc:	f7ff fde8 	bl	8007dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	200010a0 	.word	0x200010a0
 8008210:	08008950 	.word	0x08008950

08008214 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	6039      	str	r1, [r7, #0]
 800821e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d105      	bne.n	8008232 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	4907      	ldr	r1, [pc, #28]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800822a:	4808      	ldr	r0, [pc, #32]	; (800824c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800822c:	f7ff fdd0 	bl	8007dd0 <USBD_GetString>
 8008230:	e004      	b.n	800823c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4904      	ldr	r1, [pc, #16]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008236:	4805      	ldr	r0, [pc, #20]	; (800824c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008238:	f7ff fdca 	bl	8007dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800823c:	4b02      	ldr	r3, [pc, #8]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	200010a0 	.word	0x200010a0
 800824c:	0800895c 	.word	0x0800895c

08008250 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008256:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <Get_SerialNum+0x44>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800825c:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <Get_SerialNum+0x48>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008262:	4b0e      	ldr	r3, [pc, #56]	; (800829c <Get_SerialNum+0x4c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d009      	beq.n	800828a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008276:	2208      	movs	r2, #8
 8008278:	4909      	ldr	r1, [pc, #36]	; (80082a0 <Get_SerialNum+0x50>)
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 f814 	bl	80082a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008280:	2204      	movs	r2, #4
 8008282:	4908      	ldr	r1, [pc, #32]	; (80082a4 <Get_SerialNum+0x54>)
 8008284:	68b8      	ldr	r0, [r7, #8]
 8008286:	f000 f80f 	bl	80082a8 <IntToUnicode>
  }
}
 800828a:	bf00      	nop
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	1ff80050 	.word	0x1ff80050
 8008298:	1ff80054 	.word	0x1ff80054
 800829c:	1ff80058 	.word	0x1ff80058
 80082a0:	2000016a 	.word	0x2000016a
 80082a4:	2000017a 	.word	0x2000017a

080082a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082b6:	2300      	movs	r3, #0
 80082b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]
 80082be:	e027      	b.n	8008310 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	0f1b      	lsrs	r3, r3, #28
 80082c4:	2b09      	cmp	r3, #9
 80082c6:	d80b      	bhi.n	80082e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	0f1b      	lsrs	r3, r3, #28
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	4619      	mov	r1, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	440b      	add	r3, r1
 80082d8:	3230      	adds	r2, #48	; 0x30
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	e00a      	b.n	80082f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	0f1b      	lsrs	r3, r3, #28
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	4619      	mov	r1, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	440b      	add	r3, r1
 80082f0:	3237      	adds	r2, #55	; 0x37
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	3301      	adds	r3, #1
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	4413      	add	r3, r2
 8008306:	2200      	movs	r2, #0
 8008308:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	3301      	adds	r3, #1
 800830e:	75fb      	strb	r3, [r7, #23]
 8008310:	7dfa      	ldrb	r2, [r7, #23]
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	429a      	cmp	r2, r3
 8008316:	d3d3      	bcc.n	80082c0 <IntToUnicode+0x18>
  }
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d106      	bne.n	8008344 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008336:	4b09      	ldr	r3, [pc, #36]	; (800835c <HAL_PCDEx_SetConnectionState+0x38>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	4a08      	ldr	r2, [pc, #32]	; (800835c <HAL_PCDEx_SetConnectionState+0x38>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008342:	e005      	b.n	8008350 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008344:	4b05      	ldr	r3, [pc, #20]	; (800835c <HAL_PCDEx_SetConnectionState+0x38>)
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	4a04      	ldr	r2, [pc, #16]	; (800835c <HAL_PCDEx_SetConnectionState+0x38>)
 800834a:	f023 0301 	bic.w	r3, r3, #1
 800834e:	6053      	str	r3, [r2, #4]
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40010000 	.word	0x40010000

08008360 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a0d      	ldr	r2, [pc, #52]	; (80083a4 <HAL_PCD_MspInit+0x44>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d113      	bne.n	800839a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008372:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <HAL_PCD_MspInit+0x48>)
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	4a0c      	ldr	r2, [pc, #48]	; (80083a8 <HAL_PCD_MspInit+0x48>)
 8008378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800837c:	6253      	str	r3, [r2, #36]	; 0x24
 800837e:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <HAL_PCD_MspInit+0x48>)
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	2014      	movs	r0, #20
 8008390:	f7f8 fe93 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008394:	2014      	movs	r0, #20
 8008396:	f7f8 feac 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40005c00 	.word	0x40005c00
 80083a8:	40023800 	.word	0x40023800

080083ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7fe fe48 	bl	8007058 <USBD_LL_SetupStage>
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083e2:	78fa      	ldrb	r2, [r7, #3]
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	440b      	add	r3, r1
 80083f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	4619      	mov	r1, r3
 80083fa:	f7fe fe7a 	bl	80070f2 <USBD_LL_DataOutStage>
}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	460b      	mov	r3, r1
 8008410:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	440b      	add	r3, r1
 8008426:	333c      	adds	r3, #60	; 0x3c
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	4619      	mov	r1, r3
 800842e:	f7fe fed1 	bl	80071d4 <USBD_LL_DataInStage>
}
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe ffdc 	bl	8007406 <USBD_LL_SOF>
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800845e:	2301      	movs	r3, #1
 8008460:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d001      	beq.n	800846e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800846a:	f7f8 f941 	bl	80006f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008474:	7bfa      	ldrb	r2, [r7, #15]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe ff91 	bl	80073a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe ff4a 	bl	800731e <USBD_LL_Reset>
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe ff8b 	bl	80073be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084b0:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <HAL_PCD_SuspendCallback+0x30>)
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	4a03      	ldr	r2, [pc, #12]	; (80084c4 <HAL_PCD_SuspendCallback+0x30>)
 80084b6:	f043 0306 	orr.w	r3, r3, #6
 80084ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	e000ed00 	.word	0xe000ed00

080084c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe ff85 	bl	80073e6 <USBD_LL_Resume>
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084ec:	4a28      	ldr	r2, [pc, #160]	; (8008590 <USBD_LL_Init+0xac>)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a26      	ldr	r2, [pc, #152]	; (8008590 <USBD_LL_Init+0xac>)
 80084f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80084fc:	4b24      	ldr	r3, [pc, #144]	; (8008590 <USBD_LL_Init+0xac>)
 80084fe:	4a25      	ldr	r2, [pc, #148]	; (8008594 <USBD_LL_Init+0xb0>)
 8008500:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008502:	4b23      	ldr	r3, [pc, #140]	; (8008590 <USBD_LL_Init+0xac>)
 8008504:	2208      	movs	r2, #8
 8008506:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008508:	4b21      	ldr	r3, [pc, #132]	; (8008590 <USBD_LL_Init+0xac>)
 800850a:	2202      	movs	r2, #2
 800850c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800850e:	4b20      	ldr	r3, [pc, #128]	; (8008590 <USBD_LL_Init+0xac>)
 8008510:	2202      	movs	r2, #2
 8008512:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008514:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <USBD_LL_Init+0xac>)
 8008516:	2200      	movs	r2, #0
 8008518:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800851a:	4b1d      	ldr	r3, [pc, #116]	; (8008590 <USBD_LL_Init+0xac>)
 800851c:	2200      	movs	r2, #0
 800851e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008520:	481b      	ldr	r0, [pc, #108]	; (8008590 <USBD_LL_Init+0xac>)
 8008522:	f7f9 fc45 	bl	8001db0 <HAL_PCD_Init>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800852c:	f7f8 f8e0 	bl	80006f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008536:	2318      	movs	r3, #24
 8008538:	2200      	movs	r2, #0
 800853a:	2100      	movs	r1, #0
 800853c:	f7fb f8cd 	bl	80036da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008546:	2358      	movs	r3, #88	; 0x58
 8008548:	2200      	movs	r2, #0
 800854a:	2180      	movs	r1, #128	; 0x80
 800854c:	f7fb f8c5 	bl	80036da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008556:	23c0      	movs	r3, #192	; 0xc0
 8008558:	2200      	movs	r2, #0
 800855a:	2181      	movs	r1, #129	; 0x81
 800855c:	f7fb f8bd 	bl	80036da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008566:	f44f 7388 	mov.w	r3, #272	; 0x110
 800856a:	2200      	movs	r2, #0
 800856c:	2101      	movs	r1, #1
 800856e:	f7fb f8b4 	bl	80036da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800857c:	2200      	movs	r2, #0
 800857e:	2182      	movs	r1, #130	; 0x82
 8008580:	f7fb f8ab 	bl	80036da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	200012a0 	.word	0x200012a0
 8008594:	40005c00 	.word	0x40005c00

08008598 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7f9 fcd0 	bl	8001f54 <HAL_PCD_Start>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f944 	bl	8008848 <USBD_Get_USB_Status>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	4608      	mov	r0, r1
 80085d8:	4611      	mov	r1, r2
 80085da:	461a      	mov	r2, r3
 80085dc:	4603      	mov	r3, r0
 80085de:	70fb      	strb	r3, [r7, #3]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70bb      	strb	r3, [r7, #2]
 80085e4:	4613      	mov	r3, r2
 80085e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085f6:	78bb      	ldrb	r3, [r7, #2]
 80085f8:	883a      	ldrh	r2, [r7, #0]
 80085fa:	78f9      	ldrb	r1, [r7, #3]
 80085fc:	f7f9 fdc9 	bl	8002192 <HAL_PCD_EP_Open>
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f91e 	bl	8008848 <USBD_Get_USB_Status>
 800860c:	4603      	mov	r3, r0
 800860e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008610:	7bbb      	ldrb	r3, [r7, #14]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7f9 fe07 	bl	800224c <HAL_PCD_EP_Close>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 f8ff 	bl	8008848 <USBD_Get_USB_Status>
 800864a:	4603      	mov	r3, r0
 800864c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800864e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008672:	78fa      	ldrb	r2, [r7, #3]
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f7f9 feaf 	bl	80023da <HAL_PCD_EP_SetStall>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f8e0 	bl	8008848 <USBD_Get_USB_Status>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800868c:	7bbb      	ldrb	r3, [r7, #14]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086b0:	78fa      	ldrb	r2, [r7, #3]
 80086b2:	4611      	mov	r1, r2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7f9 fee2 	bl	800247e <HAL_PCD_EP_ClrStall>
 80086ba:	4603      	mov	r3, r0
 80086bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f8c1 	bl	8008848 <USBD_Get_USB_Status>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da0c      	bge.n	800870a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	440b      	add	r3, r1
 8008704:	3302      	adds	r3, #2
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	e00b      	b.n	8008722 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008710:	68f9      	ldr	r1, [r7, #12]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	440b      	add	r3, r1
 800871c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008720:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f7f9 fcfc 	bl	8002148 <HAL_PCD_SetAddress>
 8008750:	4603      	mov	r3, r0
 8008752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	4618      	mov	r0, r3
 8008758:	f000 f876 	bl	8008848 <USBD_Get_USB_Status>
 800875c:	4603      	mov	r3, r0
 800875e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008760:	7bbb      	ldrb	r3, [r7, #14]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b086      	sub	sp, #24
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	461a      	mov	r2, r3
 8008776:	460b      	mov	r3, r1
 8008778:	72fb      	strb	r3, [r7, #11]
 800877a:	4613      	mov	r3, r2
 800877c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800878c:	893b      	ldrh	r3, [r7, #8]
 800878e:	7af9      	ldrb	r1, [r7, #11]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	f7f9 fdeb 	bl	800236c <HAL_PCD_EP_Transmit>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	4618      	mov	r0, r3
 800879e:	f000 f853 	bl	8008848 <USBD_Get_USB_Status>
 80087a2:	4603      	mov	r3, r0
 80087a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	607a      	str	r2, [r7, #4]
 80087ba:	461a      	mov	r2, r3
 80087bc:	460b      	mov	r3, r1
 80087be:	72fb      	strb	r3, [r7, #11]
 80087c0:	4613      	mov	r3, r2
 80087c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087d2:	893b      	ldrh	r3, [r7, #8]
 80087d4:	7af9      	ldrb	r1, [r7, #11]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	f7f9 fd80 	bl	80022dc <HAL_PCD_EP_Receive>
 80087dc:	4603      	mov	r3, r0
 80087de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 f830 	bl	8008848 <USBD_Get_USB_Status>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	460b      	mov	r3, r1
 8008800:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f7f9 fd96 	bl	800233e <HAL_PCD_EP_GetRxCount>
 8008812:	4603      	mov	r3, r0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008824:	4b02      	ldr	r3, [pc, #8]	; (8008830 <USBD_static_malloc+0x14>)
}
 8008826:	4618      	mov	r0, r3
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr
 8008830:	2000158c 	.word	0x2000158c

08008834 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]

}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	bc80      	pop	{r7}
 8008844:	4770      	bx	lr
	...

08008848 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	2b03      	cmp	r3, #3
 800885a:	d817      	bhi.n	800888c <USBD_Get_USB_Status+0x44>
 800885c:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <USBD_Get_USB_Status+0x1c>)
 800885e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008862:	bf00      	nop
 8008864:	08008875 	.word	0x08008875
 8008868:	0800887b 	.word	0x0800887b
 800886c:	08008881 	.word	0x08008881
 8008870:	08008887 	.word	0x08008887
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
    break;
 8008878:	e00b      	b.n	8008892 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800887a:	2302      	movs	r3, #2
 800887c:	73fb      	strb	r3, [r7, #15]
    break;
 800887e:	e008      	b.n	8008892 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008880:	2301      	movs	r3, #1
 8008882:	73fb      	strb	r3, [r7, #15]
    break;
 8008884:	e005      	b.n	8008892 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	73fb      	strb	r3, [r7, #15]
    break;
 800888a:	e002      	b.n	8008892 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800888c:	2302      	movs	r3, #2
 800888e:	73fb      	strb	r3, [r7, #15]
    break;
 8008890:	bf00      	nop
  }
  return usb_status;
 8008892:	7bfb      	ldrb	r3, [r7, #15]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop

080088a0 <memset>:
 80088a0:	4603      	mov	r3, r0
 80088a2:	4402      	add	r2, r0
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d100      	bne.n	80088aa <memset+0xa>
 80088a8:	4770      	bx	lr
 80088aa:	f803 1b01 	strb.w	r1, [r3], #1
 80088ae:	e7f9      	b.n	80088a4 <memset+0x4>

080088b0 <__libc_init_array>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	2600      	movs	r6, #0
 80088b4:	4d0c      	ldr	r5, [pc, #48]	; (80088e8 <__libc_init_array+0x38>)
 80088b6:	4c0d      	ldr	r4, [pc, #52]	; (80088ec <__libc_init_array+0x3c>)
 80088b8:	1b64      	subs	r4, r4, r5
 80088ba:	10a4      	asrs	r4, r4, #2
 80088bc:	42a6      	cmp	r6, r4
 80088be:	d109      	bne.n	80088d4 <__libc_init_array+0x24>
 80088c0:	f000 f81a 	bl	80088f8 <_init>
 80088c4:	2600      	movs	r6, #0
 80088c6:	4d0a      	ldr	r5, [pc, #40]	; (80088f0 <__libc_init_array+0x40>)
 80088c8:	4c0a      	ldr	r4, [pc, #40]	; (80088f4 <__libc_init_array+0x44>)
 80088ca:	1b64      	subs	r4, r4, r5
 80088cc:	10a4      	asrs	r4, r4, #2
 80088ce:	42a6      	cmp	r6, r4
 80088d0:	d105      	bne.n	80088de <__libc_init_array+0x2e>
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d8:	4798      	blx	r3
 80088da:	3601      	adds	r6, #1
 80088dc:	e7ee      	b.n	80088bc <__libc_init_array+0xc>
 80088de:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e2:	4798      	blx	r3
 80088e4:	3601      	adds	r6, #1
 80088e6:	e7f2      	b.n	80088ce <__libc_init_array+0x1e>
 80088e8:	080096f4 	.word	0x080096f4
 80088ec:	080096f4 	.word	0x080096f4
 80088f0:	080096f4 	.word	0x080096f4
 80088f4:	080096f8 	.word	0x080096f8

080088f8 <_init>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	bf00      	nop
 80088fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fe:	bc08      	pop	{r3}
 8008900:	469e      	mov	lr, r3
 8008902:	4770      	bx	lr

08008904 <_fini>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	bf00      	nop
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr
