
Debugging combined board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000270c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e0  080028e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028e0  080028e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e0  080028e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080028f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080028f4  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc65  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002286  00000000  00000000  0002bcde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  0002df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c43  00000000  00000000  0002efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fab  00000000  00000000  0002fbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef12  00000000  00000000  00048b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009988c  00000000  00000000  00057ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042e4  00000000  00000000  000f133c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000f5620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800282c 	.word	0x0800282c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	0800282c 	.word	0x0800282c

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fa0a 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f80a 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f8aa 	bl	800030c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001b8:	f000 f858 	bl	800026c <MX_I2C1_Init>
  MX_SUBGHZ_Init();
 80001bc:	f000 f894 	bl	80002e8 <MX_SUBGHZ_Init>
  /* USER CODE BEGIN 2 */
  LoRaGetStatus();
 80001c0:	f002 fae6 	bl	8002790 <LoRaGetStatus>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c4:	e7fe      	b.n	80001c4 <main+0x1c>
	...

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b09a      	sub	sp, #104	; 0x68
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0320 	add.w	r3, r7, #32
 80001d2:	2248      	movs	r2, #72	; 0x48
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fafc 	bl	80027d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	f107 0308 	add.w	r3, r7, #8
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
 80001ec:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80001ee:	4b1e      	ldr	r3, [pc, #120]	; (8000268 <SystemClock_Config+0xa0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001f6:	4a1c      	ldr	r2, [pc, #112]	; (8000268 <SystemClock_Config+0xa0>)
 80001f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <SystemClock_Config+0xa0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800020a:	2320      	movs	r3, #32
 800020c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000212:	2300      	movs	r3, #0
 8000214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000216:	2360      	movs	r3, #96	; 0x60
 8000218:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021a:	2300      	movs	r3, #0
 800021c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0320 	add.w	r3, r7, #32
 8000222:	4618      	mov	r0, r3
 8000224:	f001 f856 	bl	80012d4 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800022e:	f000 f8cd 	bl	80003cc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000232:	234f      	movs	r3, #79	; 0x4f
 8000234:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024a:	f107 0308 	add.w	r3, r7, #8
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fbc1 	bl	80019d8 <HAL_RCC_ClockConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800025c:	f000 f8b6 	bl	80003cc <Error_Handler>
  }
}
 8000260:	bf00      	nop
 8000262:	3768      	adds	r7, #104	; 0x68
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	58000400 	.word	0x58000400

0800026c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000272:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <MX_I2C1_Init+0x78>)
 8000274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000278:	f640 6214 	movw	r2, #3604	; 0xe14
 800027c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000286:	2201      	movs	r2, #1
 8000288:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_I2C1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MX_I2C1_Init+0x74>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002aa:	f000 fc5a 	bl	8000b62 <HAL_I2C_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b4:	f000 f88a 	bl	80003cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002b8:	2100      	movs	r1, #0
 80002ba:	4809      	ldr	r0, [pc, #36]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002bc:	f000 fce0 	bl	8000c80 <HAL_I2CEx_ConfigAnalogFilter>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002c6:	f000 f881 	bl	80003cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002ca:	2100      	movs	r1, #0
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002ce:	f000 fd21 	bl	8000d14 <HAL_I2CEx_ConfigDigitalFilter>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002d8:	f000 f878 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	40005400 	.word	0x40005400

080002e8 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_SUBGHZ_Init+0x20>)
 80002ee:	2210      	movs	r2, #16
 80002f0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_SUBGHZ_Init+0x20>)
 80002f4:	f002 f892 	bl	800241c <HAL_SUBGHZ_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80002fe:	f000 f865 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	2000007c 	.word	0x2000007c

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000320:	2002      	movs	r0, #2
 8000322:	f7ff ff29 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	2001      	movs	r0, #1
 8000328:	f7ff ff26 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032c:	2004      	movs	r0, #4
 800032e:	f7ff ff23 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SWITCH_GPIO_Port, RF_SWITCH_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000338:	4823      	ldr	r0, [pc, #140]	; (80003c8 <MX_GPIO_Init+0xbc>)
 800033a:	f000 fbfb 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800033e:	23f0      	movs	r3, #240	; 0xf0
 8000340:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000342:	2302      	movs	r3, #2
 8000344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 800034e:	230d      	movs	r3, #13
 8000350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035a:	f000 fa8b 	bl	8000874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800035e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000364:	2302      	movs	r3, #2
 8000366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2300      	movs	r3, #0
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000370:	230d      	movs	r3, #13
 8000372:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f000 fa7a 	bl	8000874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000384:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000386:	2302      	movs	r3, #2
 8000388:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_BUSY;
 8000392:	2306      	movs	r3, #6
 8000394:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f000 fa69 	bl	8000874 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_SWITCH_Pin */
  GPIO_InitStruct.Pin = RF_SWITCH_Pin;
 80003a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	2300      	movs	r3, #0
 80003b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <MX_GPIO_Init+0xbc>)
 80003ba:	f000 fa5b 	bl	8000874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003be:	bf00      	nop
 80003c0:	3718      	adds	r7, #24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	48000800 	.word	0x48000800

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>

080003d6 <LL_AHB2_GRP1_EnableClock>:
{
 80003d6:	b480      	push	{r7}
 80003d8:	b085      	sub	sp, #20
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4013      	ands	r3, r2
 80003f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003fa:	68fb      	ldr	r3, [r7, #12]
}
 80003fc:	bf00      	nop
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000406:	b480      	push	{r7}
 8000408:	b085      	sub	sp, #20
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800040e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000412:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4313      	orrs	r3, r2
 800041c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800041e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000422:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4013      	ands	r3, r2
 8000428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800042a:	68fb      	ldr	r3, [r7, #12]
}
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000436:	b480      	push	{r7}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800043e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000442:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4313      	orrs	r3, r2
 800044c:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800044e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000452:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4013      	ands	r3, r2
 8000458:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800045a:	68fb      	ldr	r3, [r7, #12]
}
 800045c:	bf00      	nop
 800045e:	3714      	adds	r7, #20
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
	...

08000474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b096      	sub	sp, #88	; 0x58
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	2238      	movs	r2, #56	; 0x38
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f002 f99d 	bl	80027d4 <memset>
  if(hi2c->Instance==I2C1)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <HAL_I2C_MspInit+0x84>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d125      	bne.n	80004f0 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004a4:	2340      	movs	r3, #64	; 0x40
 80004a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80004ac:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fe0e 	bl	80020d4 <HAL_RCCEx_PeriphCLKConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80004be:	f7ff ff85 	bl	80003cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	2002      	movs	r0, #2
 80004c4:	f7ff ff87 	bl	80003d6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004c8:	23c0      	movs	r3, #192	; 0xc0
 80004ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004cc:	2312      	movs	r3, #18
 80004ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2300      	movs	r3, #0
 80004d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004d8:	2304      	movs	r3, #4
 80004da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004e0:	4619      	mov	r1, r3
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <HAL_I2C_MspInit+0x88>)
 80004e4:	f000 f9c6 	bl	8000874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004ec:	f7ff ff8b 	bl	8000406 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3758      	adds	r7, #88	; 0x58
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40005400 	.word	0x40005400
 80004fc:	48000400 	.word	0x48000400

08000500 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000508:	2001      	movs	r0, #1
 800050a:	f7ff ff94 	bl	8000436 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051a:	e7fe      	b.n	800051a <NMI_Handler+0x4>

0800051c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <HardFault_Handler+0x4>

08000522 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <MemManage_Handler+0x4>

08000528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <BusFault_Handler+0x4>

0800052e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <UsageFault_Handler+0x4>

08000534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f88c 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000572:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000574:	f7ff fff6 	bl	8000564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059e:	f002 f921 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fe01 	bl	80001a8 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	080028e8 	.word	0x080028e8
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	20000090 	.word	0x20000090

080005c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f000 f91e 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80005d4:	f001 fbc4 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <HAL_Init+0x3c>)
 80005dc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005de:	200f      	movs	r0, #15
 80005e0:	f000 f810 	bl	8000604 <HAL_InitTick>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d002      	beq.n	80005f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	e001      	b.n	80005f4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f0:	f7ff ff39 	bl	8000466 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_InitTick+0x6c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d024      	beq.n	8000662 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000618:	f001 fba2 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 800061c:	4602      	mov	r2, r0
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_InitTick+0x6c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000628:	fbb3 f3f1 	udiv	r3, r3, r1
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f912 	bl	800085a <HAL_SYSTICK_Config>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d10f      	bne.n	800065c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b0f      	cmp	r3, #15
 8000640:	d809      	bhi.n	8000656 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000642:	2200      	movs	r2, #0
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	f04f 30ff 	mov.w	r0, #4294967295
 800064a:	f000 f8ec 	bl	8000826 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <HAL_InitTick+0x70>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	e007      	b.n	8000666 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e004      	b.n	8000666 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e001      	b.n	8000666 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000008 	.word	0x20000008
 8000674:	20000004 	.word	0x20000004

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x1c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x20>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <HAL_IncTick+0x20>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000008 	.word	0x20000008
 8000698:	20000088 	.word	0x20000088

0800069c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b02      	ldr	r3, [pc, #8]	; (80006ac <HAL_GetTick+0x10>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	20000088 	.word	0x20000088

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007dc:	d301      	bcc.n	80007e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007de:	2301      	movs	r3, #1
 80007e0:	e00f      	b.n	8000802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <SysTick_Config+0x40>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ea:	210f      	movs	r1, #15
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f7ff ff90 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <SysTick_Config+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <SysTick_Config+0x40>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	e000e010 	.word	0xe000e010

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff49 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000834:	f7ff ff60 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 8000838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	6978      	ldr	r0, [r7, #20]
 8000840:	f7ff ff92 	bl	8000768 <NVIC_EncodePriority>
 8000844:	4602      	mov	r2, r0
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff61 	bl	8000714 <__NVIC_SetPriority>
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffb2 	bl	80007cc <SysTick_Config>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000882:	e140      	b.n	8000b06 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	2101      	movs	r1, #1
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	4013      	ands	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f000 8132 	beq.w	8000b00 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f003 0303 	and.w	r3, r3, #3
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d005      	beq.n	80008b4 <HAL_GPIO_Init+0x40>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f003 0303 	and.w	r3, r3, #3
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d130      	bne.n	8000916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	2203      	movs	r2, #3
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4313      	orrs	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ea:	2201      	movs	r2, #1
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	f003 0201 	and.w	r2, r3, #1
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 0303 	and.w	r3, r3, #3
 800091e:	2b03      	cmp	r3, #3
 8000920:	d017      	beq.n	8000952 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	2203      	movs	r2, #3
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f003 0303 	and.w	r3, r3, #3
 800095a:	2b02      	cmp	r3, #2
 800095c:	d123      	bne.n	80009a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3208      	adds	r2, #8
 8000966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	220f      	movs	r2, #15
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	691a      	ldr	r2, [r3, #16]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f003 0307 	and.w	r3, r3, #7
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	08da      	lsrs	r2, r3, #3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3208      	adds	r2, #8
 80009a0:	6939      	ldr	r1, [r7, #16]
 80009a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	2203      	movs	r2, #3
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 0203 	and.w	r2, r3, #3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f000 808c 	beq.w	8000b00 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80009e8:	4a4e      	ldr	r2, [pc, #312]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	2207      	movs	r2, #7
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a12:	d00d      	beq.n	8000a30 <HAL_GPIO_Init+0x1bc>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <HAL_GPIO_Init+0x2b4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0x1b8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a43      	ldr	r2, [pc, #268]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d101      	bne.n	8000a28 <HAL_GPIO_Init+0x1b4>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e004      	b.n	8000a32 <HAL_GPIO_Init+0x1be>
 8000a28:	2307      	movs	r3, #7
 8000a2a:	e002      	b.n	8000a32 <HAL_GPIO_Init+0x1be>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e000      	b.n	8000a32 <HAL_GPIO_Init+0x1be>
 8000a30:	2300      	movs	r3, #0
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	f002 0203 	and.w	r2, r2, #3
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	4093      	lsls	r3, r2
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a42:	4938      	ldr	r1, [pc, #224]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3302      	adds	r3, #2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a50:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a74:	4a2e      	ldr	r2, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a9e:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aaa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ad8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f47f aeb7 	bne.w	8000884 <HAL_GPIO_Init+0x10>
  }
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	371c      	adds	r7, #28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40010000 	.word	0x40010000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	58000800 	.word	0x58000800

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e081      	b.n	8000c78 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d106      	bne.n	8000b8e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fc73 	bl	8000474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2224      	movs	r2, #36	; 0x24
 8000b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0201 	bic.w	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bc2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d107      	bne.n	8000bdc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	e006      	b.n	8000bea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000be8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d104      	bne.n	8000bfc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bfa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c1e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69d9      	ldr	r1, [r3, #28]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a1a      	ldr	r2, [r3, #32]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f042 0201 	orr.w	r2, r2, #1
 8000c58:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2220      	movs	r2, #32
 8000c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b20      	cmp	r3, #32
 8000c94:	d138      	bne.n	8000d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e032      	b.n	8000d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2224      	movs	r2, #36	; 0x24
 8000cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0201 	bic.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6819      	ldr	r1, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f042 0201 	orr.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e000      	b.n	8000d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000d08:	2302      	movs	r3, #2
  }
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b20      	cmp	r3, #32
 8000d28:	d139      	bne.n	8000d9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d101      	bne.n	8000d38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e033      	b.n	8000da0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2224      	movs	r2, #36	; 0x24
 8000d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0201 	bic.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f042 0201 	orr.w	r2, r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000d9e:	2302      	movs	r3, #2
  }
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	58000400 	.word	0x58000400

08000dc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_PWREx_GetVoltageRange+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	58000400 	.word	0x58000400

08000de0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000df0:	d101      	bne.n	8000df6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	58000400 	.word	0x58000400

08000e04 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e4e:	d101      	bne.n	8000e54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ea8:	d101      	bne.n	8000eae <LL_RCC_HSE_IsReady+0x18>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <LL_RCC_HSE_IsReady+0x1a>
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f02:	d101      	bne.n	8000f08 <LL_RCC_HSI_IsReady+0x18>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <LL_RCC_HSI_IsReady+0x1a>
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d101      	bne.n	8000f52 <LL_RCC_LSE_IsReady+0x18>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_RCC_LSE_IsReady+0x1a>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d101      	bne.n	8000fb4 <LL_RCC_LSI_IsReady+0x18>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <LL_RCC_LSI_IsReady+0x1a>
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6013      	str	r3, [r2, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b02      	cmp	r3, #2
 8001006:	d101      	bne.n	800100c <LL_RCC_MSI_IsReady+0x16>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_RCC_MSI_IsReady+0x18>
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800101a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b08      	cmp	r3, #8
 8001026:	d101      	bne.n	800102c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800103a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001058:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f023 0203 	bic.w	r2, r3, #3
 800109e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	608b      	str	r3, [r1, #8]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 030c 	and.w	r3, r3, #12
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	608b      	str	r3, [r1, #8]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80010f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010fe:	f023 020f 	bic.w	r2, r3, #15
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110a:	4313      	orrs	r3, r2
 800110c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800112c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4313      	orrs	r3, r2
 8001134:	608b      	str	r3, [r1, #8]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4313      	orrs	r3, r2
 800115a:	608b      	str	r3, [r1, #8]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001184:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800119a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011a8:	6013      	str	r3, [r2, #0]
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80011b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011c4:	6013      	str	r3, [r2, #0]
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011e0:	d101      	bne.n	80011e6 <LL_RCC_PLL_IsReady+0x18>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_RCC_PLL_IsReady+0x1a>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f003 0303 	and.w	r3, r3, #3
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125c:	d101      	bne.n	8001262 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001280:	d101      	bne.n	8001286 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012a2:	d101      	bne.n	80012a8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012c4:	d101      	bne.n	80012ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e36f      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e6:	f7ff fee4 	bl	80010b2 <LL_RCC_GetSysClkSource>
 80012ea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ec:	f7ff ffa2 	bl	8001234 <LL_RCC_PLL_GetMainSource>
 80012f0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80c4 	beq.w	8001488 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_RCC_OscConfig+0x3e>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	2b0c      	cmp	r3, #12
 800130a:	d176      	bne.n	80013fa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d173      	bne.n	80013fa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e353      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_OscConfig+0x68>
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800133a:	e006      	b.n	800134a <HAL_RCC_OscConfig+0x76>
 800133c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800134a:	4293      	cmp	r3, r2
 800134c:	d222      	bcs.n	8001394 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd18 	bl	8001d88 <RCC_SetFlashLatencyFromMSIRange>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e331      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe69 	bl	8001064 <LL_RCC_MSI_SetCalibTrimming>
 8001392:	e021      	b.n	80013d8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe50 	bl	8001064 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fcdd 	bl	8001d88 <RCC_SetFlashLatencyFromMSIRange>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e2f6      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80013d8:	f000 fcc2 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 80013dc:	4603      	mov	r3, r0
 80013de:	4aa7      	ldr	r2, [pc, #668]	; (800167c <HAL_RCC_OscConfig+0x3a8>)
 80013e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80013e2:	4ba7      	ldr	r3, [pc, #668]	; (8001680 <HAL_RCC_OscConfig+0x3ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f90c 	bl	8000604 <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d047      	beq.n	8001486 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80013f6:	7cfb      	ldrb	r3, [r7, #19]
 80013f8:	e2e5      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d02c      	beq.n	800145c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001402:	f7ff fddc 	bl	8000fbe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001406:	f7ff f949 	bl	800069c <HAL_GetTick>
 800140a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140e:	f7ff f945 	bl	800069c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e2d2      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001420:	f7ff fde9 	bl	8000ff6 <LL_RCC_MSI_IsReady>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f1      	beq.n	800140e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe05 	bl	8001064 <LL_RCC_MSI_SetCalibTrimming>
 800145a:	e015      	b.n	8001488 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800145c:	f7ff fdbd 	bl	8000fda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001460:	f7ff f91c 	bl	800069c <HAL_GetTick>
 8001464:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001468:	f7ff f918 	bl	800069c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e2a5      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800147a:	f7ff fdbc 	bl	8000ff6 <LL_RCC_MSI_IsReady>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f1      	bne.n	8001468 <HAL_RCC_OscConfig+0x194>
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001486:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d058      	beq.n	8001546 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b08      	cmp	r3, #8
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1d2>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	2b0c      	cmp	r3, #12
 800149e:	d108      	bne.n	80014b2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d105      	bne.n	80014b2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d14b      	bne.n	8001546 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e289      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80014b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d102      	bne.n	80014d8 <HAL_RCC_OscConfig+0x204>
 80014d2:	f7ff fcc4 	bl	8000e5e <LL_RCC_HSE_Enable>
 80014d6:	e00d      	b.n	80014f4 <HAL_RCC_OscConfig+0x220>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80014e0:	d104      	bne.n	80014ec <HAL_RCC_OscConfig+0x218>
 80014e2:	f7ff fc8f 	bl	8000e04 <LL_RCC_HSE_EnableTcxo>
 80014e6:	f7ff fcba 	bl	8000e5e <LL_RCC_HSE_Enable>
 80014ea:	e003      	b.n	80014f4 <HAL_RCC_OscConfig+0x220>
 80014ec:	f7ff fcc5 	bl	8000e7a <LL_RCC_HSE_Disable>
 80014f0:	f7ff fc96 	bl	8000e20 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d012      	beq.n	8001522 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff f8ce 	bl	800069c <HAL_GetTick>
 8001500:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff f8ca 	bl	800069c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e257      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001516:	f7ff fcbe 	bl	8000e96 <LL_RCC_HSE_IsReady>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f1      	beq.n	8001504 <HAL_RCC_OscConfig+0x230>
 8001520:	e011      	b.n	8001546 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff f8bb 	bl	800069c <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152a:	f7ff f8b7 	bl	800069c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b64      	cmp	r3, #100	; 0x64
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e244      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800153c:	f7ff fcab 	bl	8000e96 <LL_RCC_HSE_IsReady>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d046      	beq.n	80015e0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x290>
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d10e      	bne.n	800157c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e22a      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fccc 	bl	8000f12 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800157a:	e031      	b.n	80015e0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d019      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	f7ff fc98 	bl	8000eb8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff f888 	bl	800069c <HAL_GetTick>
 800158c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff f884 	bl	800069c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e211      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80015a2:	f7ff fca5 	bl	8000ef0 <LL_RCC_HSI_IsReady>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f1      	beq.n	8001590 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fcae 	bl	8000f12 <LL_RCC_HSI_SetCalibTrimming>
 80015b6:	e013      	b.n	80015e0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b8:	f7ff fc8c 	bl	8000ed4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff f86e 	bl	800069c <HAL_GetTick>
 80015c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff f86a 	bl	800069c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1f7      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80015d6:	f7ff fc8b 	bl	8000ef0 <LL_RCC_HSI_IsReady>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f1      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d06e      	beq.n	80016ca <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d056      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	429a      	cmp	r2, r3
 800160a:	d031      	beq.n	8001670 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e1d0      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d013      	beq.n	8001656 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800162e:	f7ff fca5 	bl	8000f7c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001632:	f7ff f833 	bl	800069c <HAL_GetTick>
 8001636:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff f82f 	bl	800069c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b11      	cmp	r3, #17
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1bc      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800164c:	f7ff fca6 	bl	8000f9c <LL_RCC_LSI_IsReady>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f1      	bne.n	800163a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165e:	f023 0210 	bic.w	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166a:	4313      	orrs	r3, r2
 800166c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001670:	f7ff fc74 	bl	8000f5c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff f812 	bl	800069c <HAL_GetTick>
 8001678:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800167a:	e00c      	b.n	8001696 <HAL_RCC_OscConfig+0x3c2>
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff f80a 	bl	800069c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b11      	cmp	r3, #17
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e197      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001696:	f7ff fc81 	bl	8000f9c <LL_RCC_LSI_IsReady>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f1      	beq.n	8001684 <HAL_RCC_OscConfig+0x3b0>
 80016a0:	e013      	b.n	80016ca <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a2:	f7ff fc6b 	bl	8000f7c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7fe fff9 	bl	800069c <HAL_GetTick>
 80016aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ae:	f7fe fff5 	bl	800069c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b11      	cmp	r3, #17
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e182      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80016c0:	f7ff fc6c 	bl	8000f9c <LL_RCC_LSI_IsReady>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f1      	bne.n	80016ae <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80d8 	beq.w	8001888 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80016d8:	f7ff fb82 	bl	8000de0 <LL_PWR_IsEnabledBkUpAccess>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d113      	bne.n	800170a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80016e2:	f7ff fb63 	bl	8000dac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7fe ffd9 	bl	800069c <HAL_GetTick>
 80016ea:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7fe ffd5 	bl	800069c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e162      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001700:	f7ff fb6e 	bl	8000de0 <LL_PWR_IsEnabledBkUpAccess>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f1      	beq.n	80016ee <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d07b      	beq.n	800180a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b85      	cmp	r3, #133	; 0x85
 8001718:	d003      	beq.n	8001722 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d109      	bne.n	8001736 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7fe ffb1 	bl	800069c <HAL_GetTick>
 800173a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7fe ffa3 	bl	800069c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e12e      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001768:	f7ff fbe7 	bl	8000f3a <LL_RCC_LSE_IsReady>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ef      	beq.n	8001752 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b81      	cmp	r3, #129	; 0x81
 8001778:	d003      	beq.n	8001782 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b85      	cmp	r3, #133	; 0x85
 8001780:	d121      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7fe ff8b 	bl	800069c <HAL_GetTick>
 8001786:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7fe ff7d 	bl	800069c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e108      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ec      	beq.n	800179e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80017c4:	e060      	b.n	8001888 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7fe ff69 	bl	800069c <HAL_GetTick>
 80017ca:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7fe ff5b 	bl	800069c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0e6      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ec      	bne.n	80017e2 <HAL_RCC_OscConfig+0x50e>
 8001808:	e03e      	b.n	8001888 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7fe ff47 	bl	800069c <HAL_GetTick>
 800180e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7fe ff39 	bl	800069c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0c4      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ec      	bne.n	8001826 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7fe ff26 	bl	800069c <HAL_GetTick>
 8001850:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7fe ff18 	bl	800069c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0a3      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800187e:	f7ff fb5c 	bl	8000f3a <LL_RCC_LSE_IsReady>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ef      	bne.n	8001868 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8099 	beq.w	80019c4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d06c      	beq.n	8001972 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	2b02      	cmp	r3, #2
 800189e:	d14b      	bne.n	8001938 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	f7ff fc87 	bl	80011b2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7fe fefa 	bl	800069c <HAL_GetTick>
 80018a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7fe fef6 	bl	800069c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e083      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80018be:	f7ff fc86 	bl	80011ce <LL_RCC_PLL_IsReady>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f1      	bne.n	80018ac <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <HAL_RCC_OscConfig+0x6fc>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e0:	0212      	lsls	r2, r2, #8
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018e8:	4311      	orrs	r1, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018f4:	430a      	orrs	r2, r1
 80018f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fe:	f7ff fc4a 	bl	8001196 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7fe fec3 	bl	800069c <HAL_GetTick>
 8001916:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191a:	f7fe febf 	bl	800069c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b0a      	cmp	r3, #10
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e04c      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800192c:	f7ff fc4f 	bl	80011ce <LL_RCC_PLL_IsReady>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f1      	beq.n	800191a <HAL_RCC_OscConfig+0x646>
 8001936:	e045      	b.n	80019c4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	f7ff fc3b 	bl	80011b2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7fe feae 	bl	800069c <HAL_GetTick>
 8001940:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7fe feaa 	bl	800069c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e037      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001956:	f7ff fc3a 	bl	80011ce <LL_RCC_PLL_IsReady>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f1      	bne.n	8001944 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_OscConfig+0x700>)
 800196c:	4013      	ands	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e028      	b.n	80019c4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e023      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	429a      	cmp	r2, r3
 8001992:	d115      	bne.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10e      	bne.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	11c1808c 	.word	0x11c1808c
 80019d4:	eefefffc 	.word	0xeefefffc

080019d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e10f      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <HAL_RCC_ClockConfig+0x23c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d91b      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b86      	ldr	r3, [pc, #536]	; (8001c14 <HAL_RCC_ClockConfig+0x23c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4984      	ldr	r1, [pc, #528]	; (8001c14 <HAL_RCC_ClockConfig+0x23c>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0a:	f7fe fe47 	bl	800069c <HAL_GetTick>
 8001a0e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a12:	f7fe fe43 	bl	800069c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0f3      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a24:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <HAL_RCC_ClockConfig+0x23c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d1ef      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fb40 	bl	80010c8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a48:	f7fe fe28 	bl	800069c <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a50:	f7fe fe24 	bl	800069c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0d4      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a62:	f7ff fbf2 	bl	800124a <LL_RCC_IsActiveFlag_HPRE>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f1      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d016      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fb36 	bl	80010ee <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a82:	f7fe fe0b 	bl	800069c <HAL_GetTick>
 8001a86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a8a:	f7fe fe07 	bl	800069c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0b7      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a9c:	f7ff fbe6 	bl	800126c <LL_RCC_IsActiveFlag_SHDHPRE>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f1      	beq.n	8001a8a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d016      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb2f 	bl	800111a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001abc:	f7fe fdee 	bl	800069c <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ac4:	f7fe fdea 	bl	800069c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e09a      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ad6:	f7ff fbdb 	bl	8001290 <LL_RCC_IsActiveFlag_PPRE1>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f1      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d017      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fb24 	bl	8001140 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001af8:	f7fe fdd0 	bl	800069c <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b00:	f7fe fdcc 	bl	800069c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e07c      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b12:	f7ff fbce 	bl	80012b2 <LL_RCC_IsActiveFlag_PPRE2>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f1      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d043      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b30:	f7ff f9b1 	bl	8000e96 <LL_RCC_HSE_IsReady>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d11e      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e066      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b46:	f7ff fb42 	bl	80011ce <LL_RCC_PLL_IsReady>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d113      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e05b      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b5c:	f7ff fa4b 	bl	8000ff6 <LL_RCC_MSI_IsReady>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e050      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b6a:	f7ff f9c1 	bl	8000ef0 <LL_RCC_HSI_IsReady>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e049      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fa85 	bl	800108c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b82:	f7fe fd8b 	bl	800069c <HAL_GetTick>
 8001b86:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f7fe fd87 	bl	800069c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e035      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba0:	f7ff fa87 	bl	80010b2 <LL_RCC_GetSysClkSource>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1ec      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_RCC_ClockConfig+0x23c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d21b      	bcs.n	8001bf6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_RCC_ClockConfig+0x23c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4913      	ldr	r1, [pc, #76]	; (8001c14 <HAL_RCC_ClockConfig+0x23c>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bce:	f7fe fd65 	bl	800069c <HAL_GetTick>
 8001bd2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001bd6:	f7fe fd61 	bl	800069c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e011      	b.n	8001c0c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x23c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d1ef      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bf6:	f000 f8b3 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_RCC_ClockConfig+0x240>)
 8001bfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_ClockConfig+0x244>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fcfd 	bl	8000604 <HAL_InitTick>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	58004000 	.word	0x58004000
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	f7ff fa40 	bl	80010b2 <LL_RCC_GetSysClkSource>
 8001c32:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c34:	f7ff fafe 	bl	8001234 <LL_RCC_PLL_GetMainSource>
 8001c38:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x2c>
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d139      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d136      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001c4c:	f7ff f9e3 	bl	8001016 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x62>
 8001c56:	f7ff f9de 	bl	8001016 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x4e>
 8001c60:	f7ff f9e9 	bl	8001036 <LL_RCC_MSI_GetRange>
 8001c64:	4603      	mov	r3, r0
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	e005      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x5a>
 8001c6e:	f7ff f9ed 	bl	800104c <LL_RCC_MSI_GetRangeAfterStandby>
 8001c72:	4603      	mov	r3, r0
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x134>)
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	e014      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x8c>
 8001c82:	f7ff f9c8 	bl	8001016 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x7a>
 8001c8c:	f7ff f9d3 	bl	8001036 <LL_RCC_MSI_GetRange>
 8001c90:	4603      	mov	r3, r0
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	e005      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x86>
 8001c9a:	f7ff f9d7 	bl	800104c <LL_RCC_MSI_GetRangeAfterStandby>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x134>)
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d115      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cb8:	e012      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e00c      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d109      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001ccc:	f7ff f8b6 	bl	8000e3c <LL_RCC_HSE_IsEnabledDiv2>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e001      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cde:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce0:	f7ff f9e7 	bl	80010b2 <LL_RCC_GetSysClkSource>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d12f      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001cea:	f7ff faa3 	bl	8001234 <LL_RCC_PLL_GetMainSource>
 8001cee:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0xde>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d003      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0xe4>
 8001cfc:	e00d      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d00:	60fb      	str	r3, [r7, #12]
        break;
 8001d02:	e00d      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d04:	f7ff f89a 	bl	8000e3c <LL_RCC_HSE_IsEnabledDiv2>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d10:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001d12:	e005      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d16:	60fb      	str	r3, [r7, #12]
        break;
 8001d18:	e002      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	60fb      	str	r3, [r7, #12]
        break;
 8001d1e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001d20:	f7ff fa66 	bl	80011f0 <LL_RCC_PLL_GetN>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	fb03 f402 	mul.w	r4, r3, r2
 8001d2c:	f7ff fa77 	bl	800121e <LL_RCC_PLL_GetDivider>
 8001d30:	4603      	mov	r3, r0
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	3301      	adds	r3, #1
 8001d36:	fbb4 f4f3 	udiv	r4, r4, r3
 8001d3a:	f7ff fa65 	bl	8001208 <LL_RCC_PLL_GetR>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	0f5b      	lsrs	r3, r3, #29
 8001d42:	3301      	adds	r3, #1
 8001d44:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d48:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001d4a:	697b      	ldr	r3, [r7, #20]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	080028a0 	.word	0x080028a0
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	01e84800 	.word	0x01e84800

08001d60 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b598      	push	{r3, r4, r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d64:	f7ff ff5c 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001d68:	4604      	mov	r4, r0
 8001d6a:	f7ff f9fc 	bl	8001166 <LL_RCC_GetAHBPrescaler>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x24>)
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd98      	pop	{r3, r4, r7, pc}
 8001d84:	08002860 	.word	0x08002860

08001d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001da0:	f7ff f9ec 	bl	800117c <LL_RCC_GetAHB3Prescaler>
 8001da4:	4603      	mov	r3, r0
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9c      	lsrs	r4, r3, #18
 8001dc4:	f7ff f800 	bl	8000dc8 <HAL_PWREx_GetVoltageRange>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f000 f80b 	bl	8001de8 <RCC_SetFlashLatency>
 8001dd2:	4603      	mov	r3, r0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	080028a0 	.word	0x080028a0
 8001de0:	08002860 	.word	0x08002860
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08e      	sub	sp, #56	; 0x38
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001df2:	4a3a      	ldr	r2, [pc, #232]	; (8001edc <RCC_SetFlashLatency+0xf4>)
 8001df4:	f107 0320 	add.w	r3, r7, #32
 8001df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dfc:	6018      	str	r0, [r3, #0]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001e02:	4a37      	ldr	r2, [pc, #220]	; (8001ee0 <RCC_SetFlashLatency+0xf8>)
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e0c:	6018      	str	r0, [r3, #0]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001e12:	4a34      	ldr	r2, [pc, #208]	; (8001ee4 <RCC_SetFlashLatency+0xfc>)
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e28:	d11b      	bne.n	8001e62 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2e:	e014      	b.n	8001e5a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	3338      	adds	r3, #56	; 0x38
 8001e36:	443b      	add	r3, r7
 8001e38:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d807      	bhi.n	8001e54 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	3338      	adds	r3, #56	; 0x38
 8001e4a:	443b      	add	r3, r7
 8001e4c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e52:	e021      	b.n	8001e98 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	3301      	adds	r3, #1
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d9e7      	bls.n	8001e30 <RCC_SetFlashLatency+0x48>
 8001e60:	e01a      	b.n	8001e98 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e66:	e014      	b.n	8001e92 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	3338      	adds	r3, #56	; 0x38
 8001e6e:	443b      	add	r3, r7
 8001e70:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d807      	bhi.n	8001e8c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	3338      	adds	r3, #56	; 0x38
 8001e82:	443b      	add	r3, r7
 8001e84:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e8a:	e005      	b.n	8001e98 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	3301      	adds	r3, #1
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d9e7      	bls.n	8001e68 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <RCC_SetFlashLatency+0x100>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4911      	ldr	r1, [pc, #68]	; (8001ee8 <RCC_SetFlashLatency+0x100>)
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ea8:	f7fe fbf8 	bl	800069c <HAL_GetTick>
 8001eac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001eae:	e008      	b.n	8001ec2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001eb0:	f7fe fbf4 	bl	800069c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e007      	b.n	8001ed2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <RCC_SetFlashLatency+0x100>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d1ef      	bne.n	8001eb0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3738      	adds	r7, #56	; 0x38
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	08002844 	.word	0x08002844
 8001ee0:	0800284c 	.word	0x0800284c
 8001ee4:	08002854 	.word	0x08002854
 8001ee8:	58004000 	.word	0x58004000

08001eec <LL_RCC_LSE_IsReady>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d101      	bne.n	8001f04 <LL_RCC_LSE_IsReady+0x18>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <LL_RCC_LSE_IsReady+0x1a>
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <LL_RCC_SetUSARTClockSource>:
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8001f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	0c1b      	lsrs	r3, r3, #16
 8001f22:	43db      	mvns	r3, r3
 8001f24:	401a      	ands	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <LL_RCC_SetI2SClockSource>:
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <LL_RCC_SetLPUARTClockSource>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_SetI2CClockSource>:
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001faa:	43db      	mvns	r3, r3
 8001fac:	401a      	ands	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <LL_RCC_SetLPTIMClockSource>:
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	041b      	lsls	r3, r3, #16
 8001fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <LL_RCC_SetRNGClockSource>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <LL_RCC_SetADCClockSource>:
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800203a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <LL_RCC_SetRTCClockSource>:
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <LL_RCC_GetRTCClockSource>:
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800207e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <LL_RCC_ForceBackupDomainReset>:
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80020e0:	2300      	movs	r3, #0
 80020e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d058      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80020f4:	f7fe fe5a 	bl	8000dac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fad0 	bl	800069c <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80020fe:	e009      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7fe facc 	bl	800069c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d902      	bls.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	74fb      	strb	r3, [r7, #19]
        break;
 8002112:	e006      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002114:	4b7b      	ldr	r3, [pc, #492]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002120:	d1ee      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d13c      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002128:	f7ff ffa7 	bl	800207a <LL_RCC_GetRTCClockSource>
 800212c:	4602      	mov	r2, r0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002132:	429a      	cmp	r2, r3
 8002134:	d00f      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002144:	f7ff ffa5 	bl	8002092 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002148:	f7ff ffb3 	bl	80020b2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800214c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d014      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe fa9c 	bl	800069c <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002166:	e00b      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7fe fa98 	bl	800069c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d902      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	74fb      	strb	r3, [r7, #19]
            break;
 800217e:	e004      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002180:	f7ff feb4 	bl	8001eec <LL_RCC_LSE_IsReady>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d1ee      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff5b 	bl	8002050 <LL_RCC_SetRTCClockSource>
 800219a:	e004      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
 80021a0:	e001      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fea9 	bl	8001f0e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fe9e 	bl	8001f0e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fec0 	bl	8001f68 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fee6 	bl	8001fca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fedb 	bl	8001fca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fed0 	bl	8001fca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fea9 	bl	8001f92 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fe9e 	bl	8001f92 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fe93 	bl	8001f92 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d011      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fe5e 	bl	8001f3e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228a:	d107      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fea5 	bl	8001ffc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d107      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d011      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fea3 	bl	8002026 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e8:	d107      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80022fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	58000400 	.word	0x58000400

08002308 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002318:	4904      	ldr	r1, [pc, #16]	; (800232c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	58000400 	.word	0x58000400

08002330 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800233c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	58000400 	.word	0x58000400

08002350 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800235a:	619a      	str	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	58000400 	.word	0x58000400

08002368 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d101      	bne.n	800237c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	58000400 	.word	0x58000400

0800238c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d101      	bne.n	80023a0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	58000400 	.word	0x58000400

080023b0 <LL_RCC_RF_DisableReset>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_RCC_IsRFUnderReset>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e4:	d101      	bne.n	80023ea <LL_RCC_IsRFUnderReset+0x1a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_RCC_IsRFUnderReset+0x1c>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <LL_EXTI_EnableIT_32_63+0x24>)
 80023fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002402:	4905      	ldr	r1, [pc, #20]	; (8002418 <LL_EXTI_EnableIT_32_63+0x24>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	58000800 	.word	0x58000800

0800241c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
    return status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	e052      	b.n	80024d8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	799b      	ldrb	r3, [r3, #6]
 800243a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800243c:	7bbb      	ldrb	r3, [r7, #14]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_SUBGHZ_Init+0x2c>
 8002442:	7bbb      	ldrb	r3, [r7, #14]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d109      	bne.n	800245c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe f856 	bl	8000500 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002454:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002458:	f7ff ffcc 	bl	80023f4 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d126      	bne.n	80024b0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002468:	f7ff ffa2 	bl	80023b0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <HAL_SUBGHZ_Init+0xc4>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	0cdb      	lsrs	r3, r3, #19
 800247a:	2264      	movs	r2, #100	; 0x64
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	609a      	str	r2, [r3, #8]
        break;
 8002492:	e007      	b.n	80024a4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3b01      	subs	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800249a:	f7ff ff99 	bl	80023d0 <LL_RCC_IsRFUnderReset>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ee      	bne.n	8002482 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80024a4:	f7ff ff44 	bl	8002330 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80024a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024ac:	f7ff ff2c 	bl	8002308 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80024b0:	f7ff ff4e 	bl	8002350 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f810 	bl	80024e4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	719a      	strb	r2, [r3, #6]

  return status;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000000 	.word	0x20000000

080024e4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <SUBGHZSPI_Init+0x3c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <SUBGHZSPI_Init+0x3c>)
 80024f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80024f8:	4a09      	ldr	r2, [pc, #36]	; (8002520 <SUBGHZSPI_Init+0x3c>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8002500:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <SUBGHZSPI_Init+0x3c>)
 8002504:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8002508:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SUBGHZSPI_Init+0x3c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <SUBGHZSPI_Init+0x3c>)
 8002510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	58010000 	.word	0x58010000

08002524 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <SUBGHZSPI_Transmit+0xa0>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	0cdb      	lsrs	r3, r3, #19
 8002542:	2264      	movs	r2, #100	; 0x64
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	609a      	str	r2, [r3, #8]
      break;
 800255a:	e008      	b.n	800256e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3b01      	subs	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <SUBGHZSPI_Transmit+0xa4>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d1ed      	bne.n	800254a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <SUBGHZSPI_Transmit+0xa8>)
 8002570:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <SUBGHZSPI_Transmit+0xa0>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	0cdb      	lsrs	r3, r3, #19
 8002586:	2264      	movs	r2, #100	; 0x64
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	609a      	str	r2, [r3, #8]
      break;
 800259e:	e008      	b.n	80025b2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <SUBGHZSPI_Transmit+0xa4>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d1ed      	bne.n	800258e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SUBGHZSPI_Transmit+0xa4>)
 80025b4:	68db      	ldr	r3, [r3, #12]

  return status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000000 	.word	0x20000000
 80025c8:	58010000 	.word	0x58010000
 80025cc:	5801000c 	.word	0x5801000c

080025d0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <SUBGHZSPI_Receive+0xa4>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	0cdb      	lsrs	r3, r3, #19
 80025ec:	2264      	movs	r2, #100	; 0x64
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	609a      	str	r2, [r3, #8]
      break;
 8002604:	e008      	b.n	8002618 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3b01      	subs	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <SUBGHZSPI_Receive+0xa8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b02      	cmp	r3, #2
 8002616:	d1ed      	bne.n	80025f4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <SUBGHZSPI_Receive+0xac>)
 800261a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <SUBGHZSPI_Receive+0xa4>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	0cdb      	lsrs	r3, r3, #19
 8002630:	2264      	movs	r2, #100	; 0x64
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	609a      	str	r2, [r3, #8]
      break;
 8002648:	e008      	b.n	800265c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3b01      	subs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <SUBGHZSPI_Receive+0xa8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d1ed      	bne.n	8002638 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <SUBGHZSPI_Receive+0xa8>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	701a      	strb	r2, [r3, #0]

  return status;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
}
 8002668:	4618      	mov	r0, r3
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000000 	.word	0x20000000
 8002678:	58010000 	.word	0x58010000
 800267c:	5801000c 	.word	0x5801000c

08002680 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <SUBGHZ_WaitOnBusy+0x58>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	0d1b      	lsrs	r3, r3, #20
 800269a:	2264      	movs	r2, #100	; 0x64
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80026a2:	f7ff fe73 	bl	800238c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80026a6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	609a      	str	r2, [r3, #8]
      break;
 80026b8:	e009      	b.n	80026ce <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80026c0:	f7ff fe52 	bl	8002368 <LL_PWR_IsActiveFlag_RFBUSYS>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d0e9      	beq.n	80026a2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000000 	.word	0x20000000

080026dc <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]

	SUBGHZ_WaitOnBusy(hspi);
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <WaitWhileBusy+0x20>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ffc8 	bl	8002680 <SUBGHZ_WaitOnBusy>

	return(LoRa_OK);
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000008c 	.word	0x2000008c

08002700 <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
	int x;

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 8002710:	200a      	movs	r0, #10
 8002712:	f7ff ffe3 	bl	80026dc <WaitWhileBusy>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 800271c:	2301      	movs	r3, #1
 800271e:	e013      	b.n	8002748 <SPI_Send+0x48>
	}
	for(x=0; x < numBytes; x++)
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e00b      	b.n	800273e <SPI_Send+0x3e>
	{
		SUBGHZSPI_Transmit(hspi, buffer[x]);
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <SPI_Send+0x50>)
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	4619      	mov	r1, r3
 8002734:	f7ff fef6 	bl	8002524 <SUBGHZSPI_Transmit>
	for(x=0; x < numBytes; x++)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3301      	adds	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	429a      	cmp	r2, r3
 8002744:	dbef      	blt.n	8002726 <SPI_Send+0x26>
	}

	return(LoRa_OK);
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	2000008c 	.word	0x2000008c

08002754 <SPI_Receive>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Receive(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 8002764:	200a      	movs	r0, #10
 8002766:	f7ff ffb9 	bl	80026dc <WaitWhileBusy>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <SPI_Receive+0x20>
	{
		return(LoRa_ERROR);
 8002770:	2301      	movs	r3, #1
 8002772:	e006      	b.n	8002782 <SPI_Receive+0x2e>
	}

	SUBGHZSPI_Receive(hspi, buffer);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SPI_Receive+0x38>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff28 	bl	80025d0 <SUBGHZSPI_Receive>

	return(LoRa_OK);
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000008c 	.word	0x2000008c

08002790 <LoRaGetStatus>:
 * Return Value
 *  Status byte or 0xFF for error
 *  Status byte defined in SX1262 datasheet
 */
uint8_t LoRaGetStatus(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
	/* Return the status byte from the SX1262 chip */
	uint8_t status = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	71fb      	strb	r3, [r7, #7]
	uint8_t opcode = LORA_GET_STATUS_OPCODE;
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	71bb      	strb	r3, [r7, #6]

	if(SPI_Send(&opcode, 1, true) != LoRa_OK)
 800279e:	1dbb      	adds	r3, r7, #6
 80027a0:	2201      	movs	r2, #1
 80027a2:	2101      	movs	r1, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ffab 	bl	8002700 <SPI_Send>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <LoRaGetStatus+0x24>
	{
		return(LoRa_ERROR);
 80027b0:	2301      	movs	r3, #1
 80027b2:	e00b      	b.n	80027cc <LoRaGetStatus+0x3c>
	}

	if(SPI_Receive(&status, 1, false) != LoRa_OK)
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	2200      	movs	r2, #0
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ffca 	bl	8002754 <SPI_Receive>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <LoRaGetStatus+0x3a>
	{
		return(LoRa_ERROR);
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LoRaGetStatus+0x3c>
	}

	return(status);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <memset>:
 80027d4:	4402      	add	r2, r0
 80027d6:	4603      	mov	r3, r0
 80027d8:	4293      	cmp	r3, r2
 80027da:	d100      	bne.n	80027de <memset+0xa>
 80027dc:	4770      	bx	lr
 80027de:	f803 1b01 	strb.w	r1, [r3], #1
 80027e2:	e7f9      	b.n	80027d8 <memset+0x4>

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4d0d      	ldr	r5, [pc, #52]	; (800281c <__libc_init_array+0x38>)
 80027e8:	4c0d      	ldr	r4, [pc, #52]	; (8002820 <__libc_init_array+0x3c>)
 80027ea:	1b64      	subs	r4, r4, r5
 80027ec:	10a4      	asrs	r4, r4, #2
 80027ee:	2600      	movs	r6, #0
 80027f0:	42a6      	cmp	r6, r4
 80027f2:	d109      	bne.n	8002808 <__libc_init_array+0x24>
 80027f4:	4d0b      	ldr	r5, [pc, #44]	; (8002824 <__libc_init_array+0x40>)
 80027f6:	4c0c      	ldr	r4, [pc, #48]	; (8002828 <__libc_init_array+0x44>)
 80027f8:	f000 f818 	bl	800282c <_init>
 80027fc:	1b64      	subs	r4, r4, r5
 80027fe:	10a4      	asrs	r4, r4, #2
 8002800:	2600      	movs	r6, #0
 8002802:	42a6      	cmp	r6, r4
 8002804:	d105      	bne.n	8002812 <__libc_init_array+0x2e>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	f855 3b04 	ldr.w	r3, [r5], #4
 800280c:	4798      	blx	r3
 800280e:	3601      	adds	r6, #1
 8002810:	e7ee      	b.n	80027f0 <__libc_init_array+0xc>
 8002812:	f855 3b04 	ldr.w	r3, [r5], #4
 8002816:	4798      	blx	r3
 8002818:	3601      	adds	r6, #1
 800281a:	e7f2      	b.n	8002802 <__libc_init_array+0x1e>
 800281c:	080028e0 	.word	0x080028e0
 8002820:	080028e0 	.word	0x080028e0
 8002824:	080028e0 	.word	0x080028e0
 8002828:	080028e4 	.word	0x080028e4

0800282c <_init>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr

08002838 <_fini>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr
