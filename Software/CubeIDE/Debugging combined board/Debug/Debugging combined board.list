
Debugging combined board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002830  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002968  08002968  00012968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a04  08002a04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a04  08002a04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a04  08002a04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002a18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002a18  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c012  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022d1  00000000  00000000  0002c08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  0002e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c49  00000000  00000000  0002f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fab  00000000  00000000  0002fff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef58  00000000  00000000  00048fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099870  00000000  00000000  00057efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004304  00000000  00000000  000f176c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000f5a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08002950 	.word	0x08002950

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08002950 	.word	0x08002950

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fa0c 	bl	80005c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f80c 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f8ac 	bl	8000310 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001b8:	f000 f85a 	bl	8000270 <MX_I2C1_Init>
  MX_SUBGHZ_Init();
 80001bc:	f000 f896 	bl	80002ec <MX_SUBGHZ_Init>
  /* USER CODE BEGIN 2 */
  LoRa_Init(&hsubghz);
 80001c0:	4801      	ldr	r0, [pc, #4]	; (80001c8 <main+0x20>)
 80001c2:	f002 facf 	bl	8002764 <LoRa_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c6:	e7fe      	b.n	80001c6 <main+0x1e>
 80001c8:	2000007c 	.word	0x2000007c

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b09a      	sub	sp, #104	; 0x68
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0320 	add.w	r3, r7, #32
 80001d6:	2248      	movs	r2, #72	; 0x48
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 fb8c 	bl	80028f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	f107 0308 	add.w	r3, r7, #8
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
 80001f0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80001f2:	4b1e      	ldr	r3, [pc, #120]	; (800026c <SystemClock_Config+0xa0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001fa:	4a1c      	ldr	r2, [pc, #112]	; (800026c <SystemClock_Config+0xa0>)
 80001fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000200:	6013      	str	r3, [r2, #0]
 8000202:	4b1a      	ldr	r3, [pc, #104]	; (800026c <SystemClock_Config+0xa0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800020e:	2320      	movs	r3, #32
 8000210:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000216:	2300      	movs	r3, #0
 8000218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800021a:	2360      	movs	r3, #96	; 0x60
 800021c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021e:	2300      	movs	r3, #0
 8000220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0320 	add.w	r3, r7, #32
 8000226:	4618      	mov	r0, r3
 8000228:	f001 f87a 	bl	8001320 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000232:	f000 f8cd 	bl	80003d0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000236:	234f      	movs	r3, #79	; 0x4f
 8000238:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f001 fbe5 	bl	8001a24 <HAL_RCC_ClockConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000260:	f000 f8b6 	bl	80003d0 <Error_Handler>
  }
}
 8000264:	bf00      	nop
 8000266:	3768      	adds	r7, #104	; 0x68
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	58000400 	.word	0x58000400

08000270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <MX_I2C1_Init+0x74>)
 8000276:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <MX_I2C1_Init+0x78>)
 8000278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800027a:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <MX_I2C1_Init+0x74>)
 800027c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000280:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <MX_I2C1_Init+0x74>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <MX_I2C1_Init+0x74>)
 800028a:	2201      	movs	r2, #1
 800028c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_I2C1_Init+0x74>)
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <MX_I2C1_Init+0x74>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <MX_I2C1_Init+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_I2C1_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_I2C1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <MX_I2C1_Init+0x74>)
 80002ae:	f000 fc7e 	bl	8000bae <HAL_I2C_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b8:	f000 f88a 	bl	80003d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002bc:	2100      	movs	r1, #0
 80002be:	4809      	ldr	r0, [pc, #36]	; (80002e4 <MX_I2C1_Init+0x74>)
 80002c0:	f000 fd04 	bl	8000ccc <HAL_I2CEx_ConfigAnalogFilter>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002ca:	f000 f881 	bl	80003d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002ce:	2100      	movs	r1, #0
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <MX_I2C1_Init+0x74>)
 80002d2:	f000 fd45 	bl	8000d60 <HAL_I2CEx_ConfigDigitalFilter>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002dc:	f000 f878 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000028 	.word	0x20000028
 80002e8:	40005400 	.word	0x40005400

080002ec <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_SUBGHZ_Init+0x20>)
 80002f2:	2210      	movs	r2, #16
 80002f4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_SUBGHZ_Init+0x20>)
 80002f8:	f002 f8b6 	bl	8002468 <HAL_SUBGHZ_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000302:	f000 f865 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000007c 	.word	0x2000007c

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000324:	2002      	movs	r0, #2
 8000326:	f7ff ff27 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	2001      	movs	r0, #1
 800032c:	f7ff ff24 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000330:	2004      	movs	r0, #4
 8000332:	f7ff ff21 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SWITCH_GPIO_Port, RF_SWITCH_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	4823      	ldr	r0, [pc, #140]	; (80003cc <MX_GPIO_Init+0xbc>)
 800033e:	f000 fc1f 	bl	8000b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000342:	23f0      	movs	r3, #240	; 0xf0
 8000344:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 8000352:	230d      	movs	r3, #13
 8000354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f000 faaf 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000368:	2302      	movs	r3, #2
 800036a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000374:	230d      	movs	r3, #13
 8000376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4619      	mov	r1, r3
 800037c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000380:	f000 fa9e 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800038a:	2302      	movs	r3, #2
 800038c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_BUSY;
 8000396:	2306      	movs	r3, #6
 8000398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f000 fa8d 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_SWITCH_Pin */
  GPIO_InitStruct.Pin = RF_SWITCH_Pin;
 80003a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <MX_GPIO_Init+0xbc>)
 80003be:	f000 fa7f 	bl	80008c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003c2:	bf00      	nop
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	48000800 	.word	0x48000800

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <Error_Handler+0x8>

080003da <LL_AHB2_GRP1_EnableClock>:
{
 80003da:	b480      	push	{r7}
 80003dc:	b085      	sub	sp, #20
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4313      	orrs	r3, r2
 80003f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4013      	ands	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800040a:	b480      	push	{r7}
 800040c:	b085      	sub	sp, #20
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000416:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4313      	orrs	r3, r2
 8000420:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000426:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4013      	ands	r3, r2
 800042c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800042e:	68fb      	ldr	r3, [r7, #12]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000446:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4313      	orrs	r3, r2
 8000450:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000456:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4013      	ands	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
	...

08000478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b096      	sub	sp, #88	; 0x58
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	2238      	movs	r2, #56	; 0x38
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f002 fa2d 	bl	80028f8 <memset>
  if(hi2c->Instance==I2C1)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a16      	ldr	r2, [pc, #88]	; (80004fc <HAL_I2C_MspInit+0x84>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d125      	bne.n	80004f4 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004ac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80004b0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 fe32 	bl	8002120 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80004c2:	f7ff ff85 	bl	80003d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	2002      	movs	r0, #2
 80004c8:	f7ff ff87 	bl	80003da <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004cc:	23c0      	movs	r3, #192	; 0xc0
 80004ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004d0:	2312      	movs	r3, #18
 80004d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004dc:	2304      	movs	r3, #4
 80004de:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	; (8000500 <HAL_I2C_MspInit+0x88>)
 80004e8:	f000 f9ea 	bl	80008c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ec:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004f0:	f7ff ff8b 	bl	800040a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3758      	adds	r7, #88	; 0x58
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40005400 	.word	0x40005400
 8000500:	48000400 	.word	0x48000400

08000504 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff ff94 	bl	800043a <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051e:	e7fe      	b.n	800051e <NMI_Handler+0x4>

08000520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <HardFault_Handler+0x4>

08000526 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <MemManage_Handler+0x4>

0800052c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <BusFault_Handler+0x4>

08000532 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <UsageFault_Handler+0x4>

08000538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f88c 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000576:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000578:	f7ff fff6 	bl	8000568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	; (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a2:	f002 f9b1 	bl	8002908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff fdff 	bl	80001a8 <main>

080005aa <LoopForever>:

LoopForever:
    b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   r0, =_estack
 80005ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b8:	08002a0c 	.word	0x08002a0c
  ldr r2, =_sbss
 80005bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c0:	20000090 	.word	0x20000090

080005c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC_IRQHandler>
	...

080005c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d2:	2003      	movs	r0, #3
 80005d4:	f000 f942 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80005d8:	f001 fbe8 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a09      	ldr	r2, [pc, #36]	; (8000604 <HAL_Init+0x3c>)
 80005e0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e2:	200f      	movs	r0, #15
 80005e4:	f000 f810 	bl	8000608 <HAL_InitTick>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	e001      	b.n	80005f8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f4:	f7ff ff39 	bl	800046a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HAL_InitTick+0x6c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d024      	beq.n	8000666 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800061c:	f001 fbc6 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8000620:	4602      	mov	r2, r0
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <HAL_InitTick+0x6c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000630:	fbb2 f3f3 	udiv	r3, r2, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f936 	bl	80008a6 <HAL_SYSTICK_Config>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10f      	bne.n	8000660 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b0f      	cmp	r3, #15
 8000644:	d809      	bhi.n	800065a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000646:	2200      	movs	r2, #0
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	f000 f910 	bl	8000872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000652:	4a09      	ldr	r2, [pc, #36]	; (8000678 <HAL_InitTick+0x70>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	e007      	b.n	800066a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	e004      	b.n	800066a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e001      	b.n	800066a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800066a:	7bfb      	ldrb	r3, [r7, #15]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <HAL_IncTick+0x20>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000008 	.word	0x20000008
 800069c:	20000088 	.word	0x20000088

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000088 	.word	0x20000088

080006b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006bc:	f7ff fff0 	bl	80006a0 <HAL_GetTick>
 80006c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006cc:	d005      	beq.n	80006da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_Delay+0x44>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4413      	add	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006da:	bf00      	nop
 80006dc:	f7ff ffe0 	bl	80006a0 <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d8f7      	bhi.n	80006dc <HAL_Delay+0x28>
  {
  }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	60d3      	str	r3, [r2, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f7ff ff90 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff49 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff60 	bl	8000744 <__NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff92 	bl	80007b4 <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff61 	bl	8000760 <__NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffb2 	bl	8000818 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ce:	e140      	b.n	8000b52 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	2101      	movs	r1, #1
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f000 8132 	beq.w	8000b4c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d005      	beq.n	8000900 <HAL_GPIO_Init+0x40>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d130      	bne.n	8000962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000936:	2201      	movs	r2, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	091b      	lsrs	r3, r3, #4
 800094c:	f003 0201 	and.w	r2, r3, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	2b03      	cmp	r3, #3
 800096c:	d017      	beq.n	800099e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	2203      	movs	r2, #3
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d123      	bne.n	80009f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	08da      	lsrs	r2, r3, #3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3208      	adds	r2, #8
 80009b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	691a      	ldr	r2, [r3, #16]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f003 0307 	and.w	r3, r3, #7
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	08da      	lsrs	r2, r3, #3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3208      	adds	r2, #8
 80009ec:	6939      	ldr	r1, [r7, #16]
 80009ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2203      	movs	r2, #3
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0203 	and.w	r2, r3, #3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 808c 	beq.w	8000b4c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a34:	4a4e      	ldr	r2, [pc, #312]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	089b      	lsrs	r3, r3, #2
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f003 0303 	and.w	r3, r3, #3
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a5e:	d00d      	beq.n	8000a7c <HAL_GPIO_Init+0x1bc>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a44      	ldr	r2, [pc, #272]	; (8000b74 <HAL_GPIO_Init+0x2b4>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d007      	beq.n	8000a78 <HAL_GPIO_Init+0x1b8>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a43      	ldr	r2, [pc, #268]	; (8000b78 <HAL_GPIO_Init+0x2b8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d101      	bne.n	8000a74 <HAL_GPIO_Init+0x1b4>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e004      	b.n	8000a7e <HAL_GPIO_Init+0x1be>
 8000a74:	2307      	movs	r3, #7
 8000a76:	e002      	b.n	8000a7e <HAL_GPIO_Init+0x1be>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <HAL_GPIO_Init+0x1be>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	f002 0203 	and.w	r2, r2, #3
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	4093      	lsls	r3, r2
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a8e:	4938      	ldr	r1, [pc, #224]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	3302      	adds	r3, #2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ac0:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000af6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000b16:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b24:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f47f aeb7 	bne.w	80008d0 <HAL_GPIO_Init+0x10>
  }
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	371c      	adds	r7, #28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40010000 	.word	0x40010000
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	58000800 	.word	0x58000800

08000b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b90:	787b      	ldrb	r3, [r7, #1]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b9c:	e002      	b.n	8000ba4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e081      	b.n	8000cc4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d106      	bne.n	8000bda <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fc4f 	bl	8000478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2224      	movs	r2, #36	; 0x24
 8000bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 0201 	bic.w	r2, r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bfe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d107      	bne.n	8000c28 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	e006      	b.n	8000c36 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000c34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d104      	bne.n	8000c48 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69d9      	ldr	r1, [r3, #28]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f042 0201 	orr.w	r2, r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2220      	movs	r2, #32
 8000cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b20      	cmp	r3, #32
 8000ce0:	d138      	bne.n	8000d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d101      	bne.n	8000cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e032      	b.n	8000d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2224      	movs	r2, #36	; 0x24
 8000cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0201 	orr.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2220      	movs	r2, #32
 8000d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e000      	b.n	8000d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000d54:	2302      	movs	r3, #2
  }
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b20      	cmp	r3, #32
 8000d74:	d139      	bne.n	8000dea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d101      	bne.n	8000d84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e033      	b.n	8000dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2224      	movs	r2, #36	; 0x24
 8000d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000db2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 0201 	orr.w	r2, r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000dea:	2302      	movs	r3, #2
  }
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
	...

08000df8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	58000400 	.word	0x58000400

08000e14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_PWREx_GetVoltageRange+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	58000400 	.word	0x58000400

08000e2c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e3c:	d101      	bne.n	8000e42 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	58000400 	.word	0x58000400

08000e50 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e9a:	d101      	bne.n	8000ea0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ef4:	d101      	bne.n	8000efa <LL_RCC_HSE_IsReady+0x18>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <LL_RCC_HSE_IsReady+0x1a>
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4e:	d101      	bne.n	8000f54 <LL_RCC_HSI_IsReady+0x18>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <LL_RCC_HSI_IsReady+0x1a>
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	061b      	lsls	r3, r3, #24
 8000f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d101      	bne.n	8000f9e <LL_RCC_LSE_IsReady+0x18>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <LL_RCC_LSE_IsReady+0x1a>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d101      	bne.n	8001000 <LL_RCC_LSI_IsReady+0x18>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <LL_RCC_LSI_IsReady+0x1a>
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800100e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800102a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6013      	str	r3, [r2, #0]
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b02      	cmp	r3, #2
 8001052:	d101      	bne.n	8001058 <LL_RCC_MSI_IsReady+0x16>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <LL_RCC_MSI_IsReady+0x18>
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b08      	cmp	r3, #8
 8001072:	d101      	bne.n	8001078 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80010b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ca:	4313      	orrs	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f023 0203 	bic.w	r2, r3, #3
 80010ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	608b      	str	r3, [r1, #8]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800111c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	608b      	str	r3, [r1, #8]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001146:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800114a:	f023 020f 	bic.w	r2, r3, #15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001156:	4313      	orrs	r3, r2
 8001158:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4313      	orrs	r3, r2
 8001180:	608b      	str	r3, [r1, #8]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800119e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80011b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001210:	6013      	str	r3, [r2, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800122c:	d101      	bne.n	8001232 <LL_RCC_PLL_IsReady+0x18>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_RCC_PLL_IsReady+0x1a>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800126e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	f003 0303 	and.w	r3, r3, #3
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d101      	bne.n	80012ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80012bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012cc:	d101      	bne.n	80012d2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012ee:	d101      	bne.n	80012f4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800130c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001310:	d101      	bne.n	8001316 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e36f      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001332:	f7ff fee4 	bl	80010fe <LL_RCC_GetSysClkSource>
 8001336:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001338:	f7ff ffa2 	bl	8001280 <LL_RCC_PLL_GetMainSource>
 800133c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80c4 	beq.w	80014d4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x3e>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d176      	bne.n	8001446 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d173      	bne.n	8001446 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e353      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x68>
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001386:	e006      	b.n	8001396 <HAL_RCC_OscConfig+0x76>
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001396:	4293      	cmp	r3, r2
 8001398:	d222      	bcs.n	80013e0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fd18 	bl	8001dd4 <RCC_SetFlashLatencyFromMSIRange>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e331      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe69 	bl	80010b0 <LL_RCC_MSI_SetCalibTrimming>
 80013de:	e021      	b.n	8001424 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe50 	bl	80010b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fcdd 	bl	8001dd4 <RCC_SetFlashLatencyFromMSIRange>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e2f6      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001424:	f000 fcc2 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001428:	4603      	mov	r3, r0
 800142a:	4aa7      	ldr	r2, [pc, #668]	; (80016c8 <HAL_RCC_OscConfig+0x3a8>)
 800142c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800142e:	4ba7      	ldr	r3, [pc, #668]	; (80016cc <HAL_RCC_OscConfig+0x3ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f8e8 	bl	8000608 <HAL_InitTick>
 8001438:	4603      	mov	r3, r0
 800143a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d047      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	e2e5      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d02c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800144e:	f7ff fddc 	bl	800100a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001452:	f7ff f925 	bl	80006a0 <HAL_GetTick>
 8001456:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145a:	f7ff f921 	bl	80006a0 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e2d2      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800146c:	f7ff fde9 	bl	8001042 <LL_RCC_MSI_IsReady>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f1      	beq.n	800145a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe05 	bl	80010b0 <LL_RCC_MSI_SetCalibTrimming>
 80014a6:	e015      	b.n	80014d4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014a8:	f7ff fdbd 	bl	8001026 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ac:	f7ff f8f8 	bl	80006a0 <HAL_GetTick>
 80014b0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b4:	f7ff f8f4 	bl	80006a0 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e2a5      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80014c6:	f7ff fdbc 	bl	8001042 <LL_RCC_MSI_IsReady>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f1      	bne.n	80014b4 <HAL_RCC_OscConfig+0x194>
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014d2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d058      	beq.n	8001592 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1d2>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	d108      	bne.n	80014fe <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d105      	bne.n	80014fe <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d14b      	bne.n	8001592 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e289      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d102      	bne.n	8001524 <HAL_RCC_OscConfig+0x204>
 800151e:	f7ff fcc4 	bl	8000eaa <LL_RCC_HSE_Enable>
 8001522:	e00d      	b.n	8001540 <HAL_RCC_OscConfig+0x220>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800152c:	d104      	bne.n	8001538 <HAL_RCC_OscConfig+0x218>
 800152e:	f7ff fc8f 	bl	8000e50 <LL_RCC_HSE_EnableTcxo>
 8001532:	f7ff fcba 	bl	8000eaa <LL_RCC_HSE_Enable>
 8001536:	e003      	b.n	8001540 <HAL_RCC_OscConfig+0x220>
 8001538:	f7ff fcc5 	bl	8000ec6 <LL_RCC_HSE_Disable>
 800153c:	f7ff fc96 	bl	8000e6c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d012      	beq.n	800156e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff f8aa 	bl	80006a0 <HAL_GetTick>
 800154c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff f8a6 	bl	80006a0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e257      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001562:	f7ff fcbe 	bl	8000ee2 <LL_RCC_HSE_IsReady>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f1      	beq.n	8001550 <HAL_RCC_OscConfig+0x230>
 800156c:	e011      	b.n	8001592 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff f897 	bl	80006a0 <HAL_GetTick>
 8001572:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001576:	f7ff f893 	bl	80006a0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e244      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001588:	f7ff fcab 	bl	8000ee2 <LL_RCC_HSE_IsReady>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f1      	bne.n	8001576 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d046      	beq.n	800162c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x290>
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d10e      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d10b      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e22a      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fccc 	bl	8000f5e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015c6:	e031      	b.n	800162c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d019      	beq.n	8001604 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	f7ff fc98 	bl	8000f04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff f864 	bl	80006a0 <HAL_GetTick>
 80015d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff f860 	bl	80006a0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e211      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80015ee:	f7ff fca5 	bl	8000f3c <LL_RCC_HSI_IsReady>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f1      	beq.n	80015dc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fcae 	bl	8000f5e <LL_RCC_HSI_SetCalibTrimming>
 8001602:	e013      	b.n	800162c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001604:	f7ff fc8c 	bl	8000f20 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff f84a 	bl	80006a0 <HAL_GetTick>
 800160c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff f846 	bl	80006a0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1f7      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001622:	f7ff fc8b 	bl	8000f3c <LL_RCC_HSI_IsReady>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f1      	bne.n	8001610 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d06e      	beq.n	8001716 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d056      	beq.n	80016ee <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	429a      	cmp	r2, r3
 8001656:	d031      	beq.n	80016bc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e1d0      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d013      	beq.n	80016a2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800167a:	f7ff fca5 	bl	8000fc8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800167e:	f7ff f80f 	bl	80006a0 <HAL_GetTick>
 8001682:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff f80b 	bl	80006a0 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b11      	cmp	r3, #17
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1bc      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001698:	f7ff fca6 	bl	8000fe8 <LL_RCC_LSI_IsReady>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f1      	bne.n	8001686 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016aa:	f023 0210 	bic.w	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b6:	4313      	orrs	r3, r2
 80016b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	f7ff fc74 	bl	8000fa8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7fe ffee 	bl	80006a0 <HAL_GetTick>
 80016c4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80016c6:	e00c      	b.n	80016e2 <HAL_RCC_OscConfig+0x3c2>
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7fe ffe6 	bl	80006a0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b11      	cmp	r3, #17
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e197      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80016e2:	f7ff fc81 	bl	8000fe8 <LL_RCC_LSI_IsReady>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f1      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3b0>
 80016ec:	e013      	b.n	8001716 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ee:	f7ff fc6b 	bl	8000fc8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7fe ffd5 	bl	80006a0 <HAL_GetTick>
 80016f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fa:	f7fe ffd1 	bl	80006a0 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b11      	cmp	r3, #17
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e182      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800170c:	f7ff fc6c 	bl	8000fe8 <LL_RCC_LSI_IsReady>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f1      	bne.n	80016fa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80d8 	beq.w	80018d4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001724:	f7ff fb82 	bl	8000e2c <LL_PWR_IsEnabledBkUpAccess>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d113      	bne.n	8001756 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800172e:	f7ff fb63 	bl	8000df8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001732:	f7fe ffb5 	bl	80006a0 <HAL_GetTick>
 8001736:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7fe ffb1 	bl	80006a0 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e162      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800174c:	f7ff fb6e 	bl	8000e2c <LL_PWR_IsEnabledBkUpAccess>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f1      	beq.n	800173a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d07b      	beq.n	8001856 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b85      	cmp	r3, #133	; 0x85
 8001764:	d003      	beq.n	800176e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d109      	bne.n	8001782 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7fe ff8d 	bl	80006a0 <HAL_GetTick>
 8001786:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7fe ff7f 	bl	80006a0 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e12e      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80017b4:	f7ff fbe7 	bl	8000f86 <LL_RCC_LSE_IsReady>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0ef      	beq.n	800179e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b81      	cmp	r3, #129	; 0x81
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b85      	cmp	r3, #133	; 0x85
 80017cc:	d121      	bne.n	8001812 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7fe ff67 	bl	80006a0 <HAL_GetTick>
 80017d2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7fe ff59 	bl	80006a0 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e108      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ec      	beq.n	80017ea <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001810:	e060      	b.n	80018d4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7fe ff45 	bl	80006a0 <HAL_GetTick>
 8001816:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7fe ff37 	bl	80006a0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0e6      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1ec      	bne.n	800182e <HAL_RCC_OscConfig+0x50e>
 8001854:	e03e      	b.n	80018d4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7fe ff23 	bl	80006a0 <HAL_GetTick>
 800185a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7fe ff15 	bl	80006a0 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0c4      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ec      	bne.n	8001872 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7fe ff02 	bl	80006a0 <HAL_GetTick>
 800189c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7fe fef4 	bl	80006a0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e0a3      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80018ca:	f7ff fb5c 	bl	8000f86 <LL_RCC_LSE_IsReady>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ef      	bne.n	80018b4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8099 	beq.w	8001a10 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d06c      	beq.n	80019be <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d14b      	bne.n	8001984 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	f7ff fc87 	bl	80011fe <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7fe fed6 	bl	80006a0 <HAL_GetTick>
 80018f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe fed2 	bl	80006a0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b0a      	cmp	r3, #10
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e083      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800190a:	f7ff fc86 	bl	800121a <LL_RCC_PLL_IsReady>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f1      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <HAL_RCC_OscConfig+0x6fc>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001926:	4311      	orrs	r1, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800192c:	0212      	lsls	r2, r2, #8
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001934:	4311      	orrs	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800193a:	4311      	orrs	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001940:	430a      	orrs	r2, r1
 8001942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001946:	4313      	orrs	r3, r2
 8001948:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194a:	f7ff fc4a 	bl	80011e2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7fe fe9f 	bl	80006a0 <HAL_GetTick>
 8001962:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7fe fe9b 	bl	80006a0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b0a      	cmp	r3, #10
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e04c      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001978:	f7ff fc4f 	bl	800121a <LL_RCC_PLL_IsReady>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f1      	beq.n	8001966 <HAL_RCC_OscConfig+0x646>
 8001982:	e045      	b.n	8001a10 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001984:	f7ff fc3b 	bl	80011fe <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7fe fe8a 	bl	80006a0 <HAL_GetTick>
 800198c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7fe fe86 	bl	80006a0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b0a      	cmp	r3, #10
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e037      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80019a2:	f7ff fc3a 	bl	800121a <LL_RCC_PLL_IsReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f1      	bne.n	8001990 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_RCC_OscConfig+0x700>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]
 80019bc:	e028      	b.n	8001a10 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e023      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	429a      	cmp	r2, r3
 80019de:	d115      	bne.n	8001a0c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d10e      	bne.n	8001a0c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d106      	bne.n	8001a0c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	11c1808c 	.word	0x11c1808c
 8001a20:	eefefffc 	.word	0xeefefffc

08001a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e10f      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <HAL_RCC_ClockConfig+0x23c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d91b      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b86      	ldr	r3, [pc, #536]	; (8001c60 <HAL_RCC_ClockConfig+0x23c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4984      	ldr	r1, [pc, #528]	; (8001c60 <HAL_RCC_ClockConfig+0x23c>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a56:	f7fe fe23 	bl	80006a0 <HAL_GetTick>
 8001a5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a5e:	f7fe fe1f 	bl	80006a0 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0f3      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a70:	4b7b      	ldr	r3, [pc, #492]	; (8001c60 <HAL_RCC_ClockConfig+0x23c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d1ef      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fb40 	bl	8001114 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a94:	f7fe fe04 	bl	80006a0 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a9c:	f7fe fe00 	bl	80006a0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0d4      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001aae:	f7ff fbf2 	bl	8001296 <LL_RCC_IsActiveFlag_HPRE>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f1      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d016      	beq.n	8001af2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fb36 	bl	800113a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ace:	f7fe fde7 	bl	80006a0 <HAL_GetTick>
 8001ad2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ad6:	f7fe fde3 	bl	80006a0 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0b7      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ae8:	f7ff fbe6 	bl	80012b8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f1      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d016      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fb2f 	bl	8001166 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b08:	f7fe fdca 	bl	80006a0 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b10:	f7fe fdc6 	bl	80006a0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e09a      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b22:	f7ff fbdb 	bl	80012dc <LL_RCC_IsActiveFlag_PPRE1>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f1      	beq.n	8001b10 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d017      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fb24 	bl	800118c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b44:	f7fe fdac 	bl	80006a0 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b4c:	f7fe fda8 	bl	80006a0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e07c      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b5e:	f7ff fbce 	bl	80012fe <LL_RCC_IsActiveFlag_PPRE2>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f1      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d043      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b7c:	f7ff f9b1 	bl	8000ee2 <LL_RCC_HSE_IsReady>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11e      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e066      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b92:	f7ff fb42 	bl	800121a <LL_RCC_PLL_IsReady>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d113      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e05b      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001ba8:	f7ff fa4b 	bl	8001042 <LL_RCC_MSI_IsReady>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e050      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001bb6:	f7ff f9c1 	bl	8000f3c <LL_RCC_HSI_IsReady>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e049      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fa85 	bl	80010d8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bce:	f7fe fd67 	bl	80006a0 <HAL_GetTick>
 8001bd2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd6:	f7fe fd63 	bl	80006a0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e035      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bec:	f7ff fa87 	bl	80010fe <LL_RCC_GetSysClkSource>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1ec      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_RCC_ClockConfig+0x23c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d21b      	bcs.n	8001c42 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_RCC_ClockConfig+0x23c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0207 	bic.w	r2, r3, #7
 8001c12:	4913      	ldr	r1, [pc, #76]	; (8001c60 <HAL_RCC_ClockConfig+0x23c>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c1a:	f7fe fd41 	bl	80006a0 <HAL_GetTick>
 8001c1e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c22:	f7fe fd3d 	bl	80006a0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e011      	b.n	8001c58 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x23c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d1ef      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c42:	f000 f8b3 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001c4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fcd9 	bl	8000608 <HAL_InitTick>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58004000 	.word	0x58004000
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	f7ff fa40 	bl	80010fe <LL_RCC_GetSysClkSource>
 8001c7e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c80:	f7ff fafe 	bl	8001280 <LL_RCC_PLL_GetMainSource>
 8001c84:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x2c>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d139      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d136      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001c98:	f7ff f9e3 	bl	8001062 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d115      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x62>
 8001ca2:	f7ff f9de 	bl	8001062 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x4e>
 8001cac:	f7ff f9e9 	bl	8001082 <LL_RCC_MSI_GetRange>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	e005      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x5a>
 8001cba:	f7ff f9ed 	bl	8001098 <LL_RCC_MSI_GetRangeAfterStandby>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a36      	ldr	r2, [pc, #216]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	e014      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x8c>
 8001cce:	f7ff f9c8 	bl	8001062 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x7a>
 8001cd8:	f7ff f9d3 	bl	8001082 <LL_RCC_MSI_GetRange>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	e005      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x86>
 8001ce6:	f7ff f9d7 	bl	8001098 <LL_RCC_MSI_GetRangeAfterStandby>
 8001cea:	4603      	mov	r3, r0
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d115      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d04:	e012      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d102      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e00c      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d109      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d18:	f7ff f8b6 	bl	8000e88 <LL_RCC_HSE_IsEnabledDiv2>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e001      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001d28:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d2a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2c:	f7ff f9e7 	bl	80010fe <LL_RCC_GetSysClkSource>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d12f      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001d36:	f7ff faa3 	bl	8001280 <LL_RCC_PLL_GetMainSource>
 8001d3a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0xde>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d003      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0xe4>
 8001d48:	e00d      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d4c:	60fb      	str	r3, [r7, #12]
        break;
 8001d4e:	e00d      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d50:	f7ff f89a 	bl	8000e88 <LL_RCC_HSE_IsEnabledDiv2>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d5c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001d5e:	e005      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d62:	60fb      	str	r3, [r7, #12]
        break;
 8001d64:	e002      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	60fb      	str	r3, [r7, #12]
        break;
 8001d6a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001d6c:	f7ff fa66 	bl	800123c <LL_RCC_PLL_GetN>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	fb03 f402 	mul.w	r4, r3, r2
 8001d78:	f7ff fa77 	bl	800126a <LL_RCC_PLL_GetDivider>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	3301      	adds	r3, #1
 8001d82:	fbb4 f4f3 	udiv	r4, r4, r3
 8001d86:	f7ff fa65 	bl	8001254 <LL_RCC_PLL_GetR>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	0f5b      	lsrs	r3, r3, #29
 8001d8e:	3301      	adds	r3, #1
 8001d90:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d94:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001d96:	697b      	ldr	r3, [r7, #20]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	080029c4 	.word	0x080029c4
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	01e84800 	.word	0x01e84800

08001dac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b598      	push	{r3, r4, r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001db0:	f7ff ff5c 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001db4:	4604      	mov	r4, r0
 8001db6:	f7ff f9fc 	bl	80011b2 <LL_RCC_GetAHBPrescaler>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	4a03      	ldr	r2, [pc, #12]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd98      	pop	{r3, r4, r7, pc}
 8001dd0:	08002984 	.word	0x08002984

08001dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dea:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001dec:	f7ff f9ec 	bl	80011c8 <LL_RCC_GetAHB3Prescaler>
 8001df0:	4603      	mov	r3, r0
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0c9c      	lsrs	r4, r3, #18
 8001e10:	f7ff f800 	bl	8000e14 <HAL_PWREx_GetVoltageRange>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f000 f80b 	bl	8001e34 <RCC_SetFlashLatency>
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	080029c4 	.word	0x080029c4
 8001e2c:	08002984 	.word	0x08002984
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08e      	sub	sp, #56	; 0x38
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001e3e:	4a3a      	ldr	r2, [pc, #232]	; (8001f28 <RCC_SetFlashLatency+0xf4>)
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e48:	6018      	str	r0, [r3, #0]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001e4e:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <RCC_SetFlashLatency+0xf8>)
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e58:	6018      	str	r0, [r3, #0]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001e5e:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <RCC_SetFlashLatency+0xfc>)
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e66:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e74:	d11b      	bne.n	8001eae <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
 8001e7a:	e014      	b.n	8001ea6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	3338      	adds	r3, #56	; 0x38
 8001e82:	443b      	add	r3, r7
 8001e84:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d807      	bhi.n	8001ea0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	3338      	adds	r3, #56	; 0x38
 8001e96:	443b      	add	r3, r7
 8001e98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e9e:	e021      	b.n	8001ee4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d9e7      	bls.n	8001e7c <RCC_SetFlashLatency+0x48>
 8001eac:	e01a      	b.n	8001ee4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb2:	e014      	b.n	8001ede <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	3338      	adds	r3, #56	; 0x38
 8001eba:	443b      	add	r3, r7
 8001ebc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d807      	bhi.n	8001ed8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3338      	adds	r3, #56	; 0x38
 8001ece:	443b      	add	r3, r7
 8001ed0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ed6:	e005      	b.n	8001ee4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eda:	3301      	adds	r3, #1
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d9e7      	bls.n	8001eb4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <RCC_SetFlashLatency+0x100>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 0207 	bic.w	r2, r3, #7
 8001eec:	4911      	ldr	r1, [pc, #68]	; (8001f34 <RCC_SetFlashLatency+0x100>)
 8001eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ef4:	f7fe fbd4 	bl	80006a0 <HAL_GetTick>
 8001ef8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001efa:	e008      	b.n	8001f0e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001efc:	f7fe fbd0 	bl	80006a0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e007      	b.n	8001f1e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <RCC_SetFlashLatency+0x100>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1ef      	bne.n	8001efc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3738      	adds	r7, #56	; 0x38
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	08002968 	.word	0x08002968
 8001f2c:	08002970 	.word	0x08002970
 8001f30:	08002978 	.word	0x08002978
 8001f34:	58004000 	.word	0x58004000

08001f38 <LL_RCC_LSE_IsReady>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d101      	bne.n	8001f50 <LL_RCC_LSE_IsReady+0x18>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_RCC_LSE_IsReady+0x1a>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_SetUSARTClockSource>:
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8001f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0c1b      	lsrs	r3, r3, #16
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	401a      	ands	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <LL_RCC_SetI2SClockSource>:
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8001f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <LL_RCC_SetLPUARTClockSource>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <LL_RCC_SetI2CClockSource>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <LL_RCC_SetLPTIMClockSource>:
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <LL_RCC_SetRNGClockSource>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800205c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <LL_RCC_SetADCClockSource>:
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800207a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <LL_RCC_SetRTCClockSource>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_GetRTCClockSource>:
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <LL_RCC_ForceBackupDomainReset>:
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <LL_RCC_ReleaseBackupDomainReset>:
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800212c:	2300      	movs	r3, #0
 800212e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002130:	2300      	movs	r3, #0
 8002132:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d058      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002140:	f7fe fe5a 	bl	8000df8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002144:	f7fe faac 	bl	80006a0 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800214a:	e009      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe faa8 	bl	80006a0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d902      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	74fb      	strb	r3, [r7, #19]
        break;
 800215e:	e006      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002160:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800216c:	d1ee      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d13c      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002174:	f7ff ffa7 	bl	80020c6 <LL_RCC_GetRTCClockSource>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	429a      	cmp	r2, r3
 8002180:	d00f      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002190:	f7ff ffa5 	bl	80020de <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	f7ff ffb3 	bl	80020fe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d014      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fa78 	bl	80006a0 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80021b2:	e00b      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe fa74 	bl	80006a0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d902      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	74fb      	strb	r3, [r7, #19]
            break;
 80021ca:	e004      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80021cc:	f7ff feb4 	bl	8001f38 <LL_RCC_LSE_IsReady>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d1ee      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5b 	bl	800209c <LL_RCC_SetRTCClockSource>
 80021e6:	e004      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	74bb      	strb	r3, [r7, #18]
 80021ec:	e001      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fea9 	bl	8001f5a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fe9e 	bl	8001f5a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fec0 	bl	8001fb4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fee6 	bl	8002016 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fedb 	bl	8002016 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fed0 	bl	8002016 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fea9 	bl	8001fde <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe9e 	bl	8001fde <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fe93 	bl	8001fde <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d011      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fe5e 	bl	8001f8a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d6:	d107      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fea5 	bl	8002048 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	2b00      	cmp	r3, #0
 8002304:	d107      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002314:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d011      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fea3 	bl	8002072 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002334:	d107      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002346:	7cbb      	ldrb	r3, [r7, #18]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	58000400 	.word	0x58000400

08002354 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	58000400 	.word	0x58000400

0800237c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	58000400 	.word	0x58000400

0800239c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80023a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023a6:	619a      	str	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	58000400 	.word	0x58000400

080023b4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d101      	bne.n	80023c8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	58000400 	.word	0x58000400

080023d8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d101      	bne.n	80023ec <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	58000400 	.word	0x58000400

080023fc <LL_RCC_RF_DisableReset>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <LL_RCC_IsRFUnderReset>:
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002430:	d101      	bne.n	8002436 <LL_RCC_IsRFUnderReset+0x1a>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_RCC_IsRFUnderReset+0x1c>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <LL_EXTI_EnableIT_32_63+0x24>)
 800244a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800244e:	4905      	ldr	r1, [pc, #20]	; (8002464 <LL_EXTI_EnableIT_32_63+0x24>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	58000800 	.word	0x58000800

08002468 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
    return status;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	e052      	b.n	8002524 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	799b      	ldrb	r3, [r3, #6]
 8002486:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002488:	7bbb      	ldrb	r3, [r7, #14]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_SUBGHZ_Init+0x2c>
 800248e:	7bbb      	ldrb	r3, [r7, #14]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d109      	bne.n	80024a8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe f832 	bl	8000504 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80024a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024a4:	f7ff ffcc 	bl	8002440 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80024a8:	7bbb      	ldrb	r3, [r7, #14]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d126      	bne.n	80024fc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80024b4:	f7ff ffa2 	bl	80023fc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <HAL_SUBGHZ_Init+0xc4>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	0cdb      	lsrs	r3, r3, #19
 80024c6:	2264      	movs	r2, #100	; 0x64
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	609a      	str	r2, [r3, #8]
        break;
 80024de:	e007      	b.n	80024f0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80024e6:	f7ff ff99 	bl	800241c <LL_RCC_IsRFUnderReset>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ee      	bne.n	80024ce <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80024f0:	f7ff ff44 	bl	800237c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80024f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024f8:	f7ff ff2c 	bl	8002354 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80024fc:	f7ff ff4e 	bl	800239c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f810 	bl	8002530 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	719a      	strb	r2, [r3, #6]

  return status;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000000 	.word	0x20000000

08002530 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <SUBGHZSPI_Init+0x3c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0b      	ldr	r2, [pc, #44]	; (800256c <SUBGHZSPI_Init+0x3c>)
 800253e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002542:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002544:	4a09      	ldr	r2, [pc, #36]	; (800256c <SUBGHZSPI_Init+0x3c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800254c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <SUBGHZSPI_Init+0x3c>)
 8002550:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8002554:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <SUBGHZSPI_Init+0x3c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <SUBGHZSPI_Init+0x3c>)
 800255c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002560:	6013      	str	r3, [r2, #0]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	58010000 	.word	0x58010000

08002570 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <SUBGHZSPI_Transmit+0xa0>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	0cdb      	lsrs	r3, r3, #19
 800258e:	2264      	movs	r2, #100	; 0x64
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	609a      	str	r2, [r3, #8]
      break;
 80025a6:	e008      	b.n	80025ba <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <SUBGHZSPI_Transmit+0xa4>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d1ed      	bne.n	8002596 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <SUBGHZSPI_Transmit+0xa8>)
 80025bc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <SUBGHZSPI_Transmit+0xa0>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	0cdb      	lsrs	r3, r3, #19
 80025d2:	2264      	movs	r2, #100	; 0x64
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	609a      	str	r2, [r3, #8]
      break;
 80025ea:	e008      	b.n	80025fe <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <SUBGHZSPI_Transmit+0xa4>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d1ed      	bne.n	80025da <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SUBGHZSPI_Transmit+0xa4>)
 8002600:	68db      	ldr	r3, [r3, #12]

  return status;
 8002602:	7dfb      	ldrb	r3, [r7, #23]
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000000 	.word	0x20000000
 8002614:	58010000 	.word	0x58010000
 8002618:	5801000c 	.word	0x5801000c

0800261c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <SUBGHZ_WaitOnBusy+0x58>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	0d1b      	lsrs	r3, r3, #20
 8002636:	2264      	movs	r2, #100	; 0x64
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800263e:	f7ff fecb 	bl	80023d8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8002642:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	609a      	str	r2, [r3, #8]
      break;
 8002654:	e009      	b.n	800266a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3b01      	subs	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800265c:	f7ff feaa 	bl	80023b4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	2b01      	cmp	r3, #1
 8002668:	d0e9      	beq.n	800263e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800266a:	7dfb      	ldrb	r3, [r7, #23]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000000 	.word	0x20000000

08002678 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002684:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	58000400 	.word	0x58000400

08002698 <LL_RCC_RF_EnableReset>:
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RFRST);
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <LL_RCC_RF_DisableReset>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef retval;

	retval = SUBGHZ_WaitOnBusy(hspi);
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <WaitWhileBusy+0x34>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff9a 	bl	800261c <SUBGHZ_WaitOnBusy>
 80026e8:	4603      	mov	r3, r0
 80026ea:	71fb      	strb	r3, [r7, #7]
	if(retval == HAL_OK)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <WaitWhileBusy+0x1e>
	{
		return(LoRa_OK);
 80026f2:	2300      	movs	r3, #0
 80026f4:	e005      	b.n	8002702 <WaitWhileBusy+0x2a>
	}
	else if (retval == HAL_TIMEOUT)
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d101      	bne.n	8002700 <WaitWhileBusy+0x28>
	{
		return(LoRa_TIMEOUT);
 80026fc:	2302      	movs	r3, #2
 80026fe:	e000      	b.n	8002702 <WaitWhileBusy+0x2a>
	}
	else
	{
		return(LoRa_ERROR);
 8002700:	2301      	movs	r3, #1
	}
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000008c 	.word	0x2000008c

08002710 <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
	int x;

	/* make sure chip isn't busy */
	if(WaitWhileBusy() != LoRa_OK)
 8002720:	f7ff ffda 	bl	80026d8 <WaitWhileBusy>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SPI_Send+0x1e>
	{
		return(LoRa_ERROR);
 800272a:	2301      	movs	r3, #1
 800272c:	e013      	b.n	8002756 <SPI_Send+0x46>
	}
	for(x=0; x < numBytes; x++)
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e00b      	b.n	800274c <SPI_Send+0x3c>
	{
		SUBGHZSPI_Transmit(hspi, buffer[x]);
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <SPI_Send+0x50>)
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f7ff ff15 	bl	8002570 <SUBGHZSPI_Transmit>
	for(x=0; x < numBytes; x++)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3301      	adds	r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	dbef      	blt.n	8002734 <SPI_Send+0x24>
	}

	return(LoRa_OK);
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000008c 	.word	0x2000008c

08002764 <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SUBGHZ_HandleTypeDef *hspiPtr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[10];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 800276c:	4a61      	ldr	r2, [pc, #388]	; (80028f4 <LoRa_Init+0x190>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]


  /* Set NSS active */
  LL_PWR_SelectSUBGHZSPI_NSS();
 8002772:	f7ff ff81 	bl	8002678 <LL_PWR_SelectSUBGHZSPI_NSS>

  /* Reset SX1262 chip */
  LL_RCC_RF_EnableReset();
 8002776:	f7ff ff8f 	bl	8002698 <LL_RCC_RF_EnableReset>
  HAL_Delay(1); 															/* delay 1mS */
 800277a:	2001      	movs	r0, #1
 800277c:	f7fd ff9a 	bl	80006b4 <HAL_Delay>
  LL_RCC_RF_DisableReset();
 8002780:	f7ff ff9a 	bl	80026b8 <LL_RCC_RF_DisableReset>


  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_STDBY_RC;
 8002788:	2300      	movs	r3, #0
 800278a:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	2200      	movs	r2, #0
 8002792:	2102      	movs	r1, #2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ffbb 	bl	8002710 <SPI_Send>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <LoRa_Init+0x40>
  {
	  return(LoRa_ERROR);
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0a2      	b.n	80028ea <LoRa_Init+0x186>
  }


  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 80027a4:	238a      	movs	r3, #138	; 0x8a
 80027a6:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 80027a8:	2301      	movs	r3, #1
 80027aa:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80027ac:	f107 030c 	add.w	r3, r7, #12
 80027b0:	2200      	movs	r2, #0
 80027b2:	2102      	movs	r1, #2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ffab 	bl	8002710 <SPI_Send>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <LoRa_Init+0x60>
  {
	  return(LoRa_ERROR);
 80027c0:	2301      	movs	r3, #1
 80027c2:	e092      	b.n	80028ea <LoRa_Init+0x186>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 80027c4:	2386      	movs	r3, #134	; 0x86
 80027c6:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x39;
 80027c8:	2339      	movs	r3, #57	; 0x39
 80027ca:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x30;
 80027cc:	2330      	movs	r3, #48	; 0x30
 80027ce:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x00;
 80027d4:	2300      	movs	r3, #0
 80027d6:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2200      	movs	r2, #0
 80027de:	2105      	movs	r1, #5
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff95 	bl	8002710 <SPI_Send>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <LoRa_Init+0x8c>
  {
	  return(LoRa_ERROR);
 80027ec:	2301      	movs	r3, #1
 80027ee:	e07c      	b.n	80028ea <LoRa_Init+0x186>
  }

  /* Set the power amplifier configuration */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 80027f0:	2395      	movs	r3, #149	; 0x95
 80027f2:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 80027f4:	2304      	movs	r3, #4
 80027f6:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x07; /* hpMax */
 80027f8:	2307      	movs	r3, #7
 80027fa:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00; /* devSel */
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x01; /* paLut */
 8002800:	2301      	movs	r3, #1
 8002802:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	2200      	movs	r2, #0
 800280a:	2105      	movs	r1, #5
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff7f 	bl	8002710 <SPI_Send>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <LoRa_Init+0xb8>
  {
	  return(LoRa_ERROR);
 8002818:	2301      	movs	r3, #1
 800281a:	e066      	b.n	80028ea <LoRa_Init+0x186>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 800281c:	238e      	movs	r3, #142	; 0x8e
 800281e:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 8002820:	2316      	movs	r3, #22
 8002822:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = LORA_STANDARD_RAMPTIME;
 8002824:	2304      	movs	r3, #4
 8002826:	73bb      	strb	r3, [r7, #14]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	2200      	movs	r2, #0
 800282e:	2103      	movs	r1, #3
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff6d 	bl	8002710 <SPI_Send>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <LoRa_Init+0xdc>
  {
	  return(LoRa_ERROR);
 800283c:	2301      	movs	r3, #1
 800283e:	e054      	b.n	80028ea <LoRa_Init+0x186>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 8002840:	239d      	movs	r3, #157	; 0x9d
 8002842:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* enable */
 8002844:	2301      	movs	r3, #1
 8002846:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	2200      	movs	r2, #0
 800284e:	2102      	movs	r1, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff5d 	bl	8002710 <SPI_Send>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <LoRa_Init+0xfc>
  {
	  return(LoRa_ERROR);
 800285c:	2301      	movs	r3, #1
 800285e:	e044      	b.n	80028ea <LoRa_Init+0x186>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 8002860:	2396      	movs	r3, #150	; 0x96
 8002862:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 8002864:	2301      	movs	r3, #1
 8002866:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	2200      	movs	r2, #0
 800286e:	2102      	movs	r1, #2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff4d 	bl	8002710 <SPI_Send>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <LoRa_Init+0x11c>
  {
	  return(LoRa_ERROR);
 800287c:	2301      	movs	r3, #1
 800287e:	e034      	b.n	80028ea <LoRa_Init+0x186>
  }

  /* Set LoRa modulation parameters */
  xmitBuffer[0] = LORA_SET_MODULATION_PARAMS_OPCODE;
 8002880:	238b      	movs	r3, #139	; 0x8b
 8002882:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 7; 		/* Spreading factor */
 8002884:	2307      	movs	r3, #7
 8002886:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x04; 	/* BW = 125 KHz */
 8002888:	2304      	movs	r3, #4
 800288a:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x01;		/* Coding Rate = 4/5 */
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0;		/* Low data rate optimization off */
 8002890:	2300      	movs	r3, #0
 8002892:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	2200      	movs	r2, #0
 800289a:	2105      	movs	r1, #5
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff37 	bl	8002710 <SPI_Send>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <LoRa_Init+0x148>
  {
	  return(LoRa_ERROR);
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01e      	b.n	80028ea <LoRa_Init+0x186>
  }

  /* Set DIO IRQ parameters */
  xmitBuffer[0] = LORA_SET_DIO_IRQ_PARAMS_OPCODE;
 80028ac:	2308      	movs	r3, #8
 80028ae:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x02;	/* Enable timeout interrupt */
 80028b0:	2302      	movs	r3, #2
 80028b2:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x02;	/* Enable RX done interrupt */
 80028b4:	2302      	movs	r3, #2
 80028b6:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x02;	/* Map timeout to DIO1 */
 80028b8:	2302      	movs	r3, #2
 80028ba:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x02; /* Map RX done to DIO1 */
 80028bc:	2302      	movs	r3, #2
 80028be:	743b      	strb	r3, [r7, #16]
  xmitBuffer[5] = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	747b      	strb	r3, [r7, #17]
  xmitBuffer[6] = 0;	/* No interrupts to DIO2 */
 80028c4:	2300      	movs	r3, #0
 80028c6:	74bb      	strb	r3, [r7, #18]
  xmitBuffer[7]	= 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	74fb      	strb	r3, [r7, #19]
  xmitBuffer[8]	= 0;	/* No interrupts to DIO3 */
 80028cc:	2300      	movs	r3, #0
 80028ce:	753b      	strb	r3, [r7, #20]
  if(SPI_Send(xmitBuffer, 9, false) != LoRa_OK)
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	2200      	movs	r2, #0
 80028d6:	2109      	movs	r1, #9
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff19 	bl	8002710 <SPI_Send>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <LoRa_Init+0x184>
  {
	  return(LoRa_ERROR);
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <LoRa_Init+0x186>
  }

  return(LoRa_OK);
 80028e8:	2300      	movs	r3, #0

}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000008c 	.word	0x2000008c

080028f8 <memset>:
 80028f8:	4402      	add	r2, r0
 80028fa:	4603      	mov	r3, r0
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d100      	bne.n	8002902 <memset+0xa>
 8002900:	4770      	bx	lr
 8002902:	f803 1b01 	strb.w	r1, [r3], #1
 8002906:	e7f9      	b.n	80028fc <memset+0x4>

08002908 <__libc_init_array>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	4d0d      	ldr	r5, [pc, #52]	; (8002940 <__libc_init_array+0x38>)
 800290c:	4c0d      	ldr	r4, [pc, #52]	; (8002944 <__libc_init_array+0x3c>)
 800290e:	1b64      	subs	r4, r4, r5
 8002910:	10a4      	asrs	r4, r4, #2
 8002912:	2600      	movs	r6, #0
 8002914:	42a6      	cmp	r6, r4
 8002916:	d109      	bne.n	800292c <__libc_init_array+0x24>
 8002918:	4d0b      	ldr	r5, [pc, #44]	; (8002948 <__libc_init_array+0x40>)
 800291a:	4c0c      	ldr	r4, [pc, #48]	; (800294c <__libc_init_array+0x44>)
 800291c:	f000 f818 	bl	8002950 <_init>
 8002920:	1b64      	subs	r4, r4, r5
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	2600      	movs	r6, #0
 8002926:	42a6      	cmp	r6, r4
 8002928:	d105      	bne.n	8002936 <__libc_init_array+0x2e>
 800292a:	bd70      	pop	{r4, r5, r6, pc}
 800292c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002930:	4798      	blx	r3
 8002932:	3601      	adds	r6, #1
 8002934:	e7ee      	b.n	8002914 <__libc_init_array+0xc>
 8002936:	f855 3b04 	ldr.w	r3, [r5], #4
 800293a:	4798      	blx	r3
 800293c:	3601      	adds	r6, #1
 800293e:	e7f2      	b.n	8002926 <__libc_init_array+0x1e>
 8002940:	08002a04 	.word	0x08002a04
 8002944:	08002a04 	.word	0x08002a04
 8002948:	08002a04 	.word	0x08002a04
 800294c:	08002a08 	.word	0x08002a08

08002950 <_init>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	bf00      	nop
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr

0800295c <_fini>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	bf00      	nop
 8002960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002962:	bc08      	pop	{r3}
 8002964:	469e      	mov	lr, r3
 8002966:	4770      	bx	lr
