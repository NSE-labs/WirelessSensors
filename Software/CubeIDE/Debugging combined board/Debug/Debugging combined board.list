
Debugging combined board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002148  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800231c  0800231c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800231c  0800231c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800231c  0800231c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800231c  0800231c  0001231c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002330  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002330  00020080  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a259  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df5  00000000  00000000  0002a2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0002c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab8  00000000  00000000  0002cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184e7  00000000  00000000  0002d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cea3  00000000  00000000  00045ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097261  00000000  00000000  00052d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a50  00000000  00000000  000e9fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000ed9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08002268 	.word	0x08002268

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08002268 	.word	0x08002268

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 f9a6 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f806 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f894 	bl	80002e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001b8:	f000 f854 	bl	8000264 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <main+0x14>
	...

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b09a      	sub	sp, #104	; 0x68
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0320 	add.w	r3, r7, #32
 80001ca:	2248      	movs	r2, #72	; 0x48
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 f81e 	bl	8002210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	f107 0308 	add.w	r3, r7, #8
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
 80001e2:	611a      	str	r2, [r3, #16]
 80001e4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80001e6:	4b1e      	ldr	r3, [pc, #120]	; (8000260 <SystemClock_Config+0xa0>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001ee:	4a1c      	ldr	r2, [pc, #112]	; (8000260 <SystemClock_Config+0xa0>)
 80001f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f4:	6013      	str	r3, [r2, #0]
 80001f6:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <SystemClock_Config+0xa0>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000202:	2320      	movs	r3, #32
 8000204:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800020a:	2300      	movs	r3, #0
 800020c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800020e:	2360      	movs	r3, #96	; 0x60
 8000210:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0320 	add.w	r3, r7, #32
 800021a:	4618      	mov	r0, r3
 800021c:	f000 ffde 	bl	80011dc <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000226:	f000 f890 	bl	800034a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800022a:	234f      	movs	r3, #79	; 0x4f
 800022c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000242:	f107 0308 	add.w	r3, r7, #8
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fb49 	bl	80018e0 <HAL_RCC_ClockConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000254:	f000 f879 	bl	800034a <Error_Handler>
  }
}
 8000258:	bf00      	nop
 800025a:	3768      	adds	r7, #104	; 0x68
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	58000400 	.word	0x58000400

08000264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <MX_I2C1_Init+0x74>)
 800026a:	4a1c      	ldr	r2, [pc, #112]	; (80002dc <MX_I2C1_Init+0x78>)
 800026c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800026e:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <MX_I2C1_Init+0x74>)
 8000270:	f640 6214 	movw	r2, #3604	; 0xe14
 8000274:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000276:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <MX_I2C1_Init+0x74>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <MX_I2C1_Init+0x74>)
 800027e:	2201      	movs	r2, #1
 8000280:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <MX_I2C1_Init+0x74>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <MX_I2C1_Init+0x74>)
 800028a:	2200      	movs	r2, #0
 800028c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800028e:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <MX_I2C1_Init+0x74>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <MX_I2C1_Init+0x74>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <MX_I2C1_Init+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <MX_I2C1_Init+0x74>)
 80002a2:	f000 fbe3 	bl	8000a6c <HAL_I2C_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002ac:	f000 f84d 	bl	800034a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002b0:	2100      	movs	r1, #0
 80002b2:	4809      	ldr	r0, [pc, #36]	; (80002d8 <MX_I2C1_Init+0x74>)
 80002b4:	f000 fc69 	bl	8000b8a <HAL_I2CEx_ConfigAnalogFilter>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002be:	f000 f844 	bl	800034a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <MX_I2C1_Init+0x74>)
 80002c6:	f000 fcaa 	bl	8000c1e <HAL_I2CEx_ConfigDigitalFilter>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002d0:	f000 f83b 	bl	800034a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000028 	.word	0x20000028
 80002dc:	40005400 	.word	0x40005400

080002e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	2002      	movs	r0, #2
 80002f6:	f7ff ff3f 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	2001      	movs	r0, #1
 80002fc:	f7ff ff3c 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000300:	23f0      	movs	r3, #240	; 0xf0
 8000302:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000304:	2302      	movs	r3, #2
 8000306:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030c:	2300      	movs	r3, #0
 800030e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 8000310:	230d      	movs	r3, #13
 8000312:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4619      	mov	r1, r3
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f000 fa46 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000326:	2302      	movs	r3, #2
 8000328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_BUSY;
 8000332:	2306      	movs	r3, #6
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f000 fa35 	bl	80007ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034e:	b672      	cpsid	i
}
 8000350:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000352:	e7fe      	b.n	8000352 <Error_Handler+0x8>

08000354 <LL_AHB2_GRP1_EnableClock>:
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800035c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4313      	orrs	r3, r2
 800036a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800036c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4013      	ands	r3, r2
 8000376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000378:	68fb      	ldr	r3, [r7, #12]
}
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800038c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800039c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4013      	ands	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003a8:	68fb      	ldr	r3, [r7, #12]
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b096      	sub	sp, #88	; 0x58
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	2238      	movs	r2, #56	; 0x38
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 ff15 	bl	8002210 <memset>
  if(hi2c->Instance==I2C1)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a16      	ldr	r2, [pc, #88]	; (8000444 <HAL_I2C_MspInit+0x84>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d125      	bne.n	800043c <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003f0:	2340      	movs	r3, #64	; 0x40
 80003f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80003f8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 fdec 	bl	8001fdc <HAL_RCCEx_PeriphCLKConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800040a:	f7ff ff9e 	bl	800034a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	2002      	movs	r0, #2
 8000410:	f7ff ffa0 	bl	8000354 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000414:	23c0      	movs	r3, #192	; 0xc0
 8000416:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000418:	2312      	movs	r3, #18
 800041a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2300      	movs	r3, #0
 8000422:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000424:	2304      	movs	r3, #4
 8000426:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800042c:	4619      	mov	r1, r3
 800042e:	4806      	ldr	r0, [pc, #24]	; (8000448 <HAL_I2C_MspInit+0x88>)
 8000430:	f000 f9bc 	bl	80007ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000434:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000438:	f7ff ffa4 	bl	8000384 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800043c:	bf00      	nop
 800043e:	3758      	adds	r7, #88	; 0x58
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40005400 	.word	0x40005400
 8000448:	48000400 	.word	0x48000400

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <NMI_Handler+0x4>

08000452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <MemManage_Handler+0x4>

0800045e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <BusFault_Handler+0x4>

08000464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <UsageFault_Handler+0x4>

0800046a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000492:	f000 f88d 	bl	80005b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}

0800049a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
	...

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f7ff fff5 	bl	800049a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f001 fea3 	bl	8002220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff fe65 	bl	80001a8 <main>

080004de <LoopForever>:

LoopForever:
    b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004ec:	08002324 	.word	0x08002324
  ldr r2, =_sbss
 80004f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004f4:	20000080 	.word	0x20000080

080004f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000502:	2300      	movs	r3, #0
 8000504:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000506:	2003      	movs	r0, #3
 8000508:	f000 f91e 	bl	8000748 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800050c:	f001 fbac 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8000510:	4603      	mov	r3, r0
 8000512:	4a09      	ldr	r2, [pc, #36]	; (8000538 <HAL_Init+0x3c>)
 8000514:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000516:	200f      	movs	r0, #15
 8000518:	f000 f810 	bl	800053c <HAL_InitTick>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000522:	2301      	movs	r3, #1
 8000524:	71fb      	strb	r3, [r7, #7]
 8000526:	e001      	b.n	800052c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000528:	f7ff ff44 	bl	80003b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800052c:	79fb      	ldrb	r3, [r7, #7]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000000 	.word	0x20000000

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <HAL_InitTick+0x6c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d024      	beq.n	800059a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000550:	f001 fb8a 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8000554:	4602      	mov	r2, r0
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <HAL_InitTick+0x6c>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000560:	fbb3 f3f1 	udiv	r3, r3, r1
 8000564:	fbb2 f3f3 	udiv	r3, r2, r3
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f912 	bl	8000792 <HAL_SYSTICK_Config>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10f      	bne.n	8000594 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d809      	bhi.n	800058e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057a:	2200      	movs	r2, #0
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	f04f 30ff 	mov.w	r0, #4294967295
 8000582:	f000 f8ec 	bl	800075e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <HAL_InitTick+0x70>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	e007      	b.n	800059e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e004      	b.n	800059e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e001      	b.n	800059e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_IncTick+0x1c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x20>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <HAL_IncTick+0x20>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000008 	.word	0x20000008
 80005d0:	2000007c 	.word	0x2000007c

080005d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b02      	ldr	r3, [pc, #8]	; (80005e4 <HAL_GetTick+0x10>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	2000007c 	.word	0x2000007c

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000714:	d301      	bcc.n	800071a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000716:	2301      	movs	r3, #1
 8000718:	e00f      	b.n	800073a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <SysTick_Config+0x40>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000722:	210f      	movs	r1, #15
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f7ff ff90 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SysTick_Config+0x40>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SysTick_Config+0x40>)
 8000734:	2207      	movs	r2, #7
 8000736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010

08000748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff49 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800076c:	f7ff ff60 	bl	8000630 <__NVIC_GetPriorityGrouping>
 8000770:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	6978      	ldr	r0, [r7, #20]
 8000778:	f7ff ff92 	bl	80006a0 <NVIC_EncodePriority>
 800077c:	4602      	mov	r2, r0
 800077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff61 	bl	800064c <__NVIC_SetPriority>
}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ffb2 	bl	8000704 <SysTick_Config>
 80007a0:	4603      	mov	r3, r0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ba:	e140      	b.n	8000a3e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	2101      	movs	r1, #1
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	fa01 f303 	lsl.w	r3, r1, r3
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f000 8132 	beq.w	8000a38 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 0303 	and.w	r3, r3, #3
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d005      	beq.n	80007ec <HAL_GPIO_Init+0x40>
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d130      	bne.n	800084e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	2203      	movs	r2, #3
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4013      	ands	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68da      	ldr	r2, [r3, #12]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	4313      	orrs	r3, r2
 8000814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000822:	2201      	movs	r2, #1
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	091b      	lsrs	r3, r3, #4
 8000838:	f003 0201 	and.w	r2, r3, #1
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4313      	orrs	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f003 0303 	and.w	r3, r3, #3
 8000856:	2b03      	cmp	r3, #3
 8000858:	d017      	beq.n	800088a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	2203      	movs	r2, #3
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4013      	ands	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4313      	orrs	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	2b02      	cmp	r3, #2
 8000894:	d123      	bne.n	80008de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	08da      	lsrs	r2, r3, #3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3208      	adds	r2, #8
 800089e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	220f      	movs	r2, #15
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4013      	ands	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	691a      	ldr	r2, [r3, #16]
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	08da      	lsrs	r2, r3, #3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3208      	adds	r2, #8
 80008d8:	6939      	ldr	r1, [r7, #16]
 80008da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	2203      	movs	r2, #3
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f003 0203 	and.w	r2, r3, #3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800091a:	2b00      	cmp	r3, #0
 800091c:	f000 808c 	beq.w	8000a38 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000920:	4a4e      	ldr	r2, [pc, #312]	; (8000a5c <HAL_GPIO_Init+0x2b0>)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	3302      	adds	r3, #2
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	2207      	movs	r2, #7
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800094a:	d00d      	beq.n	8000968 <HAL_GPIO_Init+0x1bc>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a44      	ldr	r2, [pc, #272]	; (8000a60 <HAL_GPIO_Init+0x2b4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d007      	beq.n	8000964 <HAL_GPIO_Init+0x1b8>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a43      	ldr	r2, [pc, #268]	; (8000a64 <HAL_GPIO_Init+0x2b8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d101      	bne.n	8000960 <HAL_GPIO_Init+0x1b4>
 800095c:	2302      	movs	r3, #2
 800095e:	e004      	b.n	800096a <HAL_GPIO_Init+0x1be>
 8000960:	2307      	movs	r3, #7
 8000962:	e002      	b.n	800096a <HAL_GPIO_Init+0x1be>
 8000964:	2301      	movs	r3, #1
 8000966:	e000      	b.n	800096a <HAL_GPIO_Init+0x1be>
 8000968:	2300      	movs	r3, #0
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	f002 0203 	and.w	r2, r2, #3
 8000970:	0092      	lsls	r2, r2, #2
 8000972:	4093      	lsls	r3, r2
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800097a:	4938      	ldr	r1, [pc, #224]	; (8000a5c <HAL_GPIO_Init+0x2b0>)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	3302      	adds	r3, #2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000988:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <HAL_GPIO_Init+0x2bc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009ac:	4a2e      	ldr	r2, [pc, #184]	; (8000a68 <HAL_GPIO_Init+0x2bc>)
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <HAL_GPIO_Init+0x2bc>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009d6:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <HAL_GPIO_Init+0x2bc>)
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <HAL_GPIO_Init+0x2bc>)
 80009de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009e2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_GPIO_Init+0x2bc>)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_GPIO_Init+0x2bc>)
 8000a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000a10:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_GPIO_Init+0x2bc>)
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	fa22 f303 	lsr.w	r3, r2, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f47f aeb7 	bne.w	80007bc <HAL_GPIO_Init+0x10>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	371c      	adds	r7, #28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40010000 	.word	0x40010000
 8000a60:	48000400 	.word	0x48000400
 8000a64:	48000800 	.word	0x48000800
 8000a68:	58000800 	.word	0x58000800

08000a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e081      	b.n	8000b82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d106      	bne.n	8000a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fc94 	bl	80003c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2224      	movs	r2, #36	; 0x24
 8000a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 0201 	bic.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d107      	bne.n	8000ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	e006      	b.n	8000af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d104      	bne.n	8000b06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691a      	ldr	r2, [r3, #16]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69d9      	ldr	r1, [r3, #28]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a1a      	ldr	r2, [r3, #32]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f042 0201 	orr.w	r2, r2, #1
 8000b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b20      	cmp	r3, #32
 8000b9e:	d138      	bne.n	8000c12 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d101      	bne.n	8000bae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e032      	b.n	8000c14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2224      	movs	r2, #36	; 0x24
 8000bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0201 	bic.w	r2, r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000bdc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6819      	ldr	r1, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f042 0201 	orr.w	r2, r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2220      	movs	r2, #32
 8000c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e000      	b.n	8000c14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000c12:	2302      	movs	r3, #2
  }
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b20      	cmp	r3, #32
 8000c32:	d139      	bne.n	8000ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e033      	b.n	8000caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2224      	movs	r2, #36	; 0x24
 8000c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0201 	bic.w	r2, r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 0201 	orr.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2220      	movs	r2, #32
 8000c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e000      	b.n	8000caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000ca8:	2302      	movs	r3, #2
  }
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <HAL_PWR_EnableBkUpAccess+0x18>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <HAL_PWR_EnableBkUpAccess+0x18>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	58000400 	.word	0x58000400

08000cd0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_PWREx_GetVoltageRange+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	58000400 	.word	0x58000400

08000ce8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf8:	d101      	bne.n	8000cfe <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	58000400 	.word	0x58000400

08000d0c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000d56:	d101      	bne.n	8000d5c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000db0:	d101      	bne.n	8000db6 <LL_RCC_HSE_IsReady+0x18>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <LL_RCC_HSE_IsReady+0x1a>
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0a:	d101      	bne.n	8000e10 <LL_RCC_HSI_IsReady+0x18>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <LL_RCC_HSI_IsReady+0x1a>
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	061b      	lsls	r3, r3, #24
 8000e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e34:	4313      	orrs	r3, r2
 8000e36:	604b      	str	r3, [r1, #4]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d101      	bne.n	8000e5a <LL_RCC_LSE_IsReady+0x18>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <LL_RCC_LSE_IsReady+0x1a>
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e94:	f023 0301 	bic.w	r3, r3, #1
 8000e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d101      	bne.n	8000ebc <LL_RCC_LSI_IsReady+0x18>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <LL_RCC_LSI_IsReady+0x1a>
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d101      	bne.n	8000f14 <LL_RCC_MSI_IsReady+0x16>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <LL_RCC_MSI_IsReady+0x18>
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d101      	bne.n	8000f34 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f86:	4313      	orrs	r3, r2
 8000f88:	604b      	str	r3, [r1, #4]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f023 0203 	bic.w	r2, r3, #3
 8000fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	608b      	str	r3, [r1, #8]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	608b      	str	r3, [r1, #8]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001006:	f023 020f 	bic.w	r2, r3, #15
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001012:	4313      	orrs	r3, r2
 8001014:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800102a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4313      	orrs	r3, r2
 800103c:	608b      	str	r3, [r1, #8]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800105a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	608b      	str	r3, [r1, #8]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010cc:	6013      	str	r3, [r2, #0]
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80010da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010e8:	d101      	bne.n	80010ee <LL_RCC_PLL_IsReady+0x18>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <LL_RCC_PLL_IsReady+0x1a>
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f003 0303 	and.w	r3, r3, #3
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001164:	d101      	bne.n	800116a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d101      	bne.n	800118e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011aa:	d101      	bne.n	80011b0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80011be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011cc:	d101      	bne.n	80011d2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e36f      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ee:	f7ff fee4 	bl	8000fba <LL_RCC_GetSysClkSource>
 80011f2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f4:	f7ff ffa2 	bl	800113c <LL_RCC_PLL_GetMainSource>
 80011f8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80c4 	beq.w	8001390 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x3e>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	2b0c      	cmp	r3, #12
 8001212:	d176      	bne.n	8001302 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d173      	bne.n	8001302 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e353      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800122a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_OscConfig+0x68>
 8001238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001242:	e006      	b.n	8001252 <HAL_RCC_OscConfig+0x76>
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001252:	4293      	cmp	r3, r2
 8001254:	d222      	bcs.n	800129c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fd18 	bl	8001c90 <RCC_SetFlashLatencyFromMSIRange>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e331      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe69 	bl	8000f6c <LL_RCC_MSI_SetCalibTrimming>
 800129a:	e021      	b.n	80012e0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe50 	bl	8000f6c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fcdd 	bl	8001c90 <RCC_SetFlashLatencyFromMSIRange>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e2f6      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012e0:	f000 fcc2 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4aa7      	ldr	r2, [pc, #668]	; (8001584 <HAL_RCC_OscConfig+0x3a8>)
 80012e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80012ea:	4ba7      	ldr	r3, [pc, #668]	; (8001588 <HAL_RCC_OscConfig+0x3ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f924 	bl	800053c <HAL_InitTick>
 80012f4:	4603      	mov	r3, r0
 80012f6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80012f8:	7cfb      	ldrb	r3, [r7, #19]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d047      	beq.n	800138e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80012fe:	7cfb      	ldrb	r3, [r7, #19]
 8001300:	e2e5      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d02c      	beq.n	8001364 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800130a:	f7ff fddc 	bl	8000ec6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130e:	f7ff f961 	bl	80005d4 <HAL_GetTick>
 8001312:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001316:	f7ff f95d 	bl	80005d4 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e2d2      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001328:	f7ff fde9 	bl	8000efe <LL_RCC_MSI_IsReady>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f1      	beq.n	8001316 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe05 	bl	8000f6c <LL_RCC_MSI_SetCalibTrimming>
 8001362:	e015      	b.n	8001390 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001364:	f7ff fdbd 	bl	8000ee2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001368:	f7ff f934 	bl	80005d4 <HAL_GetTick>
 800136c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001370:	f7ff f930 	bl	80005d4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e2a5      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001382:	f7ff fdbc 	bl	8000efe <LL_RCC_MSI_IsReady>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f1      	bne.n	8001370 <HAL_RCC_OscConfig+0x194>
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800138e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d058      	beq.n	800144e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x1d2>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	d108      	bne.n	80013ba <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d14b      	bne.n	800144e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e289      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80013ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_OscConfig+0x204>
 80013da:	f7ff fcc4 	bl	8000d66 <LL_RCC_HSE_Enable>
 80013de:	e00d      	b.n	80013fc <HAL_RCC_OscConfig+0x220>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80013e8:	d104      	bne.n	80013f4 <HAL_RCC_OscConfig+0x218>
 80013ea:	f7ff fc8f 	bl	8000d0c <LL_RCC_HSE_EnableTcxo>
 80013ee:	f7ff fcba 	bl	8000d66 <LL_RCC_HSE_Enable>
 80013f2:	e003      	b.n	80013fc <HAL_RCC_OscConfig+0x220>
 80013f4:	f7ff fcc5 	bl	8000d82 <LL_RCC_HSE_Disable>
 80013f8:	f7ff fc96 	bl	8000d28 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d012      	beq.n	800142a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff f8e6 	bl	80005d4 <HAL_GetTick>
 8001408:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff f8e2 	bl	80005d4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e257      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800141e:	f7ff fcbe 	bl	8000d9e <LL_RCC_HSE_IsReady>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f1      	beq.n	800140c <HAL_RCC_OscConfig+0x230>
 8001428:	e011      	b.n	800144e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff f8d3 	bl	80005d4 <HAL_GetTick>
 800142e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001432:	f7ff f8cf 	bl	80005d4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b64      	cmp	r3, #100	; 0x64
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e244      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001444:	f7ff fcab 	bl	8000d9e <LL_RCC_HSE_IsReady>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f1      	bne.n	8001432 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d046      	beq.n	80014e8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d005      	beq.n	800146c <HAL_RCC_OscConfig+0x290>
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d10e      	bne.n	8001484 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d10b      	bne.n	8001484 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e22a      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fccc 	bl	8000e1a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001482:	e031      	b.n	80014e8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d019      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	f7ff fc98 	bl	8000dc0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff f8a0 	bl	80005d4 <HAL_GetTick>
 8001494:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff f89c 	bl	80005d4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e211      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80014aa:	f7ff fca5 	bl	8000df8 <LL_RCC_HSI_IsReady>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f1      	beq.n	8001498 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fcae 	bl	8000e1a <LL_RCC_HSI_SetCalibTrimming>
 80014be:	e013      	b.n	80014e8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c0:	f7ff fc8c 	bl	8000ddc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff f886 	bl	80005d4 <HAL_GetTick>
 80014c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff f882 	bl	80005d4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1f7      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014de:	f7ff fc8b 	bl	8000df8 <LL_RCC_HSI_IsReady>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f1      	bne.n	80014cc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d06e      	beq.n	80015d2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d056      	beq.n	80015aa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001504:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69da      	ldr	r2, [r3, #28]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	429a      	cmp	r2, r3
 8001512:	d031      	beq.n	8001578 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e1d0      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d013      	beq.n	800155e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001536:	f7ff fca5 	bl	8000e84 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800153a:	f7ff f84b 	bl	80005d4 <HAL_GetTick>
 800153e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff f847 	bl	80005d4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b11      	cmp	r3, #17
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1bc      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001554:	f7ff fca6 	bl	8000ea4 <LL_RCC_LSI_IsReady>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f1      	bne.n	8001542 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	f023 0210 	bic.w	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001572:	4313      	orrs	r3, r2
 8001574:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001578:	f7ff fc74 	bl	8000e64 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff f82a 	bl	80005d4 <HAL_GetTick>
 8001580:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001582:	e00c      	b.n	800159e <HAL_RCC_OscConfig+0x3c2>
 8001584:	20000000 	.word	0x20000000
 8001588:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff f822 	bl	80005d4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b11      	cmp	r3, #17
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e197      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800159e:	f7ff fc81 	bl	8000ea4 <LL_RCC_LSI_IsReady>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f1      	beq.n	800158c <HAL_RCC_OscConfig+0x3b0>
 80015a8:	e013      	b.n	80015d2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	f7ff fc6b 	bl	8000e84 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff f811 	bl	80005d4 <HAL_GetTick>
 80015b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff f80d 	bl	80005d4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b11      	cmp	r3, #17
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e182      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80015c8:	f7ff fc6c 	bl	8000ea4 <LL_RCC_LSI_IsReady>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f1      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80d8 	beq.w	8001790 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015e0:	f7ff fb82 	bl	8000ce8 <LL_PWR_IsEnabledBkUpAccess>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d113      	bne.n	8001612 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80015ea:	f7ff fb63 	bl	8000cb4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7fe fff1 	bl	80005d4 <HAL_GetTick>
 80015f2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7fe ffed 	bl	80005d4 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e162      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001608:	f7ff fb6e 	bl	8000ce8 <LL_PWR_IsEnabledBkUpAccess>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f1      	beq.n	80015f6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d07b      	beq.n	8001712 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b85      	cmp	r3, #133	; 0x85
 8001620:	d003      	beq.n	800162a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d109      	bne.n	800163e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7fe ffc9 	bl	80005d4 <HAL_GetTick>
 8001642:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7fe ffbb 	bl	80005d4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e12e      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001670:	f7ff fbe7 	bl	8000e42 <LL_RCC_LSE_IsReady>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0ef      	beq.n	800165a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b81      	cmp	r3, #129	; 0x81
 8001680:	d003      	beq.n	800168a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b85      	cmp	r3, #133	; 0x85
 8001688:	d121      	bne.n	80016ce <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7fe ffa3 	bl	80005d4 <HAL_GetTick>
 800168e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7fe ff95 	bl	80005d4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e108      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0ec      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80016cc:	e060      	b.n	8001790 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7fe ff81 	bl	80005d4 <HAL_GetTick>
 80016d2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7fe ff73 	bl	80005d4 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0e6      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ec      	bne.n	80016ea <HAL_RCC_OscConfig+0x50e>
 8001710:	e03e      	b.n	8001790 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7fe ff5f 	bl	80005d4 <HAL_GetTick>
 8001716:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7fe ff51 	bl	80005d4 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0c4      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ec      	bne.n	800172e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7fe ff3e 	bl	80005d4 <HAL_GetTick>
 8001758:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7fe ff30 	bl	80005d4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0a3      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001786:	f7ff fb5c 	bl	8000e42 <LL_RCC_LSE_IsReady>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ef      	bne.n	8001770 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8099 	beq.w	80018cc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2b0c      	cmp	r3, #12
 800179e:	d06c      	beq.n	800187a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d14b      	bne.n	8001840 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	f7ff fc87 	bl	80010ba <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7fe ff12 	bl	80005d4 <HAL_GetTick>
 80017b0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b4:	f7fe ff0e 	bl	80005d4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b0a      	cmp	r3, #10
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e083      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80017c6:	f7ff fc86 	bl	80010d6 <LL_RCC_PLL_IsReady>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f1      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <HAL_RCC_OscConfig+0x6fc>)
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017e8:	0212      	lsls	r2, r2, #8
 80017ea:	4311      	orrs	r1, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017fc:	430a      	orrs	r2, r1
 80017fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001802:	4313      	orrs	r3, r2
 8001804:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001806:	f7ff fc4a 	bl	800109e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7fe fedb 	bl	80005d4 <HAL_GetTick>
 800181e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7fe fed7 	bl	80005d4 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b0a      	cmp	r3, #10
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e04c      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001834:	f7ff fc4f 	bl	80010d6 <LL_RCC_PLL_IsReady>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f1      	beq.n	8001822 <HAL_RCC_OscConfig+0x646>
 800183e:	e045      	b.n	80018cc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	f7ff fc3b 	bl	80010ba <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7fe fec6 	bl	80005d4 <HAL_GetTick>
 8001848:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe fec2 	bl	80005d4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b0a      	cmp	r3, #10
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e037      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800185e:	f7ff fc3a 	bl	80010d6 <LL_RCC_PLL_IsReady>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f1      	bne.n	800184c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_RCC_OscConfig+0x700>)
 8001874:	4013      	ands	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
 8001878:	e028      	b.n	80018cc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e023      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	429a      	cmp	r2, r3
 800189a:	d115      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d10e      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	11c1808c 	.word	0x11c1808c
 80018dc:	eefefffc 	.word	0xeefefffc

080018e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e10f      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f4:	4b89      	ldr	r3, [pc, #548]	; (8001b1c <HAL_RCC_ClockConfig+0x23c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d91b      	bls.n	800193a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b86      	ldr	r3, [pc, #536]	; (8001b1c <HAL_RCC_ClockConfig+0x23c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0207 	bic.w	r2, r3, #7
 800190a:	4984      	ldr	r1, [pc, #528]	; (8001b1c <HAL_RCC_ClockConfig+0x23c>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001912:	f7fe fe5f 	bl	80005d4 <HAL_GetTick>
 8001916:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001918:	e008      	b.n	800192c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800191a:	f7fe fe5b 	bl	80005d4 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0f3      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192c:	4b7b      	ldr	r3, [pc, #492]	; (8001b1c <HAL_RCC_ClockConfig+0x23c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d1ef      	bne.n	800191a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d016      	beq.n	8001974 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fb40 	bl	8000fd0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001950:	f7fe fe40 	bl	80005d4 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001958:	f7fe fe3c 	bl	80005d4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0d4      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800196a:	f7ff fbf2 	bl	8001152 <LL_RCC_IsActiveFlag_HPRE>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f1      	beq.n	8001958 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d016      	beq.n	80019ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb36 	bl	8000ff6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800198a:	f7fe fe23 	bl	80005d4 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001992:	f7fe fe1f 	bl	80005d4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0b7      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80019a4:	f7ff fbe6 	bl	8001174 <LL_RCC_IsActiveFlag_SHDHPRE>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f1      	beq.n	8001992 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d016      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fb2f 	bl	8001022 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019c4:	f7fe fe06 	bl	80005d4 <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019cc:	f7fe fe02 	bl	80005d4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e09a      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80019de:	f7ff fbdb 	bl	8001198 <LL_RCC_IsActiveFlag_PPRE1>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f1      	beq.n	80019cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d017      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fb24 	bl	8001048 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a00:	f7fe fde8 	bl	80005d4 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a08:	f7fe fde4 	bl	80005d4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e07c      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a1a:	f7ff fbce 	bl	80011ba <LL_RCC_IsActiveFlag_PPRE2>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f1      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d043      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001a38:	f7ff f9b1 	bl	8000d9e <LL_RCC_HSE_IsReady>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d11e      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e066      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001a4e:	f7ff fb42 	bl	80010d6 <LL_RCC_PLL_IsReady>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d113      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e05b      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001a64:	f7ff fa4b 	bl	8000efe <LL_RCC_MSI_IsReady>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e050      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001a72:	f7ff f9c1 	bl	8000df8 <LL_RCC_HSI_IsReady>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e049      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fa85 	bl	8000f94 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8a:	f7fe fda3 	bl	80005d4 <HAL_GetTick>
 8001a8e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a92:	f7fe fd9f 	bl	80005d4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e035      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa8:	f7ff fa87 	bl	8000fba <LL_RCC_GetSysClkSource>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1ec      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_RCC_ClockConfig+0x23c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d21b      	bcs.n	8001afe <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_RCC_ClockConfig+0x23c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4913      	ldr	r1, [pc, #76]	; (8001b1c <HAL_RCC_ClockConfig+0x23c>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad6:	f7fe fd7d 	bl	80005d4 <HAL_GetTick>
 8001ada:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ade:	f7fe fd79 	bl	80005d4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e011      	b.n	8001b14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_ClockConfig+0x23c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d1ef      	bne.n	8001ade <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001afe:	f000 f8b3 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <HAL_RCC_ClockConfig+0x240>)
 8001b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd15 	bl	800053c <HAL_InitTick>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	58004000 	.word	0x58004000
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b36:	f7ff fa40 	bl	8000fba <LL_RCC_GetSysClkSource>
 8001b3a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b3c:	f7ff fafe 	bl	800113c <LL_RCC_PLL_GetMainSource>
 8001b40:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x2c>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d139      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d136      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001b54:	f7ff f9e3 	bl	8000f1e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d115      	bne.n	8001b8a <HAL_RCC_GetSysClockFreq+0x62>
 8001b5e:	f7ff f9de 	bl	8000f1e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_GetSysClockFreq+0x4e>
 8001b68:	f7ff f9e9 	bl	8000f3e <LL_RCC_MSI_GetRange>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	0a1b      	lsrs	r3, r3, #8
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	e005      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x5a>
 8001b76:	f7ff f9ed 	bl	8000f54 <LL_RCC_MSI_GetRangeAfterStandby>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x134>)
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	e014      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x8c>
 8001b8a:	f7ff f9c8 	bl	8000f1e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x7a>
 8001b94:	f7ff f9d3 	bl	8000f3e <LL_RCC_MSI_GetRange>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	e005      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x86>
 8001ba2:	f7ff f9d7 	bl	8000f54 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	4a2b      	ldr	r2, [pc, #172]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x134>)
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d115      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bc0:	e012      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e00c      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d109      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001bd4:	f7ff f8b6 	bl	8000d44 <LL_RCC_HSE_IsEnabledDiv2>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e001      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001be6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	f7ff f9e7 	bl	8000fba <LL_RCC_GetSysClkSource>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d12f      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001bf2:	f7ff faa3 	bl	800113c <LL_RCC_PLL_GetMainSource>
 8001bf6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d003      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0xde>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d003      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0xe4>
 8001c04:	e00d      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c08:	60fb      	str	r3, [r7, #12]
        break;
 8001c0a:	e00d      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c0c:	f7ff f89a 	bl	8000d44 <LL_RCC_HSE_IsEnabledDiv2>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c18:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c1a:	e005      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c1e:	60fb      	str	r3, [r7, #12]
        break;
 8001c20:	e002      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	60fb      	str	r3, [r7, #12]
        break;
 8001c26:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001c28:	f7ff fa66 	bl	80010f8 <LL_RCC_PLL_GetN>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	fb03 f402 	mul.w	r4, r3, r2
 8001c34:	f7ff fa77 	bl	8001126 <LL_RCC_PLL_GetDivider>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c42:	f7ff fa65 	bl	8001110 <LL_RCC_PLL_GetR>
 8001c46:	4603      	mov	r3, r0
 8001c48:	0f5b      	lsrs	r3, r3, #29
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c50:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001c52:	697b      	ldr	r3, [r7, #20]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	080022dc 	.word	0x080022dc
 8001c60:	00f42400 	.word	0x00f42400
 8001c64:	01e84800 	.word	0x01e84800

08001c68 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b598      	push	{r3, r4, r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c6c:	f7ff ff5c 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001c70:	4604      	mov	r4, r0
 8001c72:	f7ff f9fc 	bl	800106e <LL_RCC_GetAHBPrescaler>
 8001c76:	4603      	mov	r3, r0
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x24>)
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd98      	pop	{r3, r4, r7, pc}
 8001c8c:	0800229c 	.word	0x0800229c

08001c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001ca8:	f7ff f9ec 	bl	8001084 <LL_RCC_GetAHB3Prescaler>
 8001cac:	4603      	mov	r3, r0
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	4a09      	ldr	r2, [pc, #36]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9c      	lsrs	r4, r3, #18
 8001ccc:	f7ff f800 	bl	8000cd0 <HAL_PWREx_GetVoltageRange>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f000 f80b 	bl	8001cf0 <RCC_SetFlashLatency>
 8001cda:	4603      	mov	r3, r0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}
 8001ce4:	080022dc 	.word	0x080022dc
 8001ce8:	0800229c 	.word	0x0800229c
 8001cec:	431bde83 	.word	0x431bde83

08001cf0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	; 0x38
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001cfa:	4a3a      	ldr	r2, [pc, #232]	; (8001de4 <RCC_SetFlashLatency+0xf4>)
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d04:	6018      	str	r0, [r3, #0]
 8001d06:	3304      	adds	r3, #4
 8001d08:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001d0a:	4a37      	ldr	r2, [pc, #220]	; (8001de8 <RCC_SetFlashLatency+0xf8>)
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d14:	6018      	str	r0, [r3, #0]
 8001d16:	3304      	adds	r3, #4
 8001d18:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001d1a:	4a34      	ldr	r2, [pc, #208]	; (8001dec <RCC_SetFlashLatency+0xfc>)
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d22:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d30:	d11b      	bne.n	8001d6a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
 8001d36:	e014      	b.n	8001d62 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	3338      	adds	r3, #56	; 0x38
 8001d3e:	443b      	add	r3, r7
 8001d40:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d807      	bhi.n	8001d5c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	3338      	adds	r3, #56	; 0x38
 8001d52:	443b      	add	r3, r7
 8001d54:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001d5a:	e021      	b.n	8001da0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	3301      	adds	r3, #1
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d9e7      	bls.n	8001d38 <RCC_SetFlashLatency+0x48>
 8001d68:	e01a      	b.n	8001da0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6e:	e014      	b.n	8001d9a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	3338      	adds	r3, #56	; 0x38
 8001d76:	443b      	add	r3, r7
 8001d78:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d807      	bhi.n	8001d94 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	3338      	adds	r3, #56	; 0x38
 8001d8a:	443b      	add	r3, r7
 8001d8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001d92:	e005      	b.n	8001da0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	3301      	adds	r3, #1
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d9e7      	bls.n	8001d70 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <RCC_SetFlashLatency+0x100>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 0207 	bic.w	r2, r3, #7
 8001da8:	4911      	ldr	r1, [pc, #68]	; (8001df0 <RCC_SetFlashLatency+0x100>)
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001db0:	f7fe fc10 	bl	80005d4 <HAL_GetTick>
 8001db4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001db6:	e008      	b.n	8001dca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001db8:	f7fe fc0c 	bl	80005d4 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e007      	b.n	8001dda <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <RCC_SetFlashLatency+0x100>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1ef      	bne.n	8001db8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	08002280 	.word	0x08002280
 8001de8:	08002288 	.word	0x08002288
 8001dec:	08002290 	.word	0x08002290
 8001df0:	58004000 	.word	0x58004000

08001df4 <LL_RCC_LSE_IsReady>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d101      	bne.n	8001e0c <LL_RCC_LSE_IsReady+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_RCC_LSE_IsReady+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <LL_RCC_SetUSARTClockSource>:
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <LL_RCC_SetI2SClockSource>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <LL_RCC_SetLPUARTClockSource>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <LL_RCC_SetI2CClockSource>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <LL_RCC_SetLPTIMClockSource>:
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <LL_RCC_SetRNGClockSource>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f14:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_SetADCClockSource>:
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <LL_RCC_SetRTCClockSource>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_GetRTCClockSource>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_ForceBackupDomainReset>:
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <LL_RCC_ReleaseBackupDomainReset>:
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8001fe8:	2300      	movs	r3, #0
 8001fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8001fec:	2300      	movs	r3, #0
 8001fee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d058      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8001ffc:	f7fe fe5a 	bl	8000cb4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002000:	f7fe fae8 	bl	80005d4 <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002006:	e009      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7fe fae4 	bl	80005d4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d902      	bls.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	74fb      	strb	r3, [r7, #19]
        break;
 800201a:	e006      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800201c:	4b7b      	ldr	r3, [pc, #492]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002028:	d1ee      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d13c      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002030:	f7ff ffa7 	bl	8001f82 <LL_RCC_GetRTCClockSource>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	429a      	cmp	r2, r3
 800203c:	d00f      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800204c:	f7ff ffa5 	bl	8001f9a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002050:	f7ff ffb3 	bl	8001fba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d014      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fab4 	bl	80005d4 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800206e:	e00b      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7fe fab0 	bl	80005d4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d902      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	74fb      	strb	r3, [r7, #19]
            break;
 8002086:	e004      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002088:	f7ff feb4 	bl	8001df4 <LL_RCC_LSE_IsReady>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d1ee      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5b 	bl	8001f58 <LL_RCC_SetRTCClockSource>
 80020a2:	e004      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	74bb      	strb	r3, [r7, #18]
 80020a8:	e001      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fea9 	bl	8001e16 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe9e 	bl	8001e16 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fec0 	bl	8001e70 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fee6 	bl	8001ed2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fedb 	bl	8001ed2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fed0 	bl	8001ed2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fea9 	bl	8001e9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fe9e 	bl	8001e9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fe93 	bl	8001e9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d011      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe5e 	bl	8001e46 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002192:	d107      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d010      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fea5 	bl	8001f04 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d011      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fea3 	bl	8001f2e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f0:	d107      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002202:	7cbb      	ldrb	r3, [r7, #18]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	58000400 	.word	0x58000400

08002210 <memset>:
 8002210:	4402      	add	r2, r0
 8002212:	4603      	mov	r3, r0
 8002214:	4293      	cmp	r3, r2
 8002216:	d100      	bne.n	800221a <memset+0xa>
 8002218:	4770      	bx	lr
 800221a:	f803 1b01 	strb.w	r1, [r3], #1
 800221e:	e7f9      	b.n	8002214 <memset+0x4>

08002220 <__libc_init_array>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	4d0d      	ldr	r5, [pc, #52]	; (8002258 <__libc_init_array+0x38>)
 8002224:	4c0d      	ldr	r4, [pc, #52]	; (800225c <__libc_init_array+0x3c>)
 8002226:	1b64      	subs	r4, r4, r5
 8002228:	10a4      	asrs	r4, r4, #2
 800222a:	2600      	movs	r6, #0
 800222c:	42a6      	cmp	r6, r4
 800222e:	d109      	bne.n	8002244 <__libc_init_array+0x24>
 8002230:	4d0b      	ldr	r5, [pc, #44]	; (8002260 <__libc_init_array+0x40>)
 8002232:	4c0c      	ldr	r4, [pc, #48]	; (8002264 <__libc_init_array+0x44>)
 8002234:	f000 f818 	bl	8002268 <_init>
 8002238:	1b64      	subs	r4, r4, r5
 800223a:	10a4      	asrs	r4, r4, #2
 800223c:	2600      	movs	r6, #0
 800223e:	42a6      	cmp	r6, r4
 8002240:	d105      	bne.n	800224e <__libc_init_array+0x2e>
 8002242:	bd70      	pop	{r4, r5, r6, pc}
 8002244:	f855 3b04 	ldr.w	r3, [r5], #4
 8002248:	4798      	blx	r3
 800224a:	3601      	adds	r6, #1
 800224c:	e7ee      	b.n	800222c <__libc_init_array+0xc>
 800224e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002252:	4798      	blx	r3
 8002254:	3601      	adds	r6, #1
 8002256:	e7f2      	b.n	800223e <__libc_init_array+0x1e>
 8002258:	0800231c 	.word	0x0800231c
 800225c:	0800231c 	.word	0x0800231c
 8002260:	0800231c 	.word	0x0800231c
 8002264:	08002320 	.word	0x08002320

08002268 <_init>:
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	bf00      	nop
 800226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800226e:	bc08      	pop	{r3}
 8002270:	469e      	mov	lr, r3
 8002272:	4770      	bx	lr

08002274 <_fini>:
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002276:	bf00      	nop
 8002278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227a:	bc08      	pop	{r3}
 800227c:	469e      	mov	lr, r3
 800227e:	4770      	bx	lr
