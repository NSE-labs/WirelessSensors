
Sensor subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002620  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026fc  080026fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002704  08002704  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800270c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  08002718  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002718  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009514  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a93  00000000  00000000  0002958b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0002b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c1  00000000  00000000  0002ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c73  00000000  00000000  0002c1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cead  00000000  00000000  0003de64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006e7cf  00000000  00000000  0004ad11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023f0  00000000  00000000  000b94e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000bb8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026c8 	.word	0x080026c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080026c8 	.word	0x080026c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fbae 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f80e 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f9d8 	bl	8000868 <MX_GPIO_Init>
  MX_ADC_Init();
 80004b8:	f000 f87a 	bl	80005b0 <MX_ADC_Init>
  MX_I2C1_Init();
 80004bc:	f000 f8dc 	bl	8000678 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004c0:	f000 f91a 	bl	80006f8 <MX_I2C2_Init>
  MX_I2C3_Init();
 80004c4:	f000 f958 	bl	8000778 <MX_I2C3_Init>
  MX_SPI1_Init();
 80004c8:	f000 f996 	bl	80007f8 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <main+0x24>
	...

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b09b      	sub	sp, #108	; 0x6c
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2434      	movs	r4, #52	; 0x34
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2334      	movs	r3, #52	; 0x34
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 f8c5 	bl	8002670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	2320      	movs	r3, #32
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 f8bd 	bl	8002670 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2320      	movs	r3, #32
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 f8b6 	bl	8002670 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <SystemClock_Config+0xd8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a28      	ldr	r2, [pc, #160]	; (80005ac <SystemClock_Config+0xdc>)
 800050a:	401a      	ands	r2, r3
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <SystemClock_Config+0xd8>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0109      	lsls	r1, r1, #4
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2210      	movs	r2, #16
 800051c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	22a0      	movs	r2, #160	; 0xa0
 800052e:	0212      	lsls	r2, r2, #8
 8000530:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	0018      	movs	r0, r3
 800053c:	f001 f950 	bl	80017e0 <HAL_RCC_OscConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000544:	f000 f9b2 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	2120      	movs	r1, #32
 800054a:	187b      	adds	r3, r7, r1
 800054c:	220f      	movs	r2, #15
 800054e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fcb3 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000576:	f000 f999 	bl	80008ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
 800057a:	003b      	movs	r3, r7
 800057c:	2284      	movs	r2, #132	; 0x84
 800057e:	0052      	lsls	r2, r2, #1
 8000580:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fe8f 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800059a:	f000 f987 	bl	80008ac <Error_Handler>
  }
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b01b      	add	sp, #108	; 0x6c
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40007000 	.word	0x40007000
 80005ac:	ffffe7ff 	.word	0xffffe7ff

080005b0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	003b      	movs	r3, r7
 80005b8:	0018      	movs	r0, r3
 80005ba:	2308      	movs	r3, #8
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f002 f856 	bl	8002670 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_ADC_Init+0xc0>)
 80005c6:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <MX_ADC_Init+0xc4>)
 80005c8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <MX_ADC_Init+0xc0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <MX_ADC_Init+0xc0>)
 80005d2:	22c0      	movs	r2, #192	; 0xc0
 80005d4:	0612      	lsls	r2, r2, #24
 80005d6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <MX_ADC_Init+0xc0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <MX_ADC_Init+0xc0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <MX_ADC_Init+0xc0>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_ADC_Init+0xc0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ADC_Init+0xc0>)
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_ADC_Init+0xc0>)
 80005fa:	2221      	movs	r2, #33	; 0x21
 80005fc:	2100      	movs	r1, #0
 80005fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_ADC_Init+0xc0>)
 8000602:	2200      	movs	r2, #0
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_ADC_Init+0xc0>)
 8000608:	22c2      	movs	r2, #194	; 0xc2
 800060a:	32ff      	adds	r2, #255	; 0xff
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_ADC_Init+0xc0>)
 8000610:	222c      	movs	r2, #44	; 0x2c
 8000612:	2100      	movs	r1, #0
 8000614:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_ADC_Init+0xc0>)
 8000618:	2204      	movs	r2, #4
 800061a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ADC_Init+0xc0>)
 800061e:	2200      	movs	r2, #0
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_ADC_Init+0xc0>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC_Init+0xc0>)
 800062a:	2201      	movs	r2, #1
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_ADC_Init+0xc0>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_ADC_Init+0xc0>)
 8000636:	0018      	movs	r0, r3
 8000638:	f000 fb58 	bl	8000cec <HAL_ADC_Init>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000640:	f000 f934 	bl	80008ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000644:	003b      	movs	r3, r7
 8000646:	2201      	movs	r2, #1
 8000648:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800064a:	003b      	movs	r3, r7
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0152      	lsls	r2, r2, #5
 8000650:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000652:	003a      	movs	r2, r7
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_ADC_Init+0xc0>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fcbb 	bl	8000fd4 <HAL_ADC_ConfigChannel>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000662:	f000 f923 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	20000028 	.word	0x20000028
 8000674:	40012400 	.word	0x40012400

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_I2C1_Init+0x78>)
 800067e:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <MX_I2C1_Init+0x7c>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x78>)
 8000684:	22e1      	movs	r2, #225	; 0xe1
 8000686:	00d2      	lsls	r2, r2, #3
 8000688:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_I2C1_Init+0x78>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C1_Init+0x78>)
 8000692:	2201      	movs	r2, #1
 8000694:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_I2C1_Init+0x78>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_I2C1_Init+0x78>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x78>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x78>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_I2C1_Init+0x78>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x78>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 ff64 	bl	8001584 <HAL_I2C_Init>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f8f4 	bl	80008ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x78>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fff1 	bl	80016b0 <HAL_I2CEx_ConfigAnalogFilter>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006d2:	f000 f8eb 	bl	80008ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x78>)
 80006d8:	2100      	movs	r1, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 f834 	bl	8001748 <HAL_I2CEx_ConfigDigitalFilter>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e4:	f000 f8e2 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	20000084 	.word	0x20000084
 80006f4:	40005400 	.word	0x40005400

080006f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_I2C2_Init+0x78>)
 80006fe:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <MX_I2C2_Init+0x7c>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_I2C2_Init+0x78>)
 8000704:	22e1      	movs	r2, #225	; 0xe1
 8000706:	00d2      	lsls	r2, r2, #3
 8000708:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_I2C2_Init+0x78>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_I2C2_Init+0x78>)
 8000712:	2201      	movs	r2, #1
 8000714:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_I2C2_Init+0x78>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_I2C2_Init+0x78>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_I2C2_Init+0x78>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2C2_Init+0x78>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_I2C2_Init+0x78>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_I2C2_Init+0x78>)
 8000736:	0018      	movs	r0, r3
 8000738:	f000 ff24 	bl	8001584 <HAL_I2C_Init>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f8b4 	bl	80008ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_I2C2_Init+0x78>)
 8000746:	2100      	movs	r1, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f000 ffb1 	bl	80016b0 <HAL_I2CEx_ConfigAnalogFilter>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000752:	f000 f8ab 	bl	80008ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_I2C2_Init+0x78>)
 8000758:	2100      	movs	r1, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fff4 	bl	8001748 <HAL_I2CEx_ConfigDigitalFilter>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000764:	f000 f8a2 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	200000d8 	.word	0x200000d8
 8000774:	40005800 	.word	0x40005800

08000778 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_I2C3_Init+0x78>)
 800077e:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <MX_I2C3_Init+0x7c>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000708;
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_I2C3_Init+0x78>)
 8000784:	22e1      	movs	r2, #225	; 0xe1
 8000786:	00d2      	lsls	r2, r2, #3
 8000788:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_I2C3_Init+0x78>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_I2C3_Init+0x78>)
 8000792:	2201      	movs	r2, #1
 8000794:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_I2C3_Init+0x78>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_I2C3_Init+0x78>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_I2C3_Init+0x78>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C3_Init+0x78>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_I2C3_Init+0x78>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2C3_Init+0x78>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fee4 	bl	8001584 <HAL_I2C_Init>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f874 	bl	80008ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_I2C3_Init+0x78>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 ff71 	bl	80016b0 <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007d2:	f000 f86b 	bl	80008ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2C3_Init+0x78>)
 80007d8:	2100      	movs	r1, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 ffb4 	bl	8001748 <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007e4:	f000 f862 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	2000012c 	.word	0x2000012c
 80007f4:	40007800 	.word	0x40007800

080007f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_SPI1_Init+0x68>)
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <MX_SPI1_Init+0x6c>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_SPI1_Init+0x68>)
 8000804:	2282      	movs	r2, #130	; 0x82
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_SPI1_Init+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_SPI1_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_SPI1_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_SPI1_Init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SPI1_Init+0x68>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	02d2      	lsls	r2, r2, #11
 8000828:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_SPI1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_SPI1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_SPI1_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_SPI1_Init+0x68>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_SPI1_Init+0x68>)
 8000844:	2207      	movs	r2, #7
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <MX_SPI1_Init+0x68>)
 800084a:	0018      	movs	r0, r3
 800084c:	f001 fe7c 	bl	8002548 <HAL_SPI_Init>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 f82a 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	20000180 	.word	0x20000180
 8000864:	40013000 	.word	0x40013000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_GPIO_Init+0x40>)
 8000870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_GPIO_Init+0x40>)
 8000874:	2101      	movs	r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_GPIO_Init+0x40>)
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	2201      	movs	r2, #1
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_GPIO_Init+0x40>)
 8000888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_GPIO_Init+0x40>)
 800088c:	2102      	movs	r1, #2
 800088e:	430a      	orrs	r2, r1
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_GPIO_Init+0x40>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	2202      	movs	r2, #2
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_MspInit+0x24>)
 80008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x24>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <HAL_MspInit+0x24>)
 80008ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_MspInit+0x24>)
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	0549      	lsls	r1, r1, #21
 80008d2:	430a      	orrs	r2, r1
 80008d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	240c      	movs	r4, #12
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	0018      	movs	r0, r3
 80008ee:	2314      	movs	r3, #20
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f001 febc 	bl	8002670 <memset>
  if(hadc->Instance==ADC1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <HAL_ADC_MspInit+0x70>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d122      	bne.n	8000948 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_ADC_MspInit+0x74>)
 8000904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_ADC_MspInit+0x74>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0089      	lsls	r1, r1, #2
 800090c:	430a      	orrs	r2, r1
 800090e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_ADC_MspInit+0x74>)
 8000912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_ADC_MspInit+0x74>)
 8000916:	2101      	movs	r1, #1
 8000918:	430a      	orrs	r2, r1
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <HAL_ADC_MspInit+0x74>)
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	2201      	movs	r2, #1
 8000922:	4013      	ands	r3, r2
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2203      	movs	r2, #3
 8000932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	193a      	adds	r2, r7, r4
 800093c:	23a0      	movs	r3, #160	; 0xa0
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fca0 	bl	8001288 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b009      	add	sp, #36	; 0x24
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	40012400 	.word	0x40012400
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b08d      	sub	sp, #52	; 0x34
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	241c      	movs	r4, #28
 8000962:	193b      	adds	r3, r7, r4
 8000964:	0018      	movs	r0, r3
 8000966:	2314      	movs	r3, #20
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f001 fe80 	bl	8002670 <memset>
  if(hi2c->Instance==I2C1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a5a      	ldr	r2, [pc, #360]	; (8000ae0 <HAL_I2C_MspInit+0x188>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d12b      	bne.n	80009d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 800097c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800097e:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
 8000986:	4b57      	ldr	r3, [pc, #348]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	2201      	movs	r2, #1
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	22c0      	movs	r2, #192	; 0xc0
 8000996:	00d2      	lsls	r2, r2, #3
 8000998:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2212      	movs	r2, #18
 80009a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2203      	movs	r2, #3
 80009ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2206      	movs	r2, #6
 80009b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	187a      	adds	r2, r7, r1
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fc63 	bl	8001288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c2:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 80009c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009c6:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0389      	lsls	r1, r1, #14
 80009cc:	430a      	orrs	r2, r1
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80009d0:	e082      	b.n	8000ad8 <HAL_I2C_MspInit+0x180>
  else if(hi2c->Instance==I2C2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a44      	ldr	r2, [pc, #272]	; (8000ae8 <HAL_I2C_MspInit+0x190>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d12a      	bne.n	8000a32 <HAL_I2C_MspInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 80009de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e0:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 80009e2:	2102      	movs	r1, #2
 80009e4:	430a      	orrs	r2, r1
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e8:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 80009ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ec:	2202      	movs	r2, #2
 80009ee:	4013      	ands	r3, r2
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009f4:	211c      	movs	r1, #28
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	22c0      	movs	r2, #192	; 0xc0
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2212      	movs	r2, #18
 8000a02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2206      	movs	r2, #6
 8000a14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	4a34      	ldr	r2, [pc, #208]	; (8000aec <HAL_I2C_MspInit+0x194>)
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	0010      	movs	r0, r2
 8000a1e:	f000 fc33 	bl	8001288 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a26:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	03c9      	lsls	r1, r1, #15
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a30:	e052      	b.n	8000ad8 <HAL_I2C_MspInit+0x180>
  else if(hi2c->Instance==I2C3)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a2e      	ldr	r2, [pc, #184]	; (8000af0 <HAL_I2C_MspInit+0x198>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d14d      	bne.n	8000ad8 <HAL_I2C_MspInit+0x180>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	430a      	orrs	r2, r1
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a64:	2202      	movs	r2, #2
 8000a66:	4013      	ands	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a6c:	211c      	movs	r1, #28
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	0052      	lsls	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a76:	000c      	movs	r4, r1
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2212      	movs	r2, #18
 8000a7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2203      	movs	r2, #3
 8000a88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_I2C3;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	193a      	adds	r2, r7, r4
 8000a92:	23a0      	movs	r3, #160	; 0xa0
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fbf5 	bl	8001288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a9e:	0021      	movs	r1, r4
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2212      	movs	r2, #18
 8000aaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_I2C3;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2207      	movs	r2, #7
 8000abc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_I2C_MspInit+0x194>)
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	f000 fbdf 	bl	8001288 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_I2C_MspInit+0x18c>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	05c9      	lsls	r1, r1, #23
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b00d      	add	sp, #52	; 0x34
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	50000400 	.word	0x50000400
 8000af0:	40007800 	.word	0x40007800

08000af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	240c      	movs	r4, #12
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	0018      	movs	r0, r3
 8000b02:	2314      	movs	r3, #20
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f001 fdb2 	bl	8002670 <memset>
  if(hspi->Instance==SPI1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_SPI_MspInit+0x80>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d129      	bne.n	8000b6a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	0149      	lsls	r1, r1, #5
 8000b20:	430a      	orrs	r2, r1
 8000b22:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	2201      	movs	r2, #1
 8000b36:	4013      	ands	r3, r2
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8000b3c:	0021      	movs	r1, r4
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2202      	movs	r2, #2
 8000b48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2203      	movs	r2, #3
 8000b54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	187a      	adds	r2, r7, r1
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fb8f 	bl	8001288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b009      	add	sp, #36	; 0x24
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40013000 	.word	0x40013000
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	000080e0 	.word	0x000080e0

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f886 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bbc:	f7ff fff7 	bl	8000bae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopForever+0xe>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopForever+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be6:	f001 fd4b 	bl	8002680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fc5d 	bl	80004a8 <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
   ldr   r0, =_estack
 8000bf0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	0800270c 	.word	0x0800270c
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	200001dc 	.word	0x200001dc

08000c08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_COMP_IRQHandler>
	...

08000c0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x3c>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_Init+0x3c>)
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f811 	bl	8000c4c <HAL_InitTick>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e001      	b.n	8000c3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c36:	f7ff fe3f 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c56:	681c      	ldr	r4, [r3, #0]
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_InitTick+0x60>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	23fa      	movs	r3, #250	; 0xfa
 8000c60:	0098      	lsls	r0, r3, #2
 8000c62:	f7ff fa51 	bl	8000108 <__udivsi3>
 8000c66:	0003      	movs	r3, r0
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	f7ff fa4c 	bl	8000108 <__udivsi3>
 8000c70:	0003      	movs	r3, r0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fafb 	bl	800126e <HAL_SYSTICK_Config>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e00f      	b.n	8000ca0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d80b      	bhi.n	8000c9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 fad8 	bl	8001244 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_InitTick+0x64>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b003      	add	sp, #12
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x1c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	18d2      	adds	r2, r2, r3
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200001d8 	.word	0x200001d8

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <HAL_GetTick+0x10>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	200001d8 	.word	0x200001d8

08000cec <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e159      	b.n	8000fb2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10a      	bne.n	8000d1c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2250      	movs	r2, #80	; 0x50
 8000d10:	2100      	movs	r1, #0
 8000d12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fde2 	bl	80008e0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d20:	2210      	movs	r2, #16
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b10      	cmp	r3, #16
 8000d26:	d005      	beq.n	8000d34 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2204      	movs	r2, #4
 8000d30:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d32:	d00b      	beq.n	8000d4c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d38:	2210      	movs	r2, #16
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2250      	movs	r2, #80	; 0x50
 8000d44:	2100      	movs	r1, #0
 8000d46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e132      	b.n	8000fb2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d50:	4a9a      	ldr	r2, [pc, #616]	; (8000fbc <HAL_ADC_Init+0x2d0>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	2202      	movs	r2, #2
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2203      	movs	r2, #3
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d108      	bne.n	8000d7c <HAL_ADC_Init+0x90>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2201      	movs	r2, #1
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d101      	bne.n	8000d7c <HAL_ADC_Init+0x90>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <HAL_ADC_Init+0x92>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d149      	bne.n	8000e16 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	23c0      	movs	r3, #192	; 0xc0
 8000d88:	061b      	lsls	r3, r3, #24
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d00b      	beq.n	8000da6 <HAL_ADC_Init+0xba>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d005      	beq.n	8000da6 <HAL_ADC_Init+0xba>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	061b      	lsls	r3, r3, #24
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d111      	bne.n	8000dca <HAL_ADC_Init+0xde>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	0892      	lsrs	r2, r2, #2
 8000db4:	611a      	str	r2, [r3, #16]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6919      	ldr	r1, [r3, #16]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	e014      	b.n	8000df4 <HAL_ADC_Init+0x108>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	0892      	lsrs	r2, r2, #2
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	4b79      	ldr	r3, [pc, #484]	; (8000fc0 <HAL_ADC_Init+0x2d4>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <HAL_ADC_Init+0x2d4>)
 8000de0:	4978      	ldr	r1, [pc, #480]	; (8000fc4 <HAL_ADC_Init+0x2d8>)
 8000de2:	400a      	ands	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	4b76      	ldr	r3, [pc, #472]	; (8000fc0 <HAL_ADC_Init+0x2d4>)
 8000de8:	6819      	ldr	r1, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4b74      	ldr	r3, [pc, #464]	; (8000fc0 <HAL_ADC_Init+0x2d4>)
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2118      	movs	r1, #24
 8000e00:	438a      	bics	r2, r1
 8000e02:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68d9      	ldr	r1, [r3, #12]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000e16:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <HAL_ADC_Init+0x2d4>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b69      	ldr	r3, [pc, #420]	; (8000fc0 <HAL_ADC_Init+0x2d4>)
 8000e1c:	496a      	ldr	r1, [pc, #424]	; (8000fc8 <HAL_ADC_Init+0x2dc>)
 8000e1e:	400a      	ands	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000e22:	4b67      	ldr	r3, [pc, #412]	; (8000fc0 <HAL_ADC_Init+0x2d4>)
 8000e24:	6819      	ldr	r1, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2a:	065a      	lsls	r2, r3, #25
 8000e2c:	4b64      	ldr	r3, [pc, #400]	; (8000fc0 <HAL_ADC_Init+0x2d4>)
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	055b      	lsls	r3, r3, #21
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d108      	bne.n	8000e52 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0549      	lsls	r1, r1, #21
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	495b      	ldr	r1, [pc, #364]	; (8000fcc <HAL_ADC_Init+0x2e0>)
 8000e5e:	400a      	ands	r2, r1
 8000e60:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68d9      	ldr	r1, [r3, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d101      	bne.n	8000e78 <HAL_ADC_Init+0x18c>
 8000e74:	2304      	movs	r3, #4
 8000e76:	e000      	b.n	8000e7a <HAL_ADC_Init+0x18e>
 8000e78:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e7a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2020      	movs	r0, #32
 8000e80:	5c1b      	ldrb	r3, [r3, r0]
 8000e82:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e84:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	202c      	movs	r0, #44	; 0x2c
 8000e8a:	5c1b      	ldrb	r3, [r3, r0]
 8000e8c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e8e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e94:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000e9c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ea4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb2:	23c2      	movs	r3, #194	; 0xc2
 8000eb4:	33ff      	adds	r3, #255	; 0xff
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d00b      	beq.n	8000ed2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68d9      	ldr	r1, [r3, #12]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2221      	movs	r2, #33	; 0x21
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d11a      	bne.n	8000f12 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2220      	movs	r2, #32
 8000ee0:	5c9b      	ldrb	r3, [r3, r2]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d109      	bne.n	8000efa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	0249      	lsls	r1, r1, #9
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	e00b      	b.n	8000f12 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000efe:	2220      	movs	r2, #32
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d11f      	bne.n	8000f5a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	492a      	ldr	r1, [pc, #168]	; (8000fd0 <HAL_ADC_Init+0x2e4>)
 8000f26:	400a      	ands	r2, r1
 8000f28:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6919      	ldr	r1, [r3, #16]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f38:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000f3e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	e00e      	b.n	8000f78 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d107      	bne.n	8000f78 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2101      	movs	r1, #1
 8000f74:	438a      	bics	r2, r1
 8000f76:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2107      	movs	r1, #7
 8000f84:	438a      	bics	r2, r1
 8000f86:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6959      	ldr	r1, [r3, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	4393      	bics	r3, r2
 8000fa8:	2201      	movs	r2, #1
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	fffffefd 	.word	0xfffffefd
 8000fc0:	40012708 	.word	0x40012708
 8000fc4:	ffc3ffff 	.word	0xffc3ffff
 8000fc8:	fdffffff 	.word	0xfdffffff
 8000fcc:	fffe0219 	.word	0xfffe0219
 8000fd0:	fffffc03 	.word	0xfffffc03

08000fd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2250      	movs	r2, #80	; 0x50
 8000fe2:	5c9b      	ldrb	r3, [r3, r2]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_ConfigChannel+0x18>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e06c      	b.n	80010c6 <HAL_ADC_ConfigChannel+0xf2>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2250      	movs	r2, #80	; 0x50
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d00b      	beq.n	8001018 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001004:	2220      	movs	r2, #32
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2250      	movs	r2, #80	; 0x50
 8001010:	2100      	movs	r1, #0
 8001012:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e056      	b.n	80010c6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <HAL_ADC_ConfigChannel+0xfc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d028      	beq.n	8001074 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	035b      	lsls	r3, r3, #13
 800102e:	0b5a      	lsrs	r2, r3, #13
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	02db      	lsls	r3, r3, #11
 8001040:	4013      	ands	r3, r2
 8001042:	d009      	beq.n	8001058 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <HAL_ADC_ConfigChannel+0x100>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <HAL_ADC_ConfigChannel+0x100>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	0409      	lsls	r1, r1, #16
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001052:	200a      	movs	r0, #10
 8001054:	f000 f844 	bl	80010e0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	029b      	lsls	r3, r3, #10
 8001060:	4013      	ands	r3, r2
 8001062:	d02b      	beq.n	80010bc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_ADC_ConfigChannel+0x100>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_ADC_ConfigChannel+0x100>)
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	03c9      	lsls	r1, r1, #15
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e023      	b.n	80010bc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	035b      	lsls	r3, r3, #13
 8001080:	0b5b      	lsrs	r3, r3, #13
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	400a      	ands	r2, r1
 800108a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	02db      	lsls	r3, r3, #11
 8001094:	4013      	ands	r3, r2
 8001096:	d005      	beq.n	80010a4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_ADC_ConfigChannel+0x100>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_ADC_ConfigChannel+0x100>)
 800109e:	490e      	ldr	r1, [pc, #56]	; (80010d8 <HAL_ADC_ConfigChannel+0x104>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	029b      	lsls	r3, r3, #10
 80010ac:	4013      	ands	r3, r2
 80010ae:	d005      	beq.n	80010bc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_ADC_ConfigChannel+0x100>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_ADC_ConfigChannel+0x100>)
 80010b6:	4909      	ldr	r1, [pc, #36]	; (80010dc <HAL_ADC_ConfigChannel+0x108>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2250      	movs	r2, #80	; 0x50
 80010c0:	2100      	movs	r1, #0
 80010c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	00001001 	.word	0x00001001
 80010d4:	40012708 	.word	0x40012708
 80010d8:	ff7fffff 	.word	0xff7fffff
 80010dc:	ffbfffff 	.word	0xffbfffff

080010e0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <ADC_DelayMicroSecond+0x38>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	490b      	ldr	r1, [pc, #44]	; (800111c <ADC_DelayMicroSecond+0x3c>)
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff f80a 	bl	8000108 <__udivsi3>
 80010f4:	0003      	movs	r3, r0
 80010f6:	001a      	movs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4353      	muls	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80010fe:	e002      	b.n	8001106 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3b01      	subs	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f9      	bne.n	8001100 <ADC_DelayMicroSecond+0x20>
  }
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b004      	add	sp, #16
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000000 	.word	0x20000000
 800111c:	000f4240 	.word	0x000f4240

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	0002      	movs	r2, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b7f      	cmp	r3, #127	; 0x7f
 8001134:	d828      	bhi.n	8001188 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001136:	4a2f      	ldr	r2, [pc, #188]	; (80011f4 <__NVIC_SetPriority+0xd4>)
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	33c0      	adds	r3, #192	; 0xc0
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	589b      	ldr	r3, [r3, r2]
 8001146:	1dfa      	adds	r2, r7, #7
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	0011      	movs	r1, r2
 800114c:	2203      	movs	r2, #3
 800114e:	400a      	ands	r2, r1
 8001150:	00d2      	lsls	r2, r2, #3
 8001152:	21ff      	movs	r1, #255	; 0xff
 8001154:	4091      	lsls	r1, r2
 8001156:	000a      	movs	r2, r1
 8001158:	43d2      	mvns	r2, r2
 800115a:	401a      	ands	r2, r3
 800115c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	019b      	lsls	r3, r3, #6
 8001162:	22ff      	movs	r2, #255	; 0xff
 8001164:	401a      	ands	r2, r3
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0018      	movs	r0, r3
 800116c:	2303      	movs	r3, #3
 800116e:	4003      	ands	r3, r0
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001174:	481f      	ldr	r0, [pc, #124]	; (80011f4 <__NVIC_SetPriority+0xd4>)
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b25b      	sxtb	r3, r3
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	430a      	orrs	r2, r1
 8001180:	33c0      	adds	r3, #192	; 0xc0
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001186:	e031      	b.n	80011ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <__NVIC_SetPriority+0xd8>)
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	0019      	movs	r1, r3
 8001190:	230f      	movs	r3, #15
 8001192:	400b      	ands	r3, r1
 8001194:	3b08      	subs	r3, #8
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3306      	adds	r3, #6
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	18d3      	adds	r3, r2, r3
 800119e:	3304      	adds	r3, #4
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	1dfa      	adds	r2, r7, #7
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	0011      	movs	r1, r2
 80011a8:	2203      	movs	r2, #3
 80011aa:	400a      	ands	r2, r1
 80011ac:	00d2      	lsls	r2, r2, #3
 80011ae:	21ff      	movs	r1, #255	; 0xff
 80011b0:	4091      	lsls	r1, r2
 80011b2:	000a      	movs	r2, r1
 80011b4:	43d2      	mvns	r2, r2
 80011b6:	401a      	ands	r2, r3
 80011b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	019b      	lsls	r3, r3, #6
 80011be:	22ff      	movs	r2, #255	; 0xff
 80011c0:	401a      	ands	r2, r3
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	0018      	movs	r0, r3
 80011c8:	2303      	movs	r3, #3
 80011ca:	4003      	ands	r3, r0
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d0:	4809      	ldr	r0, [pc, #36]	; (80011f8 <__NVIC_SetPriority+0xd8>)
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	001c      	movs	r4, r3
 80011d8:	230f      	movs	r3, #15
 80011da:	4023      	ands	r3, r4
 80011dc:	3b08      	subs	r3, #8
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	430a      	orrs	r2, r1
 80011e2:	3306      	adds	r3, #6
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	18c3      	adds	r3, r0, r3
 80011e8:	3304      	adds	r3, #4
 80011ea:	601a      	str	r2, [r3, #0]
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b003      	add	sp, #12
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	1e5a      	subs	r2, r3, #1
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	045b      	lsls	r3, r3, #17
 800120c:	429a      	cmp	r2, r3
 800120e:	d301      	bcc.n	8001214 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001210:	2301      	movs	r3, #1
 8001212:	e010      	b.n	8001236 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <SysTick_Config+0x44>)
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	3a01      	subs	r2, #1
 800121a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121c:	2301      	movs	r3, #1
 800121e:	425b      	negs	r3, r3
 8001220:	2103      	movs	r1, #3
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff ff7c 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x44>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x44>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	210f      	movs	r1, #15
 8001250:	187b      	adds	r3, r7, r1
 8001252:	1c02      	adds	r2, r0, #0
 8001254:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	187b      	adds	r3, r7, r1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b25b      	sxtb	r3, r3
 800125e:	0011      	movs	r1, r2
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b004      	add	sp, #16
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff ffbf 	bl	80011fc <SysTick_Config>
 800127e:	0003      	movs	r3, r0
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	b002      	add	sp, #8
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800129e:	e155      	b.n	800154c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4091      	lsls	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d100      	bne.n	80012b8 <HAL_GPIO_Init+0x30>
 80012b6:	e146      	b.n	8001546 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d005      	beq.n	80012d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2203      	movs	r2, #3
 80012ca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d130      	bne.n	8001332 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	409a      	lsls	r2, r3
 80012f2:	0013      	movs	r3, r2
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	2201      	movs	r2, #1
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2203      	movs	r2, #3
 8001338:	4013      	ands	r3, r2
 800133a:	2b03      	cmp	r3, #3
 800133c:	d017      	beq.n	800136e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	4013      	ands	r3, r2
 8001376:	2b02      	cmp	r3, #2
 8001378:	d123      	bne.n	80013c2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	58d3      	ldr	r3, [r2, r3]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2207      	movs	r2, #7
 800138c:	4013      	ands	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2107      	movs	r1, #7
 80013a6:	400b      	ands	r3, r1
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	6939      	ldr	r1, [r7, #16]
 80013c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	43da      	mvns	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	401a      	ands	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	23c0      	movs	r3, #192	; 0xc0
 80013fc:	029b      	lsls	r3, r3, #10
 80013fe:	4013      	ands	r3, r2
 8001400:	d100      	bne.n	8001404 <HAL_GPIO_Init+0x17c>
 8001402:	e0a0      	b.n	8001546 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_GPIO_Init+0x2dc>)
 8001406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001408:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x2dc>)
 800140a:	2101      	movs	r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_GPIO_Init+0x2e0>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	589b      	ldr	r3, [r3, r2]
 800141c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2203      	movs	r2, #3
 8001422:	4013      	ands	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	409a      	lsls	r2, r3
 800142a:	0013      	movs	r3, r2
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	429a      	cmp	r2, r3
 800143c:	d01f      	beq.n	800147e <HAL_GPIO_Init+0x1f6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <HAL_GPIO_Init+0x2e4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d019      	beq.n	800147a <HAL_GPIO_Init+0x1f2>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a49      	ldr	r2, [pc, #292]	; (8001570 <HAL_GPIO_Init+0x2e8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x1ee>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a48      	ldr	r2, [pc, #288]	; (8001574 <HAL_GPIO_Init+0x2ec>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00d      	beq.n	8001472 <HAL_GPIO_Init+0x1ea>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a47      	ldr	r2, [pc, #284]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x1e6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a46      	ldr	r2, [pc, #280]	; (800157c <HAL_GPIO_Init+0x2f4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_GPIO_Init+0x1e2>
 8001466:	2305      	movs	r3, #5
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x1f8>
 800146a:	2306      	movs	r3, #6
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x1f8>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x1f8>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x1f8>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x1f8>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x1f8>
 800147e:	2300      	movs	r3, #0
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	2103      	movs	r1, #3
 8001484:	400a      	ands	r2, r1
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_GPIO_Init+0x2e0>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	035b      	lsls	r3, r3, #13
 80014b6:	4013      	ands	r3, r2
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43da      	mvns	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	039b      	lsls	r3, r3, #14
 80014e0:	4013      	ands	r3, r2
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	4013      	ands	r3, r2
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43da      	mvns	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	025b      	lsls	r3, r3, #9
 8001534:	4013      	ands	r3, r2
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	40da      	lsrs	r2, r3
 8001554:	1e13      	subs	r3, r2, #0
 8001556:	d000      	beq.n	800155a <HAL_GPIO_Init+0x2d2>
 8001558:	e6a2      	b.n	80012a0 <HAL_GPIO_Init+0x18>
  }
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b006      	add	sp, #24
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	50000400 	.word	0x50000400
 8001570:	50000800 	.word	0x50000800
 8001574:	50000c00 	.word	0x50000c00
 8001578:	50001000 	.word	0x50001000
 800157c:	50001c00 	.word	0x50001c00
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e082      	b.n	800169c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2241      	movs	r2, #65	; 0x41
 800159a:	5c9b      	ldrb	r3, [r3, r2]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d107      	bne.n	80015b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	2100      	movs	r1, #0
 80015a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff f9d3 	bl	8000958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2241      	movs	r2, #65	; 0x41
 80015b6:	2124      	movs	r1, #36	; 0x24
 80015b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	438a      	bics	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4934      	ldr	r1, [pc, #208]	; (80016a4 <HAL_I2C_Init+0x120>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4931      	ldr	r1, [pc, #196]	; (80016a8 <HAL_I2C_Init+0x124>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0209      	lsls	r1, r1, #8
 80015fc:	430a      	orrs	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e007      	b.n	8001612 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2184      	movs	r1, #132	; 0x84
 800160c:	0209      	lsls	r1, r1, #8
 800160e:	430a      	orrs	r2, r1
 8001610:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d104      	bne.n	8001624 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	491f      	ldr	r1, [pc, #124]	; (80016ac <HAL_I2C_Init+0x128>)
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	491a      	ldr	r1, [pc, #104]	; (80016a8 <HAL_I2C_Init+0x124>)
 8001640:	400a      	ands	r2, r1
 8001642:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	431a      	orrs	r2, r3
 800164e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69d9      	ldr	r1, [r3, #28]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2241      	movs	r2, #65	; 0x41
 8001688:	2120      	movs	r1, #32
 800168a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2242      	movs	r2, #66	; 0x42
 8001696:	2100      	movs	r1, #0
 8001698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b002      	add	sp, #8
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	f0ffffff 	.word	0xf0ffffff
 80016a8:	ffff7fff 	.word	0xffff7fff
 80016ac:	02008000 	.word	0x02008000

080016b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2241      	movs	r2, #65	; 0x41
 80016be:	5c9b      	ldrb	r3, [r3, r2]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b20      	cmp	r3, #32
 80016c4:	d138      	bne.n	8001738 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e032      	b.n	800173a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	2101      	movs	r1, #1
 80016da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2241      	movs	r2, #65	; 0x41
 80016e0:	2124      	movs	r1, #36	; 0x24
 80016e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	438a      	bics	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4911      	ldr	r1, [pc, #68]	; (8001744 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2241      	movs	r2, #65	; 0x41
 8001728:	2120      	movs	r1, #32
 800172a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	2100      	movs	r1, #0
 8001732:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001738:	2302      	movs	r3, #2
  }
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	ffffefff 	.word	0xffffefff

08001748 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2241      	movs	r2, #65	; 0x41
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b20      	cmp	r3, #32
 800175c:	d139      	bne.n	80017d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2240      	movs	r2, #64	; 0x40
 8001762:	5c9b      	ldrb	r3, [r3, r2]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001768:	2302      	movs	r3, #2
 800176a:	e033      	b.n	80017d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	2101      	movs	r1, #1
 8001772:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2241      	movs	r2, #65	; 0x41
 8001778:	2124      	movs	r1, #36	; 0x24
 800177a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2101      	movs	r1, #1
 8001788:	438a      	bics	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4a11      	ldr	r2, [pc, #68]	; (80017dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2241      	movs	r2, #65	; 0x41
 80017c2:	2120      	movs	r1, #32
 80017c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017d2:	2302      	movs	r3, #2
  }
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b004      	add	sp, #16
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	fffff0ff 	.word	0xfffff0ff

080017e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f000 fb6c 	bl	8001ecc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f4:	4bc8      	ldr	r3, [pc, #800]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	220c      	movs	r2, #12
 80017fa:	4013      	ands	r3, r2
 80017fc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017fe:	4bc6      	ldr	r3, [pc, #792]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	025b      	lsls	r3, r3, #9
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x36>
 8001814:	e07d      	b.n	8001912 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b08      	cmp	r3, #8
 800181a:	d007      	beq.n	800182c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d112      	bne.n	8001848 <HAL_RCC_OscConfig+0x68>
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	429a      	cmp	r2, r3
 800182a:	d10d      	bne.n	8001848 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	4bba      	ldr	r3, [pc, #744]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	029b      	lsls	r3, r3, #10
 8001834:	4013      	ands	r3, r2
 8001836:	d100      	bne.n	800183a <HAL_RCC_OscConfig+0x5a>
 8001838:	e06a      	b.n	8001910 <HAL_RCC_OscConfig+0x130>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d166      	bne.n	8001910 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f000 fb42 	bl	8001ecc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	429a      	cmp	r2, r3
 8001852:	d107      	bne.n	8001864 <HAL_RCC_OscConfig+0x84>
 8001854:	4bb0      	ldr	r3, [pc, #704]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4baf      	ldr	r3, [pc, #700]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0249      	lsls	r1, r1, #9
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e027      	b.n	80018b4 <HAL_RCC_OscConfig+0xd4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	23a0      	movs	r3, #160	; 0xa0
 800186a:	02db      	lsls	r3, r3, #11
 800186c:	429a      	cmp	r2, r3
 800186e:	d10e      	bne.n	800188e <HAL_RCC_OscConfig+0xae>
 8001870:	4ba9      	ldr	r3, [pc, #676]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4ba8      	ldr	r3, [pc, #672]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	02c9      	lsls	r1, r1, #11
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	4ba6      	ldr	r3, [pc, #664]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4ba5      	ldr	r3, [pc, #660]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0249      	lsls	r1, r1, #9
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e012      	b.n	80018b4 <HAL_RCC_OscConfig+0xd4>
 800188e:	4ba2      	ldr	r3, [pc, #648]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4ba1      	ldr	r3, [pc, #644]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001894:	49a1      	ldr	r1, [pc, #644]	; (8001b1c <HAL_RCC_OscConfig+0x33c>)
 8001896:	400a      	ands	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	4b9f      	ldr	r3, [pc, #636]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4b9b      	ldr	r3, [pc, #620]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b9a      	ldr	r3, [pc, #616]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80018ae:	499c      	ldr	r1, [pc, #624]	; (8001b20 <HAL_RCC_OscConfig+0x340>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d014      	beq.n	80018e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fa0c 	bl	8000cd8 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c6:	f7ff fa07 	bl	8000cd8 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e2f9      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d8:	4b8f      	ldr	r3, [pc, #572]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0xe6>
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff f9f7 	bl	8000cd8 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff f9f2 	bl	8000cd8 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e2e4      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001902:	4b85      	ldr	r3, [pc, #532]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	4013      	ands	r3, r2
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x110>
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d100      	bne.n	800191e <HAL_RCC_OscConfig+0x13e>
 800191c:	e099      	b.n	8001a52 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	2220      	movs	r2, #32
 8001928:	4013      	ands	r3, r2
 800192a:	d009      	beq.n	8001940 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800192c:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b79      	ldr	r3, [pc, #484]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001932:	2120      	movs	r1, #32
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	2220      	movs	r2, #32
 800193c:	4393      	bics	r3, r2
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	2b0c      	cmp	r3, #12
 800194a:	d13e      	bne.n	80019ca <HAL_RCC_OscConfig+0x1ea>
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d13b      	bne.n	80019ca <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001952:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2204      	movs	r2, #4
 8001958:	4013      	ands	r3, r2
 800195a:	d004      	beq.n	8001966 <HAL_RCC_OscConfig+0x186>
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e2b2      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b6c      	ldr	r3, [pc, #432]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x344>)
 800196c:	4013      	ands	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	021a      	lsls	r2, r3, #8
 8001976:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800197c:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2209      	movs	r2, #9
 8001982:	4393      	bics	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198e:	f000 fbeb 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8001992:	0001      	movs	r1, r0
 8001994:	4b60      	ldr	r3, [pc, #384]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	220f      	movs	r2, #15
 800199c:	4013      	ands	r3, r2
 800199e:	4a62      	ldr	r2, [pc, #392]	; (8001b28 <HAL_RCC_OscConfig+0x348>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	000a      	movs	r2, r1
 80019a4:	40da      	lsrs	r2, r3
 80019a6:	4b61      	ldr	r3, [pc, #388]	; (8001b2c <HAL_RCC_OscConfig+0x34c>)
 80019a8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80019aa:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <HAL_RCC_OscConfig+0x350>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2513      	movs	r5, #19
 80019b0:	197c      	adds	r4, r7, r5
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7ff f94a 	bl	8000c4c <HAL_InitTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80019bc:	197b      	adds	r3, r7, r5
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d046      	beq.n	8001a52 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80019c4:	197b      	adds	r3, r7, r5
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	e280      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d027      	beq.n	8001a20 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019d0:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2209      	movs	r2, #9
 80019d6:	4393      	bics	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f979 	bl	8000cd8 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff f974 	bl	8000cd8 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e266      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019fe:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	d0f1      	beq.n	80019ec <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a45      	ldr	r2, [pc, #276]	; (8001b24 <HAL_RCC_OscConfig+0x344>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	021a      	lsls	r2, r3, #8
 8001a18:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	e018      	b.n	8001a52 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a20:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b3c      	ldr	r3, [pc, #240]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	438a      	bics	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f954 	bl	8000cd8 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff f94f 	bl	8000cd8 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e241      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a48:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d1f1      	bne.n	8001a36 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2210      	movs	r2, #16
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCC_OscConfig+0x27e>
 8001a5c:	e0a1      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d140      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x29c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e227      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <HAL_RCC_OscConfig+0x354>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1a      	ldr	r2, [r3, #32]
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	0a19      	lsrs	r1, r3, #8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	061a      	lsls	r2, r3, #24
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	0b5b      	lsrs	r3, r3, #13
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	0212      	lsls	r2, r2, #8
 8001ab0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	210f      	movs	r1, #15
 8001aba:	400b      	ands	r3, r1
 8001abc:	491a      	ldr	r1, [pc, #104]	; (8001b28 <HAL_RCC_OscConfig+0x348>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x34c>)
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_RCC_OscConfig+0x350>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2513      	movs	r5, #19
 8001acc:	197c      	adds	r4, r7, r5
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7ff f8bc 	bl	8000c4c <HAL_InitTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ad8:	197b      	adds	r3, r7, r5
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d060      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001ae0:	197b      	adds	r3, r7, r5
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	e1f2      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d03f      	beq.n	8001b6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	0049      	lsls	r1, r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff f8ec 	bl	8000cd8 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b04:	e018      	b.n	8001b38 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b06:	f7ff f8e7 	bl	8000cd8 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d911      	bls.n	8001b38 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1d9      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	fffeffff 	.word	0xfffeffff
 8001b20:	fffbffff 	.word	0xfffbffff
 8001b24:	ffffe0ff 	.word	0xffffe0ff
 8001b28:	080026e0 	.word	0x080026e0
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004
 8001b34:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b38:	4bc9      	ldr	r3, [pc, #804]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d0e0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b44:	4bc6      	ldr	r3, [pc, #792]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4ac6      	ldr	r2, [pc, #792]	; (8001e64 <HAL_RCC_OscConfig+0x684>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1a      	ldr	r2, [r3, #32]
 8001b52:	4bc3      	ldr	r3, [pc, #780]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b58:	4bc1      	ldr	r3, [pc, #772]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	0a19      	lsrs	r1, r3, #8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	061a      	lsls	r2, r3, #24
 8001b66:	4bbe      	ldr	r3, [pc, #760]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	e019      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b6e:	4bbc      	ldr	r3, [pc, #752]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4bbb      	ldr	r3, [pc, #748]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001b74:	49bc      	ldr	r1, [pc, #752]	; (8001e68 <HAL_RCC_OscConfig+0x688>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f8ad 	bl	8000cd8 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b84:	f7ff f8a8 	bl	8000cd8 <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e19a      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b96:	4bb2      	ldr	r3, [pc, #712]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d036      	beq.n	8001c1a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d019      	beq.n	8001be8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb4:	4baa      	ldr	r3, [pc, #680]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001bb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb8:	4ba9      	ldr	r3, [pc, #676]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff f88a 	bl	8000cd8 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bca:	f7ff f885 	bl	8000cd8 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e177      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bdc:	4ba0      	ldr	r3, [pc, #640]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f1      	beq.n	8001bca <HAL_RCC_OscConfig+0x3ea>
 8001be6:	e018      	b.n	8001c1a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be8:	4b9d      	ldr	r3, [pc, #628]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bec:	4b9c      	ldr	r3, [pc, #624]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f870 	bl	8000cd8 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f86b 	bl	8000cd8 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e15d      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c10:	4b93      	ldr	r3, [pc, #588]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d1f1      	bne.n	8001bfe <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCC_OscConfig+0x446>
 8001c24:	e0ae      	b.n	8001d84 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2023      	movs	r0, #35	; 0x23
 8001c28:	183b      	adds	r3, r7, r0
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	055b      	lsls	r3, r3, #21
 8001c36:	4013      	ands	r3, r2
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c3e:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	0549      	lsls	r1, r1, #21
 8001c44:	430a      	orrs	r2, r1
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c48:	183b      	adds	r3, r7, r0
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	4b87      	ldr	r3, [pc, #540]	; (8001e6c <HAL_RCC_OscConfig+0x68c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4013      	ands	r3, r2
 8001c58:	d11a      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5a:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <HAL_RCC_OscConfig+0x68c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <HAL_RCC_OscConfig+0x68c>)
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	0049      	lsls	r1, r1, #1
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c68:	f7ff f836 	bl	8000cd8 <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7ff f831 	bl	8000cd8 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b64      	cmp	r3, #100	; 0x64
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e123      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <HAL_RCC_OscConfig+0x68c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x4cc>
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	0049      	lsls	r1, r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	651a      	str	r2, [r3, #80]	; 0x50
 8001caa:	e031      	b.n	8001d10 <HAL_RCC_OscConfig+0x530>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x4ee>
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cb8:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cba:	496b      	ldr	r1, [pc, #428]	; (8001e68 <HAL_RCC_OscConfig+0x688>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	651a      	str	r2, [r3, #80]	; 0x50
 8001cc0:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc4:	4b66      	ldr	r3, [pc, #408]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cc6:	496a      	ldr	r1, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x690>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	651a      	str	r2, [r3, #80]	; 0x50
 8001ccc:	e020      	b.n	8001d10 <HAL_RCC_OscConfig+0x530>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	23a0      	movs	r3, #160	; 0xa0
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x518>
 8001cda:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cde:	4b60      	ldr	r3, [pc, #384]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	00c9      	lsls	r1, r1, #3
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ce8:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cec:	4b5c      	ldr	r3, [pc, #368]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	0049      	lsls	r1, r1, #1
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0x530>
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cfc:	4b58      	ldr	r3, [pc, #352]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001cfe:	495a      	ldr	r1, [pc, #360]	; (8001e68 <HAL_RCC_OscConfig+0x688>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	651a      	str	r2, [r3, #80]	; 0x50
 8001d04:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d08:	4b55      	ldr	r3, [pc, #340]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001d0a:	4959      	ldr	r1, [pc, #356]	; (8001e70 <HAL_RCC_OscConfig+0x690>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d015      	beq.n	8001d44 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7fe ffde 	bl	8000cd8 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d20:	e009      	b.n	8001d36 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7fe ffd9 	bl	8000cd8 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	4a51      	ldr	r2, [pc, #324]	; (8001e74 <HAL_RCC_OscConfig+0x694>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e0ca      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d36:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d0ef      	beq.n	8001d22 <HAL_RCC_OscConfig+0x542>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7fe ffc8 	bl	8000cd8 <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7fe ffc3 	bl	8000cd8 <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4a46      	ldr	r2, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x694>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e0b4      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001d64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d1ef      	bne.n	8001d4e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d6e:	2323      	movs	r3, #35	; 0x23
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d7c:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001d7e:	493e      	ldr	r1, [pc, #248]	; (8001e78 <HAL_RCC_OscConfig+0x698>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d100      	bne.n	8001d8e <HAL_RCC_OscConfig+0x5ae>
 8001d8c:	e09d      	b.n	8001eca <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d100      	bne.n	8001d96 <HAL_RCC_OscConfig+0x5b6>
 8001d94:	e076      	b.n	8001e84 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d145      	bne.n	8001e2a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001da4:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x69c>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7fe ff95 	bl	8000cd8 <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe ff90 	bl	8000cd8 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e082      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	049b      	lsls	r3, r3, #18
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <HAL_RCC_OscConfig+0x6a0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	431a      	orrs	r2, r3
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001dee:	430a      	orrs	r2, r1
 8001df0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	0449      	lsls	r1, r1, #17
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe ff6a 	bl	8000cd8 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7fe ff65 	bl	8000cd8 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e057      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	049b      	lsls	r3, r3, #18
 8001e24:	4013      	ands	r3, r2
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x62a>
 8001e28:	e04f      	b.n	8001eca <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001e30:	4912      	ldr	r1, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x69c>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe ff4f 	bl	8000cd8 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe ff4a 	bl	8000cd8 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e03c      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e52:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	049b      	lsls	r3, r3, #18
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x660>
 8001e5e:	e034      	b.n	8001eca <HAL_RCC_OscConfig+0x6ea>
 8001e60:	40021000 	.word	0x40021000
 8001e64:	ffff1fff 	.word	0xffff1fff
 8001e68:	fffffeff 	.word	0xfffffeff
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	fffffbff 	.word	0xfffffbff
 8001e74:	00001388 	.word	0x00001388
 8001e78:	efffffff 	.word	0xefffffff
 8001e7c:	feffffff 	.word	0xfeffffff
 8001e80:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x6f4>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	025b      	lsls	r3, r3, #9
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	23f0      	movs	r3, #240	; 0xf0
 8001eaa:	039b      	lsls	r3, r3, #14
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b00a      	add	sp, #40	; 0x28
 8001ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b5b0      	push	{r4, r5, r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e128      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b96      	ldr	r3, [pc, #600]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d91e      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b93      	ldr	r3, [pc, #588]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4393      	bics	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	4b90      	ldr	r3, [pc, #576]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fee4 	bl	8000cd8 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f14:	e009      	b.n	8001f2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7fe fedf 	bl	8000cd8 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4a8a      	ldr	r2, [pc, #552]	; (800214c <HAL_RCC_ClockConfig+0x274>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e109      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b87      	ldr	r3, [pc, #540]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f42:	4b83      	ldr	r3, [pc, #524]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	22f0      	movs	r2, #240	; 0xf0
 8001f48:	4393      	bics	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4b7f      	ldr	r3, [pc, #508]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d100      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x8a>
 8001f60:	e089      	b.n	8002076 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f6a:	4b79      	ldr	r3, [pc, #484]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	029b      	lsls	r3, r3, #10
 8001f72:	4013      	ands	r3, r2
 8001f74:	d120      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0e1      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f82:	4b73      	ldr	r3, [pc, #460]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	049b      	lsls	r3, r3, #18
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d114      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0d5      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d106      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0ca      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fa8:	4b69      	ldr	r3, [pc, #420]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0c2      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb8:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4b62      	ldr	r3, [pc, #392]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fcc:	f7fe fe84 	bl	8000cd8 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d111      	bne.n	8002000 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fde:	f7fe fe7b 	bl	8000cd8 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x274>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0a5      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff2:	4b57      	ldr	r3, [pc, #348]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d1ef      	bne.n	8001fde <HAL_RCC_ClockConfig+0x106>
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d111      	bne.n	800202c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	e009      	b.n	800201e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200a:	f7fe fe65 	bl	8000cd8 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4a4d      	ldr	r2, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x274>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e08f      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	220c      	movs	r2, #12
 8002024:	4013      	ands	r3, r2
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d1ef      	bne.n	800200a <HAL_RCC_ClockConfig+0x132>
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d11b      	bne.n	800206c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002034:	e009      	b.n	800204a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	f7fe fe4f 	bl	8000cd8 <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	4a42      	ldr	r2, [pc, #264]	; (800214c <HAL_RCC_ClockConfig+0x274>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e079      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	220c      	movs	r2, #12
 8002050:	4013      	ands	r3, r2
 8002052:	2b04      	cmp	r3, #4
 8002054:	d1ef      	bne.n	8002036 <HAL_RCC_ClockConfig+0x15e>
 8002056:	e00e      	b.n	8002076 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7fe fe3e 	bl	8000cd8 <HAL_GetTick>
 800205c:	0002      	movs	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	4a3a      	ldr	r2, [pc, #232]	; (800214c <HAL_RCC_ClockConfig+0x274>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d901      	bls.n	800206c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e068      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800206c:	4b38      	ldr	r3, [pc, #224]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	220c      	movs	r2, #12
 8002072:	4013      	ands	r3, r2
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	4013      	ands	r3, r2
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d21e      	bcs.n	80020c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002096:	f7fe fe1f 	bl	8000cd8 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	e009      	b.n	80020b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7fe fe1a 	bl	8000cd8 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	4a28      	ldr	r2, [pc, #160]	; (800214c <HAL_RCC_ClockConfig+0x274>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e044      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d1ee      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2204      	movs	r2, #4
 80020c8:	4013      	ands	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a20      	ldr	r2, [pc, #128]	; (8002154 <HAL_RCC_ClockConfig+0x27c>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2208      	movs	r2, #8
 80020e6:	4013      	ands	r3, r2
 80020e8:	d00a      	beq.n	8002100 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <HAL_RCC_ClockConfig+0x280>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	00da      	lsls	r2, r3, #3
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002100:	f000 f832 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002104:	0001      	movs	r1, r0
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_RCC_ClockConfig+0x278>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	220f      	movs	r2, #15
 800210e:	4013      	ands	r3, r2
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <HAL_RCC_ClockConfig+0x284>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	000a      	movs	r2, r1
 8002116:	40da      	lsrs	r2, r3
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_ClockConfig+0x288>)
 800211a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_RCC_ClockConfig+0x28c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	250b      	movs	r5, #11
 8002122:	197c      	adds	r4, r7, r5
 8002124:	0018      	movs	r0, r3
 8002126:	f7fe fd91 	bl	8000c4c <HAL_InitTick>
 800212a:	0003      	movs	r3, r0
 800212c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800212e:	197b      	adds	r3, r7, r5
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002136:	197b      	adds	r3, r7, r5
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	e000      	b.n	800213e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b004      	add	sp, #16
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	40022000 	.word	0x40022000
 800214c:	00001388 	.word	0x00001388
 8002150:	40021000 	.word	0x40021000
 8002154:	fffff8ff 	.word	0xfffff8ff
 8002158:	ffffc7ff 	.word	0xffffc7ff
 800215c:	080026e0 	.word	0x080026e0
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800216e:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002176:	230c      	movs	r3, #12
 8002178:	4013      	ands	r3, r2
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d014      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x40>
 800217e:	d900      	bls.n	8002182 <HAL_RCC_GetSysClockFreq+0x1a>
 8002180:	e07b      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x112>
 8002182:	2b04      	cmp	r3, #4
 8002184:	d002      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x24>
 8002186:	2b08      	cmp	r3, #8
 8002188:	d00b      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800218a:	e076      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800218c:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2210      	movs	r2, #16
 8002192:	4013      	ands	r3, r2
 8002194:	d002      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002196:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800219a:	e07c      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800219c:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021a0:	e079      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a2:	4b42      	ldr	r3, [pc, #264]	; (80022ac <HAL_RCC_GetSysClockFreq+0x144>)
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021a6:	e076      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	0c9a      	lsrs	r2, r3, #18
 80021ac:	230f      	movs	r3, #15
 80021ae:	401a      	ands	r2, r3
 80021b0:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x148>)
 80021b2:	5c9b      	ldrb	r3, [r3, r2]
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	0d9a      	lsrs	r2, r3, #22
 80021ba:	2303      	movs	r3, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	3301      	adds	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	025b      	lsls	r3, r3, #9
 80021ca:	4013      	ands	r3, r2
 80021cc:	d01a      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <HAL_RCC_GetSysClockFreq+0x144>)
 80021d8:	2300      	movs	r3, #0
 80021da:	69b8      	ldr	r0, [r7, #24]
 80021dc:	69f9      	ldr	r1, [r7, #28]
 80021de:	f7fe f83f 	bl	8000260 <__aeabi_lmul>
 80021e2:	0002      	movs	r2, r0
 80021e4:	000b      	movs	r3, r1
 80021e6:	0010      	movs	r0, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f7fe f813 	bl	8000220 <__aeabi_uldivmod>
 80021fa:	0002      	movs	r2, r0
 80021fc:	000b      	movs	r3, r1
 80021fe:	0013      	movs	r3, r2
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
 8002202:	e037      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2210      	movs	r2, #16
 800220a:	4013      	ands	r3, r2
 800220c:	d01a      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002218:	2300      	movs	r3, #0
 800221a:	68b8      	ldr	r0, [r7, #8]
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	f7fe f81f 	bl	8000260 <__aeabi_lmul>
 8002222:	0002      	movs	r2, r0
 8002224:	000b      	movs	r3, r1
 8002226:	0010      	movs	r0, r2
 8002228:	0019      	movs	r1, r3
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f7fd fff3 	bl	8000220 <__aeabi_uldivmod>
 800223a:	0002      	movs	r2, r0
 800223c:	000b      	movs	r3, r1
 800223e:	0013      	movs	r3, r2
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
 8002242:	e017      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	0018      	movs	r0, r3
 8002248:	2300      	movs	r3, #0
 800224a:	0019      	movs	r1, r3
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800224e:	2300      	movs	r3, #0
 8002250:	f7fe f806 	bl	8000260 <__aeabi_lmul>
 8002254:	0002      	movs	r2, r0
 8002256:	000b      	movs	r3, r1
 8002258:	0010      	movs	r0, r2
 800225a:	0019      	movs	r1, r3
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	001c      	movs	r4, r3
 8002260:	2300      	movs	r3, #0
 8002262:	001d      	movs	r5, r3
 8002264:	0022      	movs	r2, r4
 8002266:	002b      	movs	r3, r5
 8002268:	f7fd ffda 	bl	8000220 <__aeabi_uldivmod>
 800226c:	0002      	movs	r2, r0
 800226e:	000b      	movs	r3, r1
 8002270:	0013      	movs	r3, r2
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002278:	e00d      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0b5b      	lsrs	r3, r3, #13
 8002280:	2207      	movs	r2, #7
 8002282:	4013      	ands	r3, r2
 8002284:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	3301      	adds	r3, #1
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	0212      	lsls	r2, r2, #8
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002294:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b00e      	add	sp, #56	; 0x38
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	003d0900 	.word	0x003d0900
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200
 80022b0:	080026f0 	.word	0x080026f0

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80022bc:	2017      	movs	r0, #23
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2220      	movs	r2, #32
 80022ca:	4013      	ands	r3, r2
 80022cc:	d100      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80022ce:	e0c7      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d0:	4b93      	ldr	r3, [pc, #588]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80022d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	4013      	ands	r3, r2
 80022da:	d109      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80022de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e0:	4b8f      	ldr	r3, [pc, #572]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	0549      	lsls	r1, r1, #21
 80022e6:	430a      	orrs	r2, r1
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b8c      	ldr	r3, [pc, #560]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d11a      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fc:	4b89      	ldr	r3, [pc, #548]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0049      	lsls	r1, r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe fce5 	bl	8000cd8 <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	e008      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7fe fce0 	bl	8000cd8 <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0f8      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4013      	ands	r3, r2
 8002330:	d0f0      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002332:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	23c0      	movs	r3, #192	; 0xc0
 8002338:	039b      	lsls	r3, r3, #14
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	23c0      	movs	r3, #192	; 0xc0
 8002344:	039b      	lsls	r3, r3, #14
 8002346:	4013      	ands	r3, r2
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	429a      	cmp	r2, r3
 800234c:	d013      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	23c0      	movs	r3, #192	; 0xc0
 8002354:	029b      	lsls	r3, r3, #10
 8002356:	401a      	ands	r2, r3
 8002358:	23c0      	movs	r3, #192	; 0xc0
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	429a      	cmp	r2, r3
 800235e:	d10a      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002360:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	401a      	ands	r2, r3
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	029b      	lsls	r3, r3, #10
 800236e:	429a      	cmp	r2, r3
 8002370:	d101      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0d0      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002376:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	4013      	ands	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d03b      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	23c0      	movs	r3, #192	; 0xc0
 800238e:	029b      	lsls	r3, r3, #10
 8002390:	4013      	ands	r3, r2
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d033      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2220      	movs	r2, #32
 800239e:	4013      	ands	r3, r2
 80023a0:	d02e      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80023a2:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a6:	4a60      	ldr	r2, [pc, #384]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ac:	4b5c      	ldr	r3, [pc, #368]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b0:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	0309      	lsls	r1, r1, #12
 80023b6:	430a      	orrs	r2, r1
 80023b8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ba:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023be:	4b58      	ldr	r3, [pc, #352]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023c0:	495a      	ldr	r1, [pc, #360]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80023c2:	400a      	ands	r2, r1
 80023c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80023c6:	4b56      	ldr	r3, [pc, #344]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	d014      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fc7f 	bl	8000cd8 <HAL_GetTick>
 80023da:	0003      	movs	r3, r0
 80023dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023de:	e009      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7fe fc7a 	bl	8000cd8 <HAL_GetTick>
 80023e4:	0002      	movs	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	4a51      	ldr	r2, [pc, #324]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e091      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023f4:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2220      	movs	r2, #32
 8002406:	4013      	ands	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	23c0      	movs	r3, #192	; 0xc0
 8002410:	029b      	lsls	r3, r3, #10
 8002412:	401a      	ands	r2, r3
 8002414:	23c0      	movs	r3, #192	; 0xc0
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	429a      	cmp	r2, r3
 800241a:	d10c      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800241c:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a44      	ldr	r2, [pc, #272]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	23c0      	movs	r3, #192	; 0xc0
 800242c:	039b      	lsls	r3, r3, #14
 800242e:	401a      	ands	r2, r3
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002438:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	23c0      	movs	r3, #192	; 0xc0
 8002440:	029b      	lsls	r3, r3, #10
 8002442:	401a      	ands	r2, r3
 8002444:	4b36      	ldr	r3, [pc, #216]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800244a:	2317      	movs	r3, #23
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800245a:	4937      	ldr	r1, [pc, #220]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800245c:	400a      	ands	r2, r1
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2201      	movs	r2, #1
 8002466:	4013      	ands	r3, r2
 8002468:	d009      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	2203      	movs	r2, #3
 8002470:	4393      	bics	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800247a:	430a      	orrs	r2, r1
 800247c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2202      	movs	r2, #2
 8002484:	4013      	ands	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	220c      	movs	r2, #12
 800248e:	4393      	bics	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002498:	430a      	orrs	r2, r1
 800249a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2204      	movs	r2, #4
 80024a2:	4013      	ands	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	4a24      	ldr	r2, [pc, #144]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024b6:	430a      	orrs	r2, r1
 80024b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2208      	movs	r2, #8
 80024c0:	4013      	ands	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4013      	ands	r3, r2
 80024e2:	d009      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	4013      	ands	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002508:	4013      	ands	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002512:	430a      	orrs	r2, r1
 8002514:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b006      	add	sp, #24
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
 8002528:	fffcffff 	.word	0xfffcffff
 800252c:	fff7ffff 	.word	0xfff7ffff
 8002530:	00001388 	.word	0x00001388
 8002534:	ffcfffff 	.word	0xffcfffff
 8002538:	efffffff 	.word	0xefffffff
 800253c:	fffff3ff 	.word	0xfffff3ff
 8002540:	ffffcfff 	.word	0xffffcfff
 8002544:	fff3ffff 	.word	0xfff3ffff

08002548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e083      	b.n	8002662 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	2382      	movs	r3, #130	; 0x82
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	429a      	cmp	r2, r3
 800256c:	d009      	beq.n	8002582 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
 8002574:	e005      	b.n	8002582 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2251      	movs	r2, #81	; 0x51
 800258c:	5c9b      	ldrb	r3, [r3, r2]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2250      	movs	r2, #80	; 0x50
 8002598:	2100      	movs	r1, #0
 800259a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	0018      	movs	r0, r3
 80025a0:	f7fe faa8 	bl	8000af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2251      	movs	r2, #81	; 0x51
 80025a8:	2102      	movs	r1, #2
 80025aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	438a      	bics	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	2382      	movs	r3, #130	; 0x82
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	401a      	ands	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	2384      	movs	r3, #132	; 0x84
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	400b      	ands	r3, r1
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68d9      	ldr	r1, [r3, #12]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	400b      	ands	r3, r1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2102      	movs	r1, #2
 80025e4:	400b      	ands	r3, r1
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	2101      	movs	r1, #1
 80025ee:	400b      	ands	r3, r1
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6999      	ldr	r1, [r3, #24]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	400b      	ands	r3, r1
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2138      	movs	r1, #56	; 0x38
 8002604:	400b      	ands	r3, r1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	400b      	ands	r3, r1
 8002610:	431a      	orrs	r2, r3
 8002612:	0011      	movs	r1, r2
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	019b      	lsls	r3, r3, #6
 800261c:	401a      	ands	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	2204      	movs	r2, #4
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	2210      	movs	r2, #16
 8002638:	401a      	ands	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <HAL_SPI_Init+0x124>)
 800264e:	400a      	ands	r2, r1
 8002650:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2251      	movs	r2, #81	; 0x51
 800265c:	2101      	movs	r1, #1
 800265e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b002      	add	sp, #8
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	fffff7ff 	.word	0xfffff7ff

08002670 <memset>:
 8002670:	0003      	movs	r3, r0
 8002672:	1882      	adds	r2, r0, r2
 8002674:	4293      	cmp	r3, r2
 8002676:	d100      	bne.n	800267a <memset+0xa>
 8002678:	4770      	bx	lr
 800267a:	7019      	strb	r1, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	e7f9      	b.n	8002674 <memset+0x4>

08002680 <__libc_init_array>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	2600      	movs	r6, #0
 8002684:	4c0c      	ldr	r4, [pc, #48]	; (80026b8 <__libc_init_array+0x38>)
 8002686:	4d0d      	ldr	r5, [pc, #52]	; (80026bc <__libc_init_array+0x3c>)
 8002688:	1b64      	subs	r4, r4, r5
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	42a6      	cmp	r6, r4
 800268e:	d109      	bne.n	80026a4 <__libc_init_array+0x24>
 8002690:	2600      	movs	r6, #0
 8002692:	f000 f819 	bl	80026c8 <_init>
 8002696:	4c0a      	ldr	r4, [pc, #40]	; (80026c0 <__libc_init_array+0x40>)
 8002698:	4d0a      	ldr	r5, [pc, #40]	; (80026c4 <__libc_init_array+0x44>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	42a6      	cmp	r6, r4
 80026a0:	d105      	bne.n	80026ae <__libc_init_array+0x2e>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	00b3      	lsls	r3, r6, #2
 80026a6:	58eb      	ldr	r3, [r5, r3]
 80026a8:	4798      	blx	r3
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7ee      	b.n	800268c <__libc_init_array+0xc>
 80026ae:	00b3      	lsls	r3, r6, #2
 80026b0:	58eb      	ldr	r3, [r5, r3]
 80026b2:	4798      	blx	r3
 80026b4:	3601      	adds	r6, #1
 80026b6:	e7f2      	b.n	800269e <__libc_init_array+0x1e>
 80026b8:	08002704 	.word	0x08002704
 80026bc:	08002704 	.word	0x08002704
 80026c0:	08002708 	.word	0x08002708
 80026c4:	08002704 	.word	0x08002704

080026c8 <_init>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr

080026d4 <_fini>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr
