
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c94  08008c94  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c9c  08008c9c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  200001e0  08008e84  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000146c  08008e84  0002146c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011249  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e74  00000000  00000000  00031452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166b4  00000000  00000000  00035f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013804  00000000  00000000  0004c5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bea0  00000000  00000000  0005fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbc70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  000dbcc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08008bcc 	.word	0x08008bcc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08008bcc 	.word	0x08008bcc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09a      	sub	sp, #104	; 0x68
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fa88 	bl	80009ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f82d 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f8dd 	bl	8000660 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f879 	bl	800059c <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8a5 	bl	80005f8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f007 fa31 	bl	8007914 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[100];
  int count = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	667b      	str	r3, [r7, #100]	; 0x64

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13); /* Toggle the LED */
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	480e      	ldr	r0, [pc, #56]	; (80004f4 <main+0x60>)
 80004bc:	f000 fdae 	bl	800101c <HAL_GPIO_TogglePin>
	  count++;
 80004c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004c2:	3301      	adds	r3, #1
 80004c4:	667b      	str	r3, [r7, #100]	; 0x64
	  sprintf((char *)buffer, "Count = %d\r\n", count);
 80004c6:	463b      	mov	r3, r7
 80004c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80004ca:	490b      	ldr	r1, [pc, #44]	; (80004f8 <main+0x64>)
 80004cc:	4618      	mov	r0, r3
 80004ce:	f007 ff03 	bl	80082d8 <siprintf>
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004d2:	463b      	mov	r3, r7
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fe51 	bl	800017c <strlen>
 80004da:	4603      	mov	r3, r0
 80004dc:	b29a      	uxth	r2, r3
 80004de:	463b      	mov	r3, r7
 80004e0:	4611      	mov	r1, r2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f007 fad4 	bl	8007a90 <CDC_Transmit_FS>
	  HAL_Delay (500);   /* Delay 500 ms */
 80004e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ec:	f000 face 	bl	8000a8c <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13); /* Toggle the LED */
 80004f0:	e7e1      	b.n	80004b6 <main+0x22>
 80004f2:	bf00      	nop
 80004f4:	40020800 	.word	0x40020800
 80004f8:	08008be4 	.word	0x08008be4

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b092      	sub	sp, #72	; 0x48
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2234      	movs	r2, #52	; 0x34
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f007 fedc 	bl	80082c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	463b      	mov	r3, r7
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <SystemClock_Config+0x9c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <SystemClock_Config+0x9c>)
 8000528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800052e:	2303      	movs	r3, #3
 8000530:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000548:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800054c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800054e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fae9 	bl	8002b30 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000564:	f000 f8d4 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056c:	2301      	movs	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f002 fe05 	bl	8003190 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800058c:	f000 f8c0 	bl	8000710 <Error_Handler>
  }
}
 8000590:	bf00      	nop
 8000592:	3748      	adds	r7, #72	; 0x48
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40007000 	.word	0x40007000

0800059c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_I2C1_Init+0x50>)
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <MX_I2C1_Init+0x54>)
 80005a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_I2C1_Init+0x50>)
 80005a8:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <MX_I2C1_Init+0x58>)
 80005aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_I2C1_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_I2C1_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_I2C1_Init+0x50>)
 80005ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_I2C1_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_I2C1_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_I2C1_Init+0x50>)
 80005da:	f000 fd39 	bl	8001050 <HAL_I2C_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e4:	f000 f894 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200001fc 	.word	0x200001fc
 80005f0:	40005400 	.word	0x40005400
 80005f4:	000186a0 	.word	0x000186a0

080005f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_SPI1_Init+0x60>)
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <MX_SPI1_Init+0x64>)
 8000600:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_SPI1_Init+0x60>)
 8000604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000608:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_SPI1_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_SPI1_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_SPI1_Init+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_SPI1_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_SPI1_Init+0x60>)
 8000624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000628:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_SPI1_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_SPI1_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_SPI1_Init+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_SPI1_Init+0x60>)
 800063e:	220a      	movs	r2, #10
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_SPI1_Init+0x60>)
 8000644:	f003 f854 	bl	80036f0 <HAL_SPI_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 800064e:	f000 f85f 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000250 	.word	0x20000250
 800065c:	40013000 	.word	0x40013000

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <MX_GPIO_Init+0xa8>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a23      	ldr	r2, [pc, #140]	; (8000708 <MX_GPIO_Init+0xa8>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_GPIO_Init+0xa8>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_GPIO_Init+0xa8>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <MX_GPIO_Init+0xa8>)
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_GPIO_Init+0xa8>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0xac>)
 80006de:	f000 fc85 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0xac>)
 80006fc:	f000 faf6 	bl	8000cec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	; 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40020800 	.word	0x40020800

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_MspInit+0x58>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <HAL_MspInit+0x58>)
 8000728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <HAL_MspInit+0x58>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_MspInit+0x58>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <HAL_MspInit+0x58>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6213      	str	r3, [r2, #32]
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <HAL_MspInit+0x58>)
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_MspInit+0x58>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_MspInit+0x58>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_MspInit+0x58>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_I2C_MspInit+0x7c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d127      	bne.n	80007ea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b2:	23c0      	movs	r3, #192	; 0xc0
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b6:	2312      	movs	r3, #18
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c2:	2304      	movs	r3, #4
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <HAL_I2C_MspInit+0x84>)
 80007ce:	f000 fa8d 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007dc:	6253      	str	r3, [r2, #36]	; 0x24
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40005400 	.word	0x40005400
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020400 	.word	0x40020400

08000800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_SPI_MspInit+0x7c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d127      	bne.n	8000872 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082c:	6213      	str	r3, [r2, #32]
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000830:	6a1b      	ldr	r3, [r3, #32]
 8000832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_SPI_MspInit+0x80>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000852:	23e0      	movs	r3, #224	; 0xe0
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000862:	2305      	movs	r3, #5
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <HAL_SPI_MspInit+0x84>)
 800086e:	f000 fa3d 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40013000 	.word	0x40013000
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f8c1 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <USB_LP_IRQHandler+0x10>)
 80008de:	f000 fdff 	bl	80014e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000f50 	.word	0x20000f50

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800091c:	f007 fcaa 	bl	8008274 <__errno>
 8000920:	4603      	mov	r3, r0
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e009      	b.n	8000940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <_sbrk+0x64>)
 800093c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20002800 	.word	0x20002800
 800094c:	00000400 	.word	0x00000400
 8000950:	200002a8 	.word	0x200002a8
 8000954:	20001470 	.word	0x20001470

08000958 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	; (800099c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	; (80009a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098a:	f7ff ffe5 	bl	8000958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098e:	f007 fc77 	bl	8008280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f7ff fd7f 	bl	8000494 <main>
  bx lr
 8000996:	4770      	bx	lr
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80009a0:	08008ca4 	.word	0x08008ca4
  ldr r2, =_sbss
 80009a4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80009a8:	2000146c 	.word	0x2000146c

080009ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC1_IRQHandler>

080009ae <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f955 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f80e 	bl	80009e0 <HAL_InitTick>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	e001      	b.n	80009d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d0:	f7ff fea4 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d4:	79fb      	ldrb	r3, [r7, #7]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <HAL_InitTick+0x68>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d022      	beq.n	8000a3a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_InitTick+0x6c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <HAL_InitTick+0x68>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f962 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10f      	bne.n	8000a34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d809      	bhi.n	8000a2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a22:	f000 f92c 	bl	8000c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_InitTick+0x70>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e007      	b.n	8000a3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	e004      	b.n	8000a3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e001      	b.n	8000a3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <HAL_IncTick+0x1c>)
 8000a64:	6013      	str	r3, [r2, #0]
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200002ac 	.word	0x200002ac
 8000a74:	20000008 	.word	0x20000008

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	200002ac 	.word	0x200002ac

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d004      	beq.n	8000ab0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_Delay+0x40>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab0:	bf00      	nop
 8000ab2:	f7ff ffe1 	bl	8000a78 <HAL_GetTick>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d8f7      	bhi.n	8000ab2 <HAL_Delay+0x26>
  {
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000008 	.word	0x20000008

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4906      	ldr	r1, [pc, #24]	; (8000b68 <__NVIC_EnableIRQ+0x34>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff90 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff2d 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff42 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff90 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5f 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff35 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d02:	e154      	b.n	8000fae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8146 	beq.w	8000fa8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d005      	beq.n	8000d34 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d130      	bne.n	8000d96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 0201 	and.w	r2, r3, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d017      	beq.n	8000dd2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d123      	bne.n	8000e26 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	6939      	ldr	r1, [r7, #16]
 8000e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0203 	and.w	r2, r3, #3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80a0 	beq.w	8000fa8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a57      	ldr	r2, [pc, #348]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6213      	str	r3, [r2, #32]
 8000e74:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e80:	4a53      	ldr	r2, [pc, #332]	; (8000fd0 <HAL_GPIO_Init+0x2e4>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4b      	ldr	r2, [pc, #300]	; (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d019      	beq.n	8000ee0 <HAL_GPIO_Init+0x1f4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4a      	ldr	r2, [pc, #296]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d013      	beq.n	8000edc <HAL_GPIO_Init+0x1f0>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a49      	ldr	r2, [pc, #292]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <HAL_GPIO_Init+0x1ec>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a48      	ldr	r2, [pc, #288]	; (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x1e8>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <HAL_GPIO_Init+0x2f8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d101      	bne.n	8000ed0 <HAL_GPIO_Init+0x1e4>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e008      	b.n	8000ee2 <HAL_GPIO_Init+0x1f6>
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	e006      	b.n	8000ee2 <HAL_GPIO_Init+0x1f6>
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e004      	b.n	8000ee2 <HAL_GPIO_Init+0x1f6>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0x1f6>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <HAL_GPIO_Init+0x1f6>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	f002 0203 	and.w	r2, r2, #3
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	4093      	lsls	r3, r2
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ef2:	4937      	ldr	r1, [pc, #220]	; (8000fd0 <HAL_GPIO_Init+0x2e4>)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f00:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f24:	4a30      	ldr	r2, [pc, #192]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f4e:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fa2:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f47f aea3 	bne.w	8000d04 <HAL_GPIO_Init+0x18>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	041a      	lsls	r2, r3, #16
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43d9      	mvns	r1, r3
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	400b      	ands	r3, r1
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
	...

08001050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e12b      	b.n	80012ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d106      	bne.n	800107c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fb7e 	bl	8000778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2224      	movs	r2, #36	; 0x24
 8001080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010b4:	f002 faa8 	bl	8003608 <HAL_RCC_GetPCLK1Freq>
 80010b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	4a81      	ldr	r2, [pc, #516]	; (80012c4 <HAL_I2C_Init+0x274>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d807      	bhi.n	80010d4 <HAL_I2C_Init+0x84>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4a80      	ldr	r2, [pc, #512]	; (80012c8 <HAL_I2C_Init+0x278>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	bf94      	ite	ls
 80010cc:	2301      	movls	r3, #1
 80010ce:	2300      	movhi	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	e006      	b.n	80010e2 <HAL_I2C_Init+0x92>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4a7d      	ldr	r2, [pc, #500]	; (80012cc <HAL_I2C_Init+0x27c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	bf94      	ite	ls
 80010dc:	2301      	movls	r3, #1
 80010de:	2300      	movhi	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e0e7      	b.n	80012ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4a78      	ldr	r2, [pc, #480]	; (80012d0 <HAL_I2C_Init+0x280>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9b      	lsrs	r3, r3, #18
 80010f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	430a      	orrs	r2, r1
 8001108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a6a      	ldr	r2, [pc, #424]	; (80012c4 <HAL_I2C_Init+0x274>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d802      	bhi.n	8001124 <HAL_I2C_Init+0xd4>
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3301      	adds	r3, #1
 8001122:	e009      	b.n	8001138 <HAL_I2C_Init+0xe8>
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	4a69      	ldr	r2, [pc, #420]	; (80012d4 <HAL_I2C_Init+0x284>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	099b      	lsrs	r3, r3, #6
 8001136:	3301      	adds	r3, #1
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	430b      	orrs	r3, r1
 800113e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800114a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	495c      	ldr	r1, [pc, #368]	; (80012c4 <HAL_I2C_Init+0x274>)
 8001154:	428b      	cmp	r3, r1
 8001156:	d819      	bhi.n	800118c <HAL_I2C_Init+0x13c>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1e59      	subs	r1, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fbb1 f3f3 	udiv	r3, r1, r3
 8001166:	1c59      	adds	r1, r3, #1
 8001168:	f640 73fc 	movw	r3, #4092	; 0xffc
 800116c:	400b      	ands	r3, r1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00a      	beq.n	8001188 <HAL_I2C_Init+0x138>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1e59      	subs	r1, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001180:	3301      	adds	r3, #1
 8001182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001186:	e051      	b.n	800122c <HAL_I2C_Init+0x1dc>
 8001188:	2304      	movs	r3, #4
 800118a:	e04f      	b.n	800122c <HAL_I2C_Init+0x1dc>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d111      	bne.n	80011b8 <HAL_I2C_Init+0x168>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1e58      	subs	r0, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	440b      	add	r3, r1
 80011a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	e012      	b.n	80011de <HAL_I2C_Init+0x18e>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1e58      	subs	r0, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	0099      	lsls	r1, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ce:	3301      	adds	r3, #1
 80011d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_I2C_Init+0x196>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e022      	b.n	800122c <HAL_I2C_Init+0x1dc>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10e      	bne.n	800120c <HAL_I2C_Init+0x1bc>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1e58      	subs	r0, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6859      	ldr	r1, [r3, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	440b      	add	r3, r1
 80011fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001200:	3301      	adds	r3, #1
 8001202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800120a:	e00f      	b.n	800122c <HAL_I2C_Init+0x1dc>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1e58      	subs	r0, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	0099      	lsls	r1, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001222:	3301      	adds	r3, #1
 8001224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	6809      	ldr	r1, [r1, #0]
 8001230:	4313      	orrs	r3, r2
 8001232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69da      	ldr	r2, [r3, #28]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800125a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6911      	ldr	r1, [r2, #16]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68d2      	ldr	r2, [r2, #12]
 8001266:	4311      	orrs	r1, r2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	430b      	orrs	r3, r1
 800126e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0201 	orr.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2220      	movs	r2, #32
 80012a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	000186a0 	.word	0x000186a0
 80012c8:	001e847f 	.word	0x001e847f
 80012cc:	003d08ff 	.word	0x003d08ff
 80012d0:	431bde83 	.word	0x431bde83
 80012d4:	10624dd3 	.word	0x10624dd3

080012d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b08b      	sub	sp, #44	; 0x2c
 80012dc:	af06      	add	r7, sp, #24
 80012de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0d0      	b.n	800148c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f006 fd18 	bl	8007d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fa7f 	bl	8003814 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e04c      	b.n	80013b6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3301      	adds	r3, #1
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	b298      	uxth	r0, r3
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	3336      	adds	r3, #54	; 0x36
 800135a:	4602      	mov	r2, r0
 800135c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	3303      	adds	r3, #3
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	3338      	adds	r3, #56	; 0x38
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	333c      	adds	r3, #60	; 0x3c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	3340      	adds	r3, #64	; 0x40
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3ad      	bcc.n	800131c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e044      	b.n	8001450 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	3301      	adds	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3b5      	bcc.n	80013c6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	687e      	ldr	r6, [r7, #4]
 8001462:	466d      	mov	r5, sp
 8001464:	f106 0410 	add.w	r4, r6, #16
 8001468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	602b      	str	r3, [r5, #0]
 8001470:	1d33      	adds	r3, r6, #4
 8001472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f002 f9e7 	bl	8003848 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001494 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_PCD_Start+0x16>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e016      	b.n	80014d8 <HAL_PCD_Start+0x44>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 f996 	bl	80037e8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014bc:	2101      	movs	r1, #1
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f006 fc1a 	bl	8007cf8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fe7b 	bl	80061c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fe73 	bl	80061d8 <USB_ReadInterrupts>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014fc:	d102      	bne.n	8001504 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 faf5 	bl	8001aee <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fe65 	bl	80061d8 <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d112      	bne.n	8001540 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001522:	b29a      	uxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f006 fc79 	bl	8007e2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001538:	2100      	movs	r1, #0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f8c7 	bl	80016ce <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fe47 	bl	80061d8 <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001554:	d10b      	bne.n	800156e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001568:	b292      	uxth	r2, r2
 800156a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fe30 	bl	80061d8 <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800157e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001582:	d10b      	bne.n	800159c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001596:	b292      	uxth	r2, r2
 8001598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fe19 	bl	80061d8 <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b0:	d126      	bne.n	8001600 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0204 	bic.w	r2, r2, #4
 80015c4:	b292      	uxth	r2, r2
 80015c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0208 	bic.w	r2, r2, #8
 80015dc:	b292      	uxth	r2, r2
 80015de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f006 fc5a 	bl	8007e9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f004 fde7 	bl	80061d8 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001614:	d126      	bne.n	8001664 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0208 	orr.w	r2, r2, #8
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001640:	b292      	uxth	r2, r2
 8001642:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0204 	orr.w	r2, r2, #4
 8001658:	b292      	uxth	r2, r2
 800165a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f006 fc02 	bl	8007e68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f004 fdb5 	bl	80061d8 <USB_ReadInterrupts>
 800166e:	4603      	mov	r3, r0
 8001670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001678:	d10e      	bne.n	8001698 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800168c:	b292      	uxth	r2, r2
 800168e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f006 fbbb 	bl	8007e0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fd9b 	bl	80061d8 <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ac:	d10b      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_PCD_SetAddress+0x1a>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e013      	b.n	8001710 <HAL_PCD_SetAddress+0x42>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fd4c 	bl	800619e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	70fb      	strb	r3, [r7, #3]
 800172a:	460b      	mov	r3, r1
 800172c:	803b      	strh	r3, [r7, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da0e      	bge.n	800175c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	705a      	strb	r2, [r3, #1]
 800175a:	e00e      	b.n	800177a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	f003 0207 	and.w	r2, r3, #7
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	b2da      	uxtb	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001786:	883a      	ldrh	r2, [r7, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	78ba      	ldrb	r2, [r7, #2]
 8001790:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	785b      	ldrb	r3, [r3, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017a4:	78bb      	ldrb	r3, [r7, #2]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d102      	bne.n	80017b0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_PCD_EP_Open+0xa6>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e00e      	b.n	80017dc <HAL_PCD_EP_Open+0xc4>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68f9      	ldr	r1, [r7, #12]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 f85b 	bl	8003888 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017da:	7afb      	ldrb	r3, [r7, #11]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da0e      	bge.n	8001816 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	705a      	strb	r2, [r3, #1]
 8001814:	e00e      	b.n	8001834 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f003 0207 	and.w	r2, r3, #7
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	b2da      	uxtb	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_PCD_EP_Close+0x6a>
 800184a:	2302      	movs	r3, #2
 800184c:	e00e      	b.n	800186c <HAL_PCD_EP_Close+0x88>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68f9      	ldr	r1, [r7, #12]
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fb7d 	bl	8003f5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	460b      	mov	r3, r1
 8001882:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	f003 0207 	and.w	r2, r3, #7
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2200      	movs	r2, #0
 80018b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b4:	7afb      	ldrb	r3, [r7, #11]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fd2f 	bl	8004334 <USB_EPStartXfer>
 80018d6:	e005      	b.n	80018e4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6979      	ldr	r1, [r7, #20]
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fd28 	bl	8004334 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	f003 0207 	and.w	r2, r3, #7
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001910:	681b      	ldr	r3, [r3, #0]
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	460b      	mov	r3, r1
 800192a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800192c:	7afb      	ldrb	r3, [r7, #11]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2201      	movs	r2, #1
 8001966:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	b2da      	uxtb	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6979      	ldr	r1, [r7, #20]
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fcd5 	bl	8004334 <USB_EPStartXfer>
 800198a:	e005      	b.n	8001998 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6979      	ldr	r1, [r7, #20]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fcce 	bl	8004334 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 0207 	and.w	r2, r3, #7
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d901      	bls.n	80019c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e03e      	b.n	8001a3e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da0e      	bge.n	80019e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	705a      	strb	r2, [r3, #1]
 80019e4:	e00c      	b.n	8001a00 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_PCD_EP_SetStall+0x7e>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e00e      	b.n	8001a3e <HAL_PCD_EP_SetStall+0x9c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 fab8 	bl	8005fa4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 020f 	and.w	r2, r3, #15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d901      	bls.n	8001a64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e040      	b.n	8001ae6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da0e      	bge.n	8001a8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	705a      	strb	r2, [r3, #1]
 8001a88:	e00e      	b.n	8001aa8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 0207 	and.w	r2, r3, #7
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_PCD_EP_ClrStall+0x82>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e00e      	b.n	8001ae6 <HAL_PCD_EP_ClrStall+0xa0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fab4 	bl	8006044 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b08e      	sub	sp, #56	; 0x38
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001af6:	e2ec      	b.n	80020d2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b00:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 8161 	bne.w	8001dda <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d152      	bne.n	8001bc8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b32:	81fb      	strh	r3, [r7, #14]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	89fb      	ldrh	r3, [r7, #14]
 8001b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3328      	adds	r3, #40	; 0x28
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3302      	adds	r3, #2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	441a      	add	r2, r3
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b86:	2100      	movs	r1, #0
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f006 f926 	bl	8007dda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 829b 	beq.w	80020d2 <PCD_EP_ISR_Handler+0x5e4>
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 8296 	bne.w	80020d2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b292      	uxth	r2, r2
 8001bba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bc6:	e284      	b.n	80020d2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d034      	beq.n	8001c4c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f004 fb2d 	bl	8006280 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c32:	4013      	ands	r3, r2
 8001c34:	823b      	strh	r3, [r7, #16]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	8a3a      	ldrh	r2, [r7, #16]
 8001c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c40:	b292      	uxth	r2, r2
 8001c42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f006 f89b 	bl	8007d80 <HAL_PCD_SetupStageCallback>
 8001c4a:	e242      	b.n	80020d2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f280 823e 	bge.w	80020d2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c62:	4013      	ands	r3, r2
 8001c64:	83bb      	strh	r3, [r7, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	8bba      	ldrh	r2, [r7, #28]
 8001c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c70:	b292      	uxth	r2, r2
 8001c72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	3306      	adds	r3, #6
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d019      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x1ee>
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d015      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	6959      	ldr	r1, [r3, #20]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f004 fadd 	bl	8006280 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	441a      	add	r2, r3
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f006 f864 	bl	8007da4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f040 81f2 	bne.w	80020d2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	4413      	add	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d112      	bne.n	8001d3c <PCD_EP_ISR_Handler+0x24e>
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	801a      	strh	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	e02f      	b.n	8001d9c <PCD_EP_ISR_Handler+0x2ae>
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b3e      	cmp	r3, #62	; 0x3e
 8001d42:	d813      	bhi.n	8001d6c <PCD_EP_ISR_Handler+0x27e>
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <PCD_EP_ISR_Handler+0x270>
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	029b      	lsls	r3, r3, #10
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	801a      	strh	r2, [r3, #0]
 8001d6a:	e017      	b.n	8001d9c <PCD_EP_ISR_Handler+0x2ae>
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <PCD_EP_ISR_Handler+0x298>
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	3b01      	subs	r3, #1
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	029b      	lsls	r3, r3, #10
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dac:	827b      	strh	r3, [r7, #18]
 8001dae:	8a7b      	ldrh	r3, [r7, #18]
 8001db0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001db4:	827b      	strh	r3, [r7, #18]
 8001db6:	8a7b      	ldrh	r3, [r7, #18]
 8001db8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dbc:	827b      	strh	r3, [r7, #18]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	8a7b      	ldrh	r3, [r7, #18]
 8001dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	8013      	strh	r3, [r2, #0]
 8001dd8:	e17b      	b.n	80020d2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f280 80ea 	bge.w	8001fca <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e24:	b292      	uxth	r2, r2
 8001e26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	7b1b      	ldrb	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d122      	bne.n	8001e8c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3306      	adds	r3, #6
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	6959      	ldr	r1, [r3, #20]
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	88da      	ldrh	r2, [r3, #6]
 8001e84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e86:	f004 f9fb 	bl	8006280 <USB_ReadPMA>
 8001e8a:	e07c      	b.n	8001f86 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	78db      	ldrb	r3, [r3, #3]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d108      	bne.n	8001ea6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e96:	461a      	mov	r2, r3
 8001e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f927 	bl	80020ee <HAL_PCD_EP_DB_Receive>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ea4:	e06f      	b.n	8001f86 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec0:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	441a      	add	r2, r3
 8001ed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ede:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d021      	beq.n	8001f44 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	3302      	adds	r3, #2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f28:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d02a      	beq.n	8001f86 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	6959      	ldr	r1, [r3, #20]
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	891a      	ldrh	r2, [r3, #8]
 8001f3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f3e:	f004 f99f 	bl	8006280 <USB_ReadPMA>
 8001f42:	e020      	b.n	8001f86 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	3306      	adds	r3, #6
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	6959      	ldr	r1, [r3, #20]
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	895a      	ldrh	r2, [r3, #10]
 8001f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f82:	f004 f97d 	bl	8006280 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	69da      	ldr	r2, [r3, #28]
 8001f8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f8c:	441a      	add	r2, r3
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f98:	441a      	add	r2, r3
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <PCD_EP_ISR_Handler+0x4c2>
 8001fa6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d206      	bcs.n	8001fbe <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f005 fef4 	bl	8007da4 <HAL_PCD_DataOutStageCallback>
 8001fbc:	e005      	b.n	8001fca <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 f9b5 	bl	8004334 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d07e      	beq.n	80020d2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	843b      	strh	r3, [r7, #32]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	441a      	add	r2, r3
 8002012:	8c3b      	ldrh	r3, [r7, #32]
 8002014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201c:	b29b      	uxth	r3, r3
 800201e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	78db      	ldrb	r3, [r3, #3]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d00c      	beq.n	8002042 <PCD_EP_ISR_Handler+0x554>
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	78db      	ldrb	r3, [r3, #3]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002034:	2b02      	cmp	r3, #2
 8002036:	d146      	bne.n	80020c6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002038:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d141      	bne.n	80020c6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204a:	b29b      	uxth	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	3302      	adds	r3, #2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	4413      	add	r3, r2
 8002060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	8bfb      	ldrh	r3, [r7, #30]
 8002072:	429a      	cmp	r2, r3
 8002074:	d906      	bls.n	8002084 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	8bfb      	ldrh	r3, [r7, #30]
 800207c:	1ad2      	subs	r2, r2, r3
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	619a      	str	r2, [r3, #24]
 8002082:	e002      	b.n	800208a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f005 fe9e 	bl	8007dda <HAL_PCD_DataInStageCallback>
 800209e:	e018      	b.n	80020d2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	8bfb      	ldrh	r3, [r7, #30]
 80020a6:	441a      	add	r2, r3
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	8bfb      	ldrh	r3, [r7, #30]
 80020b2:	441a      	add	r2, r3
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020be:	4618      	mov	r0, r3
 80020c0:	f002 f938 	bl	8004334 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80020c4:	e005      	b.n	80020d2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020c8:	461a      	mov	r2, r3
 80020ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f91b 	bl	8002308 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020da:	b29b      	uxth	r3, r3
 80020dc:	b21b      	sxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f6ff ad0a 	blt.w	8001af8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3738      	adds	r7, #56	; 0x38
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b088      	sub	sp, #32
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	4613      	mov	r3, r2
 80020fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d07e      	beq.n	8002204 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	3302      	adds	r3, #2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	8b7b      	ldrh	r3, [r7, #26]
 8002136:	429a      	cmp	r2, r3
 8002138:	d306      	bcc.n	8002148 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	8b7b      	ldrh	r3, [r7, #26]
 8002140:	1ad2      	subs	r2, r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	619a      	str	r2, [r3, #24]
 8002146:	e002      	b.n	800214e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d123      	bne.n	800219e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800216c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002170:	833b      	strh	r3, [r7, #24]
 8002172:	8b3b      	ldrh	r3, [r7, #24]
 8002174:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002178:	833b      	strh	r3, [r7, #24]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	441a      	add	r2, r3
 8002188:	8b3b      	ldrh	r3, [r7, #24]
 800218a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800218e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219a:	b29b      	uxth	r3, r3
 800219c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01f      	beq.n	80021e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c2:	82fb      	strh	r3, [r7, #22]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	441a      	add	r2, r3
 80021d2:	8afb      	ldrh	r3, [r7, #22]
 80021d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021e8:	8b7b      	ldrh	r3, [r7, #26]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6959      	ldr	r1, [r3, #20]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	891a      	ldrh	r2, [r3, #8]
 80021fc:	8b7b      	ldrh	r3, [r7, #26]
 80021fe:	f004 f83f 	bl	8006280 <USB_ReadPMA>
 8002202:	e07c      	b.n	80022fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	3306      	adds	r3, #6
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	8b7b      	ldrh	r3, [r7, #26]
 8002234:	429a      	cmp	r2, r3
 8002236:	d306      	bcc.n	8002246 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	8b7b      	ldrh	r3, [r7, #26]
 800223e:	1ad2      	subs	r2, r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	619a      	str	r2, [r3, #24]
 8002244:	e002      	b.n	800224c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d123      	bne.n	800229c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	83fb      	strh	r3, [r7, #30]
 8002270:	8bfb      	ldrh	r3, [r7, #30]
 8002272:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002276:	83fb      	strh	r3, [r7, #30]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	441a      	add	r2, r3
 8002286:	8bfb      	ldrh	r3, [r7, #30]
 8002288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800228c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002298:	b29b      	uxth	r3, r3
 800229a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d11f      	bne.n	80022e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c0:	83bb      	strh	r3, [r7, #28]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	441a      	add	r2, r3
 80022d0:	8bbb      	ldrh	r3, [r7, #28]
 80022d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022e6:	8b7b      	ldrh	r3, [r7, #26]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6959      	ldr	r1, [r3, #20]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	895a      	ldrh	r2, [r3, #10]
 80022f8:	8b7b      	ldrh	r3, [r7, #26]
 80022fa:	f003 ffc1 	bl	8006280 <USB_ReadPMA>
    }
  }

  return count;
 80022fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b0a2      	sub	sp, #136	; 0x88
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 81c7 	beq.w	80026b0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	3302      	adds	r3, #2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002356:	429a      	cmp	r2, r3
 8002358:	d907      	bls.n	800236a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002362:	1ad2      	subs	r2, r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	619a      	str	r2, [r3, #24]
 8002368:	e002      	b.n	8002370 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 80b9 	bne.w	80024ec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	785b      	ldrb	r3, [r3, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d126      	bne.n	80023d0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002390:	b29b      	uxth	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	4413      	add	r3, r2
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	011a      	lsls	r2, r3, #4
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	4413      	add	r3, r2
 80023a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	e01a      	b.n	8002406 <HAL_PCD_EP_DB_Transmit+0xfe>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d116      	bne.n	8002406 <HAL_PCD_EP_DB_Transmit+0xfe>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	4413      	add	r3, r2
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	011a      	lsls	r2, r3, #4
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	4413      	add	r3, r2
 80023fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	2200      	movs	r2, #0
 8002404:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	623b      	str	r3, [r7, #32]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	785b      	ldrb	r3, [r3, #1]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d126      	bne.n	8002462 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4413      	add	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	011a      	lsls	r2, r3, #4
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4413      	add	r3, r2
 8002436:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002446:	b29a      	uxth	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800245a:	b29a      	uxth	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	801a      	strh	r2, [r3, #0]
 8002460:	e017      	b.n	8002492 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d113      	bne.n	8002492 <HAL_PCD_EP_DB_Transmit+0x18a>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	4413      	add	r3, r2
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	011a      	lsls	r2, r3, #4
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	4413      	add	r3, r2
 8002486:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f005 fc9e 	bl	8007dda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 82d4 	beq.w	8002a52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c4:	827b      	strh	r3, [r7, #18]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	441a      	add	r2, r3
 80024d4:	8a7b      	ldrh	r3, [r7, #18]
 80024d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	8013      	strh	r3, [r2, #0]
 80024ea:	e2b2      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d021      	beq.n	800253a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	441a      	add	r2, r3
 8002522:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800252a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800252e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002536:	b29b      	uxth	r3, r3
 8002538:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002540:	2b01      	cmp	r3, #1
 8002542:	f040 8286 	bne.w	8002a52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800254e:	441a      	add	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800255c:	441a      	add	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6a1a      	ldr	r2, [r3, #32]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	429a      	cmp	r2, r3
 800256c:	d309      	bcc.n	8002582 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257a:	1ad2      	subs	r2, r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	621a      	str	r2, [r3, #32]
 8002580:	e015      	b.n	80025ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d107      	bne.n	800259a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800258a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800258e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002598:	e009      	b.n	80025ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d155      	bne.n	8002662 <HAL_PCD_EP_DB_Transmit+0x35a>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	4413      	add	r3, r2
 80025cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	011a      	lsls	r2, r3, #4
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	4413      	add	r3, r2
 80025d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
 80025de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d112      	bne.n	800260a <HAL_PCD_EP_DB_Transmit+0x302>
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	801a      	strh	r2, [r3, #0]
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002602:	b29a      	uxth	r2, r3
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	801a      	strh	r2, [r3, #0]
 8002608:	e047      	b.n	800269a <HAL_PCD_EP_DB_Transmit+0x392>
 800260a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260c:	2b3e      	cmp	r3, #62	; 0x3e
 800260e:	d811      	bhi.n	8002634 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	64bb      	str	r3, [r7, #72]	; 0x48
 8002616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002622:	3301      	adds	r3, #1
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	b29b      	uxth	r3, r3
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	b29a      	uxth	r2, r3
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	e032      	b.n	800269a <HAL_PCD_EP_DB_Transmit+0x392>
 8002634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	64bb      	str	r3, [r7, #72]	; 0x48
 800263a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <HAL_PCD_EP_DB_Transmit+0x342>
 8002644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002646:	3b01      	subs	r3, #1
 8002648:	64bb      	str	r3, [r7, #72]	; 0x48
 800264a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264c:	b29b      	uxth	r3, r3
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	b29b      	uxth	r3, r3
 8002652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265a:	b29a      	uxth	r2, r3
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	e01b      	b.n	800269a <HAL_PCD_EP_DB_Transmit+0x392>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d117      	bne.n	800269a <HAL_PCD_EP_DB_Transmit+0x392>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	643b      	str	r3, [r7, #64]	; 0x40
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800267e:	4413      	add	r3, r2
 8002680:	643b      	str	r3, [r7, #64]	; 0x40
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	011a      	lsls	r2, r3, #4
 8002688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268a:	4413      	add	r3, r2
 800268c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002694:	b29a      	uxth	r2, r3
 8002696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002698:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	6959      	ldr	r1, [r3, #20]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	891a      	ldrh	r2, [r3, #8]
 80026a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f003 fda4 	bl	80061f6 <USB_WritePMA>
 80026ae:	e1d0      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	3306      	adds	r3, #6
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d307      	bcc.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026f0:	1ad2      	subs	r2, r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	619a      	str	r2, [r3, #24]
 80026f6:	e002      	b.n	80026fe <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80c4 	bne.w	8002890 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	785b      	ldrb	r3, [r3, #1]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d126      	bne.n	800275e <HAL_PCD_EP_DB_Transmit+0x456>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271e:	b29b      	uxth	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002724:	4413      	add	r3, r2
 8002726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	011a      	lsls	r2, r3, #4
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	4413      	add	r3, r2
 8002732:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002736:	66bb      	str	r3, [r7, #104]	; 0x68
 8002738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002742:	b29a      	uxth	r2, r3
 8002744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002746:	801a      	strh	r2, [r3, #0]
 8002748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002756:	b29a      	uxth	r2, r3
 8002758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275a:	801a      	strh	r2, [r3, #0]
 800275c:	e01a      	b.n	8002794 <HAL_PCD_EP_DB_Transmit+0x48c>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d116      	bne.n	8002794 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	677b      	str	r3, [r7, #116]	; 0x74
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277a:	4413      	add	r3, r2
 800277c:	677b      	str	r3, [r7, #116]	; 0x74
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	011a      	lsls	r2, r3, #4
 8002784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002786:	4413      	add	r3, r2
 8002788:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800278c:	673b      	str	r3, [r7, #112]	; 0x70
 800278e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002790:	2200      	movs	r2, #0
 8002792:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	67bb      	str	r3, [r7, #120]	; 0x78
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	785b      	ldrb	r3, [r3, #1]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d12f      	bne.n	8002802 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ba:	4413      	add	r3, r2
 80027bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	011a      	lsls	r2, r3, #4
 80027c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ca:	4413      	add	r3, r2
 80027cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027fe:	801a      	strh	r2, [r3, #0]
 8002800:	e017      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d113      	bne.n	8002832 <HAL_PCD_EP_DB_Transmit+0x52a>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002818:	4413      	add	r3, r2
 800281a:	67bb      	str	r3, [r7, #120]	; 0x78
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	011a      	lsls	r2, r3, #4
 8002822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002824:	4413      	add	r3, r2
 8002826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800282a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800282c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f005 face 	bl	8007dda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 8104 	bne.w	8002a52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002864:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800287a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800287e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800288a:	b29b      	uxth	r3, r3
 800288c:	8013      	strh	r3, [r2, #0]
 800288e:	e0e0      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d121      	bne.n	80028de <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028da:	b29b      	uxth	r3, r3
 80028dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f040 80b4 	bne.w	8002a52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028f2:	441a      	add	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002900:	441a      	add	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	6a1a      	ldr	r2, [r3, #32]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	429a      	cmp	r2, r3
 8002910:	d309      	bcc.n	8002926 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6a1a      	ldr	r2, [r3, #32]
 800291c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291e:	1ad2      	subs	r2, r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	621a      	str	r2, [r3, #32]
 8002924:	e015      	b.n	8002952 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800292e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002932:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800293c:	e009      	b.n	8002952 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	667b      	str	r3, [r7, #100]	; 0x64
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d155      	bne.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x704>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002974:	4413      	add	r3, r2
 8002976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	011a      	lsls	r2, r3, #4
 800297e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002980:	4413      	add	r3, r2
 8002982:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002986:	65bb      	str	r3, [r7, #88]	; 0x58
 8002988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298a:	2b00      	cmp	r3, #0
 800298c:	d112      	bne.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800298e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002998:	b29a      	uxth	r2, r3
 800299a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	e044      	b.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x736>
 80029b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b6:	2b3e      	cmp	r3, #62	; 0x3e
 80029b8:	d811      	bhi.n	80029de <HAL_PCD_EP_DB_Transmit+0x6d6>
 80029ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	657b      	str	r3, [r7, #84]	; 0x54
 80029c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80029ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029cc:	3301      	adds	r3, #1
 80029ce:	657b      	str	r3, [r7, #84]	; 0x54
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	029b      	lsls	r3, r3, #10
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	e02f      	b.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x736>
 80029de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	657b      	str	r3, [r7, #84]	; 0x54
 80029e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80029ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f0:	3b01      	subs	r3, #1
 80029f2:	657b      	str	r3, [r7, #84]	; 0x54
 80029f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	029b      	lsls	r3, r3, #10
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e018      	b.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x736>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d114      	bne.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x736>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a22:	4413      	add	r3, r2
 8002a24:	667b      	str	r3, [r7, #100]	; 0x64
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	011a      	lsls	r2, r3, #4
 8002a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a2e:	4413      	add	r3, r2
 8002a30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a34:	663b      	str	r3, [r7, #96]	; 0x60
 8002a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6959      	ldr	r1, [r3, #20]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	895a      	ldrh	r2, [r3, #10]
 8002a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f003 fbd2 	bl	80061f6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6c:	823b      	strh	r3, [r7, #16]
 8002a6e:	8a3b      	ldrh	r3, [r7, #16]
 8002a70:	f083 0310 	eor.w	r3, r3, #16
 8002a74:	823b      	strh	r3, [r7, #16]
 8002a76:	8a3b      	ldrh	r3, [r7, #16]
 8002a78:	f083 0320 	eor.w	r3, r3, #32
 8002a7c:	823b      	strh	r3, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	441a      	add	r2, r3
 8002a8c:	8a3b      	ldrh	r3, [r7, #16]
 8002a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3788      	adds	r7, #136	; 0x88
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	817b      	strh	r3, [r7, #10]
 8002aba:	4613      	mov	r3, r2
 8002abc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e009      	b.n	8002af6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae2:	897a      	ldrh	r2, [r7, #10]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002af6:	893b      	ldrh	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2200      	movs	r2, #0
 8002b00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	80da      	strh	r2, [r3, #6]
 8002b0a:	e00b      	b.n	8002b24 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e31d      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b42:	4b94      	ldr	r3, [pc, #592]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b4c:	4b91      	ldr	r3, [pc, #580]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d07b      	beq.n	8002c5a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d006      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d10f      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d10b      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b76:	4b87      	ldr	r3, [pc, #540]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d06a      	beq.n	8002c58 <HAL_RCC_OscConfig+0x128>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d166      	bne.n	8002c58 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e2f7      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x74>
 8002b96:	4b7f      	ldr	r3, [pc, #508]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7e      	ldr	r2, [pc, #504]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e02d      	b.n	8002c00 <HAL_RCC_OscConfig+0xd0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x96>
 8002bac:	4b79      	ldr	r3, [pc, #484]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a78      	ldr	r2, [pc, #480]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a75      	ldr	r2, [pc, #468]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0xd0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0xb8>
 8002bce:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a70      	ldr	r2, [pc, #448]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6d      	ldr	r2, [pc, #436]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xd0>
 8002be8:	4b6a      	ldr	r3, [pc, #424]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a69      	ldr	r2, [pc, #420]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a66      	ldr	r2, [pc, #408]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fd ff36 	bl	8000a78 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fd ff32 	bl	8000a78 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e2ad      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c22:	4b5c      	ldr	r3, [pc, #368]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xe0>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd ff22 	bl	8000a78 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fd ff1e 	bl	8000a78 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e299      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c4a:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x108>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d05a      	beq.n	8002d1c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d119      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x176>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d116      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c78:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_OscConfig+0x160>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e276      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	493d      	ldr	r1, [pc, #244]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca4:	e03a      	b.n	8002d1c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d020      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cae:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_RCC_OscConfig+0x268>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fd fee0 	bl	8000a78 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fd fedc 	bl	8000a78 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e257      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cce:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	492a      	ldr	r1, [pc, #168]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
 8002cee:	e015      	b.n	8002d1c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_OscConfig+0x268>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fd febf 	bl	8000a78 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fd febb 	bl	8000a78 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e236      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d10:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f0      	bne.n	8002cfe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80b8 	beq.w	8002e9a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d170      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_OscConfig+0x218>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e21a      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d921      	bls.n	8002d9c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fc67 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e208      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4906      	ldr	r1, [pc, #24]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	4901      	ldr	r1, [pc, #4]	; (8002d94 <HAL_RCC_OscConfig+0x264>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
 8002d92:	e020      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2a6>
 8002d94:	40023800 	.word	0x40023800
 8002d98:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d9c:	4b99      	ldr	r3, [pc, #612]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4996      	ldr	r1, [pc, #600]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dae:	4b95      	ldr	r3, [pc, #596]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	061b      	lsls	r3, r3, #24
 8002dbc:	4991      	ldr	r1, [pc, #580]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fc32 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e1d3      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	0b5b      	lsrs	r3, r3, #13
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002de6:	4a87      	ldr	r2, [pc, #540]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002de8:	6892      	ldr	r2, [r2, #8]
 8002dea:	0912      	lsrs	r2, r2, #4
 8002dec:	f002 020f 	and.w	r2, r2, #15
 8002df0:	4985      	ldr	r1, [pc, #532]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002df2:	5c8a      	ldrb	r2, [r1, r2]
 8002df4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002df6:	4a85      	ldr	r2, [pc, #532]	; (800300c <HAL_RCC_OscConfig+0x4dc>)
 8002df8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dfa:	4b85      	ldr	r3, [pc, #532]	; (8003010 <HAL_RCC_OscConfig+0x4e0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fdee 	bl	80009e0 <HAL_InitTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d045      	beq.n	8002e9a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	e1b5      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d029      	beq.n	8002e6e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e1a:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <HAL_RCC_OscConfig+0x4e4>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fd fe2a 	bl	8000a78 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e28:	f7fd fe26 	bl	8000a78 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1a1      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e3a:	4b72      	ldr	r3, [pc, #456]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e46:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	496c      	ldr	r1, [pc, #432]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e58:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	4967      	ldr	r1, [pc, #412]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e6e:	4b69      	ldr	r3, [pc, #420]	; (8003014 <HAL_RCC_OscConfig+0x4e4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fd fe00 	bl	8000a78 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e7c:	f7fd fdfc 	bl	8000a78 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e177      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e8e:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d030      	beq.n	8002f08 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b5a      	ldr	r3, [pc, #360]	; (8003018 <HAL_RCC_OscConfig+0x4e8>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fd fde0 	bl	8000a78 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fd fddc 	bl	8000a78 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e157      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ece:	4b4d      	ldr	r3, [pc, #308]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x38c>
 8002eda:	e015      	b.n	8002f08 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b4e      	ldr	r3, [pc, #312]	; (8003018 <HAL_RCC_OscConfig+0x4e8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fd fdc9 	bl	8000a78 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eea:	f7fd fdc5 	bl	8000a78 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e140      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002efc:	4b41      	ldr	r3, [pc, #260]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80b5 	beq.w	8003080 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	4a36      	ldr	r2, [pc, #216]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6253      	str	r3, [r2, #36]	; 0x24
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_RCC_OscConfig+0x4ec>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCC_OscConfig+0x4ec>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a32      	ldr	r2, [pc, #200]	; (800301c <HAL_RCC_OscConfig+0x4ec>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fd fd8d 	bl	8000a78 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fd fd89 	bl	8000a78 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e104      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_RCC_OscConfig+0x4ec>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x466>
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f92:	6353      	str	r3, [r2, #52]	; 0x34
 8002f94:	e02d      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4c2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x488>
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa8:	6353      	str	r3, [r2, #52]	; 0x34
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb4:	6353      	str	r3, [r2, #52]	; 0x34
 8002fb6:	e01c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4c2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCC_OscConfig+0x4aa>
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	4a0f      	ldr	r2, [pc, #60]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fca:	6353      	str	r3, [r2, #52]	; 0x34
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	6353      	str	r3, [r2, #52]	; 0x34
 8002fd8:	e00b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4c2>
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe4:	6353      	str	r3, [r2, #52]	; 0x34
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	4a06      	ldr	r2, [pc, #24]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d024      	beq.n	8003044 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fd fd3d 	bl	8000a78 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003000:	e019      	b.n	8003036 <HAL_RCC_OscConfig+0x506>
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	08008c48 	.word	0x08008c48
 800300c:	20000000 	.word	0x20000000
 8003010:	20000004 	.word	0x20000004
 8003014:	42470020 	.word	0x42470020
 8003018:	42470680 	.word	0x42470680
 800301c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fd fd2a 	bl	8000a78 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0a3      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003036:	4b54      	ldr	r3, [pc, #336]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ee      	beq.n	8003020 <HAL_RCC_OscConfig+0x4f0>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fd fd18 	bl	8000a78 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fd fd14 	bl	8000a78 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e08d      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003062:	4b49      	ldr	r3, [pc, #292]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ee      	bne.n	800304c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800306e:	7ffb      	ldrb	r3, [r7, #31]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	4a43      	ldr	r2, [pc, #268]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d079      	beq.n	800317c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d056      	beq.n	800313c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b02      	cmp	r3, #2
 8003094:	d13b      	bne.n	800310e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCC_OscConfig+0x65c>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fd fcec 	bl	8000a78 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fd fce8 	bl	8000a78 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e063      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	4319      	orrs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	430b      	orrs	r3, r1
 80030da:	492b      	ldr	r1, [pc, #172]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCC_OscConfig+0x65c>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fd fcc7 	bl	8000a78 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd fcc3 	bl	8000a78 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e03e      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x5be>
 800310c:	e036      	b.n	800317c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <HAL_RCC_OscConfig+0x65c>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd fcb0 	bl	8000a78 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7fd fcac 	bl	8000a78 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e027      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800312e:	4b16      	ldr	r3, [pc, #88]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x5ec>
 800313a:	e01f      	b.n	800317c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e01a      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_RCC_OscConfig+0x658>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	429a      	cmp	r2, r3
 800315a:	d10d      	bne.n	8003178 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d106      	bne.n	8003178 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	42470060 	.word	0x42470060

08003190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e11a      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d919      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x34>
 80031b8:	4b8a      	ldr	r3, [pc, #552]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a89      	ldr	r2, [pc, #548]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b87      	ldr	r3, [pc, #540]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 0201 	bic.w	r2, r3, #1
 80031cc:	4985      	ldr	r1, [pc, #532]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d4:	4b83      	ldr	r3, [pc, #524]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0f9      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f2:	4b7d      	ldr	r3, [pc, #500]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	497a      	ldr	r1, [pc, #488]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 808e 	beq.w	800332e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800321a:	4b73      	ldr	r3, [pc, #460]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d121      	bne.n	800326a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0d7      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003232:	4b6d      	ldr	r3, [pc, #436]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0cb      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800324a:	4b67      	ldr	r3, [pc, #412]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0bf      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800325a:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0b7      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	495c      	ldr	r1, [pc, #368]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7fd fbfc 	bl	8000a78 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d112      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fd fbf4 	bl	8000a78 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e09b      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d1ee      	bne.n	800328c <HAL_RCC_ClockConfig+0xfc>
 80032ae:	e03e      	b.n	800332e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d112      	bne.n	80032de <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ba:	f7fd fbdd 	bl	8000a78 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e084      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d0:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_ClockConfig+0x12a>
 80032dc:	e027      	b.n	800332e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d11d      	bne.n	8003322 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fd fbc6 	bl	8000a78 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e06d      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fe:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d1ee      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x158>
 800330a:	e010      	b.n	800332e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f7fd fbb4 	bl	8000a78 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e05b      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003322:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ee      	bne.n	800330c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d219      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <HAL_RCC_ClockConfig+0x1be>
 8003342:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0201 	bic.w	r2, r3, #1
 8003356:	4923      	ldr	r1, [pc, #140]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <HAL_RCC_ClockConfig+0x254>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e034      	b.n	80033da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4917      	ldr	r1, [pc, #92]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	490f      	ldr	r1, [pc, #60]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ae:	f000 f823 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_RCC_ClockConfig+0x258>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	490b      	ldr	r1, [pc, #44]	; (80033ec <HAL_RCC_ClockConfig+0x25c>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_RCC_ClockConfig+0x260>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCC_ClockConfig+0x264>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd fb06 	bl	80009e0 <HAL_InitTick>
 80033d4:	4603      	mov	r3, r0
 80033d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80033d8:	7afb      	ldrb	r3, [r7, #11]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023c00 	.word	0x40023c00
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08008c48 	.word	0x08008c48
 80033f0:	20000000 	.word	0x20000000
 80033f4:	20000004 	.word	0x20000004

080033f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033fc:	b092      	sub	sp, #72	; 0x48
 80033fe:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003400:	4b79      	ldr	r3, [pc, #484]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d00d      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x34>
 8003410:	2b0c      	cmp	r3, #12
 8003412:	f200 80d5 	bhi.w	80035c0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003416:	2b04      	cmp	r3, #4
 8003418:	d002      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x28>
 800341a:	2b08      	cmp	r3, #8
 800341c:	d003      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0x2e>
 800341e:	e0cf      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b72      	ldr	r3, [pc, #456]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003422:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003424:	e0da      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003426:	4b71      	ldr	r3, [pc, #452]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003428:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800342a:	e0d7      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342e:	0c9b      	lsrs	r3, r3, #18
 8003430:	f003 020f 	and.w	r2, r3, #15
 8003434:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003436:	5c9b      	ldrb	r3, [r3, r2]
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800343a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343c:	0d9b      	lsrs	r3, r3, #22
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	3301      	adds	r3, #1
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003446:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d05d      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	2200      	movs	r2, #0
 8003456:	4618      	mov	r0, r3
 8003458:	4611      	mov	r1, r2
 800345a:	4604      	mov	r4, r0
 800345c:	460d      	mov	r5, r1
 800345e:	4622      	mov	r2, r4
 8003460:	462b      	mov	r3, r5
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	0159      	lsls	r1, r3, #5
 800346c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003470:	0150      	lsls	r0, r2, #5
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4621      	mov	r1, r4
 8003478:	1a51      	subs	r1, r2, r1
 800347a:	6139      	str	r1, [r7, #16]
 800347c:	4629      	mov	r1, r5
 800347e:	eb63 0301 	sbc.w	r3, r3, r1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003490:	4659      	mov	r1, fp
 8003492:	018b      	lsls	r3, r1, #6
 8003494:	4651      	mov	r1, sl
 8003496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349a:	4651      	mov	r1, sl
 800349c:	018a      	lsls	r2, r1, #6
 800349e:	46d4      	mov	ip, sl
 80034a0:	ebb2 080c 	subs.w	r8, r2, ip
 80034a4:	4659      	mov	r1, fp
 80034a6:	eb63 0901 	sbc.w	r9, r3, r1
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034be:	4690      	mov	r8, r2
 80034c0:	4699      	mov	r9, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	eb18 0303 	adds.w	r3, r8, r3
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	462b      	mov	r3, r5
 80034cc:	eb49 0303 	adc.w	r3, r9, r3
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034de:	4629      	mov	r1, r5
 80034e0:	028b      	lsls	r3, r1, #10
 80034e2:	4620      	mov	r0, r4
 80034e4:	4629      	mov	r1, r5
 80034e6:	4604      	mov	r4, r0
 80034e8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80034ec:	4601      	mov	r1, r0
 80034ee:	028a      	lsls	r2, r1, #10
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	2200      	movs	r2, #0
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003500:	f7fc fe44 	bl	800018c <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	647b      	str	r3, [r7, #68]	; 0x44
 800350c:	e055      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	2200      	movs	r2, #0
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	627a      	str	r2, [r7, #36]	; 0x24
 8003516:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800351a:	4642      	mov	r2, r8
 800351c:	464b      	mov	r3, r9
 800351e:	f04f 0000 	mov.w	r0, #0
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	0159      	lsls	r1, r3, #5
 8003528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800352c:	0150      	lsls	r0, r2, #5
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	46c4      	mov	ip, r8
 8003534:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003538:	4640      	mov	r0, r8
 800353a:	4649      	mov	r1, r9
 800353c:	468c      	mov	ip, r1
 800353e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800354e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003552:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003556:	ebb2 040a 	subs.w	r4, r2, sl
 800355a:	eb63 050b 	sbc.w	r5, r3, fp
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	00eb      	lsls	r3, r5, #3
 8003568:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800356c:	00e2      	lsls	r2, r4, #3
 800356e:	4614      	mov	r4, r2
 8003570:	461d      	mov	r5, r3
 8003572:	4603      	mov	r3, r0
 8003574:	18e3      	adds	r3, r4, r3
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	460b      	mov	r3, r1
 800357a:	eb45 0303 	adc.w	r3, r5, r3
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 4500 	ldrd	r4, r5, [r7]
 800358c:	4629      	mov	r1, r5
 800358e:	028b      	lsls	r3, r1, #10
 8003590:	4620      	mov	r0, r4
 8003592:	4629      	mov	r1, r5
 8003594:	4604      	mov	r4, r0
 8003596:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800359a:	4601      	mov	r1, r0
 800359c:	028a      	lsls	r2, r1, #10
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a4:	2200      	movs	r2, #0
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	61fa      	str	r2, [r7, #28]
 80035aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ae:	f7fc fded 	bl	800018c <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4613      	mov	r3, r2
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80035ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035bc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035be:	e00d      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0b5b      	lsrs	r3, r3, #13
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	3301      	adds	r3, #1
 80035d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3748      	adds	r7, #72	; 0x48
 80035e2:	46bd      	mov	sp, r7
 80035e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	00f42400 	.word	0x00f42400
 80035f0:	08008c3c 	.word	0x08008c3c

080035f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f8:	4b02      	ldr	r3, [pc, #8]	; (8003604 <HAL_RCC_GetHCLKFreq+0x10>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	20000000 	.word	0x20000000

08003608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800360c:	f7ff fff2 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4903      	ldr	r1, [pc, #12]	; (800362c <HAL_RCC_GetPCLK1Freq+0x24>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40023800 	.word	0x40023800
 800362c:	08008c58 	.word	0x08008c58

08003630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d12c      	bne.n	80036a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003648:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e016      	b.n	800368e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6253      	str	r3, [r2, #36]	; 0x24
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003680:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003694:	d105      	bne.n	80036a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800369c:	d101      	bne.n	80036a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800369e:	2301      	movs	r3, #1
 80036a0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80036a8:	4b10      	ldr	r3, [pc, #64]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 0201 	bic.w	r2, r3, #1
 80036bc:	490b      	ldr	r1, [pc, #44]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d001      	beq.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40007000 	.word	0x40007000
 80036ec:	40023c00 	.word	0x40023c00

080036f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06e      	b.n	80037e0 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003712:	d009      	beq.n	8003728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	61da      	str	r2, [r3, #28]
 800371a:	e005      	b.n	8003728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd f85c 	bl	8000800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	ea42 0103 	orr.w	r1, r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	0c1a      	lsrs	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f002 0204 	and.w	r2, r2, #4
 80037ce:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80037fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	b29a      	uxth	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800381c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003820:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	b29b      	uxth	r3, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	4013      	ands	r3, r2
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003848:	b084      	sub	sp, #16
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	f107 0014 	add.w	r0, r7, #20
 8003856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	b004      	add	sp, #16
 8003886:	4770      	bx	lr

08003888 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003888:	b480      	push	{r7}
 800388a:	b09b      	sub	sp, #108	; 0x6c
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	78db      	ldrb	r3, [r3, #3]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d81f      	bhi.n	80038fa <USB_ActivateEndpoint+0x72>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <USB_ActivateEndpoint+0x38>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038ed 	.word	0x080038ed
 80038c8:	08003903 	.word	0x08003903
 80038cc:	080038df 	.word	0x080038df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80038d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038dc:	e012      	b.n	8003904 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80038de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80038e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038ea:	e00b      	b.n	8003904 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80038ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038f8:	e004      	b.n	8003904 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003900:	e000      	b.n	8003904 <USB_ActivateEndpoint+0x7c>
      break;
 8003902:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	441a      	add	r2, r3
 800390e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800391e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003922:	b29b      	uxth	r3, r3
 8003924:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	b29a      	uxth	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	4313      	orrs	r3, r2
 8003946:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	441a      	add	r2, r3
 8003954:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800395c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003968:	b29b      	uxth	r3, r3
 800396a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	7b1b      	ldrb	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 8149 	bne.w	8003c08 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8084 	beq.w	8003a88 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	011a      	lsls	r2, r3, #4
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	88db      	ldrh	r3, [r3, #6]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	81fb      	strh	r3, [r7, #14]
 80039c2:	89fb      	ldrh	r3, [r7, #14]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01b      	beq.n	8003a04 <USB_ActivateEndpoint+0x17c>
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e2:	81bb      	strh	r3, [r7, #12]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	441a      	add	r2, r3
 80039ee:	89bb      	ldrh	r3, [r7, #12]
 80039f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	78db      	ldrb	r3, [r3, #3]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d020      	beq.n	8003a4e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a22:	813b      	strh	r3, [r7, #8]
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	f083 0320 	eor.w	r3, r3, #32
 8003a2a:	813b      	strh	r3, [r7, #8]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	441a      	add	r2, r3
 8003a36:	893b      	ldrh	r3, [r7, #8]
 8003a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	8013      	strh	r3, [r2, #0]
 8003a4c:	e27f      	b.n	8003f4e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a64:	817b      	strh	r3, [r7, #10]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	441a      	add	r2, r3
 8003a70:	897b      	ldrh	r3, [r7, #10]
 8003a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	8013      	strh	r3, [r2, #0]
 8003a86:	e262      	b.n	8003f4e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	4413      	add	r3, r2
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	011a      	lsls	r2, r3, #4
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	88db      	ldrh	r3, [r3, #6]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	4413      	add	r3, r2
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	011a      	lsls	r2, r3, #4
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	4413      	add	r3, r2
 8003ada:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d112      	bne.n	8003b0e <USB_ActivateEndpoint+0x286>
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	801a      	strh	r2, [r3, #0]
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	801a      	strh	r2, [r3, #0]
 8003b0c:	e02f      	b.n	8003b6e <USB_ActivateEndpoint+0x2e6>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b3e      	cmp	r3, #62	; 0x3e
 8003b14:	d813      	bhi.n	8003b3e <USB_ActivateEndpoint+0x2b6>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <USB_ActivateEndpoint+0x2a8>
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	029b      	lsls	r3, r3, #10
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	801a      	strh	r2, [r3, #0]
 8003b3c:	e017      	b.n	8003b6e <USB_ActivateEndpoint+0x2e6>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	663b      	str	r3, [r7, #96]	; 0x60
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <USB_ActivateEndpoint+0x2d0>
 8003b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b54:	3b01      	subs	r3, #1
 8003b56:	663b      	str	r3, [r7, #96]	; 0x60
 8003b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	029b      	lsls	r3, r3, #10
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	83fb      	strh	r3, [r7, #30]
 8003b7c:	8bfb      	ldrh	r3, [r7, #30]
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01b      	beq.n	8003bbe <USB_ActivateEndpoint+0x336>
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9c:	83bb      	strh	r3, [r7, #28]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	441a      	add	r2, r3
 8003ba8:	8bbb      	ldrh	r3, [r7, #28]
 8003baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd4:	837b      	strh	r3, [r7, #26]
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003bdc:	837b      	strh	r3, [r7, #26]
 8003bde:	8b7b      	ldrh	r3, [r7, #26]
 8003be0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003be4:	837b      	strh	r3, [r7, #26]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	441a      	add	r2, r3
 8003bf0:	8b7b      	ldrh	r3, [r7, #26]
 8003bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	8013      	strh	r3, [r2, #0]
 8003c06:	e1a2      	b.n	8003f4e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	441a      	add	r2, r3
 8003c2c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c38:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c54:	4413      	add	r3, r2
 8003c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	011a      	lsls	r2, r3, #4
 8003c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c66:	657b      	str	r3, [r7, #84]	; 0x54
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	891b      	ldrh	r3, [r3, #8]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c88:	4413      	add	r3, r2
 8003c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	011a      	lsls	r2, r3, #4
 8003c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	895b      	ldrh	r3, [r3, #10]
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003caa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f040 8091 	bne.w	8003dd8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003cc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01b      	beq.n	8003d06 <USB_ActivateEndpoint+0x47e>
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	441a      	add	r2, r3
 8003cf0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01b      	beq.n	8003d56 <USB_ActivateEndpoint+0x4ce>
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d34:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	441a      	add	r2, r3
 8003d40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d7c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db4:	867b      	strh	r3, [r7, #50]	; 0x32
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	441a      	add	r2, r3
 8003dc0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	8013      	strh	r3, [r2, #0]
 8003dd6:	e0ba      	b.n	8003f4e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003de8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01d      	beq.n	8003e30 <USB_ActivateEndpoint+0x5a8>
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	441a      	add	r2, r3
 8003e18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01d      	beq.n	8003e88 <USB_ActivateEndpoint+0x600>
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	441a      	add	r2, r3
 8003e70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	78db      	ldrb	r3, [r3, #3]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d024      	beq.n	8003eda <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003eae:	f083 0320 	eor.w	r3, r3, #32
 8003eb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	441a      	add	r2, r3
 8003ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	8013      	strh	r3, [r2, #0]
 8003ed8:	e01d      	b.n	8003f16 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	441a      	add	r2, r3
 8003f38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	376c      	adds	r7, #108	; 0x6c
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b08d      	sub	sp, #52	; 0x34
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	7b1b      	ldrb	r3, [r3, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 808e 	bne.w	800408c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d044      	beq.n	8004002 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	81bb      	strh	r3, [r7, #12]
 8003f86:	89bb      	ldrh	r3, [r7, #12]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01b      	beq.n	8003fc8 <USB_DeactivateEndpoint+0x6c>
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	817b      	strh	r3, [r7, #10]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fde:	813b      	strh	r3, [r7, #8]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	441a      	add	r2, r3
 8003fea:	893b      	ldrh	r3, [r7, #8]
 8003fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	8013      	strh	r3, [r2, #0]
 8004000:	e192      	b.n	8004328 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	827b      	strh	r3, [r7, #18]
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01b      	beq.n	8004052 <USB_DeactivateEndpoint+0xf6>
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004030:	823b      	strh	r3, [r7, #16]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	8a3b      	ldrh	r3, [r7, #16]
 800403e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800404a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404e:	b29b      	uxth	r3, r3
 8004050:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	81fb      	strh	r3, [r7, #14]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	441a      	add	r2, r3
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800407e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004086:	b29b      	uxth	r3, r3
 8004088:	8013      	strh	r3, [r2, #0]
 800408a:	e14d      	b.n	8004328 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 80a5 	bne.w	80041e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	843b      	strh	r3, [r7, #32]
 80040a4:	8c3b      	ldrh	r3, [r7, #32]
 80040a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01b      	beq.n	80040e6 <USB_DeactivateEndpoint+0x18a>
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c4:	83fb      	strh	r3, [r7, #30]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	8bfb      	ldrh	r3, [r7, #30]
 80040d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	83bb      	strh	r3, [r7, #28]
 80040f4:	8bbb      	ldrh	r3, [r7, #28]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01b      	beq.n	8004136 <USB_DeactivateEndpoint+0x1da>
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	837b      	strh	r3, [r7, #26]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	8b7b      	ldrh	r3, [r7, #26]
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414c:	833b      	strh	r3, [r7, #24]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	441a      	add	r2, r3
 8004158:	8b3b      	ldrh	r3, [r7, #24]
 800415a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004166:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800416a:	b29b      	uxth	r3, r3
 800416c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004184:	82fb      	strh	r3, [r7, #22]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	8afb      	ldrh	r3, [r7, #22]
 8004192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041bc:	82bb      	strh	r3, [r7, #20]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	441a      	add	r2, r3
 80041c8:	8abb      	ldrh	r3, [r7, #20]
 80041ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8013      	strh	r3, [r2, #0]
 80041de:	e0a3      	b.n	8004328 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01b      	beq.n	8004230 <USB_DeactivateEndpoint+0x2d4>
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800421c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422c:	b29b      	uxth	r3, r3
 800422e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800423e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01b      	beq.n	8004280 <USB_DeactivateEndpoint+0x324>
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800426c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800427c:	b29b      	uxth	r3, r3
 800427e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	441a      	add	r2, r3
 80042da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	847b      	strh	r3, [r7, #34]	; 0x22
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	441a      	add	r2, r3
 8004312:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004324:	b29b      	uxth	r3, r3
 8004326:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3734      	adds	r7, #52	; 0x34
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b0cc      	sub	sp, #304	; 0x130
 8004338:	af00      	add	r7, sp, #0
 800433a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800433e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004342:	6018      	str	r0, [r3, #0]
 8004344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800434c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800434e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	2b01      	cmp	r3, #1
 800435c:	f041 817d 	bne.w	800565a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d908      	bls.n	800438e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800437c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800438c:	e007      	b.n	800439e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800438e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800439e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	7b1b      	ldrb	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d152      	bne.n	8004454 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6959      	ldr	r1, [r3, #20]
 80043ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	88da      	ldrh	r2, [r3, #6]
 80043c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80043d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80043d4:	6800      	ldr	r0, [r0, #0]
 80043d6:	f001 ff0e 	bl	80061f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80043e6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	4619      	mov	r1, r3
 8004400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004404:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004408:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800440c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	440a      	add	r2, r1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	011a      	lsls	r2, r3, #4
 8004424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004428:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4413      	add	r3, r2
 8004430:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004438:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004442:	b29a      	uxth	r2, r3
 8004444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004448:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	f001 b8b5 	b.w	80055be <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	78db      	ldrb	r3, [r3, #3]
 8004460:	2b02      	cmp	r3, #2
 8004462:	f040 84c6 	bne.w	8004df2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a1a      	ldr	r2, [r3, #32]
 8004472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	429a      	cmp	r2, r3
 8004480:	f240 8443 	bls.w	8004d0a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80044ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	441a      	add	r2, r3
 80044c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f0:	1ad2      	subs	r2, r2, r3
 80044f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800450c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 823e 	beq.w	80049a2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800452a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800452e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004532:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800453e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	785b      	ldrb	r3, [r3, #1]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 809a 	bne.w	8004680 <USB_EPStartXfer+0x34c>
 800454c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004554:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004558:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456e:	b29b      	uxth	r3, r3
 8004570:	4619      	mov	r1, r3
 8004572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800457a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800457e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	440a      	add	r2, r1
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800458c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	011a      	lsls	r2, r3, #4
 8004596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800459a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4413      	add	r3, r2
 80045a2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80045a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d122      	bne.n	80045fe <USB_EPStartXfer+0x2ca>
 80045b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	801a      	strh	r2, [r3, #0]
 80045fc:	e079      	b.n	80046f2 <USB_EPStartXfer+0x3be>
 80045fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004602:	2b3e      	cmp	r3, #62	; 0x3e
 8004604:	d81b      	bhi.n	800463e <USB_EPStartXfer+0x30a>
 8004606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <USB_EPStartXfer+0x2f2>
 800461c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004620:	3301      	adds	r3, #1
 8004622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800462a:	b29b      	uxth	r3, r3
 800462c:	029b      	lsls	r3, r3, #10
 800462e:	b29a      	uxth	r2, r3
 8004630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004634:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	801a      	strh	r2, [r3, #0]
 800463c:	e059      	b.n	80046f2 <USB_EPStartXfer+0x3be>
 800463e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <USB_EPStartXfer+0x32a>
 8004654:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004658:	3b01      	subs	r3, #1
 800465a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800465e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004662:	b29b      	uxth	r3, r3
 8004664:	029b      	lsls	r3, r3, #10
 8004666:	b29b      	uxth	r3, r3
 8004668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800466c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004670:	b29a      	uxth	r2, r3
 8004672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004676:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	e038      	b.n	80046f2 <USB_EPStartXfer+0x3be>
 8004680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d130      	bne.n	80046f2 <USB_EPStartXfer+0x3be>
 8004690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4619      	mov	r1, r3
 80046a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80046aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046ae:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	440a      	add	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	011a      	lsls	r2, r3, #4
 80046c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4413      	add	r3, r2
 80046d2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80046d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	895b      	ldrh	r3, [r3, #10]
 80046fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6959      	ldr	r1, [r3, #20]
 800470e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004712:	b29b      	uxth	r3, r3
 8004714:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004718:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800471c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004720:	6800      	ldr	r0, [r0, #0]
 8004722:	f001 fd68 	bl	80061f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004736:	441a      	add	r2, r3
 8004738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	429a      	cmp	r2, r3
 800475e:	d90f      	bls.n	8004780 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004770:	1ad2      	subs	r2, r2, r3
 8004772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	621a      	str	r2, [r3, #32]
 800477e:	e00e      	b.n	800479e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800479e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 809a 	bne.w	80048e4 <USB_EPStartXfer+0x5b0>
 80047b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80047bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4619      	mov	r1, r3
 80047d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80047e2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	440a      	add	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	011a      	lsls	r2, r3, #4
 80047fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4413      	add	r3, r2
 8004806:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800480a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d122      	bne.n	8004862 <USB_EPStartXfer+0x52e>
 800481c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004820:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800482e:	b29a      	uxth	r2, r3
 8004830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004834:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004840:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004852:	b29a      	uxth	r2, r3
 8004854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004858:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	e083      	b.n	800496a <USB_EPStartXfer+0x636>
 8004862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004866:	2b3e      	cmp	r3, #62	; 0x3e
 8004868:	d81b      	bhi.n	80048a2 <USB_EPStartXfer+0x56e>
 800486a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <USB_EPStartXfer+0x556>
 8004880:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004884:	3301      	adds	r3, #1
 8004886:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800488a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800488e:	b29b      	uxth	r3, r3
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	b29a      	uxth	r2, r3
 8004894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004898:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	e063      	b.n	800496a <USB_EPStartXfer+0x636>
 80048a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <USB_EPStartXfer+0x58e>
 80048b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048bc:	3b01      	subs	r3, #1
 80048be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	029b      	lsls	r3, r3, #10
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	801a      	strh	r2, [r3, #0]
 80048e2:	e042      	b.n	800496a <USB_EPStartXfer+0x636>
 80048e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d13a      	bne.n	800496a <USB_EPStartXfer+0x636>
 80048f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80048fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004900:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800490c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004916:	b29b      	uxth	r3, r3
 8004918:	4619      	mov	r1, r3
 800491a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004922:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004926:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	440a      	add	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	011a      	lsls	r2, r3, #4
 800493e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004942:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4413      	add	r3, r2
 800494a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800494e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004952:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800495c:	b29a      	uxth	r2, r3
 800495e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004962:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800496a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	891b      	ldrh	r3, [r3, #8]
 8004976:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800497a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6959      	ldr	r1, [r3, #20]
 8004986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498a:	b29b      	uxth	r3, r3
 800498c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004990:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004994:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004998:	6800      	ldr	r0, [r0, #0]
 800499a:	f001 fc2c 	bl	80061f6 <USB_WritePMA>
 800499e:	f000 be0e 	b.w	80055be <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d16d      	bne.n	8004a8e <USB_EPStartXfer+0x75a>
 80049b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80049be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d2:	4413      	add	r3, r2
 80049d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	011a      	lsls	r2, r3, #4
 80049e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
 80049ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d112      	bne.n	8004a1c <USB_EPStartXfer+0x6e8>
 80049f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	e063      	b.n	8004ae4 <USB_EPStartXfer+0x7b0>
 8004a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a20:	2b3e      	cmp	r3, #62	; 0x3e
 8004a22:	d817      	bhi.n	8004a54 <USB_EPStartXfer+0x720>
 8004a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <USB_EPStartXfer+0x710>
 8004a3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	029b      	lsls	r3, r3, #10
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	e047      	b.n	8004ae4 <USB_EPStartXfer+0x7b0>
 8004a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <USB_EPStartXfer+0x740>
 8004a6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	029b      	lsls	r3, r3, #10
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	e02a      	b.n	8004ae4 <USB_EPStartXfer+0x7b0>
 8004a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d122      	bne.n	8004ae4 <USB_EPStartXfer+0x7b0>
 8004a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8004aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abe:	4413      	add	r3, r2
 8004ac0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	011a      	lsls	r2, r3, #4
 8004ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	891b      	ldrh	r3, [r3, #8]
 8004af0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6959      	ldr	r1, [r3, #20]
 8004b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b0a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b0e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b12:	6800      	ldr	r0, [r0, #0]
 8004b14:	f001 fb6f 	bl	80061f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b28:	441a      	add	r2, r3
 8004b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a1a      	ldr	r2, [r3, #32]
 8004b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90f      	bls.n	8004b72 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b62:	1ad2      	subs	r2, r2, r3
 8004b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	621a      	str	r2, [r3, #32]
 8004b70:	e00e      	b.n	8004b90 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d16d      	bne.n	8004c88 <USB_EPStartXfer+0x954>
 8004bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	4413      	add	r3, r2
 8004bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	011a      	lsls	r2, r3, #4
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	4413      	add	r3, r2
 8004be2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
 8004be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d112      	bne.n	8004c16 <USB_EPStartXfer+0x8e2>
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c12:	801a      	strh	r2, [r3, #0]
 8004c14:	e05d      	b.n	8004cd2 <USB_EPStartXfer+0x99e>
 8004c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c1c:	d817      	bhi.n	8004c4e <USB_EPStartXfer+0x91a>
 8004c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <USB_EPStartXfer+0x90a>
 8004c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c38:	3301      	adds	r3, #1
 8004c3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	029b      	lsls	r3, r3, #10
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	801a      	strh	r2, [r3, #0]
 8004c4c:	e041      	b.n	8004cd2 <USB_EPStartXfer+0x99e>
 8004c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <USB_EPStartXfer+0x93a>
 8004c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	029b      	lsls	r3, r3, #10
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	e024      	b.n	8004cd2 <USB_EPStartXfer+0x99e>
 8004c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d11c      	bne.n	8004cd2 <USB_EPStartXfer+0x99e>
 8004c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cac:	4413      	add	r3, r2
 8004cae:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	011a      	lsls	r2, r3, #4
 8004cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	895b      	ldrh	r3, [r3, #10]
 8004cde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6959      	ldr	r1, [r3, #20]
 8004cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004cf8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004cfc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d00:	6800      	ldr	r0, [r0, #0]
 8004d02:	f001 fa78 	bl	80061f6 <USB_WritePMA>
 8004d06:	f000 bc5a 	b.w	80055be <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d96:	4413      	add	r3, r2
 8004d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	011a      	lsls	r2, r3, #4
 8004da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004daa:	4413      	add	r3, r2
 8004dac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	891b      	ldrh	r3, [r3, #8]
 8004dc8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6959      	ldr	r1, [r3, #20]
 8004dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004de2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004de6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	f001 fa03 	bl	80061f6 <USB_WritePMA>
 8004df0:	e3e5      	b.n	80055be <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5e:	1ad2      	subs	r2, r2, r3
 8004e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 81bc 	beq.w	800520c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d16d      	bne.n	8004f8e <USB_EPStartXfer+0xc5a>
 8004eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed2:	4413      	add	r3, r2
 8004ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	011a      	lsls	r2, r3, #4
 8004ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eec:	677b      	str	r3, [r7, #116]	; 0x74
 8004eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d112      	bne.n	8004f1c <USB_EPStartXfer+0xbe8>
 8004ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	e060      	b.n	8004fde <USB_EPStartXfer+0xcaa>
 8004f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f20:	2b3e      	cmp	r3, #62	; 0x3e
 8004f22:	d817      	bhi.n	8004f54 <USB_EPStartXfer+0xc20>
 8004f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <USB_EPStartXfer+0xc10>
 8004f3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f3e:	3301      	adds	r3, #1
 8004f40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	029b      	lsls	r3, r3, #10
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	e044      	b.n	8004fde <USB_EPStartXfer+0xcaa>
 8004f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <USB_EPStartXfer+0xc40>
 8004f6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	e027      	b.n	8004fde <USB_EPStartXfer+0xcaa>
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d11f      	bne.n	8004fde <USB_EPStartXfer+0xcaa>
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fdc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	895b      	ldrh	r3, [r3, #10]
 8004fea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6959      	ldr	r1, [r3, #20]
 8004ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005004:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005008:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	f001 f8f2 	bl	80061f6 <USB_WritePMA>
          ep->xfer_buff += len;
 8005012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005022:	441a      	add	r2, r3
 8005024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	429a      	cmp	r2, r3
 800504a:	d90f      	bls.n	800506c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800504c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505c:	1ad2      	subs	r2, r2, r3
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	621a      	str	r2, [r3, #32]
 800506a:	e00e      	b.n	800508a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800506c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800508a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8295 	beq.w	80055be <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d16d      	bne.n	8005180 <USB_EPStartXfer+0xe4c>
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050be:	b29b      	uxth	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c4:	4413      	add	r3, r2
 80050c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	011a      	lsls	r2, r3, #4
 80050d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d8:	4413      	add	r3, r2
 80050da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050de:	667b      	str	r3, [r7, #100]	; 0x64
 80050e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d112      	bne.n	800510e <USB_EPStartXfer+0xdda>
 80050e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005106:	b29a      	uxth	r2, r3
 8005108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e063      	b.n	80051d6 <USB_EPStartXfer+0xea2>
 800510e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005112:	2b3e      	cmp	r3, #62	; 0x3e
 8005114:	d817      	bhi.n	8005146 <USB_EPStartXfer+0xe12>
 8005116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <USB_EPStartXfer+0xe02>
 800512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005130:	3301      	adds	r3, #1
 8005132:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513a:	b29b      	uxth	r3, r3
 800513c:	029b      	lsls	r3, r3, #10
 800513e:	b29a      	uxth	r2, r3
 8005140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	e047      	b.n	80051d6 <USB_EPStartXfer+0xea2>
 8005146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <USB_EPStartXfer+0xe32>
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005160:	3b01      	subs	r3, #1
 8005162:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516a:	b29b      	uxth	r3, r3
 800516c:	029b      	lsls	r3, r3, #10
 800516e:	b29b      	uxth	r3, r3
 8005170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005178:	b29a      	uxth	r2, r3
 800517a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	e02a      	b.n	80051d6 <USB_EPStartXfer+0xea2>
 8005180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d122      	bne.n	80051d6 <USB_EPStartXfer+0xea2>
 8005190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	673b      	str	r3, [r7, #112]	; 0x70
 800519c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051b0:	4413      	add	r3, r2
 80051b2:	673b      	str	r3, [r7, #112]	; 0x70
 80051b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	011a      	lsls	r2, r3, #4
 80051c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c4:	4413      	add	r3, r2
 80051c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	891b      	ldrh	r3, [r3, #8]
 80051e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6959      	ldr	r1, [r3, #20]
 80051f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005200:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005204:	6800      	ldr	r0, [r0, #0]
 8005206:	f000 fff6 	bl	80061f6 <USB_WritePMA>
 800520a:	e1d8      	b.n	80055be <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800520c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d178      	bne.n	800530e <USB_EPStartXfer+0xfda>
 800521c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005240:	4413      	add	r3, r2
 8005242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	011a      	lsls	r2, r3, #4
 8005254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005258:	4413      	add	r3, r2
 800525a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800525e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d116      	bne.n	8005298 <USB_EPStartXfer+0xf64>
 800526a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005276:	b29a      	uxth	r2, r3
 8005278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800527c:	801a      	strh	r2, [r3, #0]
 800527e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528e:	b29a      	uxth	r2, r3
 8005290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	e06b      	b.n	8005370 <USB_EPStartXfer+0x103c>
 8005298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529c:	2b3e      	cmp	r3, #62	; 0x3e
 800529e:	d818      	bhi.n	80052d2 <USB_EPStartXfer+0xf9e>
 80052a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <USB_EPStartXfer+0xf8c>
 80052b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052ba:	3301      	adds	r3, #1
 80052bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	029b      	lsls	r3, r3, #10
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	e04e      	b.n	8005370 <USB_EPStartXfer+0x103c>
 80052d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <USB_EPStartXfer+0xfbe>
 80052e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052ec:	3b01      	subs	r3, #1
 80052ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	029b      	lsls	r3, r3, #10
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005304:	b29a      	uxth	r2, r3
 8005306:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	e030      	b.n	8005370 <USB_EPStartXfer+0x103c>
 800530e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d128      	bne.n	8005370 <USB_EPStartXfer+0x103c>
 800531e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005322:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800532c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533a:	b29b      	uxth	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005342:	4413      	add	r3, r2
 8005344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	011a      	lsls	r2, r3, #4
 8005356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800535a:	4413      	add	r3, r2
 800535c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005368:	b29a      	uxth	r2, r3
 800536a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800536e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	891b      	ldrh	r3, [r3, #8]
 800537c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6959      	ldr	r1, [r3, #20]
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	b29b      	uxth	r3, r3
 8005392:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005396:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800539a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800539e:	6800      	ldr	r0, [r0, #0]
 80053a0:	f000 ff29 	bl	80061f6 <USB_WritePMA>
          ep->xfer_buff += len;
 80053a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b4:	441a      	add	r2, r3
 80053b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80053c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d90f      	bls.n	80053fe <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a1a      	ldr	r2, [r3, #32]
 80053ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ee:	1ad2      	subs	r2, r2, r3
 80053f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	621a      	str	r2, [r3, #32]
 80053fc:	e00e      	b.n	800541c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80053fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800540e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800541c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80cc 	beq.w	80055be <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d178      	bne.n	8005536 <USB_EPStartXfer+0x1202>
 8005444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005460:	b29b      	uxth	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005468:	4413      	add	r3, r2
 800546a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800546e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	011a      	lsls	r2, r3, #4
 800547c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005480:	4413      	add	r3, r2
 8005482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800548a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d116      	bne.n	80054c0 <USB_EPStartXfer+0x118c>
 8005492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800549e:	b29a      	uxth	r2, r3
 80054a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	e064      	b.n	800558a <USB_EPStartXfer+0x1256>
 80054c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c4:	2b3e      	cmp	r3, #62	; 0x3e
 80054c6:	d818      	bhi.n	80054fa <USB_EPStartXfer+0x11c6>
 80054c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <USB_EPStartXfer+0x11b4>
 80054de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e2:	3301      	adds	r3, #1
 80054e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	029b      	lsls	r3, r3, #10
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e047      	b.n	800558a <USB_EPStartXfer+0x1256>
 80054fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <USB_EPStartXfer+0x11e6>
 8005510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005514:	3b01      	subs	r3, #1
 8005516:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800551a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551e:	b29b      	uxth	r3, r3
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552c:	b29a      	uxth	r2, r3
 800552e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005532:	801a      	strh	r2, [r3, #0]
 8005534:	e029      	b.n	800558a <USB_EPStartXfer+0x1256>
 8005536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d121      	bne.n	800558a <USB_EPStartXfer+0x1256>
 8005546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800555c:	4413      	add	r3, r2
 800555e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	011a      	lsls	r2, r3, #4
 8005570:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005574:	4413      	add	r3, r2
 8005576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800557e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005582:	b29a      	uxth	r2, r3
 8005584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005588:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	895b      	ldrh	r3, [r3, #10]
 8005596:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800559a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6959      	ldr	r1, [r3, #20]
 80055a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055b8:	6800      	ldr	r0, [r0, #0]
 80055ba:	f000 fe1c 	bl	80061f6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055e0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80055e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ec:	8013      	strh	r3, [r2, #0]
 80055ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80055f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055fa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80055fe:	8812      	ldrh	r2, [r2, #0]
 8005600:	f082 0210 	eor.w	r2, r2, #16
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800560e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005612:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005616:	8812      	ldrh	r2, [r2, #0]
 8005618:	f082 0220 	eor.w	r2, r2, #32
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005652:	b29b      	uxth	r3, r3
 8005654:	8013      	strh	r3, [r2, #0]
 8005656:	f000 bc9f 	b.w	8005f98 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	7b1b      	ldrb	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f040 80ae 	bne.w	80057c8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800566c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	429a      	cmp	r2, r3
 8005686:	d917      	bls.n	80056b8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a8:	1ad2      	subs	r2, r2, r3
 80056aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	619a      	str	r2, [r3, #24]
 80056b6:	e00e      	b.n	80056d6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80056b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80056c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056fa:	4413      	add	r3, r2
 80056fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	011a      	lsls	r2, r3, #4
 800570e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005712:	4413      	add	r3, r2
 8005714:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800571c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d116      	bne.n	8005752 <USB_EPStartXfer+0x141e>
 8005724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005730:	b29a      	uxth	r2, r3
 8005732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005748:	b29a      	uxth	r2, r3
 800574a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e3e8      	b.n	8005f24 <USB_EPStartXfer+0x1bf0>
 8005752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005756:	2b3e      	cmp	r3, #62	; 0x3e
 8005758:	d818      	bhi.n	800578c <USB_EPStartXfer+0x1458>
 800575a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <USB_EPStartXfer+0x1446>
 8005770:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005774:	3301      	adds	r3, #1
 8005776:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800577a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800577e:	b29b      	uxth	r3, r3
 8005780:	029b      	lsls	r3, r3, #10
 8005782:	b29a      	uxth	r2, r3
 8005784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	e3cb      	b.n	8005f24 <USB_EPStartXfer+0x1bf0>
 800578c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <USB_EPStartXfer+0x1478>
 80057a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057a6:	3b01      	subs	r3, #1
 80057a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	029b      	lsls	r3, r3, #10
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e3ad      	b.n	8005f24 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	78db      	ldrb	r3, [r3, #3]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	f040 8200 	bne.w	8005bda <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f040 8091 	bne.w	800590e <USB_EPStartXfer+0x15da>
 80057ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005808:	b29b      	uxth	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005810:	4413      	add	r3, r2
 8005812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	011a      	lsls	r2, r3, #4
 8005824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005828:	4413      	add	r3, r2
 800582a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800582e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d116      	bne.n	8005870 <USB_EPStartXfer+0x153c>
 8005842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800584e:	b29a      	uxth	r2, r3
 8005850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29a      	uxth	r2, r3
 8005868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e083      	b.n	8005978 <USB_EPStartXfer+0x1644>
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b3e      	cmp	r3, #62	; 0x3e
 800587e:	d820      	bhi.n	80058c2 <USB_EPStartXfer+0x158e>
 8005880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <USB_EPStartXfer+0x157c>
 80058a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058aa:	3301      	adds	r3, #1
 80058ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	e05a      	b.n	8005978 <USB_EPStartXfer+0x1644>
 80058c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <USB_EPStartXfer+0x15be>
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ec:	3b01      	subs	r3, #1
 80058ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	029b      	lsls	r3, r3, #10
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005904:	b29a      	uxth	r2, r3
 8005906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e034      	b.n	8005978 <USB_EPStartXfer+0x1644>
 800590e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d12c      	bne.n	8005978 <USB_EPStartXfer+0x1644>
 800591e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005942:	4413      	add	r3, r2
 8005944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	011a      	lsls	r2, r3, #4
 8005956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800595a:	4413      	add	r3, r2
 800595c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 8091 	bne.w	8005aba <USB_EPStartXfer+0x1786>
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059bc:	4413      	add	r3, r2
 80059be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	011a      	lsls	r2, r3, #4
 80059d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d116      	bne.n	8005a1c <USB_EPStartXfer+0x16e8>
 80059ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	e07c      	b.n	8005b16 <USB_EPStartXfer+0x17e2>
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2a:	d820      	bhi.n	8005a6e <USB_EPStartXfer+0x173a>
 8005a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <USB_EPStartXfer+0x1728>
 8005a52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a56:	3301      	adds	r3, #1
 8005a58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	029b      	lsls	r3, r3, #10
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e053      	b.n	8005b16 <USB_EPStartXfer+0x17e2>
 8005a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <USB_EPStartXfer+0x176a>
 8005a94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	e02d      	b.n	8005b16 <USB_EPStartXfer+0x17e2>
 8005aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d125      	bne.n	8005b16 <USB_EPStartXfer+0x17e2>
 8005aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	011a      	lsls	r2, r3, #4
 8005af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005af8:	4413      	add	r3, r2
 8005afa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005afe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b14:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 81fe 	beq.w	8005f24 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b48:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <USB_EPStartXfer+0x182c>
 8005b54:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b60:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 81db 	bne.w	8005f24 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b6e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f040 81d4 	bne.w	8005f24 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	441a      	add	r2, r3
 8005bc0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]
 8005bd8:	e1a4      	b.n	8005f24 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	78db      	ldrb	r3, [r3, #3]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	f040 819a 	bne.w	8005f20 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d917      	bls.n	8005c38 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c28:	1ad2      	subs	r2, r2, r3
 8005c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	619a      	str	r2, [r3, #24]
 8005c36:	e00e      	b.n	8005c56 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2200      	movs	r2, #0
 8005c54:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d178      	bne.n	8005d58 <USB_EPStartXfer+0x1a24>
 8005c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d116      	bne.n	8005ce2 <USB_EPStartXfer+0x19ae>
 8005cb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e06b      	b.n	8005dba <USB_EPStartXfer+0x1a86>
 8005ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ce8:	d818      	bhi.n	8005d1c <USB_EPStartXfer+0x19e8>
 8005cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <USB_EPStartXfer+0x19d6>
 8005d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d04:	3301      	adds	r3, #1
 8005d06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	029b      	lsls	r3, r3, #10
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e04e      	b.n	8005dba <USB_EPStartXfer+0x1a86>
 8005d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <USB_EPStartXfer+0x1a08>
 8005d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	029b      	lsls	r3, r3, #10
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e030      	b.n	8005dba <USB_EPStartXfer+0x1a86>
 8005d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d128      	bne.n	8005dba <USB_EPStartXfer+0x1a86>
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	011a      	lsls	r2, r3, #4
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	4413      	add	r3, r2
 8005da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005daa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d178      	bne.n	8005eca <USB_EPStartXfer+0x1b96>
 8005dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ddc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	011a      	lsls	r2, r3, #4
 8005e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e14:	4413      	add	r3, r2
 8005e16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d116      	bne.n	8005e54 <USB_EPStartXfer+0x1b20>
 8005e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	e067      	b.n	8005f24 <USB_EPStartXfer+0x1bf0>
 8005e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e58:	2b3e      	cmp	r3, #62	; 0x3e
 8005e5a:	d818      	bhi.n	8005e8e <USB_EPStartXfer+0x1b5a>
 8005e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <USB_EPStartXfer+0x1b48>
 8005e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e76:	3301      	adds	r3, #1
 8005e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	e04a      	b.n	8005f24 <USB_EPStartXfer+0x1bf0>
 8005e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <USB_EPStartXfer+0x1b7a>
 8005ea4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	029b      	lsls	r3, r3, #10
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e02c      	b.n	8005f24 <USB_EPStartXfer+0x1bf0>
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d124      	bne.n	8005f24 <USB_EPStartXfer+0x1bf0>
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	011a      	lsls	r2, r3, #4
 8005f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f08:	4413      	add	r3, r2
 8005f0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	e001      	b.n	8005f24 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e03a      	b.n	8005f9a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f4e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f56:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f5a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d020      	beq.n	8005ff8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fcc:	81bb      	strh	r3, [r7, #12]
 8005fce:	89bb      	ldrh	r3, [r7, #12]
 8005fd0:	f083 0310 	eor.w	r3, r3, #16
 8005fd4:	81bb      	strh	r3, [r7, #12]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	89bb      	ldrh	r3, [r7, #12]
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]
 8005ff6:	e01f      	b.n	8006038 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	81fb      	strh	r3, [r7, #14]
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006016:	81fb      	strh	r3, [r7, #14]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	441a      	add	r2, r3
 8006022:	89fb      	ldrh	r3, [r7, #14]
 8006024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	b29b      	uxth	r3, r3
 8006036:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	7b1b      	ldrb	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 809d 	bne.w	8006192 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d04c      	beq.n	80060fa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	823b      	strh	r3, [r7, #16]
 800606e:	8a3b      	ldrh	r3, [r7, #16]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <USB_EPClearStall+0x6c>
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	81fb      	strh	r3, [r7, #14]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	89fb      	ldrh	r3, [r7, #14]
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	78db      	ldrb	r3, [r3, #3]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d06c      	beq.n	8006192 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ce:	81bb      	strh	r3, [r7, #12]
 80060d0:	89bb      	ldrh	r3, [r7, #12]
 80060d2:	f083 0320 	eor.w	r3, r3, #32
 80060d6:	81bb      	strh	r3, [r7, #12]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	89bb      	ldrh	r3, [r7, #12]
 80060e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8013      	strh	r3, [r2, #0]
 80060f8:	e04b      	b.n	8006192 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	82fb      	strh	r3, [r7, #22]
 8006108:	8afb      	ldrh	r3, [r7, #22]
 800610a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01b      	beq.n	800614a <USB_EPClearStall+0x106>
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006128:	82bb      	strh	r3, [r7, #20]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	441a      	add	r2, r3
 8006134:	8abb      	ldrh	r3, [r7, #20]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	827b      	strh	r3, [r7, #18]
 8006162:	8a7b      	ldrh	r3, [r7, #18]
 8006164:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006168:	827b      	strh	r3, [r7, #18]
 800616a:	8a7b      	ldrh	r3, [r7, #18]
 800616c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006170:	827b      	strh	r3, [r7, #18]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	8a7b      	ldrh	r3, [r7, #18]
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr

0800619e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80061ea:	68fb      	ldr	r3, [r7, #12]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr

080061f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b08d      	sub	sp, #52	; 0x34
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	4611      	mov	r1, r2
 8006202:	461a      	mov	r2, r3
 8006204:	460b      	mov	r3, r1
 8006206:	80fb      	strh	r3, [r7, #6]
 8006208:	4613      	mov	r3, r2
 800620a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800620c:	88bb      	ldrh	r3, [r7, #4]
 800620e:	3301      	adds	r3, #1
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	005a      	lsls	r2, r3, #1
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006228:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622e:	e01e      	b.n	800626e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	3301      	adds	r3, #1
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	b29b      	uxth	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	b29a      	uxth	r2, r3
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	3302      	adds	r3, #2
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	3302      	adds	r3, #2
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	3301      	adds	r3, #1
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	3b01      	subs	r3, #1
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1dd      	bne.n	8006230 <USB_WritePMA+0x3a>
  }
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	3734      	adds	r7, #52	; 0x34
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006280:	b480      	push	{r7}
 8006282:	b08b      	sub	sp, #44	; 0x2c
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4611      	mov	r1, r2
 800628c:	461a      	mov	r2, r3
 800628e:	460b      	mov	r3, r1
 8006290:	80fb      	strh	r3, [r7, #6]
 8006292:	4613      	mov	r3, r2
 8006294:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006296:	88bb      	ldrh	r3, [r7, #4]
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	b29b      	uxth	r3, r3
 800629c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	005a      	lsls	r2, r3, #1
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
 80062b8:	e01b      	b.n	80062f2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	3302      	adds	r3, #2
 80062c6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	3301      	adds	r3, #1
 80062d4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	0a1b      	lsrs	r3, r3, #8
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	3301      	adds	r3, #1
 80062e4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	3302      	adds	r3, #2
 80062ea:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	3b01      	subs	r3, #1
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e0      	bne.n	80062ba <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80062f8:	88bb      	ldrh	r3, [r7, #4]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	701a      	strb	r2, [r3, #0]
  }
}
 8006314:	bf00      	nop
 8006316:	372c      	adds	r7, #44	; 0x2c
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	7c1b      	ldrb	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d115      	bne.n	8006362 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800633a:	2202      	movs	r2, #2
 800633c:	2181      	movs	r1, #129	; 0x81
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fe2f 	bl	8007fa2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800634a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800634e:	2202      	movs	r2, #2
 8006350:	2101      	movs	r1, #1
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 fe25 	bl	8007fa2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006360:	e012      	b.n	8006388 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006362:	2340      	movs	r3, #64	; 0x40
 8006364:	2202      	movs	r2, #2
 8006366:	2181      	movs	r1, #129	; 0x81
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fe1a 	bl	8007fa2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006374:	2340      	movs	r3, #64	; 0x40
 8006376:	2202      	movs	r2, #2
 8006378:	2101      	movs	r1, #1
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fe11 	bl	8007fa2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006388:	2308      	movs	r3, #8
 800638a:	2203      	movs	r2, #3
 800638c:	2182      	movs	r1, #130	; 0x82
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 fe07 	bl	8007fa2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800639a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800639e:	f001 ff27 	bl	80081f0 <USBD_static_malloc>
 80063a2:	4602      	mov	r2, r0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	e026      	b.n	8006408 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063c0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7c1b      	ldrb	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d109      	bne.n	80063f8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ee:	2101      	movs	r1, #1
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 fec7 	bl	8008184 <USBD_LL_PrepareReceive>
 80063f6:	e007      	b.n	8006408 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063fe:	2340      	movs	r3, #64	; 0x40
 8006400:	2101      	movs	r1, #1
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 febe 	bl	8008184 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006422:	2181      	movs	r1, #129	; 0x81
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 fde2 	bl	8007fee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006430:	2101      	movs	r1, #1
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fddb 	bl	8007fee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006440:	2182      	movs	r1, #130	; 0x82
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 fdd3 	bl	8007fee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00e      	beq.n	8006476 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fecd 	bl	8008208 <USBD_static_free>
    pdev->pClassData = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006490:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d039      	beq.n	800651e <USBD_CDC_Setup+0x9e>
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d17f      	bne.n	80065ae <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d029      	beq.n	800650a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b25b      	sxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	da11      	bge.n	80064e4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80064cc:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	88d2      	ldrh	r2, [r2, #6]
 80064d2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064d4:	6939      	ldr	r1, [r7, #16]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	88db      	ldrh	r3, [r3, #6]
 80064da:	461a      	mov	r2, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 f994 	bl	800780a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80064e2:	e06b      	b.n	80065bc <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	785a      	ldrb	r2, [r3, #1]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	88db      	ldrh	r3, [r3, #6]
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064fa:	6939      	ldr	r1, [r7, #16]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	88db      	ldrh	r3, [r3, #6]
 8006500:	461a      	mov	r2, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f9af 	bl	8007866 <USBD_CtlPrepareRx>
    break;
 8006508:	e058      	b.n	80065bc <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	7850      	ldrb	r0, [r2, #1]
 8006516:	2200      	movs	r2, #0
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	4798      	blx	r3
    break;
 800651c:	e04e      	b.n	80065bc <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	2b0b      	cmp	r3, #11
 8006524:	d02e      	beq.n	8006584 <USBD_CDC_Setup+0x104>
 8006526:	2b0b      	cmp	r3, #11
 8006528:	dc38      	bgt.n	800659c <USBD_CDC_Setup+0x11c>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <USBD_CDC_Setup+0xb4>
 800652e:	2b0a      	cmp	r3, #10
 8006530:	d014      	beq.n	800655c <USBD_CDC_Setup+0xdc>
 8006532:	e033      	b.n	800659c <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800653a:	2b03      	cmp	r3, #3
 800653c:	d107      	bne.n	800654e <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	2202      	movs	r2, #2
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 f95f 	bl	800780a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800654c:	e02e      	b.n	80065ac <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 f8f0 	bl	8007736 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006556:	2302      	movs	r3, #2
 8006558:	75fb      	strb	r3, [r7, #23]
      break;
 800655a:	e027      	b.n	80065ac <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006562:	2b03      	cmp	r3, #3
 8006564:	d107      	bne.n	8006576 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006566:	f107 030f 	add.w	r3, r7, #15
 800656a:	2201      	movs	r2, #1
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 f94b 	bl	800780a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006574:	e01a      	b.n	80065ac <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 f8dc 	bl	8007736 <USBD_CtlError>
			  ret = USBD_FAIL;
 800657e:	2302      	movs	r3, #2
 8006580:	75fb      	strb	r3, [r7, #23]
      break;
 8006582:	e013      	b.n	80065ac <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800658a:	2b03      	cmp	r3, #3
 800658c:	d00d      	beq.n	80065aa <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 f8d0 	bl	8007736 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006596:	2302      	movs	r3, #2
 8006598:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800659a:	e006      	b.n	80065aa <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 f8c9 	bl	8007736 <USBD_CtlError>
      ret = USBD_FAIL;
 80065a4:	2302      	movs	r3, #2
 80065a6:	75fb      	strb	r3, [r7, #23]
      break;
 80065a8:	e000      	b.n	80065ac <USBD_CDC_Setup+0x12c>
      break;
 80065aa:	bf00      	nop
    }
    break;
 80065ac:	e006      	b.n	80065bc <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 f8c0 	bl	8007736 <USBD_CtlError>
    ret = USBD_FAIL;
 80065b6:	2302      	movs	r3, #2
 80065b8:	75fb      	strb	r3, [r7, #23]
    break;
 80065ba:	bf00      	nop
  }

  return ret;
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065d8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80065e0:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d03a      	beq.n	8006662 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80065ec:	78fa      	ldrb	r2, [r7, #3]
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	331c      	adds	r3, #28
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d029      	beq.n	8006656 <USBD_CDC_DataIn+0x90>
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	331c      	adds	r3, #28
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	78f9      	ldrb	r1, [r7, #3]
 8006616:	68b8      	ldr	r0, [r7, #8]
 8006618:	460b      	mov	r3, r1
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	4403      	add	r3, r0
 8006622:	3338      	adds	r3, #56	; 0x38
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	fbb2 f1f3 	udiv	r1, r2, r3
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d110      	bne.n	8006656 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	331c      	adds	r3, #28
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006648:	78f9      	ldrb	r1, [r7, #3]
 800664a:	2300      	movs	r3, #0
 800664c:	2200      	movs	r2, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f001 fd75 	bl	800813e <USBD_LL_Transmit>
 8006654:	e003      	b.n	800665e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e000      	b.n	8006664 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006662:	2302      	movs	r3, #2
  }
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800667e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 fda0 	bl	80081ca <USBD_LL_GetRxDataSize>
 800668a:	4602      	mov	r2, r0
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00d      	beq.n	80066b8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066b0:	4611      	mov	r1, r2
 80066b2:	4798      	blx	r3

    return USBD_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066d0:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d015      	beq.n	8006708 <USBD_CDC_EP0_RxReady+0x46>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066e2:	2bff      	cmp	r3, #255	; 0xff
 80066e4:	d010      	beq.n	8006708 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80066f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066fc:	b292      	uxth	r2, r2
 80066fe:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	22ff      	movs	r2, #255	; 0xff
 8006704:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2243      	movs	r2, #67	; 0x43
 8006720:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006722:	4b03      	ldr	r3, [pc, #12]	; (8006730 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20000094 	.word	0x20000094

08006734 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2243      	movs	r2, #67	; 0x43
 8006740:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006742:	4b03      	ldr	r3, [pc, #12]	; (8006750 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000050 	.word	0x20000050

08006754 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2243      	movs	r2, #67	; 0x43
 8006760:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006762:	4b03      	ldr	r3, [pc, #12]	; (8006770 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	200000d8 	.word	0x200000d8

08006774 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	220a      	movs	r2, #10
 8006780:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006782:	4b03      	ldr	r3, [pc, #12]	; (8006790 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	2000000c 	.word	0x2000000c

08006794 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800679e:	2302      	movs	r3, #2
 80067a0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr

080067c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80067d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006802:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr

08006818 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006826:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01c      	beq.n	800686c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006838:	2b00      	cmp	r3, #0
 800683a:	d115      	bne.n	8006868 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2201      	movs	r2, #1
 8006840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800685a:	b29b      	uxth	r3, r3
 800685c:	2181      	movs	r1, #129	; 0x81
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fc6d 	bl	800813e <USBD_LL_Transmit>

      return USBD_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	e002      	b.n	800686e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800686c:	2302      	movs	r3, #2
  }
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006884:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800688c:	2b00      	cmp	r3, #0
 800688e:	d017      	beq.n	80068c0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7c1b      	ldrb	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800689e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068a2:	2101      	movs	r1, #1
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 fc6d 	bl	8008184 <USBD_LL_PrepareReceive>
 80068aa:	e007      	b.n	80068bc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068b2:	2340      	movs	r3, #64	; 0x40
 80068b4:	2101      	movs	r1, #1
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fc64 	bl	8008184 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	4613      	mov	r3, r2
 80068d6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068de:	2302      	movs	r3, #2
 80068e0:	e01a      	b.n	8006918 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	79fa      	ldrb	r2, [r7, #7]
 800690e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f001 fad1 	bl	8007eb8 <USBD_LL_Init>

  return USBD_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d006      	beq.n	8006942 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	73fb      	strb	r3, [r7, #15]
 8006940:	e001      	b.n	8006946 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006942:	2302      	movs	r3, #2
 8006944:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 fb06 	bl	8007f6c <USBD_LL_Start>

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr

0800697e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800698a:	2302      	movs	r3, #2
 800698c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00c      	beq.n	80069b2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	4611      	mov	r1, r2
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	4611      	mov	r1, r2
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
  return USBD_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fe62 	bl	80076be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006a08:	461a      	mov	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d016      	beq.n	8006a4c <USBD_LL_SetupStage+0x6a>
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d81c      	bhi.n	8006a5c <USBD_LL_SetupStage+0x7a>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <USBD_LL_SetupStage+0x4a>
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d008      	beq.n	8006a3c <USBD_LL_SetupStage+0x5a>
 8006a2a:	e017      	b.n	8006a5c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f9c5 	bl	8006dc4 <USBD_StdDevReq>
    break;
 8006a3a:	e01a      	b.n	8006a72 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fa27 	bl	8006e98 <USBD_StdItfReq>
    break;
 8006a4a:	e012      	b.n	8006a72 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa67 	bl	8006f28 <USBD_StdEPReq>
    break;
 8006a5a:	e00a      	b.n	8006a72 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006a62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 fade 	bl	800802c <USBD_LL_StallEP>
    break;
 8006a70:	bf00      	nop
  }

  return USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	460b      	mov	r3, r1
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006a8a:	7afb      	ldrb	r3, [r7, #11]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d14b      	bne.n	8006b28 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006a96:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d134      	bne.n	8006b0c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d919      	bls.n	8006ae2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	1ad2      	subs	r2, r2, r3
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d203      	bcs.n	8006ad0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	e002      	b.n	8006ad6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fee1 	bl	80078a2 <USBD_CtlContinueRx>
 8006ae0:	e038      	b.n	8006b54 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d105      	bne.n	8006b04 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fede 	bl	80078c6 <USBD_CtlSendStatus>
 8006b0a:	e023      	b.n	8006b54 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d11e      	bne.n	8006b54 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006b1e:	2100      	movs	r1, #0
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f001 fa83 	bl	800802c <USBD_LL_StallEP>
 8006b26:	e015      	b.n	8006b54 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00d      	beq.n	8006b50 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d108      	bne.n	8006b50 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	7afa      	ldrb	r2, [r7, #11]
 8006b48:	4611      	mov	r1, r2
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	4798      	blx	r3
 8006b4e:	e001      	b.n	8006b54 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b50:	2302      	movs	r3, #2
 8006b52:	e000      	b.n	8006b56 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b086      	sub	sp, #24
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	460b      	mov	r3, r1
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006b6c:	7afb      	ldrb	r3, [r7, #11]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d17f      	bne.n	8006c72 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3314      	adds	r3, #20
 8006b76:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d15c      	bne.n	8006c3c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d915      	bls.n	8006bba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fe4b 	bl	8007842 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006bac:	2300      	movs	r3, #0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 fae6 	bl	8008184 <USBD_LL_PrepareReceive>
 8006bb8:	e04e      	b.n	8006c58 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	6912      	ldr	r2, [r2, #16]
 8006bc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bc6:	fb01 f202 	mul.w	r2, r1, r2
 8006bca:	1a9b      	subs	r3, r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d11c      	bne.n	8006c0a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d316      	bcc.n	8006c0a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d20f      	bcs.n	8006c0a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bea:	2200      	movs	r2, #0
 8006bec:	2100      	movs	r1, #0
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fe27 	bl	8007842 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f001 fabe 	bl	8008184 <USBD_LL_PrepareReceive>
 8006c08:	e026      	b.n	8006c58 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d105      	bne.n	8006c2c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c2c:	2180      	movs	r1, #128	; 0x80
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f001 f9fc 	bl	800802c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fe59 	bl	80078ec <USBD_CtlReceiveStatus>
 8006c3a:	e00d      	b.n	8006c58 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d004      	beq.n	8006c50 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c50:	2180      	movs	r1, #128	; 0x80
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f001 f9ea 	bl	800802c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d11d      	bne.n	8006c9e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f7ff fe81 	bl	800696a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006c70:	e015      	b.n	8006c9e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00d      	beq.n	8006c9a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d108      	bne.n	8006c9a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	7afa      	ldrb	r2, [r7, #11]
 8006c92:	4611      	mov	r1, r2
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	4798      	blx	r3
 8006c98:	e001      	b.n	8006c9e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e000      	b.n	8006ca0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cb0:	2340      	movs	r3, #64	; 0x40
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 f973 	bl	8007fa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2240      	movs	r2, #64	; 0x40
 8006cc8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ccc:	2340      	movs	r3, #64	; 0x40
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 f965 	bl	8007fa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2240      	movs	r2, #64	; 0x40
 8006ce2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d009      	beq.n	8006d20 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6852      	ldr	r2, [r2, #4]
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
  }

  return USBD_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	78fa      	ldrb	r2, [r7, #3]
 8006d3a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2204      	movs	r2, #4
 8006d60:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d10b      	bne.n	8006dba <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d005      	beq.n	8006dea <USBD_StdDevReq+0x26>
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d84f      	bhi.n	8006e82 <USBD_StdDevReq+0xbe>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <USBD_StdDevReq+0x36>
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d14b      	bne.n	8006e82 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
    break;
 8006df8:	e048      	b.n	8006e8c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d839      	bhi.n	8006e76 <USBD_StdDevReq+0xb2>
 8006e02:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <USBD_StdDevReq+0x44>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e6d 	.word	0x08006e6d
 8006e10:	08006e77 	.word	0x08006e77
 8006e14:	08006e63 	.word	0x08006e63
 8006e18:	08006e77 	.word	0x08006e77
 8006e1c:	08006e3b 	.word	0x08006e3b
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e77 	.word	0x08006e77
 8006e28:	08006e4f 	.word	0x08006e4f
 8006e2c:	08006e45 	.word	0x08006e45
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9da 	bl	80071ec <USBD_GetDescriptor>
      break;
 8006e38:	e022      	b.n	8006e80 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 facf 	bl	80073e0 <USBD_SetAddress>
      break;
 8006e42:	e01d      	b.n	8006e80 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fb0e 	bl	8007468 <USBD_SetConfig>
      break;
 8006e4c:	e018      	b.n	8006e80 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fb97 	bl	8007584 <USBD_GetConfig>
      break;
 8006e56:	e013      	b.n	8006e80 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fbc7 	bl	80075ee <USBD_GetStatus>
      break;
 8006e60:	e00e      	b.n	8006e80 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fbf5 	bl	8007654 <USBD_SetFeature>
      break;
 8006e6a:	e009      	b.n	8006e80 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fc04 	bl	800767c <USBD_ClrFeature>
      break;
 8006e74:	e004      	b.n	8006e80 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fc5c 	bl	8007736 <USBD_CtlError>
      break;
 8006e7e:	bf00      	nop
    }
    break;
 8006e80:	e004      	b.n	8006e8c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fc56 	bl	8007736 <USBD_CtlError>
    break;
 8006e8a:	bf00      	nop
  }

  return ret;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop

08006e98 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eae:	2b40      	cmp	r3, #64	; 0x40
 8006eb0:	d005      	beq.n	8006ebe <USBD_StdItfReq+0x26>
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d82e      	bhi.n	8006f14 <USBD_StdItfReq+0x7c>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <USBD_StdItfReq+0x26>
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	d12a      	bne.n	8006f14 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d81d      	bhi.n	8006f06 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	889b      	ldrh	r3, [r3, #4]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d813      	bhi.n	8006efc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	4798      	blx	r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	88db      	ldrh	r3, [r3, #6]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d110      	bne.n	8006f10 <USBD_StdItfReq+0x78>
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10d      	bne.n	8006f10 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fce6 	bl	80078c6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006efa:	e009      	b.n	8006f10 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fc19 	bl	8007736 <USBD_CtlError>
      break;
 8006f04:	e004      	b.n	8006f10 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fc14 	bl	8007736 <USBD_CtlError>
      break;
 8006f0e:	e000      	b.n	8006f12 <USBD_StdItfReq+0x7a>
      break;
 8006f10:	bf00      	nop
    }
    break;
 8006f12:	e004      	b.n	8006f1e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fc0d 	bl	8007736 <USBD_CtlError>
    break;
 8006f1c:	bf00      	nop
  }

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	889b      	ldrh	r3, [r3, #4]
 8006f3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d007      	beq.n	8006f58 <USBD_StdEPReq+0x30>
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	f200 8144 	bhi.w	80071d6 <USBD_StdEPReq+0x2ae>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <USBD_StdEPReq+0x40>
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	f040 813f 	bne.w	80071d6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
    break;
 8006f66:	e13b      	b.n	80071e0 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d10a      	bne.n	8006f8a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
 8006f82:	4603      	mov	r3, r0
 8006f84:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	e12b      	b.n	80071e2 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	785b      	ldrb	r3, [r3, #1]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d007      	beq.n	8006fa2 <USBD_StdEPReq+0x7a>
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	f300 8119 	bgt.w	80071ca <USBD_StdEPReq+0x2a2>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d072      	beq.n	8007082 <USBD_StdEPReq+0x15a>
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d03a      	beq.n	8007016 <USBD_StdEPReq+0xee>
 8006fa0:	e113      	b.n	80071ca <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d002      	beq.n	8006fb2 <USBD_StdEPReq+0x8a>
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d015      	beq.n	8006fdc <USBD_StdEPReq+0xb4>
 8006fb0:	e02b      	b.n	800700a <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00c      	beq.n	8006fd2 <USBD_StdEPReq+0xaa>
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d009      	beq.n	8006fd2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 f832 	bl	800802c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006fc8:	2180      	movs	r1, #128	; 0x80
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 f82e 	bl	800802c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006fd0:	e020      	b.n	8007014 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fbae 	bl	8007736 <USBD_CtlError>
        break;
 8006fda:	e01b      	b.n	8007014 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	885b      	ldrh	r3, [r3, #2]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10e      	bne.n	8007002 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <USBD_StdEPReq+0xda>
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	2b80      	cmp	r3, #128	; 0x80
 8006fee:	d008      	beq.n	8007002 <USBD_StdEPReq+0xda>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	88db      	ldrh	r3, [r3, #6]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 f815 	bl	800802c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fc5f 	bl	80078c6 <USBD_CtlSendStatus>

        break;
 8007008:	e004      	b.n	8007014 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb92 	bl	8007736 <USBD_CtlError>
        break;
 8007012:	bf00      	nop
      }
      break;
 8007014:	e0de      	b.n	80071d4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800701c:	2b02      	cmp	r3, #2
 800701e:	d002      	beq.n	8007026 <USBD_StdEPReq+0xfe>
 8007020:	2b03      	cmp	r3, #3
 8007022:	d015      	beq.n	8007050 <USBD_StdEPReq+0x128>
 8007024:	e026      	b.n	8007074 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00c      	beq.n	8007046 <USBD_StdEPReq+0x11e>
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b80      	cmp	r3, #128	; 0x80
 8007030:	d009      	beq.n	8007046 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fff8 	bl	800802c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fff4 	bl	800802c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007044:	e01c      	b.n	8007080 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fb74 	bl	8007736 <USBD_CtlError>
        break;
 800704e:	e017      	b.n	8007080 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	885b      	ldrh	r3, [r3, #2]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d112      	bne.n	800707e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 ffff 	bl	800806a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fc2a 	bl	80078c6 <USBD_CtlSendStatus>
        }
        break;
 8007072:	e004      	b.n	800707e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fb5d 	bl	8007736 <USBD_CtlError>
        break;
 800707c:	e000      	b.n	8007080 <USBD_StdEPReq+0x158>
        break;
 800707e:	bf00      	nop
      }
      break;
 8007080:	e0a8      	b.n	80071d4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007088:	2b02      	cmp	r3, #2
 800708a:	d002      	beq.n	8007092 <USBD_StdEPReq+0x16a>
 800708c:	2b03      	cmp	r3, #3
 800708e:	d031      	beq.n	80070f4 <USBD_StdEPReq+0x1cc>
 8007090:	e095      	b.n	80071be <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <USBD_StdEPReq+0x180>
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	2b80      	cmp	r3, #128	; 0x80
 800709c:	d004      	beq.n	80070a8 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fb48 	bl	8007736 <USBD_CtlError>
          break;
 80070a6:	e08f      	b.n	80071c8 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80070a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	da0b      	bge.n	80070c8 <USBD_StdEPReq+0x1a0>
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	3310      	adds	r3, #16
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	4413      	add	r3, r2
 80070c4:	3304      	adds	r3, #4
 80070c6:	e00a      	b.n	80070de <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2202      	movs	r2, #2
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fb8c 	bl	800780a <USBD_CtlSendData>
          break;
 80070f2:	e069      	b.n	80071c8 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80070f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da11      	bge.n	8007120 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	f003 020f 	and.w	r2, r3, #15
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3318      	adds	r3, #24
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d117      	bne.n	8007146 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb0c 	bl	8007736 <USBD_CtlError>
            break;
 800711e:	e053      	b.n	80071c8 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	f003 020f 	and.w	r2, r3, #15
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 faf9 	bl	8007736 <USBD_CtlError>
            break;
 8007144:	e040      	b.n	80071c8 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800714a:	2b00      	cmp	r3, #0
 800714c:	da0b      	bge.n	8007166 <USBD_StdEPReq+0x23e>
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	3310      	adds	r3, #16
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4413      	add	r3, r2
 8007162:	3304      	adds	r3, #4
 8007164:	e00a      	b.n	800717c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	4413      	add	r3, r2
 800717c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <USBD_StdEPReq+0x262>
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2b80      	cmp	r3, #128	; 0x80
 8007188:	d103      	bne.n	8007192 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	e00e      	b.n	80071b0 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 ff86 	bl	80080a8 <USBD_LL_IsStallEP>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e002      	b.n	80071b0 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2202      	movs	r2, #2
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fb27 	bl	800780a <USBD_CtlSendData>
          break;
 80071bc:	e004      	b.n	80071c8 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fab8 	bl	8007736 <USBD_CtlError>
        break;
 80071c6:	bf00      	nop
      }
      break;
 80071c8:	e004      	b.n	80071d4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fab2 	bl	8007736 <USBD_CtlError>
      break;
 80071d2:	bf00      	nop
    }
    break;
 80071d4:	e004      	b.n	80071e0 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 faac 	bl	8007736 <USBD_CtlError>
    break;
 80071de:	bf00      	nop
  }

  return ret;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	2b06      	cmp	r3, #6
 8007202:	f200 80c9 	bhi.w	8007398 <USBD_GetDescriptor+0x1ac>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <USBD_GetDescriptor+0x20>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007229 	.word	0x08007229
 8007210:	08007241 	.word	0x08007241
 8007214:	08007281 	.word	0x08007281
 8007218:	08007399 	.word	0x08007399
 800721c:	08007399 	.word	0x08007399
 8007220:	08007345 	.word	0x08007345
 8007224:	0800736b 	.word	0x0800736b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 010a 	add.w	r1, r7, #10
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
    break;
 800723e:	e0b0      	b.n	80073a2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7c1b      	ldrb	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10d      	bne.n	8007264 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	f107 020a 	add.w	r2, r7, #10
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	2202      	movs	r2, #2
 8007260:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007262:	e09e      	b.n	80073a2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	f107 020a 	add.w	r2, r7, #10
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	2202      	movs	r2, #2
 800727c:	701a      	strb	r2, [r3, #0]
    break;
 800727e:	e090      	b.n	80073a2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	885b      	ldrh	r3, [r3, #2]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b05      	cmp	r3, #5
 8007288:	d856      	bhi.n	8007338 <USBD_GetDescriptor+0x14c>
 800728a:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <USBD_GetDescriptor+0xa4>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072a9 	.word	0x080072a9
 8007294:	080072c1 	.word	0x080072c1
 8007298:	080072d9 	.word	0x080072d9
 800729c:	080072f1 	.word	0x080072f1
 80072a0:	08007309 	.word	0x08007309
 80072a4:	08007321 	.word	0x08007321
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7c12      	ldrb	r2, [r2, #16]
 80072b4:	f107 010a 	add.w	r1, r7, #10
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
      break;
 80072be:	e040      	b.n	8007342 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	7c12      	ldrb	r2, [r2, #16]
 80072cc:	f107 010a 	add.w	r1, r7, #10
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
 80072d4:	60f8      	str	r0, [r7, #12]
      break;
 80072d6:	e034      	b.n	8007342 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7c12      	ldrb	r2, [r2, #16]
 80072e4:	f107 010a 	add.w	r1, r7, #10
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
 80072ec:	60f8      	str	r0, [r7, #12]
      break;
 80072ee:	e028      	b.n	8007342 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7c12      	ldrb	r2, [r2, #16]
 80072fc:	f107 010a 	add.w	r1, r7, #10
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
 8007304:	60f8      	str	r0, [r7, #12]
      break;
 8007306:	e01c      	b.n	8007342 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7c12      	ldrb	r2, [r2, #16]
 8007314:	f107 010a 	add.w	r1, r7, #10
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	60f8      	str	r0, [r7, #12]
      break;
 800731e:	e010      	b.n	8007342 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	7c12      	ldrb	r2, [r2, #16]
 800732c:	f107 010a 	add.w	r1, r7, #10
 8007330:	4610      	mov	r0, r2
 8007332:	4798      	blx	r3
 8007334:	60f8      	str	r0, [r7, #12]
      break;
 8007336:	e004      	b.n	8007342 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9fb 	bl	8007736 <USBD_CtlError>
      return;
 8007340:	e04b      	b.n	80073da <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007342:	e02e      	b.n	80073a2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7c1b      	ldrb	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d109      	bne.n	8007360 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	f107 020a 	add.w	r2, r7, #10
 8007358:	4610      	mov	r0, r2
 800735a:	4798      	blx	r3
 800735c:	60f8      	str	r0, [r7, #12]
      break;
 800735e:	e020      	b.n	80073a2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9e7 	bl	8007736 <USBD_CtlError>
      return;
 8007368:	e037      	b.n	80073da <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7c1b      	ldrb	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10d      	bne.n	800738e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	f107 020a 	add.w	r2, r7, #10
 800737e:	4610      	mov	r0, r2
 8007380:	4798      	blx	r3
 8007382:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	2207      	movs	r2, #7
 800738a:	701a      	strb	r2, [r3, #0]
      break;
 800738c:	e009      	b.n	80073a2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f9d0 	bl	8007736 <USBD_CtlError>
      return;
 8007396:	e020      	b.n	80073da <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f9cb 	bl	8007736 <USBD_CtlError>
    return;
 80073a0:	e01b      	b.n	80073da <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80073a2:	897b      	ldrh	r3, [r7, #10]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d011      	beq.n	80073cc <USBD_GetDescriptor+0x1e0>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	88db      	ldrh	r3, [r3, #6]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00d      	beq.n	80073cc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	88da      	ldrh	r2, [r3, #6]
 80073b4:	897b      	ldrh	r3, [r7, #10]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	bf28      	it	cs
 80073ba:	4613      	movcs	r3, r2
 80073bc:	b29b      	uxth	r3, r3
 80073be:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80073c0:	897b      	ldrh	r3, [r7, #10]
 80073c2:	461a      	mov	r2, r3
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa1f 	bl	800780a <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	88db      	ldrh	r3, [r3, #6]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d102      	bne.n	80073da <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa76 	bl	80078c6 <USBD_CtlSendStatus>
  }
}
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	889b      	ldrh	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d130      	bne.n	8007454 <USBD_SetAddress+0x74>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	88db      	ldrh	r3, [r3, #6]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d12c      	bne.n	8007454 <USBD_SetAddress+0x74>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	885b      	ldrh	r3, [r3, #2]
 80073fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007400:	d828      	bhi.n	8007454 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007414:	2b03      	cmp	r3, #3
 8007416:	d104      	bne.n	8007422 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f98b 	bl	8007736 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007420:	e01d      	b.n	800745e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7bfa      	ldrb	r2, [r7, #15]
 8007426:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fe66 	bl	8008100 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fa46 	bl	80078c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	e009      	b.n	800745e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007452:	e004      	b.n	800745e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f96d 	bl	8007736 <USBD_CtlError>
  }
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	885b      	ldrh	r3, [r3, #2]
 8007476:	b2da      	uxtb	r2, r3
 8007478:	4b41      	ldr	r3, [pc, #260]	; (8007580 <USBD_SetConfig+0x118>)
 800747a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800747c:	4b40      	ldr	r3, [pc, #256]	; (8007580 <USBD_SetConfig+0x118>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d904      	bls.n	800748e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f955 	bl	8007736 <USBD_CtlError>
 800748c:	e075      	b.n	800757a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007494:	2b02      	cmp	r3, #2
 8007496:	d002      	beq.n	800749e <USBD_SetConfig+0x36>
 8007498:	2b03      	cmp	r3, #3
 800749a:	d023      	beq.n	80074e4 <USBD_SetConfig+0x7c>
 800749c:	e062      	b.n	8007564 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800749e:	4b38      	ldr	r3, [pc, #224]	; (8007580 <USBD_SetConfig+0x118>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01a      	beq.n	80074dc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80074a6:	4b36      	ldr	r3, [pc, #216]	; (8007580 <USBD_SetConfig+0x118>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2203      	movs	r2, #3
 80074b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074b8:	4b31      	ldr	r3, [pc, #196]	; (8007580 <USBD_SetConfig+0x118>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fa5d 	bl	800697e <USBD_SetClassConfig>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d104      	bne.n	80074d4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f932 	bl	8007736 <USBD_CtlError>
          return;
 80074d2:	e052      	b.n	800757a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f9f6 	bl	80078c6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80074da:	e04e      	b.n	800757a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f9f2 	bl	80078c6 <USBD_CtlSendStatus>
      break;
 80074e2:	e04a      	b.n	800757a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074e4:	4b26      	ldr	r3, [pc, #152]	; (8007580 <USBD_SetConfig+0x118>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d112      	bne.n	8007512 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80074f4:	4b22      	ldr	r3, [pc, #136]	; (8007580 <USBD_SetConfig+0x118>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80074fe:	4b20      	ldr	r3, [pc, #128]	; (8007580 <USBD_SetConfig+0x118>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff fa59 	bl	80069bc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f9db 	bl	80078c6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007510:	e033      	b.n	800757a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007512:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <USBD_SetConfig+0x118>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	d01d      	beq.n	800755c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff fa47 	bl	80069bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800752e:	4b14      	ldr	r3, [pc, #80]	; (8007580 <USBD_SetConfig+0x118>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007538:	4b11      	ldr	r3, [pc, #68]	; (8007580 <USBD_SetConfig+0x118>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff fa1d 	bl	800697e <USBD_SetClassConfig>
 8007544:	4603      	mov	r3, r0
 8007546:	2b02      	cmp	r3, #2
 8007548:	d104      	bne.n	8007554 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f8f2 	bl	8007736 <USBD_CtlError>
          return;
 8007552:	e012      	b.n	800757a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f9b6 	bl	80078c6 <USBD_CtlSendStatus>
      break;
 800755a:	e00e      	b.n	800757a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f9b2 	bl	80078c6 <USBD_CtlSendStatus>
      break;
 8007562:	e00a      	b.n	800757a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f8e5 	bl	8007736 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800756c:	4b04      	ldr	r3, [pc, #16]	; (8007580 <USBD_SetConfig+0x118>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fa22 	bl	80069bc <USBD_ClrClassConfig>
      break;
 8007578:	bf00      	nop
    }
  }
}
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	200002b0 	.word	0x200002b0

08007584 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	88db      	ldrh	r3, [r3, #6]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d004      	beq.n	80075a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f8cc 	bl	8007736 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800759e:	e022      	b.n	80075e6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	dc02      	bgt.n	80075b0 <USBD_GetConfig+0x2c>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dc03      	bgt.n	80075b6 <USBD_GetConfig+0x32>
 80075ae:	e015      	b.n	80075dc <USBD_GetConfig+0x58>
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d00b      	beq.n	80075cc <USBD_GetConfig+0x48>
 80075b4:	e012      	b.n	80075dc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3308      	adds	r3, #8
 80075c0:	2201      	movs	r2, #1
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f920 	bl	800780a <USBD_CtlSendData>
      break;
 80075ca:	e00c      	b.n	80075e6 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3304      	adds	r3, #4
 80075d0:	2201      	movs	r2, #1
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f918 	bl	800780a <USBD_CtlSendData>
      break;
 80075da:	e004      	b.n	80075e6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8a9 	bl	8007736 <USBD_CtlError>
      break;
 80075e4:	bf00      	nop
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b02      	cmp	r3, #2
 8007602:	d81e      	bhi.n	8007642 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	88db      	ldrh	r3, [r3, #6]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d004      	beq.n	8007616 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f891 	bl	8007736 <USBD_CtlError>
      break;
 8007614:	e01a      	b.n	800764c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f043 0202 	orr.w	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	330c      	adds	r3, #12
 8007636:	2202      	movs	r2, #2
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f8e5 	bl	800780a <USBD_CtlSendData>
    break;
 8007640:	e004      	b.n	800764c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f876 	bl	8007736 <USBD_CtlError>
    break;
 800764a:	bf00      	nop
  }
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	885b      	ldrh	r3, [r3, #2]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d106      	bne.n	8007674 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f929 	bl	80078c6 <USBD_CtlSendStatus>
  }

}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800768c:	3b01      	subs	r3, #1
 800768e:	2b02      	cmp	r3, #2
 8007690:	d80b      	bhi.n	80076aa <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	885b      	ldrh	r3, [r3, #2]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d10c      	bne.n	80076b4 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f90f 	bl	80078c6 <USBD_CtlSendStatus>
    }
    break;
 80076a8:	e004      	b.n	80076b4 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f842 	bl	8007736 <USBD_CtlError>
    break;
 80076b2:	e000      	b.n	80076b6 <USBD_ClrFeature+0x3a>
    break;
 80076b4:	bf00      	nop
  }
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781a      	ldrb	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	785a      	ldrb	r2, [r3, #1]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	3302      	adds	r3, #2
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	3303      	adds	r3, #3
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	3304      	adds	r3, #4
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	3305      	adds	r3, #5
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	b29b      	uxth	r3, r3
 8007708:	4413      	add	r3, r2
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	3306      	adds	r3, #6
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b29a      	uxth	r2, r3
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	3307      	adds	r3, #7
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	021b      	lsls	r3, r3, #8
 8007722:	b29b      	uxth	r3, r3
 8007724:	4413      	add	r3, r2
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	80da      	strh	r2, [r3, #6]

}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr

08007736 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007740:	2180      	movs	r1, #128	; 0x80
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fc72 	bl	800802c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007748:	2100      	movs	r1, #0
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fc6e 	bl	800802c <USBD_LL_StallEP>
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d032      	beq.n	80077d4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f834 	bl	80077dc <USBD_GetLen>
 8007774:	4603      	mov	r3, r0
 8007776:	3301      	adds	r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	75fa      	strb	r2, [r7, #23]
 8007788:	461a      	mov	r2, r3
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4413      	add	r3, r2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	75fa      	strb	r2, [r7, #23]
 800779a:	461a      	mov	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4413      	add	r3, r2
 80077a0:	2203      	movs	r2, #3
 80077a2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80077a4:	e012      	b.n	80077cc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	60fa      	str	r2, [r7, #12]
 80077ac:	7dfa      	ldrb	r2, [r7, #23]
 80077ae:	1c51      	adds	r1, r2, #1
 80077b0:	75f9      	strb	r1, [r7, #23]
 80077b2:	4611      	mov	r1, r2
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	440a      	add	r2, r1
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	75fa      	strb	r2, [r7, #23]
 80077c2:	461a      	mov	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4413      	add	r3, r2
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e8      	bne.n	80077a6 <USBD_GetString+0x4e>
    }
  }
}
 80077d4:	bf00      	nop
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80077e8:	e005      	b.n	80077f6 <USBD_GetLen+0x1a>
    {
        len++;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	3301      	adds	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
        buf++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3301      	adds	r3, #1
 80077f4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f5      	bne.n	80077ea <USBD_GetLen+0xe>
    }

    return len;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr

0800780a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2202      	movs	r2, #2
 800781c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007820:	88fa      	ldrh	r2, [r7, #6]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	2100      	movs	r1, #0
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fc83 	bl	800813e <USBD_LL_Transmit>

  return USBD_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	4613      	mov	r3, r2
 800784e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	2100      	movs	r1, #0
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fc71 	bl	800813e <USBD_LL_Transmit>

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	4613      	mov	r3, r2
 8007872:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2203      	movs	r2, #3
 8007878:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	2100      	movs	r1, #0
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 fc76 	bl	8008184 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	4613      	mov	r3, r2
 80078ae:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	2100      	movs	r1, #0
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 fc64 	bl	8008184 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2204      	movs	r2, #4
 80078d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078d6:	2300      	movs	r3, #0
 80078d8:	2200      	movs	r2, #0
 80078da:	2100      	movs	r1, #0
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fc2e 	bl	800813e <USBD_LL_Transmit>

  return USBD_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2205      	movs	r2, #5
 80078f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80078fc:	2300      	movs	r3, #0
 80078fe:	2200      	movs	r2, #0
 8007900:	2100      	movs	r1, #0
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fc3e 	bl	8008184 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007918:	2200      	movs	r2, #0
 800791a:	4912      	ldr	r1, [pc, #72]	; (8007964 <MX_USB_DEVICE_Init+0x50>)
 800791c:	4812      	ldr	r0, [pc, #72]	; (8007968 <MX_USB_DEVICE_Init+0x54>)
 800791e:	f7fe ffd4 	bl	80068ca <USBD_Init>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007928:	f7f8 fef2 	bl	8000710 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800792c:	490f      	ldr	r1, [pc, #60]	; (800796c <MX_USB_DEVICE_Init+0x58>)
 800792e:	480e      	ldr	r0, [pc, #56]	; (8007968 <MX_USB_DEVICE_Init+0x54>)
 8007930:	f7fe fff6 	bl	8006920 <USBD_RegisterClass>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800793a:	f7f8 fee9 	bl	8000710 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800793e:	490c      	ldr	r1, [pc, #48]	; (8007970 <MX_USB_DEVICE_Init+0x5c>)
 8007940:	4809      	ldr	r0, [pc, #36]	; (8007968 <MX_USB_DEVICE_Init+0x54>)
 8007942:	f7fe ff27 	bl	8006794 <USBD_CDC_RegisterInterface>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800794c:	f7f8 fee0 	bl	8000710 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007950:	4805      	ldr	r0, [pc, #20]	; (8007968 <MX_USB_DEVICE_Init+0x54>)
 8007952:	f7fe fffe 	bl	8006952 <USBD_Start>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800795c:	f7f8 fed8 	bl	8000710 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007960:	bf00      	nop
 8007962:	bd80      	pop	{r7, pc}
 8007964:	2000012c 	.word	0x2000012c
 8007968:	200002b4 	.word	0x200002b4
 800796c:	20000018 	.word	0x20000018
 8007970:	2000011c 	.word	0x2000011c

08007974 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007978:	2200      	movs	r2, #0
 800797a:	4905      	ldr	r1, [pc, #20]	; (8007990 <CDC_Init_FS+0x1c>)
 800797c:	4805      	ldr	r0, [pc, #20]	; (8007994 <CDC_Init_FS+0x20>)
 800797e:	f7fe ff1f 	bl	80067c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007982:	4905      	ldr	r1, [pc, #20]	; (8007998 <CDC_Init_FS+0x24>)
 8007984:	4803      	ldr	r0, [pc, #12]	; (8007994 <CDC_Init_FS+0x20>)
 8007986:	f7fe ff34 	bl	80067f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800798a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20000950 	.word	0x20000950
 8007994:	200002b4 	.word	0x200002b4
 8007998:	20000550 	.word	0x20000550

0800799c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr
	...

080079ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	6039      	str	r1, [r7, #0]
 80079b6:	71fb      	strb	r3, [r7, #7]
 80079b8:	4613      	mov	r3, r2
 80079ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	2b23      	cmp	r3, #35	; 0x23
 80079c0:	d84a      	bhi.n	8007a58 <CDC_Control_FS+0xac>
 80079c2:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <CDC_Control_FS+0x1c>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	08007a59 	.word	0x08007a59
 80079cc:	08007a59 	.word	0x08007a59
 80079d0:	08007a59 	.word	0x08007a59
 80079d4:	08007a59 	.word	0x08007a59
 80079d8:	08007a59 	.word	0x08007a59
 80079dc:	08007a59 	.word	0x08007a59
 80079e0:	08007a59 	.word	0x08007a59
 80079e4:	08007a59 	.word	0x08007a59
 80079e8:	08007a59 	.word	0x08007a59
 80079ec:	08007a59 	.word	0x08007a59
 80079f0:	08007a59 	.word	0x08007a59
 80079f4:	08007a59 	.word	0x08007a59
 80079f8:	08007a59 	.word	0x08007a59
 80079fc:	08007a59 	.word	0x08007a59
 8007a00:	08007a59 	.word	0x08007a59
 8007a04:	08007a59 	.word	0x08007a59
 8007a08:	08007a59 	.word	0x08007a59
 8007a0c:	08007a59 	.word	0x08007a59
 8007a10:	08007a59 	.word	0x08007a59
 8007a14:	08007a59 	.word	0x08007a59
 8007a18:	08007a59 	.word	0x08007a59
 8007a1c:	08007a59 	.word	0x08007a59
 8007a20:	08007a59 	.word	0x08007a59
 8007a24:	08007a59 	.word	0x08007a59
 8007a28:	08007a59 	.word	0x08007a59
 8007a2c:	08007a59 	.word	0x08007a59
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a59 	.word	0x08007a59
 8007a3c:	08007a59 	.word	0x08007a59
 8007a40:	08007a59 	.word	0x08007a59
 8007a44:	08007a59 	.word	0x08007a59
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a59 	.word	0x08007a59
 8007a50:	08007a59 	.word	0x08007a59
 8007a54:	08007a59 	.word	0x08007a59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a58:	bf00      	nop
  }

  return (USBD_OK);
 8007a5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bc80      	pop	{r7}
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop

08007a68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4805      	ldr	r0, [pc, #20]	; (8007a8c <CDC_Receive_FS+0x24>)
 8007a76:	f7fe febc 	bl	80067f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a7a:	4804      	ldr	r0, [pc, #16]	; (8007a8c <CDC_Receive_FS+0x24>)
 8007a7c:	f7fe fefb 	bl	8006876 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	200002b4 	.word	0x200002b4

08007a90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <CDC_Transmit_FS+0x48>)
 8007aa2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aa6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e00b      	b.n	8007ace <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007ab6:	887b      	ldrh	r3, [r7, #2]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	4806      	ldr	r0, [pc, #24]	; (8007ad8 <CDC_Transmit_FS+0x48>)
 8007abe:	f7fe fe7f 	bl	80067c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ac2:	4805      	ldr	r0, [pc, #20]	; (8007ad8 <CDC_Transmit_FS+0x48>)
 8007ac4:	f7fe fea8 	bl	8006818 <USBD_CDC_TransmitPacket>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200002b4 	.word	0x200002b4

08007adc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	6039      	str	r1, [r7, #0]
 8007ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2212      	movs	r2, #18
 8007aec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007aee:	4b03      	ldr	r3, [pc, #12]	; (8007afc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	20000148 	.word	0x20000148

08007b00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2204      	movs	r2, #4
 8007b10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b12:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	2000015c 	.word	0x2000015c

08007b24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d105      	bne.n	8007b42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	4907      	ldr	r1, [pc, #28]	; (8007b58 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b3a:	4808      	ldr	r0, [pc, #32]	; (8007b5c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b3c:	f7ff fe0c 	bl	8007758 <USBD_GetString>
 8007b40:	e004      	b.n	8007b4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4904      	ldr	r1, [pc, #16]	; (8007b58 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b46:	4805      	ldr	r0, [pc, #20]	; (8007b5c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b48:	f7ff fe06 	bl	8007758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b4c:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000d50 	.word	0x20000d50
 8007b5c:	08008bf4 	.word	0x08008bf4

08007b60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	6039      	str	r1, [r7, #0]
 8007b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	4904      	ldr	r1, [pc, #16]	; (8007b80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b70:	4804      	ldr	r0, [pc, #16]	; (8007b84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b72:	f7ff fdf1 	bl	8007758 <USBD_GetString>
  return USBD_StrDesc;
 8007b76:	4b02      	ldr	r3, [pc, #8]	; (8007b80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000d50 	.word	0x20000d50
 8007b84:	08008c0c 	.word	0x08008c0c

08007b88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	221a      	movs	r2, #26
 8007b98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b9a:	f000 f843 	bl	8007c24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b9e:	4b02      	ldr	r3, [pc, #8]	; (8007ba8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20000160 	.word	0x20000160

08007bac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4907      	ldr	r1, [pc, #28]	; (8007be0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bc2:	4808      	ldr	r0, [pc, #32]	; (8007be4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bc4:	f7ff fdc8 	bl	8007758 <USBD_GetString>
 8007bc8:	e004      	b.n	8007bd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4904      	ldr	r1, [pc, #16]	; (8007be0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bce:	4805      	ldr	r0, [pc, #20]	; (8007be4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd0:	f7ff fdc2 	bl	8007758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000d50 	.word	0x20000d50
 8007be4:	08008c20 	.word	0x08008c20

08007be8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	4907      	ldr	r1, [pc, #28]	; (8007c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bfe:	4808      	ldr	r0, [pc, #32]	; (8007c20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c00:	f7ff fdaa 	bl	8007758 <USBD_GetString>
 8007c04:	e004      	b.n	8007c10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4904      	ldr	r1, [pc, #16]	; (8007c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c0a:	4805      	ldr	r0, [pc, #20]	; (8007c20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c0c:	f7ff fda4 	bl	8007758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000d50 	.word	0x20000d50
 8007c20:	08008c2c 	.word	0x08008c2c

08007c24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <Get_SerialNum+0x44>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c30:	4b0e      	ldr	r3, [pc, #56]	; (8007c6c <Get_SerialNum+0x48>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c36:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <Get_SerialNum+0x4c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	4909      	ldr	r1, [pc, #36]	; (8007c74 <Get_SerialNum+0x50>)
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f814 	bl	8007c7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c54:	2204      	movs	r2, #4
 8007c56:	4908      	ldr	r1, [pc, #32]	; (8007c78 <Get_SerialNum+0x54>)
 8007c58:	68b8      	ldr	r0, [r7, #8]
 8007c5a:	f000 f80f 	bl	8007c7c <IntToUnicode>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	1ff80050 	.word	0x1ff80050
 8007c6c:	1ff80054 	.word	0x1ff80054
 8007c70:	1ff80058 	.word	0x1ff80058
 8007c74:	20000162 	.word	0x20000162
 8007c78:	20000172 	.word	0x20000172

08007c7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]
 8007c92:	e027      	b.n	8007ce4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	0f1b      	lsrs	r3, r3, #28
 8007c98:	2b09      	cmp	r3, #9
 8007c9a:	d80b      	bhi.n	8007cb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	0f1b      	lsrs	r3, r3, #28
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	440b      	add	r3, r1
 8007cac:	3230      	adds	r2, #48	; 0x30
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	e00a      	b.n	8007cca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	0f1b      	lsrs	r3, r3, #28
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	440b      	add	r3, r1
 8007cc4:	3237      	adds	r2, #55	; 0x37
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4413      	add	r3, r2
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	75fb      	strb	r3, [r7, #23]
 8007ce4:	7dfa      	ldrb	r2, [r7, #23]
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d3d3      	bcc.n	8007c94 <IntToUnicode+0x18>
  }
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d106      	bne.n	8007d18 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <HAL_PCDEx_SetConnectionState+0x38>)
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <HAL_PCDEx_SetConnectionState+0x38>)
 8007d10:	f043 0301 	orr.w	r3, r3, #1
 8007d14:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8007d16:	e005      	b.n	8007d24 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <HAL_PCDEx_SetConnectionState+0x38>)
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	4a04      	ldr	r2, [pc, #16]	; (8007d30 <HAL_PCDEx_SetConnectionState+0x38>)
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
 8007d22:	6053      	str	r3, [r2, #4]
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bc80      	pop	{r7}
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40010000 	.word	0x40010000

08007d34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0d      	ldr	r2, [pc, #52]	; (8007d78 <HAL_PCD_MspInit+0x44>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d113      	bne.n	8007d6e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d46:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <HAL_PCD_MspInit+0x48>)
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <HAL_PCD_MspInit+0x48>)
 8007d4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d50:	6253      	str	r3, [r2, #36]	; 0x24
 8007d52:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <HAL_PCD_MspInit+0x48>)
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2100      	movs	r1, #0
 8007d62:	2014      	movs	r0, #20
 8007d64:	f7f8 ff8b 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007d68:	2014      	movs	r0, #20
 8007d6a:	f7f8 ffa4 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	40005c00 	.word	0x40005c00
 8007d7c:	40023800 	.word	0x40023800

08007d80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7fe fe23 	bl	80069e2 <USBD_LL_SetupStage>
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	440b      	add	r3, r1
 8007dc4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f7fe fe55 	bl	8006a7c <USBD_LL_DataOutStage>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007dec:	78fa      	ldrb	r2, [r7, #3]
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	440b      	add	r3, r1
 8007dfa:	333c      	adds	r3, #60	; 0x3c
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	4619      	mov	r1, r3
 8007e02:	f7fe feac 	bl	8006b5e <USBD_LL_DataInStage>
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe ffb7 	bl	8006d90 <USBD_LL_SOF>
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e32:	2301      	movs	r3, #1
 8007e34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d001      	beq.n	8007e42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e3e:	f7f8 fc67 	bl	8000710 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e48:	7bfa      	ldrb	r2, [r7, #15]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe ff6c 	bl	8006d2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe ff25 	bl	8006ca8 <USBD_LL_Reset>
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe ff66 	bl	8006d48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e84:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <HAL_PCD_SuspendCallback+0x30>)
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	4a03      	ldr	r2, [pc, #12]	; (8007e98 <HAL_PCD_SuspendCallback+0x30>)
 8007e8a:	f043 0306 	orr.w	r3, r3, #6
 8007e8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed00 	.word	0xe000ed00

08007e9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe ff60 	bl	8006d70 <USBD_LL_Resume>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ec0:	4a28      	ldr	r2, [pc, #160]	; (8007f64 <USBD_LL_Init+0xac>)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <USBD_LL_Init+0xac>)
 8007ecc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8007ed0:	4b24      	ldr	r3, [pc, #144]	; (8007f64 <USBD_LL_Init+0xac>)
 8007ed2:	4a25      	ldr	r2, [pc, #148]	; (8007f68 <USBD_LL_Init+0xb0>)
 8007ed4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ed6:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <USBD_LL_Init+0xac>)
 8007ed8:	2208      	movs	r2, #8
 8007eda:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007edc:	4b21      	ldr	r3, [pc, #132]	; (8007f64 <USBD_LL_Init+0xac>)
 8007ede:	2202      	movs	r2, #2
 8007ee0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ee2:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <USBD_LL_Init+0xac>)
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ee8:	4b1e      	ldr	r3, [pc, #120]	; (8007f64 <USBD_LL_Init+0xac>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <USBD_LL_Init+0xac>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ef4:	481b      	ldr	r0, [pc, #108]	; (8007f64 <USBD_LL_Init+0xac>)
 8007ef6:	f7f9 f9ef 	bl	80012d8 <HAL_PCD_Init>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007f00:	f7f8 fc06 	bl	8000710 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f0a:	2318      	movs	r3, #24
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2100      	movs	r1, #0
 8007f10:	f7fa fdcc 	bl	8002aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f1a:	2358      	movs	r3, #88	; 0x58
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2180      	movs	r1, #128	; 0x80
 8007f20:	f7fa fdc4 	bl	8002aac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f2a:	23c0      	movs	r3, #192	; 0xc0
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2181      	movs	r1, #129	; 0x81
 8007f30:	f7fa fdbc 	bl	8002aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2101      	movs	r1, #1
 8007f42:	f7fa fdb3 	bl	8002aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f50:	2200      	movs	r2, #0
 8007f52:	2182      	movs	r1, #130	; 0x82
 8007f54:	f7fa fdaa 	bl	8002aac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000f50 	.word	0x20000f50
 8007f68:	40005c00 	.word	0x40005c00

08007f6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7f9 fa86 	bl	8001494 <HAL_PCD_Start>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 f944 	bl	800821c <USBD_Get_USB_Status>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	4608      	mov	r0, r1
 8007fac:	4611      	mov	r1, r2
 8007fae:	461a      	mov	r2, r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	70fb      	strb	r3, [r7, #3]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70bb      	strb	r3, [r7, #2]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007fca:	78bb      	ldrb	r3, [r7, #2]
 8007fcc:	883a      	ldrh	r2, [r7, #0]
 8007fce:	78f9      	ldrb	r1, [r7, #3]
 8007fd0:	f7f9 fba2 	bl	8001718 <HAL_PCD_EP_Open>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f91e 	bl	800821c <USBD_Get_USB_Status>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008008:	78fa      	ldrb	r2, [r7, #3]
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f7f9 fbe9 	bl	80017e4 <HAL_PCD_EP_Close>
 8008012:	4603      	mov	r3, r0
 8008014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	4618      	mov	r0, r3
 800801a:	f000 f8ff 	bl	800821c <USBD_Get_USB_Status>
 800801e:	4603      	mov	r3, r0
 8008020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008022:	7bbb      	ldrb	r3, [r7, #14]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	4611      	mov	r1, r2
 800804a:	4618      	mov	r0, r3
 800804c:	f7f9 fca9 	bl	80019a2 <HAL_PCD_EP_SetStall>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f8e0 	bl	800821c <USBD_Get_USB_Status>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008060:	7bbb      	ldrb	r3, [r7, #14]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008084:	78fa      	ldrb	r2, [r7, #3]
 8008086:	4611      	mov	r1, r2
 8008088:	4618      	mov	r0, r3
 800808a:	f7f9 fcdc 	bl	8001a46 <HAL_PCD_EP_ClrStall>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 f8c1 	bl	800821c <USBD_Get_USB_Status>
 800809a:	4603      	mov	r3, r0
 800809c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809e:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da0c      	bge.n	80080de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ca:	68f9      	ldr	r1, [r7, #12]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	440b      	add	r3, r1
 80080d8:	3302      	adds	r3, #2
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	e00b      	b.n	80080f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	440b      	add	r3, r1
 80080f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80080f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800811a:	78fa      	ldrb	r2, [r7, #3]
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f7f9 fad5 	bl	80016ce <HAL_PCD_SetAddress>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f876 	bl	800821c <USBD_Get_USB_Status>
 8008130:	4603      	mov	r3, r0
 8008132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008134:	7bbb      	ldrb	r3, [r7, #14]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b086      	sub	sp, #24
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	607a      	str	r2, [r7, #4]
 8008148:	461a      	mov	r2, r3
 800814a:	460b      	mov	r3, r1
 800814c:	72fb      	strb	r3, [r7, #11]
 800814e:	4613      	mov	r3, r2
 8008150:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008160:	893b      	ldrh	r3, [r7, #8]
 8008162:	7af9      	ldrb	r1, [r7, #11]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	f7f9 fbd9 	bl	800191c <HAL_PCD_EP_Transmit>
 800816a:	4603      	mov	r3, r0
 800816c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f853 	bl	800821c <USBD_Get_USB_Status>
 8008176:	4603      	mov	r3, r0
 8008178:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800817a:	7dbb      	ldrb	r3, [r7, #22]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	461a      	mov	r2, r3
 8008190:	460b      	mov	r3, r1
 8008192:	72fb      	strb	r3, [r7, #11]
 8008194:	4613      	mov	r3, r2
 8008196:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80081a6:	893b      	ldrh	r3, [r7, #8]
 80081a8:	7af9      	ldrb	r1, [r7, #11]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	f7f9 fb62 	bl	8001874 <HAL_PCD_EP_Receive>
 80081b0:	4603      	mov	r3, r0
 80081b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f830 	bl	800821c <USBD_Get_USB_Status>
 80081bc:	4603      	mov	r3, r0
 80081be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80081dc:	78fa      	ldrb	r2, [r7, #3]
 80081de:	4611      	mov	r1, r2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7f9 fb84 	bl	80018ee <HAL_PCD_EP_GetRxCount>
 80081e6:	4603      	mov	r3, r0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081f8:	4b02      	ldr	r3, [pc, #8]	; (8008204 <USBD_static_malloc+0x14>)
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr
 8008204:	2000123c 	.word	0x2000123c

08008208 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]

}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	bc80      	pop	{r7}
 8008218:	4770      	bx	lr
	...

0800821c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	2b03      	cmp	r3, #3
 800822e:	d817      	bhi.n	8008260 <USBD_Get_USB_Status+0x44>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <USBD_Get_USB_Status+0x1c>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	08008249 	.word	0x08008249
 800823c:	0800824f 	.word	0x0800824f
 8008240:	08008255 	.word	0x08008255
 8008244:	0800825b 	.word	0x0800825b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
    break;
 800824c:	e00b      	b.n	8008266 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800824e:	2302      	movs	r3, #2
 8008250:	73fb      	strb	r3, [r7, #15]
    break;
 8008252:	e008      	b.n	8008266 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008254:	2301      	movs	r3, #1
 8008256:	73fb      	strb	r3, [r7, #15]
    break;
 8008258:	e005      	b.n	8008266 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800825a:	2302      	movs	r3, #2
 800825c:	73fb      	strb	r3, [r7, #15]
    break;
 800825e:	e002      	b.n	8008266 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008260:	2302      	movs	r3, #2
 8008262:	73fb      	strb	r3, [r7, #15]
    break;
 8008264:	bf00      	nop
  }
  return usb_status;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop

08008274 <__errno>:
 8008274:	4b01      	ldr	r3, [pc, #4]	; (800827c <__errno+0x8>)
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	2000017c 	.word	0x2000017c

08008280 <__libc_init_array>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	2600      	movs	r6, #0
 8008284:	4d0c      	ldr	r5, [pc, #48]	; (80082b8 <__libc_init_array+0x38>)
 8008286:	4c0d      	ldr	r4, [pc, #52]	; (80082bc <__libc_init_array+0x3c>)
 8008288:	1b64      	subs	r4, r4, r5
 800828a:	10a4      	asrs	r4, r4, #2
 800828c:	42a6      	cmp	r6, r4
 800828e:	d109      	bne.n	80082a4 <__libc_init_array+0x24>
 8008290:	f000 fc9c 	bl	8008bcc <_init>
 8008294:	2600      	movs	r6, #0
 8008296:	4d0a      	ldr	r5, [pc, #40]	; (80082c0 <__libc_init_array+0x40>)
 8008298:	4c0a      	ldr	r4, [pc, #40]	; (80082c4 <__libc_init_array+0x44>)
 800829a:	1b64      	subs	r4, r4, r5
 800829c:	10a4      	asrs	r4, r4, #2
 800829e:	42a6      	cmp	r6, r4
 80082a0:	d105      	bne.n	80082ae <__libc_init_array+0x2e>
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a8:	4798      	blx	r3
 80082aa:	3601      	adds	r6, #1
 80082ac:	e7ee      	b.n	800828c <__libc_init_array+0xc>
 80082ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b2:	4798      	blx	r3
 80082b4:	3601      	adds	r6, #1
 80082b6:	e7f2      	b.n	800829e <__libc_init_array+0x1e>
 80082b8:	08008c9c 	.word	0x08008c9c
 80082bc:	08008c9c 	.word	0x08008c9c
 80082c0:	08008c9c 	.word	0x08008c9c
 80082c4:	08008ca0 	.word	0x08008ca0

080082c8 <memset>:
 80082c8:	4603      	mov	r3, r0
 80082ca:	4402      	add	r2, r0
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d100      	bne.n	80082d2 <memset+0xa>
 80082d0:	4770      	bx	lr
 80082d2:	f803 1b01 	strb.w	r1, [r3], #1
 80082d6:	e7f9      	b.n	80082cc <memset+0x4>

080082d8 <siprintf>:
 80082d8:	b40e      	push	{r1, r2, r3}
 80082da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082de:	b500      	push	{lr}
 80082e0:	b09c      	sub	sp, #112	; 0x70
 80082e2:	ab1d      	add	r3, sp, #116	; 0x74
 80082e4:	9002      	str	r0, [sp, #8]
 80082e6:	9006      	str	r0, [sp, #24]
 80082e8:	9107      	str	r1, [sp, #28]
 80082ea:	9104      	str	r1, [sp, #16]
 80082ec:	4808      	ldr	r0, [pc, #32]	; (8008310 <siprintf+0x38>)
 80082ee:	4909      	ldr	r1, [pc, #36]	; (8008314 <siprintf+0x3c>)
 80082f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f4:	9105      	str	r1, [sp, #20]
 80082f6:	6800      	ldr	r0, [r0, #0]
 80082f8:	a902      	add	r1, sp, #8
 80082fa:	9301      	str	r3, [sp, #4]
 80082fc:	f000 f868 	bl	80083d0 <_svfiprintf_r>
 8008300:	2200      	movs	r2, #0
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	701a      	strb	r2, [r3, #0]
 8008306:	b01c      	add	sp, #112	; 0x70
 8008308:	f85d eb04 	ldr.w	lr, [sp], #4
 800830c:	b003      	add	sp, #12
 800830e:	4770      	bx	lr
 8008310:	2000017c 	.word	0x2000017c
 8008314:	ffff0208 	.word	0xffff0208

08008318 <__ssputs_r>:
 8008318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800831c:	688e      	ldr	r6, [r1, #8]
 800831e:	4682      	mov	sl, r0
 8008320:	429e      	cmp	r6, r3
 8008322:	460c      	mov	r4, r1
 8008324:	4690      	mov	r8, r2
 8008326:	461f      	mov	r7, r3
 8008328:	d838      	bhi.n	800839c <__ssputs_r+0x84>
 800832a:	898a      	ldrh	r2, [r1, #12]
 800832c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008330:	d032      	beq.n	8008398 <__ssputs_r+0x80>
 8008332:	6825      	ldr	r5, [r4, #0]
 8008334:	6909      	ldr	r1, [r1, #16]
 8008336:	3301      	adds	r3, #1
 8008338:	eba5 0901 	sub.w	r9, r5, r1
 800833c:	6965      	ldr	r5, [r4, #20]
 800833e:	444b      	add	r3, r9
 8008340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008348:	106d      	asrs	r5, r5, #1
 800834a:	429d      	cmp	r5, r3
 800834c:	bf38      	it	cc
 800834e:	461d      	movcc	r5, r3
 8008350:	0553      	lsls	r3, r2, #21
 8008352:	d531      	bpl.n	80083b8 <__ssputs_r+0xa0>
 8008354:	4629      	mov	r1, r5
 8008356:	f000 fb6f 	bl	8008a38 <_malloc_r>
 800835a:	4606      	mov	r6, r0
 800835c:	b950      	cbnz	r0, 8008374 <__ssputs_r+0x5c>
 800835e:	230c      	movs	r3, #12
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	f8ca 3000 	str.w	r3, [sl]
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800836e:	81a3      	strh	r3, [r4, #12]
 8008370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008374:	464a      	mov	r2, r9
 8008376:	6921      	ldr	r1, [r4, #16]
 8008378:	f000 face 	bl	8008918 <memcpy>
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008386:	81a3      	strh	r3, [r4, #12]
 8008388:	6126      	str	r6, [r4, #16]
 800838a:	444e      	add	r6, r9
 800838c:	6026      	str	r6, [r4, #0]
 800838e:	463e      	mov	r6, r7
 8008390:	6165      	str	r5, [r4, #20]
 8008392:	eba5 0509 	sub.w	r5, r5, r9
 8008396:	60a5      	str	r5, [r4, #8]
 8008398:	42be      	cmp	r6, r7
 800839a:	d900      	bls.n	800839e <__ssputs_r+0x86>
 800839c:	463e      	mov	r6, r7
 800839e:	4632      	mov	r2, r6
 80083a0:	4641      	mov	r1, r8
 80083a2:	6820      	ldr	r0, [r4, #0]
 80083a4:	f000 fac6 	bl	8008934 <memmove>
 80083a8:	68a3      	ldr	r3, [r4, #8]
 80083aa:	2000      	movs	r0, #0
 80083ac:	1b9b      	subs	r3, r3, r6
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	4433      	add	r3, r6
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	e7db      	b.n	8008370 <__ssputs_r+0x58>
 80083b8:	462a      	mov	r2, r5
 80083ba:	f000 fbb1 	bl	8008b20 <_realloc_r>
 80083be:	4606      	mov	r6, r0
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d1e1      	bne.n	8008388 <__ssputs_r+0x70>
 80083c4:	4650      	mov	r0, sl
 80083c6:	6921      	ldr	r1, [r4, #16]
 80083c8:	f000 face 	bl	8008968 <_free_r>
 80083cc:	e7c7      	b.n	800835e <__ssputs_r+0x46>
	...

080083d0 <_svfiprintf_r>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	4698      	mov	r8, r3
 80083d6:	898b      	ldrh	r3, [r1, #12]
 80083d8:	4607      	mov	r7, r0
 80083da:	061b      	lsls	r3, r3, #24
 80083dc:	460d      	mov	r5, r1
 80083de:	4614      	mov	r4, r2
 80083e0:	b09d      	sub	sp, #116	; 0x74
 80083e2:	d50e      	bpl.n	8008402 <_svfiprintf_r+0x32>
 80083e4:	690b      	ldr	r3, [r1, #16]
 80083e6:	b963      	cbnz	r3, 8008402 <_svfiprintf_r+0x32>
 80083e8:	2140      	movs	r1, #64	; 0x40
 80083ea:	f000 fb25 	bl	8008a38 <_malloc_r>
 80083ee:	6028      	str	r0, [r5, #0]
 80083f0:	6128      	str	r0, [r5, #16]
 80083f2:	b920      	cbnz	r0, 80083fe <_svfiprintf_r+0x2e>
 80083f4:	230c      	movs	r3, #12
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295
 80083fc:	e0d1      	b.n	80085a2 <_svfiprintf_r+0x1d2>
 80083fe:	2340      	movs	r3, #64	; 0x40
 8008400:	616b      	str	r3, [r5, #20]
 8008402:	2300      	movs	r3, #0
 8008404:	9309      	str	r3, [sp, #36]	; 0x24
 8008406:	2320      	movs	r3, #32
 8008408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800840c:	2330      	movs	r3, #48	; 0x30
 800840e:	f04f 0901 	mov.w	r9, #1
 8008412:	f8cd 800c 	str.w	r8, [sp, #12]
 8008416:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80085bc <_svfiprintf_r+0x1ec>
 800841a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800841e:	4623      	mov	r3, r4
 8008420:	469a      	mov	sl, r3
 8008422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008426:	b10a      	cbz	r2, 800842c <_svfiprintf_r+0x5c>
 8008428:	2a25      	cmp	r2, #37	; 0x25
 800842a:	d1f9      	bne.n	8008420 <_svfiprintf_r+0x50>
 800842c:	ebba 0b04 	subs.w	fp, sl, r4
 8008430:	d00b      	beq.n	800844a <_svfiprintf_r+0x7a>
 8008432:	465b      	mov	r3, fp
 8008434:	4622      	mov	r2, r4
 8008436:	4629      	mov	r1, r5
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff ff6d 	bl	8008318 <__ssputs_r>
 800843e:	3001      	adds	r0, #1
 8008440:	f000 80aa 	beq.w	8008598 <_svfiprintf_r+0x1c8>
 8008444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008446:	445a      	add	r2, fp
 8008448:	9209      	str	r2, [sp, #36]	; 0x24
 800844a:	f89a 3000 	ldrb.w	r3, [sl]
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 80a2 	beq.w	8008598 <_svfiprintf_r+0x1c8>
 8008454:	2300      	movs	r3, #0
 8008456:	f04f 32ff 	mov.w	r2, #4294967295
 800845a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800845e:	f10a 0a01 	add.w	sl, sl, #1
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	9307      	str	r3, [sp, #28]
 8008466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800846a:	931a      	str	r3, [sp, #104]	; 0x68
 800846c:	4654      	mov	r4, sl
 800846e:	2205      	movs	r2, #5
 8008470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008474:	4851      	ldr	r0, [pc, #324]	; (80085bc <_svfiprintf_r+0x1ec>)
 8008476:	f000 fa41 	bl	80088fc <memchr>
 800847a:	9a04      	ldr	r2, [sp, #16]
 800847c:	b9d8      	cbnz	r0, 80084b6 <_svfiprintf_r+0xe6>
 800847e:	06d0      	lsls	r0, r2, #27
 8008480:	bf44      	itt	mi
 8008482:	2320      	movmi	r3, #32
 8008484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008488:	0711      	lsls	r1, r2, #28
 800848a:	bf44      	itt	mi
 800848c:	232b      	movmi	r3, #43	; 0x2b
 800848e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008492:	f89a 3000 	ldrb.w	r3, [sl]
 8008496:	2b2a      	cmp	r3, #42	; 0x2a
 8008498:	d015      	beq.n	80084c6 <_svfiprintf_r+0xf6>
 800849a:	4654      	mov	r4, sl
 800849c:	2000      	movs	r0, #0
 800849e:	f04f 0c0a 	mov.w	ip, #10
 80084a2:	9a07      	ldr	r2, [sp, #28]
 80084a4:	4621      	mov	r1, r4
 80084a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084aa:	3b30      	subs	r3, #48	; 0x30
 80084ac:	2b09      	cmp	r3, #9
 80084ae:	d94e      	bls.n	800854e <_svfiprintf_r+0x17e>
 80084b0:	b1b0      	cbz	r0, 80084e0 <_svfiprintf_r+0x110>
 80084b2:	9207      	str	r2, [sp, #28]
 80084b4:	e014      	b.n	80084e0 <_svfiprintf_r+0x110>
 80084b6:	eba0 0308 	sub.w	r3, r0, r8
 80084ba:	fa09 f303 	lsl.w	r3, r9, r3
 80084be:	4313      	orrs	r3, r2
 80084c0:	46a2      	mov	sl, r4
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	e7d2      	b.n	800846c <_svfiprintf_r+0x9c>
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	1d19      	adds	r1, r3, #4
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	9103      	str	r1, [sp, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bfbb      	ittet	lt
 80084d2:	425b      	neglt	r3, r3
 80084d4:	f042 0202 	orrlt.w	r2, r2, #2
 80084d8:	9307      	strge	r3, [sp, #28]
 80084da:	9307      	strlt	r3, [sp, #28]
 80084dc:	bfb8      	it	lt
 80084de:	9204      	strlt	r2, [sp, #16]
 80084e0:	7823      	ldrb	r3, [r4, #0]
 80084e2:	2b2e      	cmp	r3, #46	; 0x2e
 80084e4:	d10c      	bne.n	8008500 <_svfiprintf_r+0x130>
 80084e6:	7863      	ldrb	r3, [r4, #1]
 80084e8:	2b2a      	cmp	r3, #42	; 0x2a
 80084ea:	d135      	bne.n	8008558 <_svfiprintf_r+0x188>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	3402      	adds	r4, #2
 80084f0:	1d1a      	adds	r2, r3, #4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	9203      	str	r2, [sp, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfb8      	it	lt
 80084fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80084fe:	9305      	str	r3, [sp, #20]
 8008500:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80085c0 <_svfiprintf_r+0x1f0>
 8008504:	2203      	movs	r2, #3
 8008506:	4650      	mov	r0, sl
 8008508:	7821      	ldrb	r1, [r4, #0]
 800850a:	f000 f9f7 	bl	80088fc <memchr>
 800850e:	b140      	cbz	r0, 8008522 <_svfiprintf_r+0x152>
 8008510:	2340      	movs	r3, #64	; 0x40
 8008512:	eba0 000a 	sub.w	r0, r0, sl
 8008516:	fa03 f000 	lsl.w	r0, r3, r0
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	3401      	adds	r4, #1
 800851e:	4303      	orrs	r3, r0
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008526:	2206      	movs	r2, #6
 8008528:	4826      	ldr	r0, [pc, #152]	; (80085c4 <_svfiprintf_r+0x1f4>)
 800852a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800852e:	f000 f9e5 	bl	80088fc <memchr>
 8008532:	2800      	cmp	r0, #0
 8008534:	d038      	beq.n	80085a8 <_svfiprintf_r+0x1d8>
 8008536:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <_svfiprintf_r+0x1f8>)
 8008538:	bb1b      	cbnz	r3, 8008582 <_svfiprintf_r+0x1b2>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	3307      	adds	r3, #7
 800853e:	f023 0307 	bic.w	r3, r3, #7
 8008542:	3308      	adds	r3, #8
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008548:	4433      	add	r3, r6
 800854a:	9309      	str	r3, [sp, #36]	; 0x24
 800854c:	e767      	b.n	800841e <_svfiprintf_r+0x4e>
 800854e:	460c      	mov	r4, r1
 8008550:	2001      	movs	r0, #1
 8008552:	fb0c 3202 	mla	r2, ip, r2, r3
 8008556:	e7a5      	b.n	80084a4 <_svfiprintf_r+0xd4>
 8008558:	2300      	movs	r3, #0
 800855a:	f04f 0c0a 	mov.w	ip, #10
 800855e:	4619      	mov	r1, r3
 8008560:	3401      	adds	r4, #1
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	4620      	mov	r0, r4
 8008566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800856a:	3a30      	subs	r2, #48	; 0x30
 800856c:	2a09      	cmp	r2, #9
 800856e:	d903      	bls.n	8008578 <_svfiprintf_r+0x1a8>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0c5      	beq.n	8008500 <_svfiprintf_r+0x130>
 8008574:	9105      	str	r1, [sp, #20]
 8008576:	e7c3      	b.n	8008500 <_svfiprintf_r+0x130>
 8008578:	4604      	mov	r4, r0
 800857a:	2301      	movs	r3, #1
 800857c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008580:	e7f0      	b.n	8008564 <_svfiprintf_r+0x194>
 8008582:	ab03      	add	r3, sp, #12
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	462a      	mov	r2, r5
 8008588:	4638      	mov	r0, r7
 800858a:	4b10      	ldr	r3, [pc, #64]	; (80085cc <_svfiprintf_r+0x1fc>)
 800858c:	a904      	add	r1, sp, #16
 800858e:	f3af 8000 	nop.w
 8008592:	1c42      	adds	r2, r0, #1
 8008594:	4606      	mov	r6, r0
 8008596:	d1d6      	bne.n	8008546 <_svfiprintf_r+0x176>
 8008598:	89ab      	ldrh	r3, [r5, #12]
 800859a:	065b      	lsls	r3, r3, #25
 800859c:	f53f af2c 	bmi.w	80083f8 <_svfiprintf_r+0x28>
 80085a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085a2:	b01d      	add	sp, #116	; 0x74
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a8:	ab03      	add	r3, sp, #12
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	462a      	mov	r2, r5
 80085ae:	4638      	mov	r0, r7
 80085b0:	4b06      	ldr	r3, [pc, #24]	; (80085cc <_svfiprintf_r+0x1fc>)
 80085b2:	a904      	add	r1, sp, #16
 80085b4:	f000 f87c 	bl	80086b0 <_printf_i>
 80085b8:	e7eb      	b.n	8008592 <_svfiprintf_r+0x1c2>
 80085ba:	bf00      	nop
 80085bc:	08008c60 	.word	0x08008c60
 80085c0:	08008c66 	.word	0x08008c66
 80085c4:	08008c6a 	.word	0x08008c6a
 80085c8:	00000000 	.word	0x00000000
 80085cc:	08008319 	.word	0x08008319

080085d0 <_printf_common>:
 80085d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	4616      	mov	r6, r2
 80085d6:	4699      	mov	r9, r3
 80085d8:	688a      	ldr	r2, [r1, #8]
 80085da:	690b      	ldr	r3, [r1, #16]
 80085dc:	4607      	mov	r7, r0
 80085de:	4293      	cmp	r3, r2
 80085e0:	bfb8      	it	lt
 80085e2:	4613      	movlt	r3, r2
 80085e4:	6033      	str	r3, [r6, #0]
 80085e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085ea:	460c      	mov	r4, r1
 80085ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085f0:	b10a      	cbz	r2, 80085f6 <_printf_common+0x26>
 80085f2:	3301      	adds	r3, #1
 80085f4:	6033      	str	r3, [r6, #0]
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	0699      	lsls	r1, r3, #26
 80085fa:	bf42      	ittt	mi
 80085fc:	6833      	ldrmi	r3, [r6, #0]
 80085fe:	3302      	addmi	r3, #2
 8008600:	6033      	strmi	r3, [r6, #0]
 8008602:	6825      	ldr	r5, [r4, #0]
 8008604:	f015 0506 	ands.w	r5, r5, #6
 8008608:	d106      	bne.n	8008618 <_printf_common+0x48>
 800860a:	f104 0a19 	add.w	sl, r4, #25
 800860e:	68e3      	ldr	r3, [r4, #12]
 8008610:	6832      	ldr	r2, [r6, #0]
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	42ab      	cmp	r3, r5
 8008616:	dc28      	bgt.n	800866a <_printf_common+0x9a>
 8008618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800861c:	1e13      	subs	r3, r2, #0
 800861e:	6822      	ldr	r2, [r4, #0]
 8008620:	bf18      	it	ne
 8008622:	2301      	movne	r3, #1
 8008624:	0692      	lsls	r2, r2, #26
 8008626:	d42d      	bmi.n	8008684 <_printf_common+0xb4>
 8008628:	4649      	mov	r1, r9
 800862a:	4638      	mov	r0, r7
 800862c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008630:	47c0      	blx	r8
 8008632:	3001      	adds	r0, #1
 8008634:	d020      	beq.n	8008678 <_printf_common+0xa8>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	68e5      	ldr	r5, [r4, #12]
 800863a:	f003 0306 	and.w	r3, r3, #6
 800863e:	2b04      	cmp	r3, #4
 8008640:	bf18      	it	ne
 8008642:	2500      	movne	r5, #0
 8008644:	6832      	ldr	r2, [r6, #0]
 8008646:	f04f 0600 	mov.w	r6, #0
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	bf08      	it	eq
 800864e:	1aad      	subeq	r5, r5, r2
 8008650:	6922      	ldr	r2, [r4, #16]
 8008652:	bf08      	it	eq
 8008654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008658:	4293      	cmp	r3, r2
 800865a:	bfc4      	itt	gt
 800865c:	1a9b      	subgt	r3, r3, r2
 800865e:	18ed      	addgt	r5, r5, r3
 8008660:	341a      	adds	r4, #26
 8008662:	42b5      	cmp	r5, r6
 8008664:	d11a      	bne.n	800869c <_printf_common+0xcc>
 8008666:	2000      	movs	r0, #0
 8008668:	e008      	b.n	800867c <_printf_common+0xac>
 800866a:	2301      	movs	r3, #1
 800866c:	4652      	mov	r2, sl
 800866e:	4649      	mov	r1, r9
 8008670:	4638      	mov	r0, r7
 8008672:	47c0      	blx	r8
 8008674:	3001      	adds	r0, #1
 8008676:	d103      	bne.n	8008680 <_printf_common+0xb0>
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008680:	3501      	adds	r5, #1
 8008682:	e7c4      	b.n	800860e <_printf_common+0x3e>
 8008684:	2030      	movs	r0, #48	; 0x30
 8008686:	18e1      	adds	r1, r4, r3
 8008688:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008692:	4422      	add	r2, r4
 8008694:	3302      	adds	r3, #2
 8008696:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800869a:	e7c5      	b.n	8008628 <_printf_common+0x58>
 800869c:	2301      	movs	r3, #1
 800869e:	4622      	mov	r2, r4
 80086a0:	4649      	mov	r1, r9
 80086a2:	4638      	mov	r0, r7
 80086a4:	47c0      	blx	r8
 80086a6:	3001      	adds	r0, #1
 80086a8:	d0e6      	beq.n	8008678 <_printf_common+0xa8>
 80086aa:	3601      	adds	r6, #1
 80086ac:	e7d9      	b.n	8008662 <_printf_common+0x92>
	...

080086b0 <_printf_i>:
 80086b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	7e0f      	ldrb	r7, [r1, #24]
 80086b6:	4691      	mov	r9, r2
 80086b8:	2f78      	cmp	r7, #120	; 0x78
 80086ba:	4680      	mov	r8, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	469a      	mov	sl, r3
 80086c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086c6:	d807      	bhi.n	80086d8 <_printf_i+0x28>
 80086c8:	2f62      	cmp	r7, #98	; 0x62
 80086ca:	d80a      	bhi.n	80086e2 <_printf_i+0x32>
 80086cc:	2f00      	cmp	r7, #0
 80086ce:	f000 80d9 	beq.w	8008884 <_printf_i+0x1d4>
 80086d2:	2f58      	cmp	r7, #88	; 0x58
 80086d4:	f000 80a4 	beq.w	8008820 <_printf_i+0x170>
 80086d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086e0:	e03a      	b.n	8008758 <_printf_i+0xa8>
 80086e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086e6:	2b15      	cmp	r3, #21
 80086e8:	d8f6      	bhi.n	80086d8 <_printf_i+0x28>
 80086ea:	a101      	add	r1, pc, #4	; (adr r1, 80086f0 <_printf_i+0x40>)
 80086ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086f0:	08008749 	.word	0x08008749
 80086f4:	0800875d 	.word	0x0800875d
 80086f8:	080086d9 	.word	0x080086d9
 80086fc:	080086d9 	.word	0x080086d9
 8008700:	080086d9 	.word	0x080086d9
 8008704:	080086d9 	.word	0x080086d9
 8008708:	0800875d 	.word	0x0800875d
 800870c:	080086d9 	.word	0x080086d9
 8008710:	080086d9 	.word	0x080086d9
 8008714:	080086d9 	.word	0x080086d9
 8008718:	080086d9 	.word	0x080086d9
 800871c:	0800886b 	.word	0x0800886b
 8008720:	0800878d 	.word	0x0800878d
 8008724:	0800884d 	.word	0x0800884d
 8008728:	080086d9 	.word	0x080086d9
 800872c:	080086d9 	.word	0x080086d9
 8008730:	0800888d 	.word	0x0800888d
 8008734:	080086d9 	.word	0x080086d9
 8008738:	0800878d 	.word	0x0800878d
 800873c:	080086d9 	.word	0x080086d9
 8008740:	080086d9 	.word	0x080086d9
 8008744:	08008855 	.word	0x08008855
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	1d1a      	adds	r2, r3, #4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	602a      	str	r2, [r5, #0]
 8008750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008758:	2301      	movs	r3, #1
 800875a:	e0a4      	b.n	80088a6 <_printf_i+0x1f6>
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	6829      	ldr	r1, [r5, #0]
 8008760:	0606      	lsls	r6, r0, #24
 8008762:	f101 0304 	add.w	r3, r1, #4
 8008766:	d50a      	bpl.n	800877e <_printf_i+0xce>
 8008768:	680e      	ldr	r6, [r1, #0]
 800876a:	602b      	str	r3, [r5, #0]
 800876c:	2e00      	cmp	r6, #0
 800876e:	da03      	bge.n	8008778 <_printf_i+0xc8>
 8008770:	232d      	movs	r3, #45	; 0x2d
 8008772:	4276      	negs	r6, r6
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008778:	230a      	movs	r3, #10
 800877a:	485e      	ldr	r0, [pc, #376]	; (80088f4 <_printf_i+0x244>)
 800877c:	e019      	b.n	80087b2 <_printf_i+0x102>
 800877e:	680e      	ldr	r6, [r1, #0]
 8008780:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	bf18      	it	ne
 8008788:	b236      	sxthne	r6, r6
 800878a:	e7ef      	b.n	800876c <_printf_i+0xbc>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	6820      	ldr	r0, [r4, #0]
 8008790:	1d19      	adds	r1, r3, #4
 8008792:	6029      	str	r1, [r5, #0]
 8008794:	0601      	lsls	r1, r0, #24
 8008796:	d501      	bpl.n	800879c <_printf_i+0xec>
 8008798:	681e      	ldr	r6, [r3, #0]
 800879a:	e002      	b.n	80087a2 <_printf_i+0xf2>
 800879c:	0646      	lsls	r6, r0, #25
 800879e:	d5fb      	bpl.n	8008798 <_printf_i+0xe8>
 80087a0:	881e      	ldrh	r6, [r3, #0]
 80087a2:	2f6f      	cmp	r7, #111	; 0x6f
 80087a4:	bf0c      	ite	eq
 80087a6:	2308      	moveq	r3, #8
 80087a8:	230a      	movne	r3, #10
 80087aa:	4852      	ldr	r0, [pc, #328]	; (80088f4 <_printf_i+0x244>)
 80087ac:	2100      	movs	r1, #0
 80087ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087b2:	6865      	ldr	r5, [r4, #4]
 80087b4:	2d00      	cmp	r5, #0
 80087b6:	bfa8      	it	ge
 80087b8:	6821      	ldrge	r1, [r4, #0]
 80087ba:	60a5      	str	r5, [r4, #8]
 80087bc:	bfa4      	itt	ge
 80087be:	f021 0104 	bicge.w	r1, r1, #4
 80087c2:	6021      	strge	r1, [r4, #0]
 80087c4:	b90e      	cbnz	r6, 80087ca <_printf_i+0x11a>
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	d04d      	beq.n	8008866 <_printf_i+0x1b6>
 80087ca:	4615      	mov	r5, r2
 80087cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80087d0:	fb03 6711 	mls	r7, r3, r1, r6
 80087d4:	5dc7      	ldrb	r7, [r0, r7]
 80087d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087da:	4637      	mov	r7, r6
 80087dc:	42bb      	cmp	r3, r7
 80087de:	460e      	mov	r6, r1
 80087e0:	d9f4      	bls.n	80087cc <_printf_i+0x11c>
 80087e2:	2b08      	cmp	r3, #8
 80087e4:	d10b      	bne.n	80087fe <_printf_i+0x14e>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	07de      	lsls	r6, r3, #31
 80087ea:	d508      	bpl.n	80087fe <_printf_i+0x14e>
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	6861      	ldr	r1, [r4, #4]
 80087f0:	4299      	cmp	r1, r3
 80087f2:	bfde      	ittt	le
 80087f4:	2330      	movle	r3, #48	; 0x30
 80087f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087fe:	1b52      	subs	r2, r2, r5
 8008800:	6122      	str	r2, [r4, #16]
 8008802:	464b      	mov	r3, r9
 8008804:	4621      	mov	r1, r4
 8008806:	4640      	mov	r0, r8
 8008808:	f8cd a000 	str.w	sl, [sp]
 800880c:	aa03      	add	r2, sp, #12
 800880e:	f7ff fedf 	bl	80085d0 <_printf_common>
 8008812:	3001      	adds	r0, #1
 8008814:	d14c      	bne.n	80088b0 <_printf_i+0x200>
 8008816:	f04f 30ff 	mov.w	r0, #4294967295
 800881a:	b004      	add	sp, #16
 800881c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008820:	4834      	ldr	r0, [pc, #208]	; (80088f4 <_printf_i+0x244>)
 8008822:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008826:	6829      	ldr	r1, [r5, #0]
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	f851 6b04 	ldr.w	r6, [r1], #4
 800882e:	6029      	str	r1, [r5, #0]
 8008830:	061d      	lsls	r5, r3, #24
 8008832:	d514      	bpl.n	800885e <_printf_i+0x1ae>
 8008834:	07df      	lsls	r7, r3, #31
 8008836:	bf44      	itt	mi
 8008838:	f043 0320 	orrmi.w	r3, r3, #32
 800883c:	6023      	strmi	r3, [r4, #0]
 800883e:	b91e      	cbnz	r6, 8008848 <_printf_i+0x198>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	f023 0320 	bic.w	r3, r3, #32
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	2310      	movs	r3, #16
 800884a:	e7af      	b.n	80087ac <_printf_i+0xfc>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	f043 0320 	orr.w	r3, r3, #32
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	2378      	movs	r3, #120	; 0x78
 8008856:	4828      	ldr	r0, [pc, #160]	; (80088f8 <_printf_i+0x248>)
 8008858:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800885c:	e7e3      	b.n	8008826 <_printf_i+0x176>
 800885e:	0659      	lsls	r1, r3, #25
 8008860:	bf48      	it	mi
 8008862:	b2b6      	uxthmi	r6, r6
 8008864:	e7e6      	b.n	8008834 <_printf_i+0x184>
 8008866:	4615      	mov	r5, r2
 8008868:	e7bb      	b.n	80087e2 <_printf_i+0x132>
 800886a:	682b      	ldr	r3, [r5, #0]
 800886c:	6826      	ldr	r6, [r4, #0]
 800886e:	1d18      	adds	r0, r3, #4
 8008870:	6961      	ldr	r1, [r4, #20]
 8008872:	6028      	str	r0, [r5, #0]
 8008874:	0635      	lsls	r5, r6, #24
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	d501      	bpl.n	800887e <_printf_i+0x1ce>
 800887a:	6019      	str	r1, [r3, #0]
 800887c:	e002      	b.n	8008884 <_printf_i+0x1d4>
 800887e:	0670      	lsls	r0, r6, #25
 8008880:	d5fb      	bpl.n	800887a <_printf_i+0x1ca>
 8008882:	8019      	strh	r1, [r3, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	4615      	mov	r5, r2
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	e7ba      	b.n	8008802 <_printf_i+0x152>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	2100      	movs	r1, #0
 8008890:	1d1a      	adds	r2, r3, #4
 8008892:	602a      	str	r2, [r5, #0]
 8008894:	681d      	ldr	r5, [r3, #0]
 8008896:	6862      	ldr	r2, [r4, #4]
 8008898:	4628      	mov	r0, r5
 800889a:	f000 f82f 	bl	80088fc <memchr>
 800889e:	b108      	cbz	r0, 80088a4 <_printf_i+0x1f4>
 80088a0:	1b40      	subs	r0, r0, r5
 80088a2:	6060      	str	r0, [r4, #4]
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	6123      	str	r3, [r4, #16]
 80088a8:	2300      	movs	r3, #0
 80088aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ae:	e7a8      	b.n	8008802 <_printf_i+0x152>
 80088b0:	462a      	mov	r2, r5
 80088b2:	4649      	mov	r1, r9
 80088b4:	4640      	mov	r0, r8
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	47d0      	blx	sl
 80088ba:	3001      	adds	r0, #1
 80088bc:	d0ab      	beq.n	8008816 <_printf_i+0x166>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	079b      	lsls	r3, r3, #30
 80088c2:	d413      	bmi.n	80088ec <_printf_i+0x23c>
 80088c4:	68e0      	ldr	r0, [r4, #12]
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	4298      	cmp	r0, r3
 80088ca:	bfb8      	it	lt
 80088cc:	4618      	movlt	r0, r3
 80088ce:	e7a4      	b.n	800881a <_printf_i+0x16a>
 80088d0:	2301      	movs	r3, #1
 80088d2:	4632      	mov	r2, r6
 80088d4:	4649      	mov	r1, r9
 80088d6:	4640      	mov	r0, r8
 80088d8:	47d0      	blx	sl
 80088da:	3001      	adds	r0, #1
 80088dc:	d09b      	beq.n	8008816 <_printf_i+0x166>
 80088de:	3501      	adds	r5, #1
 80088e0:	68e3      	ldr	r3, [r4, #12]
 80088e2:	9903      	ldr	r1, [sp, #12]
 80088e4:	1a5b      	subs	r3, r3, r1
 80088e6:	42ab      	cmp	r3, r5
 80088e8:	dcf2      	bgt.n	80088d0 <_printf_i+0x220>
 80088ea:	e7eb      	b.n	80088c4 <_printf_i+0x214>
 80088ec:	2500      	movs	r5, #0
 80088ee:	f104 0619 	add.w	r6, r4, #25
 80088f2:	e7f5      	b.n	80088e0 <_printf_i+0x230>
 80088f4:	08008c71 	.word	0x08008c71
 80088f8:	08008c82 	.word	0x08008c82

080088fc <memchr>:
 80088fc:	4603      	mov	r3, r0
 80088fe:	b510      	push	{r4, lr}
 8008900:	b2c9      	uxtb	r1, r1
 8008902:	4402      	add	r2, r0
 8008904:	4293      	cmp	r3, r2
 8008906:	4618      	mov	r0, r3
 8008908:	d101      	bne.n	800890e <memchr+0x12>
 800890a:	2000      	movs	r0, #0
 800890c:	e003      	b.n	8008916 <memchr+0x1a>
 800890e:	7804      	ldrb	r4, [r0, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	428c      	cmp	r4, r1
 8008914:	d1f6      	bne.n	8008904 <memchr+0x8>
 8008916:	bd10      	pop	{r4, pc}

08008918 <memcpy>:
 8008918:	440a      	add	r2, r1
 800891a:	4291      	cmp	r1, r2
 800891c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008920:	d100      	bne.n	8008924 <memcpy+0xc>
 8008922:	4770      	bx	lr
 8008924:	b510      	push	{r4, lr}
 8008926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800892a:	4291      	cmp	r1, r2
 800892c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008930:	d1f9      	bne.n	8008926 <memcpy+0xe>
 8008932:	bd10      	pop	{r4, pc}

08008934 <memmove>:
 8008934:	4288      	cmp	r0, r1
 8008936:	b510      	push	{r4, lr}
 8008938:	eb01 0402 	add.w	r4, r1, r2
 800893c:	d902      	bls.n	8008944 <memmove+0x10>
 800893e:	4284      	cmp	r4, r0
 8008940:	4623      	mov	r3, r4
 8008942:	d807      	bhi.n	8008954 <memmove+0x20>
 8008944:	1e43      	subs	r3, r0, #1
 8008946:	42a1      	cmp	r1, r4
 8008948:	d008      	beq.n	800895c <memmove+0x28>
 800894a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800894e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008952:	e7f8      	b.n	8008946 <memmove+0x12>
 8008954:	4601      	mov	r1, r0
 8008956:	4402      	add	r2, r0
 8008958:	428a      	cmp	r2, r1
 800895a:	d100      	bne.n	800895e <memmove+0x2a>
 800895c:	bd10      	pop	{r4, pc}
 800895e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008966:	e7f7      	b.n	8008958 <memmove+0x24>

08008968 <_free_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4605      	mov	r5, r0
 800896c:	2900      	cmp	r1, #0
 800896e:	d040      	beq.n	80089f2 <_free_r+0x8a>
 8008970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008974:	1f0c      	subs	r4, r1, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	bfb8      	it	lt
 800897a:	18e4      	addlt	r4, r4, r3
 800897c:	f000 f910 	bl	8008ba0 <__malloc_lock>
 8008980:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <_free_r+0x8c>)
 8008982:	6813      	ldr	r3, [r2, #0]
 8008984:	b933      	cbnz	r3, 8008994 <_free_r+0x2c>
 8008986:	6063      	str	r3, [r4, #4]
 8008988:	6014      	str	r4, [r2, #0]
 800898a:	4628      	mov	r0, r5
 800898c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008990:	f000 b90c 	b.w	8008bac <__malloc_unlock>
 8008994:	42a3      	cmp	r3, r4
 8008996:	d908      	bls.n	80089aa <_free_r+0x42>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	1821      	adds	r1, r4, r0
 800899c:	428b      	cmp	r3, r1
 800899e:	bf01      	itttt	eq
 80089a0:	6819      	ldreq	r1, [r3, #0]
 80089a2:	685b      	ldreq	r3, [r3, #4]
 80089a4:	1809      	addeq	r1, r1, r0
 80089a6:	6021      	streq	r1, [r4, #0]
 80089a8:	e7ed      	b.n	8008986 <_free_r+0x1e>
 80089aa:	461a      	mov	r2, r3
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	b10b      	cbz	r3, 80089b4 <_free_r+0x4c>
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d9fa      	bls.n	80089aa <_free_r+0x42>
 80089b4:	6811      	ldr	r1, [r2, #0]
 80089b6:	1850      	adds	r0, r2, r1
 80089b8:	42a0      	cmp	r0, r4
 80089ba:	d10b      	bne.n	80089d4 <_free_r+0x6c>
 80089bc:	6820      	ldr	r0, [r4, #0]
 80089be:	4401      	add	r1, r0
 80089c0:	1850      	adds	r0, r2, r1
 80089c2:	4283      	cmp	r3, r0
 80089c4:	6011      	str	r1, [r2, #0]
 80089c6:	d1e0      	bne.n	800898a <_free_r+0x22>
 80089c8:	6818      	ldr	r0, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	4401      	add	r1, r0
 80089ce:	6011      	str	r1, [r2, #0]
 80089d0:	6053      	str	r3, [r2, #4]
 80089d2:	e7da      	b.n	800898a <_free_r+0x22>
 80089d4:	d902      	bls.n	80089dc <_free_r+0x74>
 80089d6:	230c      	movs	r3, #12
 80089d8:	602b      	str	r3, [r5, #0]
 80089da:	e7d6      	b.n	800898a <_free_r+0x22>
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	1821      	adds	r1, r4, r0
 80089e0:	428b      	cmp	r3, r1
 80089e2:	bf01      	itttt	eq
 80089e4:	6819      	ldreq	r1, [r3, #0]
 80089e6:	685b      	ldreq	r3, [r3, #4]
 80089e8:	1809      	addeq	r1, r1, r0
 80089ea:	6021      	streq	r1, [r4, #0]
 80089ec:	6063      	str	r3, [r4, #4]
 80089ee:	6054      	str	r4, [r2, #4]
 80089f0:	e7cb      	b.n	800898a <_free_r+0x22>
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	2000145c 	.word	0x2000145c

080089f8 <sbrk_aligned>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4e0e      	ldr	r6, [pc, #56]	; (8008a34 <sbrk_aligned+0x3c>)
 80089fc:	460c      	mov	r4, r1
 80089fe:	6831      	ldr	r1, [r6, #0]
 8008a00:	4605      	mov	r5, r0
 8008a02:	b911      	cbnz	r1, 8008a0a <sbrk_aligned+0x12>
 8008a04:	f000 f8bc 	bl	8008b80 <_sbrk_r>
 8008a08:	6030      	str	r0, [r6, #0]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 f8b7 	bl	8008b80 <_sbrk_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d00a      	beq.n	8008a2c <sbrk_aligned+0x34>
 8008a16:	1cc4      	adds	r4, r0, #3
 8008a18:	f024 0403 	bic.w	r4, r4, #3
 8008a1c:	42a0      	cmp	r0, r4
 8008a1e:	d007      	beq.n	8008a30 <sbrk_aligned+0x38>
 8008a20:	1a21      	subs	r1, r4, r0
 8008a22:	4628      	mov	r0, r5
 8008a24:	f000 f8ac 	bl	8008b80 <_sbrk_r>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d101      	bne.n	8008a30 <sbrk_aligned+0x38>
 8008a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8008a30:	4620      	mov	r0, r4
 8008a32:	bd70      	pop	{r4, r5, r6, pc}
 8008a34:	20001460 	.word	0x20001460

08008a38 <_malloc_r>:
 8008a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3c:	1ccd      	adds	r5, r1, #3
 8008a3e:	f025 0503 	bic.w	r5, r5, #3
 8008a42:	3508      	adds	r5, #8
 8008a44:	2d0c      	cmp	r5, #12
 8008a46:	bf38      	it	cc
 8008a48:	250c      	movcc	r5, #12
 8008a4a:	2d00      	cmp	r5, #0
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	db01      	blt.n	8008a54 <_malloc_r+0x1c>
 8008a50:	42a9      	cmp	r1, r5
 8008a52:	d905      	bls.n	8008a60 <_malloc_r+0x28>
 8008a54:	230c      	movs	r3, #12
 8008a56:	2600      	movs	r6, #0
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a60:	4e2e      	ldr	r6, [pc, #184]	; (8008b1c <_malloc_r+0xe4>)
 8008a62:	f000 f89d 	bl	8008ba0 <__malloc_lock>
 8008a66:	6833      	ldr	r3, [r6, #0]
 8008a68:	461c      	mov	r4, r3
 8008a6a:	bb34      	cbnz	r4, 8008aba <_malloc_r+0x82>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f7ff ffc2 	bl	80089f8 <sbrk_aligned>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	4604      	mov	r4, r0
 8008a78:	d14d      	bne.n	8008b16 <_malloc_r+0xde>
 8008a7a:	6834      	ldr	r4, [r6, #0]
 8008a7c:	4626      	mov	r6, r4
 8008a7e:	2e00      	cmp	r6, #0
 8008a80:	d140      	bne.n	8008b04 <_malloc_r+0xcc>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	4631      	mov	r1, r6
 8008a86:	4638      	mov	r0, r7
 8008a88:	eb04 0803 	add.w	r8, r4, r3
 8008a8c:	f000 f878 	bl	8008b80 <_sbrk_r>
 8008a90:	4580      	cmp	r8, r0
 8008a92:	d13a      	bne.n	8008b0a <_malloc_r+0xd2>
 8008a94:	6821      	ldr	r1, [r4, #0]
 8008a96:	3503      	adds	r5, #3
 8008a98:	1a6d      	subs	r5, r5, r1
 8008a9a:	f025 0503 	bic.w	r5, r5, #3
 8008a9e:	3508      	adds	r5, #8
 8008aa0:	2d0c      	cmp	r5, #12
 8008aa2:	bf38      	it	cc
 8008aa4:	250c      	movcc	r5, #12
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7ff ffa5 	bl	80089f8 <sbrk_aligned>
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d02b      	beq.n	8008b0a <_malloc_r+0xd2>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	442b      	add	r3, r5
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	e00e      	b.n	8008ad8 <_malloc_r+0xa0>
 8008aba:	6822      	ldr	r2, [r4, #0]
 8008abc:	1b52      	subs	r2, r2, r5
 8008abe:	d41e      	bmi.n	8008afe <_malloc_r+0xc6>
 8008ac0:	2a0b      	cmp	r2, #11
 8008ac2:	d916      	bls.n	8008af2 <_malloc_r+0xba>
 8008ac4:	1961      	adds	r1, r4, r5
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	6025      	str	r5, [r4, #0]
 8008aca:	bf18      	it	ne
 8008acc:	6059      	strne	r1, [r3, #4]
 8008ace:	6863      	ldr	r3, [r4, #4]
 8008ad0:	bf08      	it	eq
 8008ad2:	6031      	streq	r1, [r6, #0]
 8008ad4:	5162      	str	r2, [r4, r5]
 8008ad6:	604b      	str	r3, [r1, #4]
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f104 060b 	add.w	r6, r4, #11
 8008ade:	f000 f865 	bl	8008bac <__malloc_unlock>
 8008ae2:	f026 0607 	bic.w	r6, r6, #7
 8008ae6:	1d23      	adds	r3, r4, #4
 8008ae8:	1af2      	subs	r2, r6, r3
 8008aea:	d0b6      	beq.n	8008a5a <_malloc_r+0x22>
 8008aec:	1b9b      	subs	r3, r3, r6
 8008aee:	50a3      	str	r3, [r4, r2]
 8008af0:	e7b3      	b.n	8008a5a <_malloc_r+0x22>
 8008af2:	6862      	ldr	r2, [r4, #4]
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	bf0c      	ite	eq
 8008af8:	6032      	streq	r2, [r6, #0]
 8008afa:	605a      	strne	r2, [r3, #4]
 8008afc:	e7ec      	b.n	8008ad8 <_malloc_r+0xa0>
 8008afe:	4623      	mov	r3, r4
 8008b00:	6864      	ldr	r4, [r4, #4]
 8008b02:	e7b2      	b.n	8008a6a <_malloc_r+0x32>
 8008b04:	4634      	mov	r4, r6
 8008b06:	6876      	ldr	r6, [r6, #4]
 8008b08:	e7b9      	b.n	8008a7e <_malloc_r+0x46>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	f000 f84c 	bl	8008bac <__malloc_unlock>
 8008b14:	e7a1      	b.n	8008a5a <_malloc_r+0x22>
 8008b16:	6025      	str	r5, [r4, #0]
 8008b18:	e7de      	b.n	8008ad8 <_malloc_r+0xa0>
 8008b1a:	bf00      	nop
 8008b1c:	2000145c 	.word	0x2000145c

08008b20 <_realloc_r>:
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	4680      	mov	r8, r0
 8008b26:	4614      	mov	r4, r2
 8008b28:	460e      	mov	r6, r1
 8008b2a:	b921      	cbnz	r1, 8008b36 <_realloc_r+0x16>
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b32:	f7ff bf81 	b.w	8008a38 <_malloc_r>
 8008b36:	b92a      	cbnz	r2, 8008b44 <_realloc_r+0x24>
 8008b38:	f7ff ff16 	bl	8008968 <_free_r>
 8008b3c:	4625      	mov	r5, r4
 8008b3e:	4628      	mov	r0, r5
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	f000 f838 	bl	8008bb8 <_malloc_usable_size_r>
 8008b48:	4284      	cmp	r4, r0
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	d802      	bhi.n	8008b54 <_realloc_r+0x34>
 8008b4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b52:	d812      	bhi.n	8008b7a <_realloc_r+0x5a>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4640      	mov	r0, r8
 8008b58:	f7ff ff6e 	bl	8008a38 <_malloc_r>
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d0ed      	beq.n	8008b3e <_realloc_r+0x1e>
 8008b62:	42bc      	cmp	r4, r7
 8008b64:	4622      	mov	r2, r4
 8008b66:	4631      	mov	r1, r6
 8008b68:	bf28      	it	cs
 8008b6a:	463a      	movcs	r2, r7
 8008b6c:	f7ff fed4 	bl	8008918 <memcpy>
 8008b70:	4631      	mov	r1, r6
 8008b72:	4640      	mov	r0, r8
 8008b74:	f7ff fef8 	bl	8008968 <_free_r>
 8008b78:	e7e1      	b.n	8008b3e <_realloc_r+0x1e>
 8008b7a:	4635      	mov	r5, r6
 8008b7c:	e7df      	b.n	8008b3e <_realloc_r+0x1e>
	...

08008b80 <_sbrk_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	2300      	movs	r3, #0
 8008b84:	4d05      	ldr	r5, [pc, #20]	; (8008b9c <_sbrk_r+0x1c>)
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	f7f7 feae 	bl	80008ec <_sbrk>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_sbrk_r+0x1a>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_sbrk_r+0x1a>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20001464 	.word	0x20001464

08008ba0 <__malloc_lock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__malloc_lock+0x8>)
 8008ba2:	f000 b811 	b.w	8008bc8 <__retarget_lock_acquire_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	20001468 	.word	0x20001468

08008bac <__malloc_unlock>:
 8008bac:	4801      	ldr	r0, [pc, #4]	; (8008bb4 <__malloc_unlock+0x8>)
 8008bae:	f000 b80c 	b.w	8008bca <__retarget_lock_release_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	20001468 	.word	0x20001468

08008bb8 <_malloc_usable_size_r>:
 8008bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bbc:	1f18      	subs	r0, r3, #4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bfbc      	itt	lt
 8008bc2:	580b      	ldrlt	r3, [r1, r0]
 8008bc4:	18c0      	addlt	r0, r0, r3
 8008bc6:	4770      	bx	lr

08008bc8 <__retarget_lock_acquire_recursive>:
 8008bc8:	4770      	bx	lr

08008bca <__retarget_lock_release_recursive>:
 8008bca:	4770      	bx	lr

08008bcc <_init>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_fini>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr
