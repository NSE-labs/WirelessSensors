
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b44  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009c80  08009c80  00019c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d48  08009d48  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d50  08009d50  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  200001e0  08009f38  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  08009f38  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d47  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030de  00000000  00000000  00031f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00035030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00035f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acc  00000000  00000000  00036d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143e8  00000000  00000000  0004d82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c497  00000000  00000000  00061c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de0ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  000de0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08009c68 	.word	0x08009c68

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08009c68 	.word	0x08009c68

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0c2      	sub	sp, #264	; 0x108
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fada 	bl	8000a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f85b 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f90d 	bl	80006c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f8a9 	bl	80005fc <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8d5 	bl	8000658 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f008 fa7f 	bl	80089b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* initialize the LoRa chip */
  LoRa_Init(&hspi1);
 80004b2:	4825      	ldr	r0, [pc, #148]	; (8000548 <main+0xb4>)
 80004b4:	f008 f870 	bl	8008598 <LoRa_Init>

  /* Send a status message to USB port */
  uint8_t buffer[256];
  sprintf((char *)buffer, "Entering transmit loop\r\n");
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	4924      	ldr	r1, [pc, #144]	; (800054c <main+0xb8>)
 80004bc:	4618      	mov	r0, r3
 80004be:	f008 ff59 	bl	8009374 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe59 	bl	800017c <strlen>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f008 fb2a 	bl	8008b2c <CDC_Transmit_FS>

  int count = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 80004de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80004e2:	3301      	adds	r3, #1
 80004e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  sprintf((char *)buffer, "Count = %d", count);
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80004ee:	4918      	ldr	r1, [pc, #96]	; (8000550 <main+0xbc>)
 80004f0:	4618      	mov	r0, r3
 80004f2:	f008 ff3f 	bl	8009374 <siprintf>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); /* Turn on the LED */
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fc:	4815      	ldr	r0, [pc, #84]	; (8000554 <main+0xc0>)
 80004fe:	f000 fdde 	bl	80010be <HAL_GPIO_WritePin>
	  LoRaTransmit(buffer, strlen((char *)buffer));
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe39 	bl	800017c <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b2da      	uxtb	r2, r3
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f008 f914 	bl	8008740 <LoRaTransmit>
	  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off the LED */
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <main+0xc0>)
 8000520:	f000 fdcd 	bl	80010be <HAL_GPIO_WritePin>
	  LoRaReceive(buffer, 0); /* go to receive mode with timeout = 0 (wait forever for one message) */
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f008 f991 	bl	8008850 <LoRaReceive>
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe23 	bl	800017c <strlen>
 8000536:	4603      	mov	r3, r0
 8000538:	b29a      	uxth	r2, r3
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f008 faf4 	bl	8008b2c <CDC_Transmit_FS>
	  count++;
 8000544:	e7cb      	b.n	80004de <main+0x4a>
 8000546:	bf00      	nop
 8000548:	20000250 	.word	0x20000250
 800054c:	08009c80 	.word	0x08009c80
 8000550:	08009c9c 	.word	0x08009c9c
 8000554:	40020800 	.word	0x40020800

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b092      	sub	sp, #72	; 0x48
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f008 fefc 	bl	8009364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xa0>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000582:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <SystemClock_Config+0xa0>)
 8000584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000588:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800058a:	2303      	movs	r3, #3
 800058c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fb0b 	bl	8002bd0 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005c0:	f000 f8f8 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	2301      	movs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fe26 	bl	8003230 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ea:	f000 f8e3 	bl	80007b4 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3748      	adds	r7, #72	; 0x48
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C1_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_I2C1_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_I2C1_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_I2C1_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_I2C1_Init+0x50>)
 800063a:	f000 fd59 	bl	80010f0 <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f8b6 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200001fc 	.word	0x200001fc
 8000650:	40005400 	.word	0x40005400
 8000654:	000186a0 	.word	0x000186a0

08000658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_SPI1_Init+0x60>)
 800065e:	4a17      	ldr	r2, [pc, #92]	; (80006bc <MX_SPI1_Init+0x64>)
 8000660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_SPI1_Init+0x60>)
 8000664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_SPI1_Init+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_SPI1_Init+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_SPI1_Init+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_SPI1_Init+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_SPI1_Init+0x60>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_SPI1_Init+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_SPI1_Init+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_SPI1_Init+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_SPI1_Init+0x60>)
 800069e:	220a      	movs	r2, #10
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_SPI1_Init+0x60>)
 80006a4:	f003 f874 	bl	8003790 <HAL_SPI_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80006ae:	f000 f881 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000250 	.word	0x20000250
 80006bc:	40013000 	.word	0x40013000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <MX_GPIO_Init+0xe8>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a33      	ldr	r2, [pc, #204]	; (80007a8 <MX_GPIO_Init+0xe8>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <MX_GPIO_Init+0xe8>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <MX_GPIO_Init+0xe8>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a2d      	ldr	r2, [pc, #180]	; (80007a8 <MX_GPIO_Init+0xe8>)
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <MX_GPIO_Init+0xe8>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <MX_GPIO_Init+0xe8>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <MX_GPIO_Init+0xe8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	61d3      	str	r3, [r2, #28]
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xe8>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <MX_GPIO_Init+0xe8>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <MX_GPIO_Init+0xe8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xe8>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073c:	481b      	ldr	r0, [pc, #108]	; (80007ac <MX_GPIO_Init+0xec>)
 800073e:	f000 fcbe 	bl	80010be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2111      	movs	r1, #17
 8000746:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_GPIO_Init+0xf0>)
 8000748:	f000 fcb9 	bl	80010be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800074c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <MX_GPIO_Init+0xec>)
 8000766:	f000 fb13 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin;
 800076a:	2311      	movs	r3, #17
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_GPIO_Init+0xf0>)
 8000782:	f000 fb05 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 8000786:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_GPIO_Init+0xf0>)
 800079c:	f000 faf8 	bl	8000d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020000 	.word	0x40020000

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_MspInit+0x58>)
 80007c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <HAL_MspInit+0x58>)
 80007cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d0:	6253      	str	r3, [r2, #36]	; 0x24
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_MspInit+0x58>)
 80007d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_MspInit+0x58>)
 80007e0:	6a1b      	ldr	r3, [r3, #32]
 80007e2:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <HAL_MspInit+0x58>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6213      	str	r3, [r2, #32]
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_MspInit+0x58>)
 80007ec:	6a1b      	ldr	r3, [r3, #32]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_MspInit+0x58>)
 80007f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fa:	4a07      	ldr	r2, [pc, #28]	; (8000818 <HAL_MspInit+0x58>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6253      	str	r3, [r2, #36]	; 0x24
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_MspInit+0x58>)
 8000804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_I2C_MspInit+0x7c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d127      	bne.n	800088e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_I2C_MspInit+0x80>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <HAL_I2C_MspInit+0x80>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_I2C_MspInit+0x80>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000856:	23c0      	movs	r3, #192	; 0xc0
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085a:	2312      	movs	r3, #18
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000866:	2304      	movs	r3, #4
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <HAL_I2C_MspInit+0x84>)
 8000872:	f000 fa8d 	bl	8000d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_I2C_MspInit+0x80>)
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_I2C_MspInit+0x80>)
 800087c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000880:	6253      	str	r3, [r2, #36]	; 0x24
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_I2C_MspInit+0x80>)
 8000884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40005400 	.word	0x40005400
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400

080008a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <HAL_SPI_MspInit+0x7c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d127      	bne.n	8000916 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008c8:	6a1b      	ldr	r3, [r3, #32]
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008d0:	6213      	str	r3, [r2, #32]
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008d4:	6a1b      	ldr	r3, [r3, #32]
 80008d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008f6:	23e0      	movs	r3, #224	; 0xe0
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000906:	2305      	movs	r3, #5
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_SPI_MspInit+0x84>)
 8000912:	f000 fa3d 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40013000 	.word	0x40013000
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000972:	f000 f8c1 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <USB_LP_IRQHandler+0x10>)
 8000982:	f000 fdfd 	bl	8001580 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000f54 	.word	0x20000f54

08000990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000998:	4a14      	ldr	r2, [pc, #80]	; (80009ec <_sbrk+0x5c>)
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <_sbrk+0x60>)
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <_sbrk+0x64>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <_sbrk+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d207      	bcs.n	80009d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c0:	f008 fca6 	bl	8009310 <__errno>
 80009c4:	4603      	mov	r3, r0
 80009c6:	220c      	movs	r2, #12
 80009c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	e009      	b.n	80009e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <_sbrk+0x64>)
 80009e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20002800 	.word	0x20002800
 80009f0:	00000400 	.word	0x00000400
 80009f4:	200002a8 	.word	0x200002a8
 80009f8:	20001470 	.word	0x20001470

080009fc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2e:	f7ff ffe5 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f008 fc73 	bl	800931c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a36:	f7ff fd2d 	bl	8000494 <main>
  bx lr
 8000a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a44:	08009d58 	.word	0x08009d58
  ldr r2, =_sbss
 8000a48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a4c:	20001470 	.word	0x20001470

08000a50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_IRQHandler>

08000a52 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f955 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f80e 	bl	8000a84 <HAL_InitTick>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	e001      	b.n	8000a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a74:	f7ff fea4 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_InitTick+0x68>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d022      	beq.n	8000ade <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_InitTick+0x6c>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_InitTick+0x68>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f962 	bl	8000d76 <HAL_SYSTICK_Config>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10f      	bne.n	8000ad8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d809      	bhi.n	8000ad2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac6:	f000 f92c 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_InitTick+0x70>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e007      	b.n	8000ae2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e004      	b.n	8000ae2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e001      	b.n	8000ae2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x1c>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x20>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <HAL_IncTick+0x1c>)
 8000b08:	6013      	str	r3, [r2, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200002ac 	.word	0x200002ac
 8000b18:	20000008 	.word	0x20000008

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <HAL_GetTick+0x10>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	200002ac 	.word	0x200002ac

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff fff0 	bl	8000b1c <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d004      	beq.n	8000b54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_Delay+0x40>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4413      	add	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b54:	bf00      	nop
 8000b56:	f7ff ffe1 	bl	8000b1c <HAL_GetTick>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d8f7      	bhi.n	8000b56 <HAL_Delay+0x26>
  {
  }
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000008 	.word	0x20000008

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4906      	ldr	r1, [pc, #24]	; (8000c0c <__NVIC_EnableIRQ+0x34>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff90 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff2d 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff42 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff90 	bl	8000c64 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5f 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff35 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa2 	bl	8000cc8 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000da6:	e154      	b.n	8001052 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8146 	beq.w	800104c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d005      	beq.n	8000dd8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d130      	bne.n	8000e3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	f003 0201 	and.w	r2, r3, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d017      	beq.n	8000e76 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d123      	bne.n	8000eca <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	6939      	ldr	r1, [r7, #16]
 8000ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0203 	and.w	r2, r3, #3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 80a0 	beq.w	800104c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0c:	4b58      	ldr	r3, [pc, #352]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a57      	ldr	r2, [pc, #348]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	4b55      	ldr	r3, [pc, #340]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f24:	4a53      	ldr	r2, [pc, #332]	; (8001074 <HAL_GPIO_Init+0x2e4>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a4b      	ldr	r2, [pc, #300]	; (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d019      	beq.n	8000f84 <HAL_GPIO_Init+0x1f4>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a4a      	ldr	r2, [pc, #296]	; (800107c <HAL_GPIO_Init+0x2ec>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d013      	beq.n	8000f80 <HAL_GPIO_Init+0x1f0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x2f0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d00d      	beq.n	8000f7c <HAL_GPIO_Init+0x1ec>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x2f4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d007      	beq.n	8000f78 <HAL_GPIO_Init+0x1e8>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a47      	ldr	r2, [pc, #284]	; (8001088 <HAL_GPIO_Init+0x2f8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d101      	bne.n	8000f74 <HAL_GPIO_Init+0x1e4>
 8000f70:	2304      	movs	r3, #4
 8000f72:	e008      	b.n	8000f86 <HAL_GPIO_Init+0x1f6>
 8000f74:	2305      	movs	r3, #5
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x1f6>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x1f6>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x1f6>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x1f6>
 8000f84:	2300      	movs	r3, #0
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f96:	4937      	ldr	r1, [pc, #220]	; (8001074 <HAL_GPIO_Init+0x2e4>)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fc8:	4a30      	ldr	r2, [pc, #192]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff2:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_GPIO_Init+0x2fc>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001046:	4a11      	ldr	r2, [pc, #68]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f aea3 	bne.w	8000da8 <HAL_GPIO_Init+0x18>
  }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40010000 	.word	0x40010000
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40021000 	.word	0x40021000
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ce:	787b      	ldrb	r3, [r7, #1]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010da:	e003      	b.n	80010e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	041a      	lsls	r2, r3, #16
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e12b      	b.n	800135a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fb80 	bl	800081c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001154:	f002 faa8 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8001158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a81      	ldr	r2, [pc, #516]	; (8001364 <HAL_I2C_Init+0x274>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d807      	bhi.n	8001174 <HAL_I2C_Init+0x84>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a80      	ldr	r2, [pc, #512]	; (8001368 <HAL_I2C_Init+0x278>)
 8001168:	4293      	cmp	r3, r2
 800116a:	bf94      	ite	ls
 800116c:	2301      	movls	r3, #1
 800116e:	2300      	movhi	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	e006      	b.n	8001182 <HAL_I2C_Init+0x92>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a7d      	ldr	r2, [pc, #500]	; (800136c <HAL_I2C_Init+0x27c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	bf94      	ite	ls
 800117c:	2301      	movls	r3, #1
 800117e:	2300      	movhi	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0e7      	b.n	800135a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4a78      	ldr	r2, [pc, #480]	; (8001370 <HAL_I2C_Init+0x280>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a6a      	ldr	r2, [pc, #424]	; (8001364 <HAL_I2C_Init+0x274>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d802      	bhi.n	80011c4 <HAL_I2C_Init+0xd4>
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	3301      	adds	r3, #1
 80011c2:	e009      	b.n	80011d8 <HAL_I2C_Init+0xe8>
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	4a69      	ldr	r2, [pc, #420]	; (8001374 <HAL_I2C_Init+0x284>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	3301      	adds	r3, #1
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	430b      	orrs	r3, r1
 80011de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	495c      	ldr	r1, [pc, #368]	; (8001364 <HAL_I2C_Init+0x274>)
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d819      	bhi.n	800122c <HAL_I2C_Init+0x13c>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1e59      	subs	r1, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fbb1 f3f3 	udiv	r3, r1, r3
 8001206:	1c59      	adds	r1, r3, #1
 8001208:	f640 73fc 	movw	r3, #4092	; 0xffc
 800120c:	400b      	ands	r3, r1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <HAL_I2C_Init+0x138>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1e59      	subs	r1, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001220:	3301      	adds	r3, #1
 8001222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001226:	e051      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 8001228:	2304      	movs	r3, #4
 800122a:	e04f      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d111      	bne.n	8001258 <HAL_I2C_Init+0x168>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1e58      	subs	r0, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	440b      	add	r3, r1
 8001242:	fbb0 f3f3 	udiv	r3, r0, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	e012      	b.n	800127e <HAL_I2C_Init+0x18e>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1e58      	subs	r0, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	0099      	lsls	r1, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	fbb0 f3f3 	udiv	r3, r0, r3
 800126e:	3301      	adds	r3, #1
 8001270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_I2C_Init+0x196>
 8001282:	2301      	movs	r3, #1
 8001284:	e022      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10e      	bne.n	80012ac <HAL_I2C_Init+0x1bc>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1e58      	subs	r0, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6859      	ldr	r1, [r3, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	440b      	add	r3, r1
 800129c:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012aa:	e00f      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1e58      	subs	r0, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	0099      	lsls	r1, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	6809      	ldr	r1, [r1, #0]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69da      	ldr	r2, [r3, #28]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6911      	ldr	r1, [r2, #16]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68d2      	ldr	r2, [r2, #12]
 8001306:	4311      	orrs	r1, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	430b      	orrs	r3, r1
 800130e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2220      	movs	r2, #32
 8001346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	000186a0 	.word	0x000186a0
 8001368:	001e847f 	.word	0x001e847f
 800136c:	003d08ff 	.word	0x003d08ff
 8001370:	431bde83 	.word	0x431bde83
 8001374:	10624dd3 	.word	0x10624dd3

08001378 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af06      	add	r7, sp, #24
 800137e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0d0      	b.n	800152c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f007 fd16 	bl	8008dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 ff9f 	bl	80042f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e04c      	b.n	8001456 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	3301      	adds	r3, #1
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	b298      	uxth	r0, r3
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	3336      	adds	r3, #54	; 0x36
 80013fa:	4602      	mov	r2, r0
 80013fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3303      	adds	r3, #3
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3338      	adds	r3, #56	; 0x38
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	333c      	adds	r3, #60	; 0x3c
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	3340      	adds	r3, #64	; 0x40
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3301      	adds	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3ad      	bcc.n	80013bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e044      	b.n	80014f0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	3301      	adds	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3b5      	bcc.n	8001466 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	687e      	ldr	r6, [r7, #4]
 8001502:	466d      	mov	r5, sp
 8001504:	f106 0410 	add.w	r4, r6, #16
 8001508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	602b      	str	r3, [r5, #0]
 8001510:	1d33      	adds	r3, r6, #4
 8001512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001514:	6838      	ldr	r0, [r7, #0]
 8001516:	f002 ff07 	bl	8004328 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001534 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_PCD_Start+0x16>
 8001546:	2302      	movs	r3, #2
 8001548:	e016      	b.n	8001578 <HAL_PCD_Start+0x44>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f002 feb6 	bl	80042c8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800155c:	2101      	movs	r1, #1
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f007 fc18 	bl	8008d94 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f005 fb9b 	bl	8006ca4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f005 fb93 	bl	8006cb8 <USB_ReadInterrupts>
 8001592:	4603      	mov	r3, r0
 8001594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800159c:	d102      	bne.n	80015a4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 faf5 	bl	8001b8e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 fb85 	bl	8006cb8 <USB_ReadInterrupts>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b8:	d112      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015cc:	b292      	uxth	r2, r2
 80015ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f007 fc77 	bl	8008ec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015d8:	2100      	movs	r1, #0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f8c7 	bl	800176e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 fb67 	bl	8006cb8 <USB_ReadInterrupts>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f4:	d10b      	bne.n	800160e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f005 fb50 	bl	8006cb8 <USB_ReadInterrupts>
 8001618:	4603      	mov	r3, r0
 800161a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001622:	d10b      	bne.n	800163c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162c:	b29a      	uxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001636:	b292      	uxth	r2, r2
 8001638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f005 fb39 	bl	8006cb8 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001650:	d126      	bne.n	80016a0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0204 	bic.w	r2, r2, #4
 8001664:	b292      	uxth	r2, r2
 8001666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0208 	bic.w	r2, r2, #8
 800167c:	b292      	uxth	r2, r2
 800167e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f007 fc58 	bl	8008f38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800169a:	b292      	uxth	r2, r2
 800169c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 fb07 	bl	8006cb8 <USB_ReadInterrupts>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016b4:	d126      	bne.n	8001704 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0208 	orr.w	r2, r2, #8
 80016c8:	b292      	uxth	r2, r2
 80016ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e0:	b292      	uxth	r2, r2
 80016e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0204 	orr.w	r2, r2, #4
 80016f8:	b292      	uxth	r2, r2
 80016fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f007 fc00 	bl	8008f04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f005 fad5 	bl	8006cb8 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001718:	d10e      	bne.n	8001738 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800172c:	b292      	uxth	r2, r2
 800172e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f007 fbb9 	bl	8008eaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f005 fabb 	bl	8006cb8 <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800174c:	d10b      	bne.n	8001766 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001756:	b29a      	uxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001760:	b292      	uxth	r2, r2
 8001762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_PCD_SetAddress+0x1a>
 8001784:	2302      	movs	r3, #2
 8001786:	e013      	b.n	80017b0 <HAL_PCD_SetAddress+0x42>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 fa6c 	bl	8006c7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	460b      	mov	r3, r1
 80017cc:	803b      	strh	r3, [r7, #0]
 80017ce:	4613      	mov	r3, r2
 80017d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	da0e      	bge.n	80017fc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2201      	movs	r2, #1
 80017f8:	705a      	strb	r2, [r3, #1]
 80017fa:	e00e      	b.n	800181a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	f003 0207 	and.w	r2, r3, #7
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001826:	883a      	ldrh	r2, [r7, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	78ba      	ldrb	r2, [r7, #2]
 8001830:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001844:	78bb      	ldrb	r3, [r7, #2]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d102      	bne.n	8001850 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_PCD_EP_Open+0xa6>
 800185a:	2302      	movs	r3, #2
 800185c:	e00e      	b.n	800187c <HAL_PCD_EP_Open+0xc4>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fd7b 	bl	8004368 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800187a:	7afb      	ldrb	r3, [r7, #11]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	da0e      	bge.n	80018b6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	705a      	strb	r2, [r3, #1]
 80018b4:	e00e      	b.n	80018d4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	f003 0207 	and.w	r2, r3, #7
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_PCD_EP_Close+0x6a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e00e      	b.n	800190c <HAL_PCD_EP_Close+0x88>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68f9      	ldr	r1, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 f89d 	bl	8004a3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	460b      	mov	r3, r1
 8001922:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001924:	7afb      	ldrb	r3, [r7, #11]
 8001926:	f003 0207 	and.w	r2, r3, #7
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2200      	movs	r2, #0
 8001952:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	b2da      	uxtb	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6979      	ldr	r1, [r7, #20]
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fa4f 	bl	8004e14 <USB_EPStartXfer>
 8001976:	e005      	b.n	8001984 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6979      	ldr	r1, [r7, #20]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fa48 	bl	8004e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 0207 	and.w	r2, r3, #7
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019b0:	681b      	ldr	r3, [r3, #0]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	460b      	mov	r3, r1
 80019ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2201      	movs	r2, #1
 8001a06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6979      	ldr	r1, [r7, #20]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f9f5 	bl	8004e14 <USB_EPStartXfer>
 8001a2a:	e005      	b.n	8001a38 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6979      	ldr	r1, [r7, #20]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 f9ee 	bl	8004e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 0207 	and.w	r2, r3, #7
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d901      	bls.n	8001a60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e03e      	b.n	8001ade <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da0e      	bge.n	8001a86 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2201      	movs	r2, #1
 8001a82:	705a      	strb	r2, [r3, #1]
 8001a84:	e00c      	b.n	8001aa0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_PCD_EP_SetStall+0x7e>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e00e      	b.n	8001ade <HAL_PCD_EP_SetStall+0x9c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68f9      	ldr	r1, [r7, #12]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 ffd8 	bl	8006a84 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 020f 	and.w	r2, r3, #15
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d901      	bls.n	8001b04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e040      	b.n	8001b86 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da0e      	bge.n	8001b2a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	705a      	strb	r2, [r3, #1]
 8001b28:	e00e      	b.n	8001b48 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	f003 0207 	and.w	r2, r3, #7
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_PCD_EP_ClrStall+0x82>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e00e      	b.n	8001b86 <HAL_PCD_EP_ClrStall+0xa0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 ffd4 	bl	8006b24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b08e      	sub	sp, #56	; 0x38
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b96:	e2ec      	b.n	8002172 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ba0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001bae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 8161 	bne.w	8001e7a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d152      	bne.n	8001c68 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd2:	81fb      	strh	r3, [r7, #14]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	89fb      	ldrh	r3, [r7, #14]
 8001bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3328      	adds	r3, #40	; 0x28
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3302      	adds	r3, #2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	441a      	add	r2, r3
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c26:	2100      	movs	r1, #0
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f007 f924 	bl	8008e76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 829b 	beq.w	8002172 <PCD_EP_ISR_Handler+0x5e4>
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 8296 	bne.w	8002172 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c66:	e284      	b.n	8002172 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d034      	beq.n	8001cec <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	3306      	adds	r3, #6
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f005 f84d 	bl	8006d60 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	823b      	strh	r3, [r7, #16]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	8a3a      	ldrh	r2, [r7, #16]
 8001cdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f007 f899 	bl	8008e1c <HAL_PCD_SetupStageCallback>
 8001cea:	e242      	b.n	8002172 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f280 823e 	bge.w	8002172 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d02:	4013      	ands	r3, r2
 8001d04:	83bb      	strh	r3, [r7, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	8bba      	ldrh	r2, [r7, #28]
 8001d0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d10:	b292      	uxth	r2, r2
 8001d12:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	3306      	adds	r3, #6
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d019      	beq.n	8001d7c <PCD_EP_ISR_Handler+0x1ee>
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d015      	beq.n	8001d7c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	6959      	ldr	r1, [r3, #20]
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f004 fffd 	bl	8006d60 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	441a      	add	r2, r3
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d74:	2100      	movs	r1, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f007 f862 	bl	8008e40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 81f2 	bne.w	8002172 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	4413      	add	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d112      	bne.n	8001ddc <PCD_EP_ISR_Handler+0x24e>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	e02f      	b.n	8001e3c <PCD_EP_ISR_Handler+0x2ae>
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b3e      	cmp	r3, #62	; 0x3e
 8001de2:	d813      	bhi.n	8001e0c <PCD_EP_ISR_Handler+0x27e>
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <PCD_EP_ISR_Handler+0x270>
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	e017      	b.n	8001e3c <PCD_EP_ISR_Handler+0x2ae>
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <PCD_EP_ISR_Handler+0x298>
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	3b01      	subs	r3, #1
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	029b      	lsls	r3, r3, #10
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4c:	827b      	strh	r3, [r7, #18]
 8001e4e:	8a7b      	ldrh	r3, [r7, #18]
 8001e50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e54:	827b      	strh	r3, [r7, #18]
 8001e56:	8a7b      	ldrh	r3, [r7, #18]
 8001e58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e5c:	827b      	strh	r3, [r7, #18]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	8a7b      	ldrh	r3, [r7, #18]
 8001e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	8013      	strh	r3, [r2, #0]
 8001e78:	e17b      	b.n	8002172 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f280 80ea 	bge.w	800206a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eac:	4013      	ands	r3, r2
 8001eae:	853b      	strh	r3, [r7, #40]	; 0x28
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ec0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ec8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	7b1b      	ldrb	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d122      	bne.n	8001f2c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3306      	adds	r3, #6
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8087 	beq.w	8002026 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	6959      	ldr	r1, [r3, #20]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	88da      	ldrh	r2, [r3, #6]
 8001f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f26:	f004 ff1b 	bl	8006d60 <USB_ReadPMA>
 8001f2a:	e07c      	b.n	8002026 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	78db      	ldrb	r3, [r3, #3]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d108      	bne.n	8001f46 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f36:	461a      	mov	r2, r3
 8001f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f927 	bl	800218e <HAL_PCD_EP_DB_Receive>
 8001f40:	4603      	mov	r3, r0
 8001f42:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f44:	e06f      	b.n	8002026 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f60:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	441a      	add	r2, r3
 8001f70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d02a      	beq.n	8002026 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	6959      	ldr	r1, [r3, #20]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	891a      	ldrh	r2, [r3, #8]
 8001fdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fde:	f004 febf 	bl	8006d60 <USB_ReadPMA>
 8001fe2:	e020      	b.n	8002026 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800200e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	6959      	ldr	r1, [r3, #20]
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	895a      	ldrh	r2, [r3, #10]
 8002020:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002022:	f004 fe9d 	bl	8006d60 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800202c:	441a      	add	r2, r3
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002038:	441a      	add	r2, r3
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <PCD_EP_ISR_Handler+0x4c2>
 8002046:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d206      	bcs.n	800205e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f006 fef2 	bl	8008e40 <HAL_PCD_DataOutStageCallback>
 800205c:	e005      	b.n	800206a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fed5 	bl	8004e14 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800206a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b00      	cmp	r3, #0
 8002072:	d07e      	beq.n	8002172 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002074:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800209e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a2:	843b      	strh	r3, [r7, #32]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	8c3b      	ldrh	r3, [r7, #32]
 80020b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020bc:	b29b      	uxth	r3, r3
 80020be:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	78db      	ldrb	r3, [r3, #3]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d00c      	beq.n	80020e2 <PCD_EP_ISR_Handler+0x554>
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	78db      	ldrb	r3, [r3, #3]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d146      	bne.n	8002166 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d141      	bne.n	8002166 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	3302      	adds	r3, #2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	8bfb      	ldrh	r3, [r7, #30]
 8002112:	429a      	cmp	r2, r3
 8002114:	d906      	bls.n	8002124 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	8bfb      	ldrh	r3, [r7, #30]
 800211c:	1ad2      	subs	r2, r2, r3
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	619a      	str	r2, [r3, #24]
 8002122:	e002      	b.n	800212a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f006 fe9c 	bl	8008e76 <HAL_PCD_DataInStageCallback>
 800213e:	e018      	b.n	8002172 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	695a      	ldr	r2, [r3, #20]
 8002144:	8bfb      	ldrh	r3, [r7, #30]
 8002146:	441a      	add	r2, r3
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	441a      	add	r2, r3
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215e:	4618      	mov	r0, r3
 8002160:	f002 fe58 	bl	8004e14 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002164:	e005      	b.n	8002172 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002166:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002168:	461a      	mov	r2, r3
 800216a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f91b 	bl	80023a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800217a:	b29b      	uxth	r3, r3
 800217c:	b21b      	sxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	f6ff ad0a 	blt.w	8001b98 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3738      	adds	r7, #56	; 0x38
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b088      	sub	sp, #32
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	4613      	mov	r3, r2
 800219a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d07e      	beq.n	80022a4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	3302      	adds	r3, #2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d306      	bcc.n	80021e8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	8b7b      	ldrh	r3, [r7, #26]
 80021e0:	1ad2      	subs	r2, r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	619a      	str	r2, [r3, #24]
 80021e6:	e002      	b.n	80021ee <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d123      	bne.n	800223e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800220c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002210:	833b      	strh	r3, [r7, #24]
 8002212:	8b3b      	ldrh	r3, [r7, #24]
 8002214:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002218:	833b      	strh	r3, [r7, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	441a      	add	r2, r3
 8002228:	8b3b      	ldrh	r3, [r7, #24]
 800222a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800222e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223a:	b29b      	uxth	r3, r3
 800223c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01f      	beq.n	8002288 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002262:	82fb      	strh	r3, [r7, #22]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	8afb      	ldrh	r3, [r7, #22]
 8002274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800227c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002284:	b29b      	uxth	r3, r3
 8002286:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002288:	8b7b      	ldrh	r3, [r7, #26]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8087 	beq.w	800239e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6959      	ldr	r1, [r3, #20]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	891a      	ldrh	r2, [r3, #8]
 800229c:	8b7b      	ldrh	r3, [r7, #26]
 800229e:	f004 fd5f 	bl	8006d60 <USB_ReadPMA>
 80022a2:	e07c      	b.n	800239e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	3306      	adds	r3, #6
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	8b7b      	ldrh	r3, [r7, #26]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d306      	bcc.n	80022e6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	8b7b      	ldrh	r3, [r7, #26]
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	619a      	str	r2, [r3, #24]
 80022e4:	e002      	b.n	80022ec <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d123      	bne.n	800233c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800230a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230e:	83fb      	strh	r3, [r7, #30]
 8002310:	8bfb      	ldrh	r3, [r7, #30]
 8002312:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002316:	83fb      	strh	r3, [r7, #30]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	441a      	add	r2, r3
 8002326:	8bfb      	ldrh	r3, [r7, #30]
 8002328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800232c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002338:	b29b      	uxth	r3, r3
 800233a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11f      	bne.n	8002386 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800235c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002360:	83bb      	strh	r3, [r7, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	441a      	add	r2, r3
 8002370:	8bbb      	ldrh	r3, [r7, #28]
 8002372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002382:	b29b      	uxth	r3, r3
 8002384:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6959      	ldr	r1, [r3, #20]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	895a      	ldrh	r2, [r3, #10]
 8002398:	8b7b      	ldrh	r3, [r7, #26]
 800239a:	f004 fce1 	bl	8006d60 <USB_ReadPMA>
    }
  }

  return count;
 800239e:	8b7b      	ldrh	r3, [r7, #26]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0a2      	sub	sp, #136	; 0x88
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 81c7 	beq.w	8002750 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	3302      	adds	r3, #2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d907      	bls.n	800240a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	e002      	b.n	8002410 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 80b9 	bne.w	800258c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	785b      	ldrb	r3, [r3, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d126      	bne.n	8002470 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	4413      	add	r3, r2
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	011a      	lsls	r2, r3, #4
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	4413      	add	r3, r2
 8002444:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002454:	b29a      	uxth	r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002468:	b29a      	uxth	r2, r3
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	e01a      	b.n	80024a6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d116      	bne.n	80024a6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	4413      	add	r3, r2
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	011a      	lsls	r2, r3, #4
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	4413      	add	r3, r2
 800249a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	2200      	movs	r2, #0
 80024a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d126      	bne.n	8002502 <HAL_PCD_EP_DB_Transmit+0x15a>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4413      	add	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	011a      	lsls	r2, r3, #4
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4413      	add	r3, r2
 80024d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	e017      	b.n	8002532 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d113      	bne.n	8002532 <HAL_PCD_EP_DB_Transmit+0x18a>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002512:	b29b      	uxth	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	4413      	add	r3, r2
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	011a      	lsls	r2, r3, #4
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	4413      	add	r3, r2
 8002526:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f006 fc9c 	bl	8008e76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 82d4 	beq.w	8002af2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002564:	827b      	strh	r3, [r7, #18]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	441a      	add	r2, r3
 8002574:	8a7b      	ldrh	r3, [r7, #18]
 8002576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800257a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002586:	b29b      	uxth	r3, r3
 8002588:	8013      	strh	r3, [r2, #0]
 800258a:	e2b2      	b.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d021      	beq.n	80025da <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	f040 8286 	bne.w	8002af2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ee:	441a      	add	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025fc:	441a      	add	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	429a      	cmp	r2, r3
 800260c:	d309      	bcc.n	8002622 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800261a:	1ad2      	subs	r2, r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	621a      	str	r2, [r3, #32]
 8002620:	e015      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800262a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800262e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002638:	e009      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	785b      	ldrb	r3, [r3, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d155      	bne.n	8002702 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	63bb      	str	r3, [r7, #56]	; 0x38
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	4413      	add	r3, r2
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	011a      	lsls	r2, r3, #4
 8002674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002676:	4413      	add	r3, r2
 8002678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
 800267e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002680:	2b00      	cmp	r3, #0
 8002682:	d112      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0x302>
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800268e:	b29a      	uxth	r2, r3
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	e047      	b.n	800273a <HAL_PCD_EP_DB_Transmit+0x392>
 80026aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ac:	2b3e      	cmp	r3, #62	; 0x3e
 80026ae:	d811      	bhi.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80026b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80026c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c2:	3301      	adds	r3, #1
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e032      	b.n	800273a <HAL_PCD_EP_DB_Transmit+0x392>
 80026d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <HAL_PCD_EP_DB_Transmit+0x342>
 80026e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e6:	3b01      	subs	r3, #1
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	e01b      	b.n	800273a <HAL_PCD_EP_DB_Transmit+0x392>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d117      	bne.n	800273a <HAL_PCD_EP_DB_Transmit+0x392>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	643b      	str	r3, [r7, #64]	; 0x40
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271e:	4413      	add	r3, r2
 8002720:	643b      	str	r3, [r7, #64]	; 0x40
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	011a      	lsls	r2, r3, #4
 8002728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272a:	4413      	add	r3, r2
 800272c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002734:	b29a      	uxth	r2, r3
 8002736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002738:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6959      	ldr	r1, [r3, #20]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	891a      	ldrh	r2, [r3, #8]
 8002746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	f004 fac4 	bl	8006cd6 <USB_WritePMA>
 800274e:	e1d0      	b.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002758:	b29b      	uxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	3306      	adds	r3, #6
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002778:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002784:	429a      	cmp	r2, r3
 8002786:	d307      	bcc.n	8002798 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	619a      	str	r2, [r3, #24]
 8002796:	e002      	b.n	800279e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 80c4 	bne.w	8002930 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d126      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x456>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c4:	4413      	add	r3, r2
 80027c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	011a      	lsls	r2, r3, #4
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	4413      	add	r3, r2
 80027d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80027d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	e01a      	b.n	8002834 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d116      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	677b      	str	r3, [r7, #116]	; 0x74
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002814:	b29b      	uxth	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281a:	4413      	add	r3, r2
 800281c:	677b      	str	r3, [r7, #116]	; 0x74
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	011a      	lsls	r2, r3, #4
 8002824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002826:	4413      	add	r3, r2
 8002828:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800282c:	673b      	str	r3, [r7, #112]	; 0x70
 800282e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002830:	2200      	movs	r2, #0
 8002832:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	67bb      	str	r3, [r7, #120]	; 0x78
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d12f      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800285a:	4413      	add	r3, r2
 800285c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	011a      	lsls	r2, r3, #4
 8002866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286a:	4413      	add	r3, r2
 800286c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002880:	b29a      	uxth	r2, r3
 8002882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002898:	b29a      	uxth	r2, r3
 800289a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	e017      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d113      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b8:	4413      	add	r3, r2
 80028ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	011a      	lsls	r2, r3, #4
 80028c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c4:	4413      	add	r3, r2
 80028c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ce:	2200      	movs	r2, #0
 80028d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f006 facc 	bl	8008e76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 8104 	bne.w	8002af2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002904:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800291a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292a:	b29b      	uxth	r3, r3
 800292c:	8013      	strh	r3, [r2, #0]
 800292e:	e0e0      	b.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d121      	bne.n	800297e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002954:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800296a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297a:	b29b      	uxth	r3, r3
 800297c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 80b4 	bne.w	8002af2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002992:	441a      	add	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029a0:	441a      	add	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6a1a      	ldr	r2, [r3, #32]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d309      	bcc.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	621a      	str	r2, [r3, #32]
 80029c4:	e015      	b.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80029ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029dc:	e009      	b.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	667b      	str	r3, [r7, #100]	; 0x64
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	785b      	ldrb	r3, [r3, #1]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d155      	bne.n	8002aac <HAL_PCD_EP_DB_Transmit+0x704>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a14:	4413      	add	r3, r2
 8002a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	011a      	lsls	r2, r3, #4
 8002a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a20:	4413      	add	r3, r2
 8002a22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a26:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d112      	bne.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3c:	801a      	strh	r2, [r3, #0]
 8002a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	e044      	b.n	8002ade <HAL_PCD_EP_DB_Transmit+0x736>
 8002a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a56:	2b3e      	cmp	r3, #62	; 0x3e
 8002a58:	d811      	bhi.n	8002a7e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	029b      	lsls	r3, r3, #10
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	e02f      	b.n	8002ade <HAL_PCD_EP_DB_Transmit+0x736>
 8002a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	657b      	str	r3, [r7, #84]	; 0x54
 8002a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	3b01      	subs	r3, #1
 8002a92:	657b      	str	r3, [r7, #84]	; 0x54
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	029b      	lsls	r3, r3, #10
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	e018      	b.n	8002ade <HAL_PCD_EP_DB_Transmit+0x736>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	785b      	ldrb	r3, [r3, #1]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d114      	bne.n	8002ade <HAL_PCD_EP_DB_Transmit+0x736>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac2:	4413      	add	r3, r2
 8002ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	011a      	lsls	r2, r3, #4
 8002acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ace:	4413      	add	r3, r2
 8002ad0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002adc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6959      	ldr	r1, [r3, #20]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	895a      	ldrh	r2, [r3, #10]
 8002aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f004 f8f2 	bl	8006cd6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0c:	823b      	strh	r3, [r7, #16]
 8002b0e:	8a3b      	ldrh	r3, [r7, #16]
 8002b10:	f083 0310 	eor.w	r3, r3, #16
 8002b14:	823b      	strh	r3, [r7, #16]
 8002b16:	8a3b      	ldrh	r3, [r7, #16]
 8002b18:	f083 0320 	eor.w	r3, r3, #32
 8002b1c:	823b      	strh	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	441a      	add	r2, r3
 8002b2c:	8a3b      	ldrh	r3, [r7, #16]
 8002b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3788      	adds	r7, #136	; 0x88
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	817b      	strh	r3, [r7, #10]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b5e:	897b      	ldrh	r3, [r7, #10]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e009      	b.n	8002b96 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b82:	897a      	ldrh	r2, [r7, #10]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b96:	893b      	ldrh	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	80da      	strh	r2, [r3, #6]
 8002baa:	e00b      	b.n	8002bc4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e31d      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be2:	4b94      	ldr	r3, [pc, #592]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bec:	4b91      	ldr	r3, [pc, #580]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d07b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d006      	beq.n	8002c16 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d10f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x5e>
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c16:	4b87      	ldr	r3, [pc, #540]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d06a      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x128>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d166      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e2f7      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x74>
 8002c36:	4b7f      	ldr	r3, [pc, #508]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7e      	ldr	r2, [pc, #504]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e02d      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCC_OscConfig+0x96>
 8002c4c:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a78      	ldr	r2, [pc, #480]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a75      	ldr	r2, [pc, #468]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	e01c      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd0>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0xb8>
 8002c6e:	4b71      	ldr	r3, [pc, #452]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a70      	ldr	r2, [pc, #448]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b6e      	ldr	r3, [pc, #440]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6d      	ldr	r2, [pc, #436]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd0>
 8002c88:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a69      	ldr	r2, [pc, #420]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a66      	ldr	r2, [pc, #408]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fd ff38 	bl	8000b1c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fd ff34 	bl	8000b1c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e2ad      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe0>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fd ff24 	bl	8000b1c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fd ff20 	bl	8000b1c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e299      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cea:	4b52      	ldr	r3, [pc, #328]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x108>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d05a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d119      	bne.n	8002d46 <HAL_RCC_OscConfig+0x176>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d116      	bne.n	8002d46 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d18:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_OscConfig+0x160>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e276      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	493d      	ldr	r1, [pc, #244]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d44:	e03a      	b.n	8002dbc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0x268>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd fee2 	bl	8000b1c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fd fede 	bl	8000b1c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e257      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	492a      	ldr	r1, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
 8002d8e:	e015      	b.n	8002dbc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_OscConfig+0x268>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fd fec1 	bl	8000b1c <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fd febd 	bl	8000b1c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e236      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80b8 	beq.w	8002f3a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d170      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x218>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e21a      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1a      	ldr	r2, [r3, #32]
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d921      	bls.n	8002e3c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fc67 	bl	80036d0 <RCC_SetFlashLatencyFromMSIRange>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e208      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4906      	ldr	r1, [pc, #24]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	4901      	ldr	r1, [pc, #4]	; (8002e34 <HAL_RCC_OscConfig+0x264>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
 8002e32:	e020      	b.n	8002e76 <HAL_RCC_OscConfig+0x2a6>
 8002e34:	40023800 	.word	0x40023800
 8002e38:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3c:	4b99      	ldr	r3, [pc, #612]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4996      	ldr	r1, [pc, #600]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4e:	4b95      	ldr	r3, [pc, #596]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	061b      	lsls	r3, r3, #24
 8002e5c:	4991      	ldr	r1, [pc, #580]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fc32 	bl	80036d0 <RCC_SetFlashLatencyFromMSIRange>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1d3      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	0b5b      	lsrs	r3, r3, #13
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e86:	4a87      	ldr	r2, [pc, #540]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002e88:	6892      	ldr	r2, [r2, #8]
 8002e8a:	0912      	lsrs	r2, r2, #4
 8002e8c:	f002 020f 	and.w	r2, r2, #15
 8002e90:	4985      	ldr	r1, [pc, #532]	; (80030a8 <HAL_RCC_OscConfig+0x4d8>)
 8002e92:	5c8a      	ldrb	r2, [r1, r2]
 8002e94:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e96:	4a85      	ldr	r2, [pc, #532]	; (80030ac <HAL_RCC_OscConfig+0x4dc>)
 8002e98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e9a:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <HAL_RCC_OscConfig+0x4e0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fdf0 	bl	8000a84 <HAL_InitTick>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d045      	beq.n	8002f3a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	e1b5      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d029      	beq.n	8002f0e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eba:	4b7e      	ldr	r3, [pc, #504]	; (80030b4 <HAL_RCC_OscConfig+0x4e4>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fe2c 	bl	8000b1c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec8:	f7fd fe28 	bl	8000b1c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1a1      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eda:	4b72      	ldr	r3, [pc, #456]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee6:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	496c      	ldr	r1, [pc, #432]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef8:	4b6a      	ldr	r3, [pc, #424]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	4967      	ldr	r1, [pc, #412]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f0e:	4b69      	ldr	r3, [pc, #420]	; (80030b4 <HAL_RCC_OscConfig+0x4e4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fd fe02 	bl	8000b1c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f1c:	f7fd fdfe 	bl	8000b1c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e177      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f2e:	4b5d      	ldr	r3, [pc, #372]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d030      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b5a      	ldr	r3, [pc, #360]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7fd fde2 	bl	8000b1c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fd fdde 	bl	8000b1c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e157      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f6e:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x38c>
 8002f7a:	e015      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b4e      	ldr	r3, [pc, #312]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fd fdcb 	bl	8000b1c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fd fdc7 	bl	8000b1c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e140      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f9c:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80b5 	beq.w	8003120 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	4a36      	ldr	r2, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6253      	str	r3, [r2, #36]	; 0x24
 8002fd2:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d118      	bne.n	8003020 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fee:	4b33      	ldr	r3, [pc, #204]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a32      	ldr	r2, [pc, #200]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffa:	f7fd fd8f 	bl	8000b1c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003002:	f7fd fd8b 	bl	8000b1c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b64      	cmp	r3, #100	; 0x64
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e104      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x466>
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 800302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302c:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6353      	str	r3, [r2, #52]	; 0x34
 8003034:	e02d      	b.n	8003092 <HAL_RCC_OscConfig+0x4c2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x488>
 800303e:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8003044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003048:	6353      	str	r3, [r2, #52]	; 0x34
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8003050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003054:	6353      	str	r3, [r2, #52]	; 0x34
 8003056:	e01c      	b.n	8003092 <HAL_RCC_OscConfig+0x4c2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d10c      	bne.n	800307a <HAL_RCC_OscConfig+0x4aa>
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8003066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800306a:	6353      	str	r3, [r2, #52]	; 0x34
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8003072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003076:	6353      	str	r3, [r2, #52]	; 0x34
 8003078:	e00b      	b.n	8003092 <HAL_RCC_OscConfig+0x4c2>
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8003080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003084:	6353      	str	r3, [r2, #52]	; 0x34
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8003088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308a:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 800308c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003090:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d024      	beq.n	80030e4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309a:	f7fd fd3f 	bl	8000b1c <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a0:	e019      	b.n	80030d6 <HAL_RCC_OscConfig+0x506>
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08009cfc 	.word	0x08009cfc
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004
 80030b4:	42470020 	.word	0x42470020
 80030b8:	42470680 	.word	0x42470680
 80030bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fd fd2c 	bl	8000b1c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0a3      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030d6:	4b54      	ldr	r3, [pc, #336]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ee      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4f0>
 80030e2:	e014      	b.n	800310e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e4:	f7fd fd1a 	bl	8000b1c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fd fd16 	bl	8000b1c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e08d      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003102:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ee      	bne.n	80030ec <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800310e:	7ffb      	ldrb	r3, [r7, #31]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003114:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	4a43      	ldr	r2, [pc, #268]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d079      	beq.n	800321c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d056      	beq.n	80031dc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b02      	cmp	r3, #2
 8003134:	d13b      	bne.n	80031ae <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	4b3d      	ldr	r3, [pc, #244]	; (800322c <HAL_RCC_OscConfig+0x65c>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fd fcee 	bl	8000b1c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7fd fcea 	bl	8000b1c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e063      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003156:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	4319      	orrs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	430b      	orrs	r3, r1
 800317a:	492b      	ldr	r1, [pc, #172]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003180:	4b2a      	ldr	r3, [pc, #168]	; (800322c <HAL_RCC_OscConfig+0x65c>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fd fcc9 	bl	8000b1c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318e:	f7fd fcc5 	bl	8000b1c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e03e      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x5be>
 80031ac:	e036      	b.n	800321c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_RCC_OscConfig+0x65c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fd fcb2 	bl	8000b1c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fd fcae 	bl	8000b1c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e027      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x5ec>
 80031da:	e01f      	b.n	800321c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e01a      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RCC_OscConfig+0x658>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d10d      	bne.n	8003218 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d106      	bne.n	8003218 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	42470060 	.word	0x42470060

08003230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e11a      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003244:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d919      	bls.n	8003286 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCC_ClockConfig+0x34>
 8003258:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a89      	ldr	r2, [pc, #548]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b87      	ldr	r3, [pc, #540]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 0201 	bic.w	r2, r3, #1
 800326c:	4985      	ldr	r1, [pc, #532]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003274:	4b83      	ldr	r3, [pc, #524]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d001      	beq.n	8003286 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0f9      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003292:	4b7d      	ldr	r3, [pc, #500]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	497a      	ldr	r1, [pc, #488]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 808e 	beq.w	80033ce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ba:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d121      	bne.n	800330a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0d7      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032d2:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d115      	bne.n	800330a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0cb      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0bf      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0b7      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330a:	4b5f      	ldr	r3, [pc, #380]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	495c      	ldr	r1, [pc, #368]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800331c:	f7fd fbfe 	bl	8000b1c <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d112      	bne.n	8003350 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332c:	f7fd fbf6 	bl	8000b1c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e09b      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003342:	4b51      	ldr	r3, [pc, #324]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b08      	cmp	r3, #8
 800334c:	d1ee      	bne.n	800332c <HAL_RCC_ClockConfig+0xfc>
 800334e:	e03e      	b.n	80033ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d112      	bne.n	800337e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335a:	f7fd fbdf 	bl	8000b1c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e084      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003370:	4b45      	ldr	r3, [pc, #276]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d1ee      	bne.n	800335a <HAL_RCC_ClockConfig+0x12a>
 800337c:	e027      	b.n	80033ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d11d      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fd fbc8 	bl	8000b1c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e06d      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800339e:	4b3a      	ldr	r3, [pc, #232]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d1ee      	bne.n	8003388 <HAL_RCC_ClockConfig+0x158>
 80033aa:	e010      	b.n	80033ce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7fd fbb6 	bl	8000b1c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e05b      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ee      	bne.n	80033ac <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d219      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <HAL_RCC_ClockConfig+0x1be>
 80033e2:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a27      	ldr	r2, [pc, #156]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 0201 	bic.w	r2, r3, #1
 80033f6:	4923      	ldr	r1, [pc, #140]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCC_ClockConfig+0x254>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e034      	b.n	800347a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4917      	ldr	r1, [pc, #92]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	490f      	ldr	r1, [pc, #60]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800344e:	f000 f823 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <HAL_RCC_ClockConfig+0x258>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	490b      	ldr	r1, [pc, #44]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 8003468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x264>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fb08 	bl	8000a84 <HAL_InitTick>
 8003474:	4603      	mov	r3, r0
 8003476:	72fb      	strb	r3, [r7, #11]

  return status;
 8003478:	7afb      	ldrb	r3, [r7, #11]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023c00 	.word	0x40023c00
 8003488:	40023800 	.word	0x40023800
 800348c:	08009cfc 	.word	0x08009cfc
 8003490:	20000000 	.word	0x20000000
 8003494:	20000004 	.word	0x20000004

08003498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800349c:	b092      	sub	sp, #72	; 0x48
 800349e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80034a0:	4b79      	ldr	r3, [pc, #484]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	d00d      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x34>
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	f200 80d5 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x1c8>
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d002      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28>
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x2e>
 80034be:	e0cf      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c0:	4b72      	ldr	r3, [pc, #456]	; (800368c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034c2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034c4:	e0da      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034c6:	4b71      	ldr	r3, [pc, #452]	; (800368c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034ca:	e0d7      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ce:	0c9b      	lsrs	r3, r3, #18
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4b6e      	ldr	r3, [pc, #440]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	0d9b      	lsrs	r3, r3, #22
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	3301      	adds	r3, #1
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e6:	4b68      	ldr	r3, [pc, #416]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d05d      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2200      	movs	r2, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	4611      	mov	r1, r2
 80034fa:	4604      	mov	r4, r0
 80034fc:	460d      	mov	r5, r1
 80034fe:	4622      	mov	r2, r4
 8003500:	462b      	mov	r3, r5
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f04f 0100 	mov.w	r1, #0
 800350a:	0159      	lsls	r1, r3, #5
 800350c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003510:	0150      	lsls	r0, r2, #5
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4621      	mov	r1, r4
 8003518:	1a51      	subs	r1, r2, r1
 800351a:	6139      	str	r1, [r7, #16]
 800351c:	4629      	mov	r1, r5
 800351e:	eb63 0301 	sbc.w	r3, r3, r1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003530:	4659      	mov	r1, fp
 8003532:	018b      	lsls	r3, r1, #6
 8003534:	4651      	mov	r1, sl
 8003536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800353a:	4651      	mov	r1, sl
 800353c:	018a      	lsls	r2, r1, #6
 800353e:	46d4      	mov	ip, sl
 8003540:	ebb2 080c 	subs.w	r8, r2, ip
 8003544:	4659      	mov	r1, fp
 8003546:	eb63 0901 	sbc.w	r9, r3, r1
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800355e:	4690      	mov	r8, r2
 8003560:	4699      	mov	r9, r3
 8003562:	4623      	mov	r3, r4
 8003564:	eb18 0303 	adds.w	r3, r8, r3
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	462b      	mov	r3, r5
 800356c:	eb49 0303 	adc.w	r3, r9, r3
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800357e:	4629      	mov	r1, r5
 8003580:	028b      	lsls	r3, r1, #10
 8003582:	4620      	mov	r0, r4
 8003584:	4629      	mov	r1, r5
 8003586:	4604      	mov	r4, r0
 8003588:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800358c:	4601      	mov	r1, r0
 800358e:	028a      	lsls	r2, r1, #10
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003596:	2200      	movs	r2, #0
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
 800359a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800359c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035a0:	f7fc fdf4 	bl	800018c <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	647b      	str	r3, [r7, #68]	; 0x44
 80035ac:	e055      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	2200      	movs	r2, #0
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	627a      	str	r2, [r7, #36]	; 0x24
 80035b6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035ba:	4642      	mov	r2, r8
 80035bc:	464b      	mov	r3, r9
 80035be:	f04f 0000 	mov.w	r0, #0
 80035c2:	f04f 0100 	mov.w	r1, #0
 80035c6:	0159      	lsls	r1, r3, #5
 80035c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035cc:	0150      	lsls	r0, r2, #5
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	46c4      	mov	ip, r8
 80035d4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80035d8:	4640      	mov	r0, r8
 80035da:	4649      	mov	r1, r9
 80035dc:	468c      	mov	ip, r1
 80035de:	eb63 0b0c 	sbc.w	fp, r3, ip
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035ee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035f2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f6:	ebb2 040a 	subs.w	r4, r2, sl
 80035fa:	eb63 050b 	sbc.w	r5, r3, fp
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	00eb      	lsls	r3, r5, #3
 8003608:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360c:	00e2      	lsls	r2, r4, #3
 800360e:	4614      	mov	r4, r2
 8003610:	461d      	mov	r5, r3
 8003612:	4603      	mov	r3, r0
 8003614:	18e3      	adds	r3, r4, r3
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	460b      	mov	r3, r1
 800361a:	eb45 0303 	adc.w	r3, r5, r3
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 4500 	ldrd	r4, r5, [r7]
 800362c:	4629      	mov	r1, r5
 800362e:	028b      	lsls	r3, r1, #10
 8003630:	4620      	mov	r0, r4
 8003632:	4629      	mov	r1, r5
 8003634:	4604      	mov	r4, r0
 8003636:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800363a:	4601      	mov	r1, r0
 800363c:	028a      	lsls	r2, r1, #10
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003644:	2200      	movs	r2, #0
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	61fa      	str	r2, [r7, #28]
 800364a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364e:	f7fc fd9d 	bl	800018c <__aeabi_uldivmod>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4613      	mov	r3, r2
 8003658:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800365a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800365e:	e00d      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0b5b      	lsrs	r3, r3, #13
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	3301      	adds	r3, #1
 8003670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800367a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800367e:	4618      	mov	r0, r3
 8003680:	3748      	adds	r7, #72	; 0x48
 8003682:	46bd      	mov	sp, r7
 8003684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	00f42400 	.word	0x00f42400
 8003690:	08009cf0 	.word	0x08009cf0

08003694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b02      	ldr	r3, [pc, #8]	; (80036a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	20000000 	.word	0x20000000

080036a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036ac:	f7ff fff2 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	08009d0c 	.word	0x08009d0c

080036d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d12c      	bne.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e8:	4b26      	ldr	r3, [pc, #152]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e016      	b.n	800372e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	6253      	str	r3, [r2, #36]	; 0x24
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003720:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b18      	ldr	r3, [pc, #96]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003734:	d105      	bne.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800373c:	d101      	bne.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800373e:	2301      	movs	r3, #1
 8003740:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0f      	ldr	r2, [pc, #60]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f023 0201 	bic.w	r2, r3, #1
 800375c:	490b      	ldr	r1, [pc, #44]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	429a      	cmp	r2, r3
 8003770:	d001      	beq.n	8003776 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	40007000 	.word	0x40007000
 800378c:	40023c00 	.word	0x40023c00

08003790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e06e      	b.n	8003880 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d108      	bne.n	80037bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b2:	d009      	beq.n	80037c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	61da      	str	r2, [r3, #28]
 80037ba:	e005      	b.n	80037c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd f85e 	bl	80008a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	ea42 0103 	orr.w	r1, r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	0c1a      	lsrs	r2, r3, #16
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f002 0204 	and.w	r2, r2, #4
 800386e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_SPI_Transmit+0x22>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e126      	b.n	8003af8 <HAL_SPI_Transmit+0x270>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038b2:	f7fd f933 	bl	8000b1c <HAL_GetTick>
 80038b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
 80038ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038cc:	e10b      	b.n	8003ae6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_SPI_Transmit+0x52>
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038de:	e102      	b.n	8003ae6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2203      	movs	r2, #3
 80038e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003926:	d10f      	bne.n	8003948 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003936:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003946:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d007      	beq.n	8003966 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003964:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396e:	d14b      	bne.n	8003a08 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_SPI_Transmit+0xf6>
 8003978:	8afb      	ldrh	r3, [r7, #22]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d13e      	bne.n	80039fc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039a2:	e02b      	b.n	80039fc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d112      	bne.n	80039d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	881a      	ldrh	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	1c9a      	adds	r2, r3, #2
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039d6:	e011      	b.n	80039fc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d8:	f7fd f8a0 	bl	8000b1c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d803      	bhi.n	80039f0 <HAL_SPI_Transmit+0x168>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d102      	bne.n	80039f6 <HAL_SPI_Transmit+0x16e>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039fa:	e074      	b.n	8003ae6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ce      	bne.n	80039a4 <HAL_SPI_Transmit+0x11c>
 8003a06:	e04c      	b.n	8003aa2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_SPI_Transmit+0x18e>
 8003a10:	8afb      	ldrh	r3, [r7, #22]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d140      	bne.n	8003a98 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a3c:	e02c      	b.n	8003a98 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d113      	bne.n	8003a74 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	7812      	ldrb	r2, [r2, #0]
 8003a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a72:	e011      	b.n	8003a98 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a74:	f7fd f852 	bl	8000b1c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d803      	bhi.n	8003a8c <HAL_SPI_Transmit+0x204>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d102      	bne.n	8003a92 <HAL_SPI_Transmit+0x20a>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a96:	e026      	b.n	8003ae6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1cd      	bne.n	8003a3e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fbcc 	bl	8004244 <SPI_EndRxTxTransaction>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e000      	b.n	8003ae6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ae4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1c:	d112      	bne.n	8003b44 <HAL_SPI_Receive+0x44>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10e      	bne.n	8003b44 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2204      	movs	r2, #4
 8003b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f8f1 	bl	8003d22 <HAL_SPI_TransmitReceive>
 8003b40:	4603      	mov	r3, r0
 8003b42:	e0ea      	b.n	8003d1a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_SPI_Receive+0x52>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e0e3      	b.n	8003d1a <HAL_SPI_Receive+0x21a>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b5a:	f7fc ffdf 	bl	8000b1c <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d002      	beq.n	8003b72 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b70:	e0ca      	b.n	8003d08 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_SPI_Receive+0x7e>
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b82:	e0c1      	b.n	8003d08 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2204      	movs	r2, #4
 8003b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bca:	d10f      	bne.n	8003bec <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d007      	beq.n	8003c0a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d162      	bne.n	8003cd8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c12:	e02e      	b.n	8003c72 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d115      	bne.n	8003c4e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f103 020c 	add.w	r2, r3, #12
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c4c:	e011      	b.n	8003c72 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c4e:	f7fc ff65 	bl	8000b1c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d803      	bhi.n	8003c66 <HAL_SPI_Receive+0x166>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d102      	bne.n	8003c6c <HAL_SPI_Receive+0x16c>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c70:	e04a      	b.n	8003d08 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1cb      	bne.n	8003c14 <HAL_SPI_Receive+0x114>
 8003c7c:	e031      	b.n	8003ce2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d113      	bne.n	8003cb4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	b292      	uxth	r2, r2
 8003c98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	1c9a      	adds	r2, r3, #2
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cb2:	e011      	b.n	8003cd8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb4:	f7fc ff32 	bl	8000b1c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d803      	bhi.n	8003ccc <HAL_SPI_Receive+0x1cc>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d102      	bne.n	8003cd2 <HAL_SPI_Receive+0x1d2>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cd6:	e017      	b.n	8003d08 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1cd      	bne.n	8003c7e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	6839      	ldr	r1, [r7, #0]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fa46 	bl	8004178 <SPI_EndRxTransaction>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
 8003d04:	e000      	b.n	8003d08 <HAL_SPI_Receive+0x208>
  }

error :
 8003d06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b08c      	sub	sp, #48	; 0x30
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d30:	2301      	movs	r3, #1
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x26>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e18a      	b.n	800405e <HAL_SPI_TransmitReceive+0x33c>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d50:	f7fc fee4 	bl	8000b1c <HAL_GetTick>
 8003d54:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d00f      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x70>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d78:	d107      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x68>
 8003d82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d003      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d90:	e15b      	b.n	800404a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x82>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x82>
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003daa:	e14e      	b.n	800404a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d003      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2205      	movs	r2, #5
 8003dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	887a      	ldrh	r2, [r7, #2]
 8003dd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	887a      	ldrh	r2, [r7, #2]
 8003de2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d007      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1c:	d178      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x10a>
 8003e26:	8b7b      	ldrh	r3, [r7, #26]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d166      	bne.n	8003efa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	881a      	ldrh	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e50:	e053      	b.n	8003efa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d11b      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x176>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <HAL_SPI_TransmitReceive+0x176>
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d113      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	881a      	ldrh	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	1c9a      	adds	r2, r3, #2
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d119      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x1b8>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d014      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003eda:	f7fc fe1f 	bl	8000b1c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d807      	bhi.n	8003efa <HAL_SPI_TransmitReceive+0x1d8>
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d003      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ef8:	e0a7      	b.n	800404a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1a6      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x130>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1a1      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x130>
 8003f0e:	e07c      	b.n	800400a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x1fc>
 8003f18:	8b7b      	ldrh	r3, [r7, #26]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d16b      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	7812      	ldrb	r2, [r2, #0]
 8003f2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f44:	e057      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d11c      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x26c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d017      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0x26c>
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d114      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d119      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x2ae>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d014      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fd0:	f7fc fda4 	bl	8000b1c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d803      	bhi.n	8003fe8 <HAL_SPI_TransmitReceive+0x2c6>
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d102      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x2cc>
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ff4:	e029      	b.n	800404a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1a2      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x224>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d19d      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800400a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f918 	bl	8004244 <SPI_EndRxTxTransaction>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004026:	e010      	b.n	800404a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	e000      	b.n	800404a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004048:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800405a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800405e:	4618      	mov	r0, r3
 8004060:	3730      	adds	r7, #48	; 0x30
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004078:	f7fc fd50 	bl	8000b1c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	4413      	add	r3, r2
 8004086:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004088:	f7fc fd48 	bl	8000b1c <HAL_GetTick>
 800408c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800408e:	4b39      	ldr	r3, [pc, #228]	; (8004174 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	015b      	lsls	r3, r3, #5
 8004094:	0d1b      	lsrs	r3, r3, #20
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800409e:	e054      	b.n	800414a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d050      	beq.n	800414a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040a8:	f7fc fd38 	bl	8000b1c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d902      	bls.n	80040be <SPI_WaitFlagStateUntilTimeout+0x56>
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d13d      	bne.n	800413a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d6:	d111      	bne.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e0:	d004      	beq.n	80040ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ea:	d107      	bne.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004104:	d10f      	bne.n	8004126 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004124:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e017      	b.n	800416a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3b01      	subs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	429a      	cmp	r2, r3
 8004158:	bf0c      	ite	eq
 800415a:	2301      	moveq	r3, #1
 800415c:	2300      	movne	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	429a      	cmp	r2, r3
 8004166:	d19b      	bne.n	80040a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000000 	.word	0x20000000

08004178 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418c:	d111      	bne.n	80041b2 <SPI_EndRxTransaction+0x3a>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004196:	d004      	beq.n	80041a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d107      	bne.n	80041b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ba:	d12a      	bne.n	8004212 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d012      	beq.n	80041ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2180      	movs	r1, #128	; 0x80
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff ff49 	bl	8004068 <SPI_WaitFlagStateUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d02d      	beq.n	8004238 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e026      	b.n	800423a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2101      	movs	r1, #1
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff ff36 	bl	8004068 <SPI_WaitFlagStateUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01a      	beq.n	8004238 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e013      	b.n	800423a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2200      	movs	r2, #0
 800421a:	2101      	movs	r1, #1
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff23 	bl	8004068 <SPI_WaitFlagStateUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e000      	b.n	800423a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <SPI_EndRxTxTransaction+0x7c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <SPI_EndRxTxTransaction+0x80>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0d5b      	lsrs	r3, r3, #21
 800425c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004260:	fb02 f303 	mul.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426e:	d112      	bne.n	8004296 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fef4 	bl	8004068 <SPI_WaitFlagStateUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e00f      	b.n	80042b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3b01      	subs	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d0f2      	beq.n	8004296 <SPI_EndRxTxTransaction+0x52>
 80042b0:	e000      	b.n	80042b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80042b2:	bf00      	nop
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000000 	.word	0x20000000
 80042c4:	165e9f81 	.word	0x165e9f81

080042c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004300:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	b29b      	uxth	r3, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	b29b      	uxth	r3, r3
 8004312:	4013      	ands	r3, r2
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004328:	b084      	sub	sp, #16
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	f107 0014 	add.w	r0, r7, #20
 8004336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	b004      	add	sp, #16
 8004366:	4770      	bx	lr

08004368 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004368:	b480      	push	{r7}
 800436a:	b09b      	sub	sp, #108	; 0x6c
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	78db      	ldrb	r3, [r3, #3]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d81f      	bhi.n	80043da <USB_ActivateEndpoint+0x72>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <USB_ActivateEndpoint+0x38>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043b1 	.word	0x080043b1
 80043a4:	080043cd 	.word	0x080043cd
 80043a8:	080043e3 	.word	0x080043e3
 80043ac:	080043bf 	.word	0x080043bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043bc:	e012      	b.n	80043e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80043c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043ca:	e00b      	b.n	80043e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043d8:	e004      	b.n	80043e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80043e0:	e000      	b.n	80043e4 <USB_ActivateEndpoint+0x7c>
      break;
 80043e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441c:	b29a      	uxth	r2, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	4313      	orrs	r3, r2
 8004426:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004448:	b29b      	uxth	r3, r3
 800444a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	7b1b      	ldrb	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8149 	bne.w	80046e8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	785b      	ldrb	r3, [r3, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8084 	beq.w	8004568 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446a:	b29b      	uxth	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4413      	add	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	011a      	lsls	r2, r3, #4
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	88db      	ldrh	r3, [r3, #6]
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	b29b      	uxth	r3, r3
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	81fb      	strh	r3, [r7, #14]
 80044a2:	89fb      	ldrh	r3, [r7, #14]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01b      	beq.n	80044e4 <USB_ActivateEndpoint+0x17c>
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	81bb      	strh	r3, [r7, #12]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	441a      	add	r2, r3
 80044ce:	89bb      	ldrh	r3, [r7, #12]
 80044d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	78db      	ldrb	r3, [r3, #3]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d020      	beq.n	800452e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004502:	813b      	strh	r3, [r7, #8]
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	f083 0320 	eor.w	r3, r3, #32
 800450a:	813b      	strh	r3, [r7, #8]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	893b      	ldrh	r3, [r7, #8]
 8004518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	b29b      	uxth	r3, r3
 800452a:	8013      	strh	r3, [r2, #0]
 800452c:	e27f      	b.n	8004a2e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	817b      	strh	r3, [r7, #10]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	897b      	ldrh	r3, [r7, #10]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
 8004566:	e262      	b.n	8004a2e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	4413      	add	r3, r2
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	011a      	lsls	r2, r3, #4
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	4413      	add	r3, r2
 8004586:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	88db      	ldrh	r3, [r3, #6]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	b29b      	uxth	r3, r3
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	4413      	add	r3, r2
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	011a      	lsls	r2, r3, #4
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d112      	bne.n	80045ee <USB_ActivateEndpoint+0x286>
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e02f      	b.n	800464e <USB_ActivateEndpoint+0x2e6>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b3e      	cmp	r3, #62	; 0x3e
 80045f4:	d813      	bhi.n	800461e <USB_ActivateEndpoint+0x2b6>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	663b      	str	r3, [r7, #96]	; 0x60
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <USB_ActivateEndpoint+0x2a8>
 800460a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800460c:	3301      	adds	r3, #1
 800460e:	663b      	str	r3, [r7, #96]	; 0x60
 8004610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004612:	b29b      	uxth	r3, r3
 8004614:	029b      	lsls	r3, r3, #10
 8004616:	b29a      	uxth	r2, r3
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	e017      	b.n	800464e <USB_ActivateEndpoint+0x2e6>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	663b      	str	r3, [r7, #96]	; 0x60
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <USB_ActivateEndpoint+0x2d0>
 8004632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004634:	3b01      	subs	r3, #1
 8004636:	663b      	str	r3, [r7, #96]	; 0x60
 8004638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463a:	b29b      	uxth	r3, r3
 800463c:	029b      	lsls	r3, r3, #10
 800463e:	b29b      	uxth	r3, r3
 8004640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004648:	b29a      	uxth	r2, r3
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	83fb      	strh	r3, [r7, #30]
 800465c:	8bfb      	ldrh	r3, [r7, #30]
 800465e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01b      	beq.n	800469e <USB_ActivateEndpoint+0x336>
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	83bb      	strh	r3, [r7, #28]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8bbb      	ldrh	r3, [r7, #28]
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	837b      	strh	r3, [r7, #26]
 80046b6:	8b7b      	ldrh	r3, [r7, #26]
 80046b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046bc:	837b      	strh	r3, [r7, #26]
 80046be:	8b7b      	ldrh	r3, [r7, #26]
 80046c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046c4:	837b      	strh	r3, [r7, #26]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	8b7b      	ldrh	r3, [r7, #26]
 80046d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]
 80046e6:	e1a2      	b.n	8004a2e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	441a      	add	r2, r3
 800470c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004718:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800471c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004720:	b29b      	uxth	r3, r3
 8004722:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	65bb      	str	r3, [r7, #88]	; 0x58
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472e:	b29b      	uxth	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004734:	4413      	add	r3, r2
 8004736:	65bb      	str	r3, [r7, #88]	; 0x58
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	011a      	lsls	r2, r3, #4
 800473e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004740:	4413      	add	r3, r2
 8004742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004746:	657b      	str	r3, [r7, #84]	; 0x54
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	891b      	ldrh	r3, [r3, #8]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	b29b      	uxth	r3, r3
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	653b      	str	r3, [r7, #80]	; 0x50
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004762:	b29b      	uxth	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004768:	4413      	add	r3, r2
 800476a:	653b      	str	r3, [r7, #80]	; 0x50
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	011a      	lsls	r2, r3, #4
 8004772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004774:	4413      	add	r3, r2
 8004776:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	895b      	ldrh	r3, [r3, #10]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	b29b      	uxth	r3, r3
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f040 8091 	bne.w	80048b8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80047a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80047a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01b      	beq.n	80047e6 <USB_ActivateEndpoint+0x47e>
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80047f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01b      	beq.n	8004836 <USB_ActivateEndpoint+0x4ce>
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800484e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004850:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004854:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004856:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004858:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800485c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800486a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487a:	b29b      	uxth	r3, r3
 800487c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004894:	867b      	strh	r3, [r7, #50]	; 0x32
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	441a      	add	r2, r3
 80048a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	8013      	strh	r3, [r2, #0]
 80048b6:	e0ba      	b.n	8004a2e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01d      	beq.n	8004910 <USB_ActivateEndpoint+0x5a8>
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	441a      	add	r2, r3
 80048f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004920:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01d      	beq.n	8004968 <USB_ActivateEndpoint+0x600>
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004960:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	78db      	ldrb	r3, [r3, #3]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d024      	beq.n	80049ba <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004986:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800498a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800498e:	f083 0320 	eor.w	r3, r3, #32
 8004992:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	441a      	add	r2, r3
 80049a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	8013      	strh	r3, [r2, #0]
 80049b8:	e01d      	b.n	80049f6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	441a      	add	r2, r3
 80049de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	441a      	add	r2, r3
 8004a18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	376c      	adds	r7, #108	; 0x6c
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b08d      	sub	sp, #52	; 0x34
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	7b1b      	ldrb	r3, [r3, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 808e 	bne.w	8004b6c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d044      	beq.n	8004ae2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	81bb      	strh	r3, [r7, #12]
 8004a66:	89bb      	ldrh	r3, [r7, #12]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01b      	beq.n	8004aa8 <USB_DeactivateEndpoint+0x6c>
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	817b      	strh	r3, [r7, #10]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004abe:	813b      	strh	r3, [r7, #8]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	893b      	ldrh	r3, [r7, #8]
 8004acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8013      	strh	r3, [r2, #0]
 8004ae0:	e192      	b.n	8004e08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	827b      	strh	r3, [r7, #18]
 8004af0:	8a7b      	ldrh	r3, [r7, #18]
 8004af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01b      	beq.n	8004b32 <USB_DeactivateEndpoint+0xf6>
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b10:	823b      	strh	r3, [r7, #16]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	8a3b      	ldrh	r3, [r7, #16]
 8004b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	81fb      	strh	r3, [r7, #14]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]
 8004b6a:	e14d      	b.n	8004e08 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f040 80a5 	bne.w	8004cc0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	843b      	strh	r3, [r7, #32]
 8004b84:	8c3b      	ldrh	r3, [r7, #32]
 8004b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01b      	beq.n	8004bc6 <USB_DeactivateEndpoint+0x18a>
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	83fb      	strh	r3, [r7, #30]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	8bfb      	ldrh	r3, [r7, #30]
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	83bb      	strh	r3, [r7, #28]
 8004bd4:	8bbb      	ldrh	r3, [r7, #28]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d01b      	beq.n	8004c16 <USB_DeactivateEndpoint+0x1da>
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf4:	837b      	strh	r3, [r7, #26]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	441a      	add	r2, r3
 8004c00:	8b7b      	ldrh	r3, [r7, #26]
 8004c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2c:	833b      	strh	r3, [r7, #24]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	441a      	add	r2, r3
 8004c38:	8b3b      	ldrh	r3, [r7, #24]
 8004c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c64:	82fb      	strh	r3, [r7, #22]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	441a      	add	r2, r3
 8004c70:	8afb      	ldrh	r3, [r7, #22]
 8004c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9c:	82bb      	strh	r3, [r7, #20]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	8abb      	ldrh	r3, [r7, #20]
 8004caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]
 8004cbe:	e0a3      	b.n	8004e08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01b      	beq.n	8004d10 <USB_DeactivateEndpoint+0x2d4>
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <USB_DeactivateEndpoint+0x324>
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	441a      	add	r2, r3
 8004dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3734      	adds	r7, #52	; 0x34
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b0cc      	sub	sp, #304	; 0x130
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e22:	6018      	str	r0, [r3, #0]
 8004e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	f041 817d 	bne.w	800613a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d908      	bls.n	8004e6e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e6c:	e007      	b.n	8004e7e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	7b1b      	ldrb	r3, [r3, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d152      	bne.n	8004f34 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6959      	ldr	r1, [r3, #20]
 8004e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	88da      	ldrh	r2, [r3, #6]
 8004ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004eb0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004eb4:	6800      	ldr	r0, [r0, #0]
 8004eb6:	f001 ff0e 	bl	8006cd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ec2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ec6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ee8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eec:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	011a      	lsls	r2, r3, #4
 8004f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	f001 b8b5 	b.w	800609e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	78db      	ldrb	r3, [r3, #3]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	f040 84c6 	bne.w	80058d2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	f240 8443 	bls.w	80057ea <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	1ad2      	subs	r2, r2, r3
 8004fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 823e 	beq.w	8005482 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800500e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005012:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f040 809a 	bne.w	8005160 <USB_EPStartXfer+0x34c>
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005034:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005038:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504e:	b29b      	uxth	r3, r3
 8005050:	4619      	mov	r1, r3
 8005052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800505a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800505e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	440a      	add	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	011a      	lsls	r2, r3, #4
 8005076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4413      	add	r3, r2
 8005082:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d122      	bne.n	80050de <USB_EPStartXfer+0x2ca>
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	801a      	strh	r2, [r3, #0]
 80050dc:	e079      	b.n	80051d2 <USB_EPStartXfer+0x3be>
 80050de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e2:	2b3e      	cmp	r3, #62	; 0x3e
 80050e4:	d81b      	bhi.n	800511e <USB_EPStartXfer+0x30a>
 80050e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <USB_EPStartXfer+0x2f2>
 80050fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005100:	3301      	adds	r3, #1
 8005102:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005106:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800510a:	b29b      	uxth	r3, r3
 800510c:	029b      	lsls	r3, r3, #10
 800510e:	b29a      	uxth	r2, r3
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e059      	b.n	80051d2 <USB_EPStartXfer+0x3be>
 800511e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <USB_EPStartXfer+0x32a>
 8005134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005138:	3b01      	subs	r3, #1
 800513a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800513e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005142:	b29b      	uxth	r3, r3
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	b29b      	uxth	r3, r3
 8005148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005150:	b29a      	uxth	r2, r3
 8005152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005156:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e038      	b.n	80051d2 <USB_EPStartXfer+0x3be>
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d130      	bne.n	80051d2 <USB_EPStartXfer+0x3be>
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517e:	b29b      	uxth	r3, r3
 8005180:	4619      	mov	r1, r3
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800518a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800518e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	440a      	add	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	011a      	lsls	r2, r3, #4
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80051b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	895b      	ldrh	r3, [r3, #10]
 80051de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6959      	ldr	r1, [r3, #20]
 80051ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005200:	6800      	ldr	r0, [r0, #0]
 8005202:	f001 fd68 	bl	8006cd6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005216:	441a      	add	r2, r3
 8005218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	429a      	cmp	r2, r3
 800523e:	d90f      	bls.n	8005260 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a1a      	ldr	r2, [r3, #32]
 800524c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005250:	1ad2      	subs	r2, r2, r3
 8005252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	621a      	str	r2, [r3, #32]
 800525e:	e00e      	b.n	800527e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2200      	movs	r2, #0
 800527c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f040 809a 	bne.w	80053c4 <USB_EPStartXfer+0x5b0>
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005298:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800529c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052c2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	440a      	add	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	011a      	lsls	r2, r3, #4
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d122      	bne.n	8005342 <USB_EPStartXfer+0x52e>
 80052fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005300:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800530e:	b29a      	uxth	r2, r3
 8005310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005314:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005320:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005338:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e083      	b.n	800544a <USB_EPStartXfer+0x636>
 8005342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005346:	2b3e      	cmp	r3, #62	; 0x3e
 8005348:	d81b      	bhi.n	8005382 <USB_EPStartXfer+0x56e>
 800534a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <USB_EPStartXfer+0x556>
 8005360:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005364:	3301      	adds	r3, #1
 8005366:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800536a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29a      	uxth	r2, r3
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	e063      	b.n	800544a <USB_EPStartXfer+0x636>
 8005382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <USB_EPStartXfer+0x58e>
 8005398:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800539c:	3b01      	subs	r3, #1
 800539e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e042      	b.n	800544a <USB_EPStartXfer+0x636>
 80053c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d13a      	bne.n	800544a <USB_EPStartXfer+0x636>
 80053d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	4619      	mov	r1, r3
 80053fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005402:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005406:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	440a      	add	r2, r1
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	011a      	lsls	r2, r3, #4
 800541e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005422:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4413      	add	r3, r2
 800542a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543c:	b29a      	uxth	r2, r3
 800543e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005442:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800544a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	891b      	ldrh	r3, [r3, #8]
 8005456:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6959      	ldr	r1, [r3, #20]
 8005466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546a:	b29b      	uxth	r3, r3
 800546c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005470:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005474:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005478:	6800      	ldr	r0, [r0, #0]
 800547a:	f001 fc2c 	bl	8006cd6 <USB_WritePMA>
 800547e:	f000 be0e 	b.w	800609e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	785b      	ldrb	r3, [r3, #1]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d16d      	bne.n	800556e <USB_EPStartXfer+0x75a>
 8005492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005496:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	64bb      	str	r3, [r7, #72]	; 0x48
 800549e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b2:	4413      	add	r3, r2
 80054b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	011a      	lsls	r2, r3, #4
 80054c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c6:	4413      	add	r3, r2
 80054c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d112      	bne.n	80054fc <USB_EPStartXfer+0x6e8>
 80054d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e063      	b.n	80055c4 <USB_EPStartXfer+0x7b0>
 80054fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005500:	2b3e      	cmp	r3, #62	; 0x3e
 8005502:	d817      	bhi.n	8005534 <USB_EPStartXfer+0x720>
 8005504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800550e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <USB_EPStartXfer+0x710>
 800551a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800551e:	3301      	adds	r3, #1
 8005520:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005524:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005528:	b29b      	uxth	r3, r3
 800552a:	029b      	lsls	r3, r3, #10
 800552c:	b29a      	uxth	r2, r3
 800552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e047      	b.n	80055c4 <USB_EPStartXfer+0x7b0>
 8005534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800553e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <USB_EPStartXfer+0x740>
 800554a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800554e:	3b01      	subs	r3, #1
 8005550:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005554:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29a      	uxth	r2, r3
 8005568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e02a      	b.n	80055c4 <USB_EPStartXfer+0x7b0>
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	785b      	ldrb	r3, [r3, #1]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d122      	bne.n	80055c4 <USB_EPStartXfer+0x7b0>
 800557e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	653b      	str	r3, [r7, #80]	; 0x50
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559e:	4413      	add	r3, r2
 80055a0:	653b      	str	r3, [r7, #80]	; 0x50
 80055a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	011a      	lsls	r2, r3, #4
 80055b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b2:	4413      	add	r3, r2
 80055b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	891b      	ldrh	r3, [r3, #8]
 80055d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6959      	ldr	r1, [r3, #20]
 80055e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055ea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055ee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055f2:	6800      	ldr	r0, [r0, #0]
 80055f4:	f001 fb6f 	bl	8006cd6 <USB_WritePMA>
            ep->xfer_buff += len;
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005608:	441a      	add	r2, r3
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6a1a      	ldr	r2, [r3, #32]
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	429a      	cmp	r2, r3
 8005630:	d90f      	bls.n	8005652 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005642:	1ad2      	subs	r2, r2, r3
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	621a      	str	r2, [r3, #32]
 8005650:	e00e      	b.n	8005670 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2200      	movs	r2, #0
 800566e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	643b      	str	r3, [r7, #64]	; 0x40
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d16d      	bne.n	8005768 <USB_EPStartXfer+0x954>
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	63bb      	str	r3, [r7, #56]	; 0x38
 8005698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	4413      	add	r3, r2
 80056ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	011a      	lsls	r2, r3, #4
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34
 80056c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d112      	bne.n	80056f6 <USB_EPStartXfer+0x8e2>
 80056d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e05d      	b.n	80057b2 <USB_EPStartXfer+0x99e>
 80056f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fa:	2b3e      	cmp	r3, #62	; 0x3e
 80056fc:	d817      	bhi.n	800572e <USB_EPStartXfer+0x91a>
 80056fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <USB_EPStartXfer+0x90a>
 8005714:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005718:	3301      	adds	r3, #1
 800571a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800571e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005722:	b29b      	uxth	r3, r3
 8005724:	029b      	lsls	r3, r3, #10
 8005726:	b29a      	uxth	r2, r3
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	e041      	b.n	80057b2 <USB_EPStartXfer+0x99e>
 800572e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <USB_EPStartXfer+0x93a>
 8005744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005748:	3b01      	subs	r3, #1
 800574a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800574e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005752:	b29b      	uxth	r3, r3
 8005754:	029b      	lsls	r3, r3, #10
 8005756:	b29b      	uxth	r3, r3
 8005758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005760:	b29a      	uxth	r2, r3
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	e024      	b.n	80057b2 <USB_EPStartXfer+0x99e>
 8005768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d11c      	bne.n	80057b2 <USB_EPStartXfer+0x99e>
 8005778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005786:	b29b      	uxth	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578c:	4413      	add	r3, r2
 800578e:	643b      	str	r3, [r7, #64]	; 0x40
 8005790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	011a      	lsls	r2, r3, #4
 800579e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a0:	4413      	add	r3, r2
 80057a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	895b      	ldrh	r3, [r3, #10]
 80057be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6959      	ldr	r1, [r3, #20]
 80057ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057e0:	6800      	ldr	r0, [r0, #0]
 80057e2:	f001 fa78 	bl	8006cd6 <USB_WritePMA>
 80057e6:	f000 bc5a 	b.w	800609e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80057fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800581c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005820:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	b29b      	uxth	r3, r3
 8005854:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005870:	b29b      	uxth	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005876:	4413      	add	r3, r2
 8005878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	011a      	lsls	r2, r3, #4
 8005888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588a:	4413      	add	r3, r2
 800588c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005890:	65bb      	str	r3, [r7, #88]	; 0x58
 8005892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005896:	b29a      	uxth	r2, r3
 8005898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800589a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800589c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	891b      	ldrh	r3, [r3, #8]
 80058a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6959      	ldr	r1, [r3, #20]
 80058b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	f001 fa03 	bl	8006cd6 <USB_WritePMA>
 80058d0:	e3e5      	b.n	800609e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80058d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80058fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005900:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005922:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800592e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6a1a      	ldr	r2, [r3, #32]
 800593a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800594c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005950:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 81bc 	beq.w	8005cec <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d16d      	bne.n	8005a6e <USB_EPStartXfer+0xc5a>
 8005992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	67bb      	str	r3, [r7, #120]	; 0x78
 800599e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b2:	4413      	add	r3, r2
 80059b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	011a      	lsls	r2, r3, #4
 80059c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059cc:	677b      	str	r3, [r7, #116]	; 0x74
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d112      	bne.n	80059fc <USB_EPStartXfer+0xbe8>
 80059d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	e060      	b.n	8005abe <USB_EPStartXfer+0xcaa>
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	2b3e      	cmp	r3, #62	; 0x3e
 8005a02:	d817      	bhi.n	8005a34 <USB_EPStartXfer+0xc20>
 8005a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <USB_EPStartXfer+0xc10>
 8005a1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	e044      	b.n	8005abe <USB_EPStartXfer+0xcaa>
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <USB_EPStartXfer+0xc40>
 8005a4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e027      	b.n	8005abe <USB_EPStartXfer+0xcaa>
 8005a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d11f      	bne.n	8005abe <USB_EPStartXfer+0xcaa>
 8005a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a94:	4413      	add	r3, r2
 8005a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	011a      	lsls	r2, r3, #4
 8005aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aac:	4413      	add	r3, r2
 8005aae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005abc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	895b      	ldrh	r3, [r3, #10]
 8005aca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6959      	ldr	r1, [r3, #20]
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ae4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ae8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005aec:	6800      	ldr	r0, [r0, #0]
 8005aee:	f001 f8f2 	bl	8006cd6 <USB_WritePMA>
          ep->xfer_buff += len;
 8005af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b02:	441a      	add	r2, r3
 8005b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d90f      	bls.n	8005b4c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6a1a      	ldr	r2, [r3, #32]
 8005b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3c:	1ad2      	subs	r2, r2, r3
 8005b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	621a      	str	r2, [r3, #32]
 8005b4a:	e00e      	b.n	8005b6a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8295 	beq.w	800609e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d16d      	bne.n	8005c60 <USB_EPStartXfer+0xe4c>
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ba4:	4413      	add	r3, r2
 8005ba6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	011a      	lsls	r2, r3, #4
 8005bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bbe:	667b      	str	r3, [r7, #100]	; 0x64
 8005bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d112      	bne.n	8005bee <USB_EPStartXfer+0xdda>
 8005bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	e063      	b.n	8005cb6 <USB_EPStartXfer+0xea2>
 8005bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf4:	d817      	bhi.n	8005c26 <USB_EPStartXfer+0xe12>
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <USB_EPStartXfer+0xe02>
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c10:	3301      	adds	r3, #1
 8005c12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	e047      	b.n	8005cb6 <USB_EPStartXfer+0xea2>
 8005c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <USB_EPStartXfer+0xe32>
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c40:	3b01      	subs	r3, #1
 8005c42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	029b      	lsls	r3, r3, #10
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c5c:	801a      	strh	r2, [r3, #0]
 8005c5e:	e02a      	b.n	8005cb6 <USB_EPStartXfer+0xea2>
 8005c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d122      	bne.n	8005cb6 <USB_EPStartXfer+0xea2>
 8005c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c90:	4413      	add	r3, r2
 8005c92:	673b      	str	r3, [r7, #112]	; 0x70
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	011a      	lsls	r2, r3, #4
 8005ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	891b      	ldrh	r3, [r3, #8]
 8005cc2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6959      	ldr	r1, [r3, #20]
 8005cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cdc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ce0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ce4:	6800      	ldr	r0, [r0, #0]
 8005ce6:	f000 fff6 	bl	8006cd6 <USB_WritePMA>
 8005cea:	e1d8      	b.n	800609e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d178      	bne.n	8005dee <USB_EPStartXfer+0xfda>
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d20:	4413      	add	r3, r2
 8005d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	011a      	lsls	r2, r3, #4
 8005d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d38:	4413      	add	r3, r2
 8005d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d116      	bne.n	8005d78 <USB_EPStartXfer+0xf64>
 8005d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e06b      	b.n	8005e50 <USB_EPStartXfer+0x103c>
 8005d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7e:	d818      	bhi.n	8005db2 <USB_EPStartXfer+0xf9e>
 8005d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <USB_EPStartXfer+0xf8c>
 8005d96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005da0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	029b      	lsls	r3, r3, #10
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e04e      	b.n	8005e50 <USB_EPStartXfer+0x103c>
 8005db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <USB_EPStartXfer+0xfbe>
 8005dc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005dd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e030      	b.n	8005e50 <USB_EPStartXfer+0x103c>
 8005dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d128      	bne.n	8005e50 <USB_EPStartXfer+0x103c>
 8005dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e22:	4413      	add	r3, r2
 8005e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	011a      	lsls	r2, r3, #4
 8005e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	891b      	ldrh	r3, [r3, #8]
 8005e5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6959      	ldr	r1, [r3, #20]
 8005e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e76:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e7a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e7e:	6800      	ldr	r0, [r0, #0]
 8005e80:	f000 ff29 	bl	8006cd6 <USB_WritePMA>
          ep->xfer_buff += len;
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e94:	441a      	add	r2, r3
 8005e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d90f      	bls.n	8005ede <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6a1a      	ldr	r2, [r3, #32]
 8005eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ece:	1ad2      	subs	r2, r2, r3
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	621a      	str	r2, [r3, #32]
 8005edc:	e00e      	b.n	8005efc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80cc 	beq.w	800609e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d178      	bne.n	8006016 <USB_EPStartXfer+0x1202>
 8005f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f48:	4413      	add	r3, r2
 8005f4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	011a      	lsls	r2, r3, #4
 8005f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d116      	bne.n	8005fa0 <USB_EPStartXfer+0x118c>
 8005f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	e064      	b.n	800606a <USB_EPStartXfer+0x1256>
 8005fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fa6:	d818      	bhi.n	8005fda <USB_EPStartXfer+0x11c6>
 8005fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <USB_EPStartXfer+0x11b4>
 8005fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	029b      	lsls	r3, r3, #10
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	e047      	b.n	800606a <USB_EPStartXfer+0x1256>
 8005fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <USB_EPStartXfer+0x11e6>
 8005ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	029b      	lsls	r3, r3, #10
 8006002:	b29b      	uxth	r3, r3
 8006004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800600c:	b29a      	uxth	r2, r3
 800600e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e029      	b.n	800606a <USB_EPStartXfer+0x1256>
 8006016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d121      	bne.n	800606a <USB_EPStartXfer+0x1256>
 8006026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006034:	b29b      	uxth	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800603c:	4413      	add	r3, r2
 800603e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	011a      	lsls	r2, r3, #4
 8006050:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006054:	4413      	add	r3, r2
 8006056:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800605a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800605e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006068:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800606a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	895b      	ldrh	r3, [r3, #10]
 8006076:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6959      	ldr	r1, [r3, #20]
 8006086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608a:	b29b      	uxth	r3, r3
 800608c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006090:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006094:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006098:	6800      	ldr	r0, [r0, #0]
 800609a:	f000 fe1c 	bl	8006cd6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800609e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060c0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060cc:	8013      	strh	r3, [r2, #0]
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80060d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060da:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060de:	8812      	ldrh	r2, [r2, #0]
 80060e0:	f082 0210 	eor.w	r2, r2, #16
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80060ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060f2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060f6:	8812      	ldrh	r2, [r2, #0]
 80060f8:	f082 0220 	eor.w	r2, r2, #32
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]
 8006136:	f000 bc9f 	b.w	8006a78 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	7b1b      	ldrb	r3, [r3, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f040 80ae 	bne.w	80062a8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800614c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	429a      	cmp	r2, r3
 8006166:	d917      	bls.n	8006198 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006188:	1ad2      	subs	r2, r2, r3
 800618a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	619a      	str	r2, [r3, #24]
 8006196:	e00e      	b.n	80061b6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80061a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2200      	movs	r2, #0
 80061b4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061da:	4413      	add	r3, r2
 80061dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	011a      	lsls	r2, r3, #4
 80061ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061f2:	4413      	add	r3, r2
 80061f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d116      	bne.n	8006232 <USB_EPStartXfer+0x141e>
 8006204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e3e8      	b.n	8006a04 <USB_EPStartXfer+0x1bf0>
 8006232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006236:	2b3e      	cmp	r3, #62	; 0x3e
 8006238:	d818      	bhi.n	800626c <USB_EPStartXfer+0x1458>
 800623a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <USB_EPStartXfer+0x1446>
 8006250:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006254:	3301      	adds	r3, #1
 8006256:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800625a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800625e:	b29b      	uxth	r3, r3
 8006260:	029b      	lsls	r3, r3, #10
 8006262:	b29a      	uxth	r2, r3
 8006264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006268:	801a      	strh	r2, [r3, #0]
 800626a:	e3cb      	b.n	8006a04 <USB_EPStartXfer+0x1bf0>
 800626c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <USB_EPStartXfer+0x1478>
 8006282:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006286:	3b01      	subs	r3, #1
 8006288:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800628c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006290:	b29b      	uxth	r3, r3
 8006292:	029b      	lsls	r3, r3, #10
 8006294:	b29b      	uxth	r3, r3
 8006296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629e:	b29a      	uxth	r2, r3
 80062a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	e3ad      	b.n	8006a04 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	78db      	ldrb	r3, [r3, #3]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f040 8200 	bne.w	80066ba <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 8091 	bne.w	80063ee <USB_EPStartXfer+0x15da>
 80062cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062f0:	4413      	add	r3, r2
 80062f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	011a      	lsls	r2, r3, #4
 8006304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006308:	4413      	add	r3, r2
 800630a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800630e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d116      	bne.n	8006350 <USB_EPStartXfer+0x153c>
 8006322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800632e:	b29a      	uxth	r2, r3
 8006330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	e083      	b.n	8006458 <USB_EPStartXfer+0x1644>
 8006350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b3e      	cmp	r3, #62	; 0x3e
 800635e:	d820      	bhi.n	80063a2 <USB_EPStartXfer+0x158e>
 8006360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <USB_EPStartXfer+0x157c>
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638a:	3301      	adds	r3, #1
 800638c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006394:	b29b      	uxth	r3, r3
 8006396:	029b      	lsls	r3, r3, #10
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e05a      	b.n	8006458 <USB_EPStartXfer+0x1644>
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <USB_EPStartXfer+0x15be>
 80063c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063cc:	3b01      	subs	r3, #1
 80063ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	029b      	lsls	r3, r3, #10
 80063da:	b29b      	uxth	r3, r3
 80063dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e034      	b.n	8006458 <USB_EPStartXfer+0x1644>
 80063ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d12c      	bne.n	8006458 <USB_EPStartXfer+0x1644>
 80063fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800640c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800641a:	b29b      	uxth	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006422:	4413      	add	r3, r2
 8006424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	011a      	lsls	r2, r3, #4
 8006436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643a:	4413      	add	r3, r2
 800643c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	b29a      	uxth	r2, r3
 8006452:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006456:	801a      	strh	r2, [r3, #0]
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f040 8091 	bne.w	800659a <USB_EPStartXfer+0x1786>
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006494:	b29b      	uxth	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800649c:	4413      	add	r3, r2
 800649e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	011a      	lsls	r2, r3, #4
 80064b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064b4:	4413      	add	r3, r2
 80064b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d116      	bne.n	80064fc <USB_EPStartXfer+0x16e8>
 80064ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064da:	b29a      	uxth	r2, r3
 80064dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	e07c      	b.n	80065f6 <USB_EPStartXfer+0x17e2>
 80064fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b3e      	cmp	r3, #62	; 0x3e
 800650a:	d820      	bhi.n	800654e <USB_EPStartXfer+0x173a>
 800650c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800651e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <USB_EPStartXfer+0x1728>
 8006532:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006536:	3301      	adds	r3, #1
 8006538:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800653c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006540:	b29b      	uxth	r3, r3
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	b29a      	uxth	r2, r3
 8006546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	e053      	b.n	80065f6 <USB_EPStartXfer+0x17e2>
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <USB_EPStartXfer+0x176a>
 8006574:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006578:	3b01      	subs	r3, #1
 800657a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800657e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e02d      	b.n	80065f6 <USB_EPStartXfer+0x17e2>
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d125      	bne.n	80065f6 <USB_EPStartXfer+0x17e2>
 80065aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065c0:	4413      	add	r3, r2
 80065c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	011a      	lsls	r2, r3, #4
 80065d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065d8:	4413      	add	r3, r2
 80065da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065f4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 81fe 	beq.w	8006a04 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006628:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800662c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <USB_EPStartXfer+0x182c>
 8006634:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10d      	bne.n	800665c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006640:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006648:	2b00      	cmp	r3, #0
 800664a:	f040 81db 	bne.w	8006a04 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800664e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 81d4 	bne.w	8006a04 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80066a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]
 80066b8:	e1a4      	b.n	8006a04 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80066ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	78db      	ldrb	r3, [r3, #3]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	f040 819a 	bne.w	8006a00 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d917      	bls.n	8006718 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80066e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699a      	ldr	r2, [r3, #24]
 8006704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006708:	1ad2      	subs	r2, r2, r3
 800670a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	619a      	str	r2, [r3, #24]
 8006716:	e00e      	b.n	8006736 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d178      	bne.n	8006838 <USB_EPStartXfer+0x1a24>
 8006746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800676a:	4413      	add	r3, r2
 800676c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	011a      	lsls	r2, r3, #4
 800677e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006782:	4413      	add	r3, r2
 8006784:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006788:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800678c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d116      	bne.n	80067c2 <USB_EPStartXfer+0x19ae>
 8006794:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	e06b      	b.n	800689a <USB_EPStartXfer+0x1a86>
 80067c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c6:	2b3e      	cmp	r3, #62	; 0x3e
 80067c8:	d818      	bhi.n	80067fc <USB_EPStartXfer+0x19e8>
 80067ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <USB_EPStartXfer+0x19d6>
 80067e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e4:	3301      	adds	r3, #1
 80067e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	029b      	lsls	r3, r3, #10
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e04e      	b.n	800689a <USB_EPStartXfer+0x1a86>
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	095b      	lsrs	r3, r3, #5
 8006802:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680a:	f003 031f 	and.w	r3, r3, #31
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <USB_EPStartXfer+0x1a08>
 8006812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006816:	3b01      	subs	r3, #1
 8006818:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800681c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006820:	b29b      	uxth	r3, r3
 8006822:	029b      	lsls	r3, r3, #10
 8006824:	b29b      	uxth	r3, r3
 8006826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682e:	b29a      	uxth	r2, r3
 8006830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	e030      	b.n	800689a <USB_EPStartXfer+0x1a86>
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d128      	bne.n	800689a <USB_EPStartXfer+0x1a86>
 8006848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006864:	b29b      	uxth	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	4413      	add	r3, r2
 800686e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	011a      	lsls	r2, r3, #4
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	4413      	add	r3, r2
 8006886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800688a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800688e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006892:	b29a      	uxth	r2, r3
 8006894:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d178      	bne.n	80069aa <USB_EPStartXfer+0x1b96>
 80068b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	461a      	mov	r2, r3
 80068d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068dc:	4413      	add	r3, r2
 80068de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	011a      	lsls	r2, r3, #4
 80068f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f4:	4413      	add	r3, r2
 80068f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d116      	bne.n	8006934 <USB_EPStartXfer+0x1b20>
 8006906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006912:	b29a      	uxth	r2, r3
 8006914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692a:	b29a      	uxth	r2, r3
 800692c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e067      	b.n	8006a04 <USB_EPStartXfer+0x1bf0>
 8006934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006938:	2b3e      	cmp	r3, #62	; 0x3e
 800693a:	d818      	bhi.n	800696e <USB_EPStartXfer+0x1b5a>
 800693c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <USB_EPStartXfer+0x1b48>
 8006952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006956:	3301      	adds	r3, #1
 8006958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800695c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006960:	b29b      	uxth	r3, r3
 8006962:	029b      	lsls	r3, r3, #10
 8006964:	b29a      	uxth	r2, r3
 8006966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	e04a      	b.n	8006a04 <USB_EPStartXfer+0x1bf0>
 800696e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <USB_EPStartXfer+0x1b7a>
 8006984:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006988:	3b01      	subs	r3, #1
 800698a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800698e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006992:	b29b      	uxth	r3, r3
 8006994:	029b      	lsls	r3, r3, #10
 8006996:	b29b      	uxth	r3, r3
 8006998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069a6:	801a      	strh	r2, [r3, #0]
 80069a8:	e02c      	b.n	8006a04 <USB_EPStartXfer+0x1bf0>
 80069aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d124      	bne.n	8006a04 <USB_EPStartXfer+0x1bf0>
 80069ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d0:	4413      	add	r3, r2
 80069d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	011a      	lsls	r2, r3, #4
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e8:	4413      	add	r3, r2
 80069ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	e001      	b.n	8006a04 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e03a      	b.n	8006a7a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a2e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a3a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a42:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	441a      	add	r2, r3
 8006a60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d020      	beq.n	8006ad8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aac:	81bb      	strh	r3, [r7, #12]
 8006aae:	89bb      	ldrh	r3, [r7, #12]
 8006ab0:	f083 0310 	eor.w	r3, r3, #16
 8006ab4:	81bb      	strh	r3, [r7, #12]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	441a      	add	r2, r3
 8006ac0:	89bb      	ldrh	r3, [r7, #12]
 8006ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	8013      	strh	r3, [r2, #0]
 8006ad6:	e01f      	b.n	8006b18 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	81fb      	strh	r3, [r7, #14]
 8006af0:	89fb      	ldrh	r3, [r7, #14]
 8006af2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006af6:	81fb      	strh	r3, [r7, #14]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	89fb      	ldrh	r3, [r7, #14]
 8006b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr

08006b24 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	7b1b      	ldrb	r3, [r3, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 809d 	bne.w	8006c72 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d04c      	beq.n	8006bda <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	823b      	strh	r3, [r7, #16]
 8006b4e:	8a3b      	ldrh	r3, [r7, #16]
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01b      	beq.n	8006b90 <USB_EPClearStall+0x6c>
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6e:	81fb      	strh	r3, [r7, #14]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	89fb      	ldrh	r3, [r7, #14]
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	78db      	ldrb	r3, [r3, #3]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d06c      	beq.n	8006c72 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bae:	81bb      	strh	r3, [r7, #12]
 8006bb0:	89bb      	ldrh	r3, [r7, #12]
 8006bb2:	f083 0320 	eor.w	r3, r3, #32
 8006bb6:	81bb      	strh	r3, [r7, #12]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	89bb      	ldrh	r3, [r7, #12]
 8006bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]
 8006bd8:	e04b      	b.n	8006c72 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	82fb      	strh	r3, [r7, #22]
 8006be8:	8afb      	ldrh	r3, [r7, #22]
 8006bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d01b      	beq.n	8006c2a <USB_EPClearStall+0x106>
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c08:	82bb      	strh	r3, [r7, #20]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	8abb      	ldrh	r3, [r7, #20]
 8006c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c40:	827b      	strh	r3, [r7, #18]
 8006c42:	8a7b      	ldrh	r3, [r7, #18]
 8006c44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c48:	827b      	strh	r3, [r7, #18]
 8006c4a:	8a7b      	ldrh	r3, [r7, #18]
 8006c4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c50:	827b      	strh	r3, [r7, #18]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	441a      	add	r2, r3
 8006c5c:	8a7b      	ldrh	r3, [r7, #18]
 8006c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d103      	bne.n	8006c98 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2280      	movs	r2, #128	; 0x80
 8006c94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cca:	68fb      	ldr	r3, [r7, #12]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr

08006cd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b08d      	sub	sp, #52	; 0x34
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	80fb      	strh	r3, [r7, #6]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006cec:	88bb      	ldrh	r3, [r7, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	005a      	lsls	r2, r3, #1
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d0e:	e01e      	b.n	8006d4e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	3301      	adds	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	3302      	adds	r3, #2
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	3302      	adds	r3, #2
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	3301      	adds	r3, #1
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1dd      	bne.n	8006d10 <USB_WritePMA+0x3a>
  }
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3734      	adds	r7, #52	; 0x34
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b08b      	sub	sp, #44	; 0x2c
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	460b      	mov	r3, r1
 8006d70:	80fb      	strh	r3, [r7, #6]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d76:	88bb      	ldrh	r3, [r7, #4]
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	005a      	lsls	r2, r3, #1
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d92:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
 8006d98:	e01b      	b.n	8006dd2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	3302      	adds	r3, #2
 8006da6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	3302      	adds	r3, #2
 8006dca:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e0      	bne.n	8006d9a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006dd8:	88bb      	ldrh	r3, [r7, #4]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	701a      	strb	r2, [r3, #0]
  }
}
 8006df4:	bf00      	nop
 8006df6:	372c      	adds	r7, #44	; 0x2c
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7c1b      	ldrb	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d115      	bne.n	8006e42 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	2181      	movs	r1, #129	; 0x81
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f002 f90d 	bl	800903e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2e:	2202      	movs	r2, #2
 8006e30:	2101      	movs	r1, #1
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f002 f903 	bl	800903e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006e40:	e012      	b.n	8006e68 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	2202      	movs	r2, #2
 8006e46:	2181      	movs	r1, #129	; 0x81
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f002 f8f8 	bl	800903e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e54:	2340      	movs	r3, #64	; 0x40
 8006e56:	2202      	movs	r2, #2
 8006e58:	2101      	movs	r1, #1
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f002 f8ef 	bl	800903e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e68:	2308      	movs	r3, #8
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	2182      	movs	r1, #130	; 0x82
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f002 f8e5 	bl	800903e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006e7a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e7e:	f002 fa05 	bl	800928c <USBD_static_malloc>
 8006e82:	4602      	mov	r2, r0
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d102      	bne.n	8006e9a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
 8006e98:	e026      	b.n	8006ee8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ea0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7c1b      	ldrb	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ece:	2101      	movs	r1, #1
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f002 f9a5 	bl	8009220 <USBD_LL_PrepareReceive>
 8006ed6:	e007      	b.n	8006ee8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ede:	2340      	movs	r3, #64	; 0x40
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f002 f99c 	bl	8009220 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f02:	2181      	movs	r1, #129	; 0x81
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f002 f8c0 	bl	800908a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f10:	2101      	movs	r1, #1
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f002 f8b9 	bl	800908a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f20:	2182      	movs	r1, #130	; 0x82
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f002 f8b1 	bl	800908a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00e      	beq.n	8006f56 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f002 f9ab 	bl	80092a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d039      	beq.n	8006ffe <USBD_CDC_Setup+0x9e>
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d17f      	bne.n	800708e <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	88db      	ldrh	r3, [r3, #6]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d029      	beq.n	8006fea <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	b25b      	sxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da11      	bge.n	8006fc4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006fac:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	88d2      	ldrh	r2, [r2, #6]
 8006fb2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fb4:	6939      	ldr	r1, [r7, #16]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	88db      	ldrh	r3, [r3, #6]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f994 	bl	80082ea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006fc2:	e06b      	b.n	800709c <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	785a      	ldrb	r2, [r3, #1]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	88db      	ldrh	r3, [r3, #6]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fda:	6939      	ldr	r1, [r7, #16]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	88db      	ldrh	r3, [r3, #6]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 f9af 	bl	8008346 <USBD_CtlPrepareRx>
    break;
 8006fe8:	e058      	b.n	800709c <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	7850      	ldrb	r0, [r2, #1]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	4798      	blx	r3
    break;
 8006ffc:	e04e      	b.n	800709c <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b0b      	cmp	r3, #11
 8007004:	d02e      	beq.n	8007064 <USBD_CDC_Setup+0x104>
 8007006:	2b0b      	cmp	r3, #11
 8007008:	dc38      	bgt.n	800707c <USBD_CDC_Setup+0x11c>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <USBD_CDC_Setup+0xb4>
 800700e:	2b0a      	cmp	r3, #10
 8007010:	d014      	beq.n	800703c <USBD_CDC_Setup+0xdc>
 8007012:	e033      	b.n	800707c <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800701a:	2b03      	cmp	r3, #3
 800701c:	d107      	bne.n	800702e <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800701e:	f107 030c 	add.w	r3, r7, #12
 8007022:	2202      	movs	r2, #2
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 f95f 	bl	80082ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800702c:	e02e      	b.n	800708c <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 f8f0 	bl	8008216 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007036:	2302      	movs	r3, #2
 8007038:	75fb      	strb	r3, [r7, #23]
      break;
 800703a:	e027      	b.n	800708c <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007042:	2b03      	cmp	r3, #3
 8007044:	d107      	bne.n	8007056 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007046:	f107 030f 	add.w	r3, r7, #15
 800704a:	2201      	movs	r2, #1
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 f94b 	bl	80082ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007054:	e01a      	b.n	800708c <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f8dc 	bl	8008216 <USBD_CtlError>
			  ret = USBD_FAIL;
 800705e:	2302      	movs	r3, #2
 8007060:	75fb      	strb	r3, [r7, #23]
      break;
 8007062:	e013      	b.n	800708c <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800706a:	2b03      	cmp	r3, #3
 800706c:	d00d      	beq.n	800708a <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 f8d0 	bl	8008216 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007076:	2302      	movs	r3, #2
 8007078:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800707a:	e006      	b.n	800708a <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f8c9 	bl	8008216 <USBD_CtlError>
      ret = USBD_FAIL;
 8007084:	2302      	movs	r3, #2
 8007086:	75fb      	strb	r3, [r7, #23]
      break;
 8007088:	e000      	b.n	800708c <USBD_CDC_Setup+0x12c>
      break;
 800708a:	bf00      	nop
    }
    break;
 800708c:	e006      	b.n	800709c <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f8c0 	bl	8008216 <USBD_CtlError>
    ret = USBD_FAIL;
 8007096:	2302      	movs	r3, #2
 8007098:	75fb      	strb	r3, [r7, #23]
    break;
 800709a:	bf00      	nop
  }

  return ret;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	460b      	mov	r3, r1
 80070b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070b8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80070c0:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d03a      	beq.n	8007142 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070cc:	78fa      	ldrb	r2, [r7, #3]
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	331c      	adds	r3, #28
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d029      	beq.n	8007136 <USBD_CDC_DataIn+0x90>
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	331c      	adds	r3, #28
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	78f9      	ldrb	r1, [r7, #3]
 80070f6:	68b8      	ldr	r0, [r7, #8]
 80070f8:	460b      	mov	r3, r1
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4403      	add	r3, r0
 8007102:	3338      	adds	r3, #56	; 0x38
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	fbb2 f1f3 	udiv	r1, r2, r3
 800710a:	fb01 f303 	mul.w	r3, r1, r3
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d110      	bne.n	8007136 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	440b      	add	r3, r1
 8007122:	331c      	adds	r3, #28
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007128:	78f9      	ldrb	r1, [r7, #3]
 800712a:	2300      	movs	r3, #0
 800712c:	2200      	movs	r2, #0
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f002 f853 	bl	80091da <USBD_LL_Transmit>
 8007134:	e003      	b.n	800713e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	e000      	b.n	8007144 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007142:	2302      	movs	r3, #2
  }
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800715e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f002 f87e 	bl	8009266 <USBD_LL_GetRxDataSize>
 800716a:	4602      	mov	r2, r0
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00d      	beq.n	8007198 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007190:	4611      	mov	r1, r2
 8007192:	4798      	blx	r3

    return USBD_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	e000      	b.n	800719a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007198:	2302      	movs	r3, #2
  }
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071b0:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d015      	beq.n	80071e8 <USBD_CDC_EP0_RxReady+0x46>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071c2:	2bff      	cmp	r3, #255	; 0xff
 80071c4:	d010      	beq.n	80071e8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80071d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071dc:	b292      	uxth	r2, r2
 80071de:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	22ff      	movs	r2, #255	; 0xff
 80071e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2243      	movs	r2, #67	; 0x43
 8007200:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007202:	4b03      	ldr	r3, [pc, #12]	; (8007210 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000094 	.word	0x20000094

08007214 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2243      	movs	r2, #67	; 0x43
 8007220:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007222:	4b03      	ldr	r3, [pc, #12]	; (8007230 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000050 	.word	0x20000050

08007234 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2243      	movs	r2, #67	; 0x43
 8007240:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007242:	4b03      	ldr	r3, [pc, #12]	; (8007250 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	200000d8 	.word	0x200000d8

08007254 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	220a      	movs	r2, #10
 8007260:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007262:	4b03      	ldr	r3, [pc, #12]	; (8007270 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	2000000c 	.word	0x2000000c

08007274 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	bc80      	pop	{r7}
 800729e:	4770      	bx	lr

080072a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr

080072d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr

080072f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007306:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01c      	beq.n	800734c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007318:	2b00      	cmp	r3, #0
 800731a:	d115      	bne.n	8007348 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2201      	movs	r2, #1
 8007320:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800733a:	b29b      	uxth	r3, r3
 800733c:	2181      	movs	r1, #129	; 0x81
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 ff4b 	bl	80091da <USBD_LL_Transmit>

      return USBD_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	e002      	b.n	800734e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007348:	2301      	movs	r3, #1
 800734a:	e000      	b.n	800734e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800734c:	2302      	movs	r3, #2
  }
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007364:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800736c:	2b00      	cmp	r3, #0
 800736e:	d017      	beq.n	80073a0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	7c1b      	ldrb	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800737e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007382:	2101      	movs	r1, #1
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 ff4b 	bl	8009220 <USBD_LL_PrepareReceive>
 800738a:	e007      	b.n	800739c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007392:	2340      	movs	r3, #64	; 0x40
 8007394:	2101      	movs	r1, #1
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 ff42 	bl	8009220 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	e000      	b.n	80073a2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80073a0:	2302      	movs	r3, #2
  }
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	4613      	mov	r3, r2
 80073b6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073be:	2302      	movs	r3, #2
 80073c0:	e01a      	b.n	80073f8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	79fa      	ldrb	r2, [r7, #7]
 80073ee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f001 fdaf 	bl	8008f54 <USBD_LL_Init>

  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d006      	beq.n	8007422 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
 8007420:	e001      	b.n	8007426 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007422:	2302      	movs	r3, #2
 8007424:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr

08007432 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fde4 	bl	8009008 <USBD_LL_Start>

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr

0800745e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800746a:	2302      	movs	r3, #2
 800746c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00c      	beq.n	8007492 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4611      	mov	r1, r2
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	78fa      	ldrb	r2, [r7, #3]
 80074b2:	4611      	mov	r1, r2
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fe62 	bl	800819e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d016      	beq.n	800752c <USBD_LL_SetupStage+0x6a>
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d81c      	bhi.n	800753c <USBD_LL_SetupStage+0x7a>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <USBD_LL_SetupStage+0x4a>
 8007506:	2b01      	cmp	r3, #1
 8007508:	d008      	beq.n	800751c <USBD_LL_SetupStage+0x5a>
 800750a:	e017      	b.n	800753c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f9c5 	bl	80078a4 <USBD_StdDevReq>
    break;
 800751a:	e01a      	b.n	8007552 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fa27 	bl	8007978 <USBD_StdItfReq>
    break;
 800752a:	e012      	b.n	8007552 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fa67 	bl	8007a08 <USBD_StdEPReq>
    break;
 800753a:	e00a      	b.n	8007552 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007542:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007546:	b2db      	uxtb	r3, r3
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 fdbc 	bl	80090c8 <USBD_LL_StallEP>
    break;
 8007550:	bf00      	nop
  }

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	460b      	mov	r3, r1
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800756a:	7afb      	ldrb	r3, [r7, #11]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d14b      	bne.n	8007608 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007576:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800757e:	2b03      	cmp	r3, #3
 8007580:	d134      	bne.n	80075ec <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d919      	bls.n	80075c2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d203      	bcs.n	80075b0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	e002      	b.n	80075b6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fee1 	bl	8008382 <USBD_CtlContinueRx>
 80075c0:	e038      	b.n	8007634 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d105      	bne.n	80075e4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fede 	bl	80083a6 <USBD_CtlSendStatus>
 80075ea:	e023      	b.n	8007634 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80075f2:	2b05      	cmp	r3, #5
 80075f4:	d11e      	bne.n	8007634 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80075fe:	2100      	movs	r1, #0
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f001 fd61 	bl	80090c8 <USBD_LL_StallEP>
 8007606:	e015      	b.n	8007634 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00d      	beq.n	8007630 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800761a:	2b03      	cmp	r3, #3
 800761c:	d108      	bne.n	8007630 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	7afa      	ldrb	r2, [r7, #11]
 8007628:	4611      	mov	r1, r2
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	4798      	blx	r3
 800762e:	e001      	b.n	8007634 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007630:	2302      	movs	r3, #2
 8007632:	e000      	b.n	8007636 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	460b      	mov	r3, r1
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d17f      	bne.n	8007752 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3314      	adds	r3, #20
 8007656:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800765e:	2b02      	cmp	r3, #2
 8007660:	d15c      	bne.n	800771c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	429a      	cmp	r2, r3
 800766c:	d915      	bls.n	800769a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	b29b      	uxth	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fe4b 	bl	8008322 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800768c:	2300      	movs	r3, #0
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f001 fdc4 	bl	8009220 <USBD_LL_PrepareReceive>
 8007698:	e04e      	b.n	8007738 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	6912      	ldr	r2, [r2, #16]
 80076a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80076a6:	fb01 f202 	mul.w	r2, r1, r2
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d11c      	bne.n	80076ea <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d316      	bcc.n	80076ea <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d20f      	bcs.n	80076ea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fe27 	bl	8008322 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80076dc:	2300      	movs	r3, #0
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f001 fd9c 	bl	8009220 <USBD_LL_PrepareReceive>
 80076e8:	e026      	b.n	8007738 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d105      	bne.n	800770c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800770c:	2180      	movs	r1, #128	; 0x80
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f001 fcda 	bl	80090c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fe59 	bl	80083cc <USBD_CtlReceiveStatus>
 800771a:	e00d      	b.n	8007738 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007722:	2b04      	cmp	r3, #4
 8007724:	d004      	beq.n	8007730 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800772c:	2b00      	cmp	r3, #0
 800772e:	d103      	bne.n	8007738 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007730:	2180      	movs	r1, #128	; 0x80
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f001 fcc8 	bl	80090c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800773e:	2b01      	cmp	r3, #1
 8007740:	d11d      	bne.n	800777e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff fe81 	bl	800744a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007750:	e015      	b.n	800777e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007764:	2b03      	cmp	r3, #3
 8007766:	d108      	bne.n	800777a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	7afa      	ldrb	r2, [r7, #11]
 8007772:	4611      	mov	r1, r2
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	4798      	blx	r3
 8007778:	e001      	b.n	800777e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800777a:	2302      	movs	r3, #2
 800777c:	e000      	b.n	8007780 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	2200      	movs	r2, #0
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 fc51 	bl	800903e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2240      	movs	r2, #64	; 0x40
 80077a8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	2200      	movs	r2, #0
 80077b0:	2180      	movs	r1, #128	; 0x80
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 fc43 	bl	800903e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2240      	movs	r2, #64	; 0x40
 80077c2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d009      	beq.n	8007800 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6852      	ldr	r2, [r2, #4]
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	4611      	mov	r1, r2
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
  }

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	78fa      	ldrb	r2, [r7, #3]
 800781a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr

08007828 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2204      	movs	r2, #4
 8007840:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr

08007850 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr

08007870 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800787e:	2b03      	cmp	r3, #3
 8007880:	d10b      	bne.n	800789a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d005      	beq.n	80078ca <USBD_StdDevReq+0x26>
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d84f      	bhi.n	8007962 <USBD_StdDevReq+0xbe>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <USBD_StdDevReq+0x36>
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	d14b      	bne.n	8007962 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
    break;
 80078d8:	e048      	b.n	800796c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d839      	bhi.n	8007956 <USBD_StdDevReq+0xb2>
 80078e2:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <USBD_StdDevReq+0x44>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	08007939 	.word	0x08007939
 80078ec:	0800794d 	.word	0x0800794d
 80078f0:	08007957 	.word	0x08007957
 80078f4:	08007943 	.word	0x08007943
 80078f8:	08007957 	.word	0x08007957
 80078fc:	0800791b 	.word	0x0800791b
 8007900:	08007911 	.word	0x08007911
 8007904:	08007957 	.word	0x08007957
 8007908:	0800792f 	.word	0x0800792f
 800790c:	08007925 	.word	0x08007925
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9da 	bl	8007ccc <USBD_GetDescriptor>
      break;
 8007918:	e022      	b.n	8007960 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 facf 	bl	8007ec0 <USBD_SetAddress>
      break;
 8007922:	e01d      	b.n	8007960 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fb0e 	bl	8007f48 <USBD_SetConfig>
      break;
 800792c:	e018      	b.n	8007960 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fb97 	bl	8008064 <USBD_GetConfig>
      break;
 8007936:	e013      	b.n	8007960 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fbc7 	bl	80080ce <USBD_GetStatus>
      break;
 8007940:	e00e      	b.n	8007960 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fbf5 	bl	8008134 <USBD_SetFeature>
      break;
 800794a:	e009      	b.n	8007960 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fc04 	bl	800815c <USBD_ClrFeature>
      break;
 8007954:	e004      	b.n	8007960 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc5c 	bl	8008216 <USBD_CtlError>
      break;
 800795e:	bf00      	nop
    }
    break;
 8007960:	e004      	b.n	800796c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc56 	bl	8008216 <USBD_CtlError>
    break;
 800796a:	bf00      	nop
  }

  return ret;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop

08007978 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d005      	beq.n	800799e <USBD_StdItfReq+0x26>
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d82e      	bhi.n	80079f4 <USBD_StdItfReq+0x7c>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <USBD_StdItfReq+0x26>
 800799a:	2b20      	cmp	r3, #32
 800799c:	d12a      	bne.n	80079f4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079a4:	3b01      	subs	r3, #1
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d81d      	bhi.n	80079e6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	889b      	ldrh	r3, [r3, #4]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d813      	bhi.n	80079dc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	88db      	ldrh	r3, [r3, #6]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d110      	bne.n	80079f0 <USBD_StdItfReq+0x78>
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10d      	bne.n	80079f0 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fce6 	bl	80083a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80079da:	e009      	b.n	80079f0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fc19 	bl	8008216 <USBD_CtlError>
      break;
 80079e4:	e004      	b.n	80079f0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fc14 	bl	8008216 <USBD_CtlError>
      break;
 80079ee:	e000      	b.n	80079f2 <USBD_StdItfReq+0x7a>
      break;
 80079f0:	bf00      	nop
    }
    break;
 80079f2:	e004      	b.n	80079fe <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fc0d 	bl	8008216 <USBD_CtlError>
    break;
 80079fc:	bf00      	nop
  }

  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	889b      	ldrh	r3, [r3, #4]
 8007a1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d007      	beq.n	8007a38 <USBD_StdEPReq+0x30>
 8007a28:	2b40      	cmp	r3, #64	; 0x40
 8007a2a:	f200 8144 	bhi.w	8007cb6 <USBD_StdEPReq+0x2ae>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <USBD_StdEPReq+0x40>
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	f040 813f 	bne.w	8007cb6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
    break;
 8007a46:	e13b      	b.n	8007cc0 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	d10a      	bne.n	8007a6a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	e12b      	b.n	8007cc2 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d007      	beq.n	8007a82 <USBD_StdEPReq+0x7a>
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	f300 8119 	bgt.w	8007caa <USBD_StdEPReq+0x2a2>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d072      	beq.n	8007b62 <USBD_StdEPReq+0x15a>
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d03a      	beq.n	8007af6 <USBD_StdEPReq+0xee>
 8007a80:	e113      	b.n	8007caa <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d002      	beq.n	8007a92 <USBD_StdEPReq+0x8a>
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d015      	beq.n	8007abc <USBD_StdEPReq+0xb4>
 8007a90:	e02b      	b.n	8007aea <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00c      	beq.n	8007ab2 <USBD_StdEPReq+0xaa>
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b80      	cmp	r3, #128	; 0x80
 8007a9c:	d009      	beq.n	8007ab2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fb10 	bl	80090c8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007aa8:	2180      	movs	r1, #128	; 0x80
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 fb0c 	bl	80090c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007ab0:	e020      	b.n	8007af4 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fbae 	bl	8008216 <USBD_CtlError>
        break;
 8007aba:	e01b      	b.n	8007af4 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	885b      	ldrh	r3, [r3, #2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10e      	bne.n	8007ae2 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <USBD_StdEPReq+0xda>
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b80      	cmp	r3, #128	; 0x80
 8007ace:	d008      	beq.n	8007ae2 <USBD_StdEPReq+0xda>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	88db      	ldrh	r3, [r3, #6]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 faf3 	bl	80090c8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fc5f 	bl	80083a6 <USBD_CtlSendStatus>

        break;
 8007ae8:	e004      	b.n	8007af4 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fb92 	bl	8008216 <USBD_CtlError>
        break;
 8007af2:	bf00      	nop
      }
      break;
 8007af4:	e0de      	b.n	8007cb4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d002      	beq.n	8007b06 <USBD_StdEPReq+0xfe>
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d015      	beq.n	8007b30 <USBD_StdEPReq+0x128>
 8007b04:	e026      	b.n	8007b54 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <USBD_StdEPReq+0x11e>
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	2b80      	cmp	r3, #128	; 0x80
 8007b10:	d009      	beq.n	8007b26 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 fad6 	bl	80090c8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fad2 	bl	80090c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b24:	e01c      	b.n	8007b60 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fb74 	bl	8008216 <USBD_CtlError>
        break;
 8007b2e:	e017      	b.n	8007b60 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	885b      	ldrh	r3, [r3, #2]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d112      	bne.n	8007b5e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fadd 	bl	8009106 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fc2a 	bl	80083a6 <USBD_CtlSendStatus>
        }
        break;
 8007b52:	e004      	b.n	8007b5e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fb5d 	bl	8008216 <USBD_CtlError>
        break;
 8007b5c:	e000      	b.n	8007b60 <USBD_StdEPReq+0x158>
        break;
 8007b5e:	bf00      	nop
      }
      break;
 8007b60:	e0a8      	b.n	8007cb4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d002      	beq.n	8007b72 <USBD_StdEPReq+0x16a>
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d031      	beq.n	8007bd4 <USBD_StdEPReq+0x1cc>
 8007b70:	e095      	b.n	8007c9e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <USBD_StdEPReq+0x180>
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	d004      	beq.n	8007b88 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fb48 	bl	8008216 <USBD_CtlError>
          break;
 8007b86:	e08f      	b.n	8007ca8 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da0b      	bge.n	8007ba8 <USBD_StdEPReq+0x1a0>
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	3310      	adds	r3, #16
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	e00a      	b.n	8007bbe <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fb8c 	bl	80082ea <USBD_CtlSendData>
          break;
 8007bd2:	e069      	b.n	8007ca8 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da11      	bge.n	8007c00 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	f003 020f 	and.w	r2, r3, #15
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	3318      	adds	r3, #24
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d117      	bne.n	8007c26 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fb0c 	bl	8008216 <USBD_CtlError>
            break;
 8007bfe:	e053      	b.n	8007ca8 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	f003 020f 	and.w	r2, r3, #15
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 faf9 	bl	8008216 <USBD_CtlError>
            break;
 8007c24:	e040      	b.n	8007ca8 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da0b      	bge.n	8007c46 <USBD_StdEPReq+0x23e>
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	3310      	adds	r3, #16
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	3304      	adds	r3, #4
 8007c44:	e00a      	b.n	8007c5c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <USBD_StdEPReq+0x262>
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	d103      	bne.n	8007c72 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	e00e      	b.n	8007c90 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fa64 	bl	8009144 <USBD_LL_IsStallEP>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2201      	movs	r2, #1
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e002      	b.n	8007c90 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2202      	movs	r2, #2
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb27 	bl	80082ea <USBD_CtlSendData>
          break;
 8007c9c:	e004      	b.n	8007ca8 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fab8 	bl	8008216 <USBD_CtlError>
        break;
 8007ca6:	bf00      	nop
      }
      break;
 8007ca8:	e004      	b.n	8007cb4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fab2 	bl	8008216 <USBD_CtlError>
      break;
 8007cb2:	bf00      	nop
    }
    break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 faac 	bl	8008216 <USBD_CtlError>
    break;
 8007cbe:	bf00      	nop
  }

  return ret;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	885b      	ldrh	r3, [r3, #2]
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2b06      	cmp	r3, #6
 8007ce2:	f200 80c9 	bhi.w	8007e78 <USBD_GetDescriptor+0x1ac>
 8007ce6:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <USBD_GetDescriptor+0x20>)
 8007ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cec:	08007d09 	.word	0x08007d09
 8007cf0:	08007d21 	.word	0x08007d21
 8007cf4:	08007d61 	.word	0x08007d61
 8007cf8:	08007e79 	.word	0x08007e79
 8007cfc:	08007e79 	.word	0x08007e79
 8007d00:	08007e25 	.word	0x08007e25
 8007d04:	08007e4b 	.word	0x08007e4b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 010a 	add.w	r1, r7, #10
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
    break;
 8007d1e:	e0b0      	b.n	8007e82 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7c1b      	ldrb	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10d      	bne.n	8007d44 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	f107 020a 	add.w	r2, r7, #10
 8007d34:	4610      	mov	r0, r2
 8007d36:	4798      	blx	r3
 8007d38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	2202      	movs	r2, #2
 8007d40:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007d42:	e09e      	b.n	8007e82 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4c:	f107 020a 	add.w	r2, r7, #10
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
 8007d54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	701a      	strb	r2, [r3, #0]
    break;
 8007d5e:	e090      	b.n	8007e82 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	885b      	ldrh	r3, [r3, #2]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b05      	cmp	r3, #5
 8007d68:	d856      	bhi.n	8007e18 <USBD_GetDescriptor+0x14c>
 8007d6a:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <USBD_GetDescriptor+0xa4>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007d89 	.word	0x08007d89
 8007d74:	08007da1 	.word	0x08007da1
 8007d78:	08007db9 	.word	0x08007db9
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007de9 	.word	0x08007de9
 8007d84:	08007e01 	.word	0x08007e01
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	7c12      	ldrb	r2, [r2, #16]
 8007d94:	f107 010a 	add.w	r1, r7, #10
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	60f8      	str	r0, [r7, #12]
      break;
 8007d9e:	e040      	b.n	8007e22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	7c12      	ldrb	r2, [r2, #16]
 8007dac:	f107 010a 	add.w	r1, r7, #10
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
      break;
 8007db6:	e034      	b.n	8007e22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	7c12      	ldrb	r2, [r2, #16]
 8007dc4:	f107 010a 	add.w	r1, r7, #10
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	60f8      	str	r0, [r7, #12]
      break;
 8007dce:	e028      	b.n	8007e22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 010a 	add.w	r1, r7, #10
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
      break;
 8007de6:	e01c      	b.n	8007e22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 010a 	add.w	r1, r7, #10
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
      break;
 8007dfe:	e010      	b.n	8007e22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7c12      	ldrb	r2, [r2, #16]
 8007e0c:	f107 010a 	add.w	r1, r7, #10
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
      break;
 8007e16:	e004      	b.n	8007e22 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f9fb 	bl	8008216 <USBD_CtlError>
      return;
 8007e20:	e04b      	b.n	8007eba <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007e22:	e02e      	b.n	8007e82 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	7c1b      	ldrb	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d109      	bne.n	8007e40 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e34:	f107 020a 	add.w	r2, r7, #10
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
      break;
 8007e3e:	e020      	b.n	8007e82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9e7 	bl	8008216 <USBD_CtlError>
      return;
 8007e48:	e037      	b.n	8007eba <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	7c1b      	ldrb	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10d      	bne.n	8007e6e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	f107 020a 	add.w	r2, r7, #10
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4798      	blx	r3
 8007e62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	2207      	movs	r2, #7
 8007e6a:	701a      	strb	r2, [r3, #0]
      break;
 8007e6c:	e009      	b.n	8007e82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f9d0 	bl	8008216 <USBD_CtlError>
      return;
 8007e76:	e020      	b.n	8007eba <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f9cb 	bl	8008216 <USBD_CtlError>
    return;
 8007e80:	e01b      	b.n	8007eba <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007e82:	897b      	ldrh	r3, [r7, #10]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d011      	beq.n	8007eac <USBD_GetDescriptor+0x1e0>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	88db      	ldrh	r3, [r3, #6]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00d      	beq.n	8007eac <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	88da      	ldrh	r2, [r3, #6]
 8007e94:	897b      	ldrh	r3, [r7, #10]
 8007e96:	4293      	cmp	r3, r2
 8007e98:	bf28      	it	cs
 8007e9a:	4613      	movcs	r3, r2
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007ea0:	897b      	ldrh	r3, [r7, #10]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	68f9      	ldr	r1, [r7, #12]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa1f 	bl	80082ea <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	88db      	ldrh	r3, [r3, #6]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d102      	bne.n	8007eba <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fa76 	bl	80083a6 <USBD_CtlSendStatus>
  }
}
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	889b      	ldrh	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d130      	bne.n	8007f34 <USBD_SetAddress+0x74>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	88db      	ldrh	r3, [r3, #6]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d12c      	bne.n	8007f34 <USBD_SetAddress+0x74>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	2b7f      	cmp	r3, #127	; 0x7f
 8007ee0:	d828      	bhi.n	8007f34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d104      	bne.n	8007f02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f98b 	bl	8008216 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f00:	e01d      	b.n	8007f3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	7bfa      	ldrb	r2, [r7, #15]
 8007f06:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 f944 	bl	800919c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fa46 	bl	80083a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f28:	e009      	b.n	8007f3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f32:	e004      	b.n	8007f3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f96d 	bl	8008216 <USBD_CtlError>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	885b      	ldrh	r3, [r3, #2]
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	4b41      	ldr	r3, [pc, #260]	; (8008060 <USBD_SetConfig+0x118>)
 8007f5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f5c:	4b40      	ldr	r3, [pc, #256]	; (8008060 <USBD_SetConfig+0x118>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d904      	bls.n	8007f6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f955 	bl	8008216 <USBD_CtlError>
 8007f6c:	e075      	b.n	800805a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d002      	beq.n	8007f7e <USBD_SetConfig+0x36>
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d023      	beq.n	8007fc4 <USBD_SetConfig+0x7c>
 8007f7c:	e062      	b.n	8008044 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007f7e:	4b38      	ldr	r3, [pc, #224]	; (8008060 <USBD_SetConfig+0x118>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01a      	beq.n	8007fbc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007f86:	4b36      	ldr	r3, [pc, #216]	; (8008060 <USBD_SetConfig+0x118>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2203      	movs	r2, #3
 8007f94:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f98:	4b31      	ldr	r3, [pc, #196]	; (8008060 <USBD_SetConfig+0x118>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff fa5d 	bl	800745e <USBD_SetClassConfig>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d104      	bne.n	8007fb4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f932 	bl	8008216 <USBD_CtlError>
          return;
 8007fb2:	e052      	b.n	800805a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f9f6 	bl	80083a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007fba:	e04e      	b.n	800805a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f9f2 	bl	80083a6 <USBD_CtlSendStatus>
      break;
 8007fc2:	e04a      	b.n	800805a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fc4:	4b26      	ldr	r3, [pc, #152]	; (8008060 <USBD_SetConfig+0x118>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d112      	bne.n	8007ff2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007fd4:	4b22      	ldr	r3, [pc, #136]	; (8008060 <USBD_SetConfig+0x118>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007fde:	4b20      	ldr	r3, [pc, #128]	; (8008060 <USBD_SetConfig+0x118>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff fa59 	bl	800749c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f9db 	bl	80083a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007ff0:	e033      	b.n	800805a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007ff2:	4b1b      	ldr	r3, [pc, #108]	; (8008060 <USBD_SetConfig+0x118>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d01d      	beq.n	800803c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff fa47 	bl	800749c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800800e:	4b14      	ldr	r3, [pc, #80]	; (8008060 <USBD_SetConfig+0x118>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008018:	4b11      	ldr	r3, [pc, #68]	; (8008060 <USBD_SetConfig+0x118>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fa1d 	bl	800745e <USBD_SetClassConfig>
 8008024:	4603      	mov	r3, r0
 8008026:	2b02      	cmp	r3, #2
 8008028:	d104      	bne.n	8008034 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f8f2 	bl	8008216 <USBD_CtlError>
          return;
 8008032:	e012      	b.n	800805a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f9b6 	bl	80083a6 <USBD_CtlSendStatus>
      break;
 800803a:	e00e      	b.n	800805a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f9b2 	bl	80083a6 <USBD_CtlSendStatus>
      break;
 8008042:	e00a      	b.n	800805a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8e5 	bl	8008216 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800804c:	4b04      	ldr	r3, [pc, #16]	; (8008060 <USBD_SetConfig+0x118>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff fa22 	bl	800749c <USBD_ClrClassConfig>
      break;
 8008058:	bf00      	nop
    }
  }
}
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	200002b0 	.word	0x200002b0

08008064 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	88db      	ldrh	r3, [r3, #6]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d004      	beq.n	8008080 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f8cc 	bl	8008216 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800807e:	e022      	b.n	80080c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008086:	2b02      	cmp	r3, #2
 8008088:	dc02      	bgt.n	8008090 <USBD_GetConfig+0x2c>
 800808a:	2b00      	cmp	r3, #0
 800808c:	dc03      	bgt.n	8008096 <USBD_GetConfig+0x32>
 800808e:	e015      	b.n	80080bc <USBD_GetConfig+0x58>
 8008090:	2b03      	cmp	r3, #3
 8008092:	d00b      	beq.n	80080ac <USBD_GetConfig+0x48>
 8008094:	e012      	b.n	80080bc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3308      	adds	r3, #8
 80080a0:	2201      	movs	r2, #1
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f920 	bl	80082ea <USBD_CtlSendData>
      break;
 80080aa:	e00c      	b.n	80080c6 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3304      	adds	r3, #4
 80080b0:	2201      	movs	r2, #1
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f918 	bl	80082ea <USBD_CtlSendData>
      break;
 80080ba:	e004      	b.n	80080c6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8a9 	bl	8008216 <USBD_CtlError>
      break;
 80080c4:	bf00      	nop
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80080de:	3b01      	subs	r3, #1
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d81e      	bhi.n	8008122 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	88db      	ldrh	r3, [r3, #6]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d004      	beq.n	80080f6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f891 	bl	8008216 <USBD_CtlError>
      break;
 80080f4:	e01a      	b.n	800812c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f043 0202 	orr.w	r2, r3, #2
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	330c      	adds	r3, #12
 8008116:	2202      	movs	r2, #2
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f8e5 	bl	80082ea <USBD_CtlSendData>
    break;
 8008120:	e004      	b.n	800812c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f876 	bl	8008216 <USBD_CtlError>
    break;
 800812a:	bf00      	nop
  }
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	885b      	ldrh	r3, [r3, #2]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d106      	bne.n	8008154 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f929 	bl	80083a6 <USBD_CtlSendStatus>
  }

}
 8008154:	bf00      	nop
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800816c:	3b01      	subs	r3, #1
 800816e:	2b02      	cmp	r3, #2
 8008170:	d80b      	bhi.n	800818a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d10c      	bne.n	8008194 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f90f 	bl	80083a6 <USBD_CtlSendStatus>
    }
    break;
 8008188:	e004      	b.n	8008194 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f842 	bl	8008216 <USBD_CtlError>
    break;
 8008192:	e000      	b.n	8008196 <USBD_ClrFeature+0x3a>
    break;
 8008194:	bf00      	nop
  }
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	785a      	ldrb	r2, [r3, #1]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	3302      	adds	r3, #2
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b29a      	uxth	r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	3303      	adds	r3, #3
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4413      	add	r3, r2
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	3304      	adds	r3, #4
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	3305      	adds	r3, #5
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	3306      	adds	r3, #6
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	3307      	adds	r3, #7
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	b29b      	uxth	r3, r3
 8008204:	4413      	add	r3, r2
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	80da      	strh	r2, [r3, #6]

}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr

08008216 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008220:	2180      	movs	r1, #128	; 0x80
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 ff50 	bl	80090c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 ff4c 	bl	80090c8 <USBD_LL_StallEP>
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d032      	beq.n	80082b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f834 	bl	80082bc <USBD_GetLen>
 8008254:	4603      	mov	r3, r0
 8008256:	3301      	adds	r3, #1
 8008258:	b29b      	uxth	r3, r3
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	75fa      	strb	r2, [r7, #23]
 8008268:	461a      	mov	r2, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	4413      	add	r3, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	7812      	ldrb	r2, [r2, #0]
 8008272:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	75fa      	strb	r2, [r7, #23]
 800827a:	461a      	mov	r2, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4413      	add	r3, r2
 8008280:	2203      	movs	r2, #3
 8008282:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008284:	e012      	b.n	80082ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	60fa      	str	r2, [r7, #12]
 800828c:	7dfa      	ldrb	r2, [r7, #23]
 800828e:	1c51      	adds	r1, r2, #1
 8008290:	75f9      	strb	r1, [r7, #23]
 8008292:	4611      	mov	r1, r2
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	440a      	add	r2, r1
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	75fa      	strb	r2, [r7, #23]
 80082a2:	461a      	mov	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4413      	add	r3, r2
 80082a8:	2200      	movs	r2, #0
 80082aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e8      	bne.n	8008286 <USBD_GetString+0x4e>
    }
  }
}
 80082b4:	bf00      	nop
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80082c8:	e005      	b.n	80082d6 <USBD_GetLen+0x1a>
    {
        len++;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	3301      	adds	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
        buf++;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3301      	adds	r3, #1
 80082d4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1f5      	bne.n	80082ca <USBD_GetLen+0xe>
    }

    return len;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr

080082ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	4613      	mov	r3, r2
 80082f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008300:	88fa      	ldrh	r2, [r7, #6]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008306:	88fa      	ldrh	r2, [r7, #6]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	2100      	movs	r1, #0
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 ff61 	bl	80091da <USBD_LL_Transmit>

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	4613      	mov	r3, r2
 800832e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	2100      	movs	r1, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 ff4f 	bl	80091da <USBD_LL_Transmit>

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	4613      	mov	r3, r2
 8008352:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2203      	movs	r2, #3
 8008358:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008364:	88fa      	ldrh	r2, [r7, #6]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800836c:	88fb      	ldrh	r3, [r7, #6]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	2100      	movs	r1, #0
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 ff54 	bl	8009220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	4613      	mov	r3, r2
 800838e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008390:	88fb      	ldrh	r3, [r7, #6]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	2100      	movs	r1, #0
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 ff42 	bl	8009220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2204      	movs	r2, #4
 80083b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 ff0c 	bl	80091da <USBD_LL_Transmit>

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2205      	movs	r2, #5
 80083d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80083dc:	2300      	movs	r3, #0
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 ff1c 	bl	8009220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 80083fe:	f7f8 fb8d 	bl	8000b1c <HAL_GetTick>
 8008402:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8008404:	e009      	b.n	800841a <WaitWhileBusy+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 8008406:	f7f8 fb89 	bl	8000b1c <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	429a      	cmp	r2, r3
 8008414:	d901      	bls.n	800841a <WaitWhileBusy+0x26>
		{
			return(LoRa_TIMEOUT);
 8008416:	2302      	movs	r3, #2
 8008418:	e008      	b.n	800842c <WaitWhileBusy+0x38>
	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 800841a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <WaitWhileBusy+0x40>)
 8008420:	f7f8 fe36 	bl	8001090 <HAL_GPIO_ReadPin>
 8008424:	4603      	mov	r3, r0
 8008426:	2b01      	cmp	r3, #1
 8008428:	d0ed      	beq.n	8008406 <WaitWhileBusy+0x12>
		}
	}

	return(LoRa_OK);
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	40020000 	.word	0x40020000

08008438 <WaitWhileTransmit>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileTransmit(uint16_t timeout)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8008442:	f7f8 fb6b 	bl	8000b1c <HAL_GetTick>
 8008446:	60f8      	str	r0, [r7, #12]

	/* wait for DIO2 to go high */
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_RESET)
 8008448:	e009      	b.n	800845e <WaitWhileTransmit+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 800844a:	f7f8 fb67 	bl	8000b1c <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	1ad2      	subs	r2, r2, r3
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	429a      	cmp	r2, r3
 8008458:	d901      	bls.n	800845e <WaitWhileTransmit+0x26>
		{
			return(LoRa_TIMEOUT);
 800845a:	2302      	movs	r3, #2
 800845c:	e019      	b.n	8008492 <WaitWhileTransmit+0x5a>
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_RESET)
 800845e:	2104      	movs	r1, #4
 8008460:	480e      	ldr	r0, [pc, #56]	; (800849c <WaitWhileTransmit+0x64>)
 8008462:	f7f8 fe15 	bl	8001090 <HAL_GPIO_ReadPin>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0ee      	beq.n	800844a <WaitWhileTransmit+0x12>
		}
	}

	/* Now wait for DIO2 to go low indicating finished transmitting */
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_SET)
 800846c:	e009      	b.n	8008482 <WaitWhileTransmit+0x4a>
	{
		if((HAL_GetTick() - startTime) > timeout)
 800846e:	f7f8 fb55 	bl	8000b1c <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	1ad2      	subs	r2, r2, r3
 8008478:	88fb      	ldrh	r3, [r7, #6]
 800847a:	429a      	cmp	r2, r3
 800847c:	d901      	bls.n	8008482 <WaitWhileTransmit+0x4a>
		{
			return(LoRa_TIMEOUT);
 800847e:	2302      	movs	r3, #2
 8008480:	e007      	b.n	8008492 <WaitWhileTransmit+0x5a>
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_SET)
 8008482:	2104      	movs	r1, #4
 8008484:	4805      	ldr	r0, [pc, #20]	; (800849c <WaitWhileTransmit+0x64>)
 8008486:	f7f8 fe03 	bl	8001090 <HAL_GPIO_ReadPin>
 800848a:	4603      	mov	r3, r0
 800848c:	2b01      	cmp	r3, #1
 800848e:	d0ee      	beq.n	800846e <WaitWhileTransmit+0x36>
		}
	}

	return(LoRa_OK);
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	40020000 	.word	0x40020000

080084a0 <WaitWhileReceive>:
 *  None
 * Return Value
 *  LoRa_OK for success
 */
static LoRa_Status WaitWhileReceive(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	af00      	add	r7, sp, #0
	/* wait for DIO1 to go high */
	while(HAL_GPIO_ReadPin(LoRa_DIO1_GPIO_Port, LoRa_DIO1_Pin) == GPIO_PIN_RESET);
 80084a4:	bf00      	nop
 80084a6:	2108      	movs	r1, #8
 80084a8:	4804      	ldr	r0, [pc, #16]	; (80084bc <WaitWhileReceive+0x1c>)
 80084aa:	f7f8 fdf1 	bl	8001090 <HAL_GPIO_ReadPin>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0f8      	beq.n	80084a6 <WaitWhileReceive+0x6>

	return(LoRa_OK);
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	40020000 	.word	0x40020000

080084c0 <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	807b      	strh	r3, [r7, #2]
 80084cc:	4613      	mov	r3, r2
 80084ce:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 80084d0:	200a      	movs	r0, #10
 80084d2:	f7ff ff8f 	bl	80083f4 <WaitWhileBusy>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 80084dc:	2301      	movs	r3, #1
 80084de:	e01c      	b.n	800851a <SPI_Send+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 80084e0:	2200      	movs	r2, #0
 80084e2:	2110      	movs	r1, #16
 80084e4:	480f      	ldr	r0, [pc, #60]	; (8008524 <SPI_Send+0x64>)
 80084e6:	f7f8 fdea 	bl	80010be <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, buffer, numBytes, 100) != HAL_OK)
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <SPI_Send+0x68>)
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	887a      	ldrh	r2, [r7, #2]
 80084f0:	2364      	movs	r3, #100	; 0x64
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	f7fb f9c8 	bl	8003888 <HAL_SPI_Transmit>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <SPI_Send+0x42>
	{
		return(LoRa_ERROR);
 80084fe:	2301      	movs	r3, #1
 8008500:	e00b      	b.n	800851a <SPI_Send+0x5a>
	}

	if(moreToCome != true)
 8008502:	787b      	ldrb	r3, [r7, #1]
 8008504:	f083 0301 	eor.w	r3, r3, #1
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <SPI_Send+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 800850e:	2201      	movs	r2, #1
 8008510:	2110      	movs	r1, #16
 8008512:	4804      	ldr	r0, [pc, #16]	; (8008524 <SPI_Send+0x64>)
 8008514:	f7f8 fdd3 	bl	80010be <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	40020000 	.word	0x40020000
 8008528:	200002b4 	.word	0x200002b4

0800852c <SPI_Receive>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Receive(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	807b      	strh	r3, [r7, #2]
 8008538:	4613      	mov	r3, r2
 800853a:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 800853c:	200a      	movs	r0, #10
 800853e:	f7ff ff59 	bl	80083f4 <WaitWhileBusy>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <SPI_Receive+0x20>
	{
		return(LoRa_ERROR);
 8008548:	2301      	movs	r3, #1
 800854a:	e01c      	b.n	8008586 <SPI_Receive+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 800854c:	2200      	movs	r2, #0
 800854e:	2110      	movs	r1, #16
 8008550:	480f      	ldr	r0, [pc, #60]	; (8008590 <SPI_Receive+0x64>)
 8008552:	f7f8 fdb4 	bl	80010be <HAL_GPIO_WritePin>

	if(HAL_SPI_Receive(hspi, buffer, numBytes, 100) != HAL_OK)
 8008556:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <SPI_Receive+0x68>)
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	887a      	ldrh	r2, [r7, #2]
 800855c:	2364      	movs	r3, #100	; 0x64
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	f7fb face 	bl	8003b00 <HAL_SPI_Receive>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <SPI_Receive+0x42>
	{
		return(LoRa_ERROR);
 800856a:	2301      	movs	r3, #1
 800856c:	e00b      	b.n	8008586 <SPI_Receive+0x5a>
	}

	if(moreToCome != true)
 800856e:	787b      	ldrb	r3, [r7, #1]
 8008570:	f083 0301 	eor.w	r3, r3, #1
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <SPI_Receive+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 800857a:	2201      	movs	r2, #1
 800857c:	2110      	movs	r1, #16
 800857e:	4804      	ldr	r0, [pc, #16]	; (8008590 <SPI_Receive+0x64>)
 8008580:	f7f8 fd9d 	bl	80010be <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	40020000 	.word	0x40020000
 8008594:	200002b4 	.word	0x200002b4

08008598 <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SPI_HandleTypeDef *hspiPtr)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[10];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 80085a0:	4a65      	ldr	r2, [pc, #404]	; (8008738 <LoRa_Init+0x1a0>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6013      	str	r3, [r2, #0]

  /* Set NSS high */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 80085a6:	2201      	movs	r2, #1
 80085a8:	2110      	movs	r1, #16
 80085aa:	4864      	ldr	r0, [pc, #400]	; (800873c <LoRa_Init+0x1a4>)
 80085ac:	f7f8 fd87 	bl	80010be <HAL_GPIO_WritePin>

  /* Reset SX1262 chip */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET); 	/* Pull NRST low */
 80085b0:	2200      	movs	r2, #0
 80085b2:	2101      	movs	r1, #1
 80085b4:	4861      	ldr	r0, [pc, #388]	; (800873c <LoRa_Init+0x1a4>)
 80085b6:	f7f8 fd82 	bl	80010be <HAL_GPIO_WritePin>
  HAL_Delay(1); 															/* delay 1mS */
 80085ba:	2001      	movs	r0, #1
 80085bc:	f7f8 fab8 	bl	8000b30 <HAL_Delay>
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);		/* Set NRST high */
 80085c0:	2201      	movs	r2, #1
 80085c2:	2101      	movs	r1, #1
 80085c4:	485d      	ldr	r0, [pc, #372]	; (800873c <LoRa_Init+0x1a4>)
 80085c6:	f7f8 fd7a 	bl	80010be <HAL_GPIO_WritePin>

  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 80085ca:	2380      	movs	r3, #128	; 0x80
 80085cc:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_STDBY_RC;
 80085ce:	2300      	movs	r3, #0
 80085d0:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	2200      	movs	r2, #0
 80085d8:	2102      	movs	r1, #2
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff ff70 	bl	80084c0 <SPI_Send>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <LoRa_Init+0x52>
  {
	  return(LoRa_ERROR);
 80085e6:	2301      	movs	r3, #1
 80085e8:	e0a2      	b.n	8008730 <LoRa_Init+0x198>
  }

  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 80085ea:	238a      	movs	r3, #138	; 0x8a
 80085ec:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 80085ee:	2301      	movs	r3, #1
 80085f0:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80085f2:	f107 030c 	add.w	r3, r7, #12
 80085f6:	2200      	movs	r2, #0
 80085f8:	2102      	movs	r1, #2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff ff60 	bl	80084c0 <SPI_Send>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <LoRa_Init+0x72>
  {
	  return(LoRa_ERROR);
 8008606:	2301      	movs	r3, #1
 8008608:	e092      	b.n	8008730 <LoRa_Init+0x198>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 800860a:	2386      	movs	r3, #134	; 0x86
 800860c:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x39;
 800860e:	2339      	movs	r3, #57	; 0x39
 8008610:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x30;
 8008612:	2330      	movs	r3, #48	; 0x30
 8008614:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x00;
 800861a:	2300      	movs	r3, #0
 800861c:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 800861e:	f107 030c 	add.w	r3, r7, #12
 8008622:	2200      	movs	r2, #0
 8008624:	2105      	movs	r1, #5
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff ff4a 	bl	80084c0 <SPI_Send>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <LoRa_Init+0x9e>
  {
	  return(LoRa_ERROR);
 8008632:	2301      	movs	r3, #1
 8008634:	e07c      	b.n	8008730 <LoRa_Init+0x198>
  }

  /* Set the power amplifier configuration */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 8008636:	2395      	movs	r3, #149	; 0x95
 8008638:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 800863a:	2304      	movs	r3, #4
 800863c:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x07; /* hpMax */
 800863e:	2307      	movs	r3, #7
 8008640:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00; /* devSel */
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x01; /* paLut */
 8008646:	2301      	movs	r3, #1
 8008648:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 800864a:	f107 030c 	add.w	r3, r7, #12
 800864e:	2200      	movs	r2, #0
 8008650:	2105      	movs	r1, #5
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff ff34 	bl	80084c0 <SPI_Send>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <LoRa_Init+0xca>
  {
	  return(LoRa_ERROR);
 800865e:	2301      	movs	r3, #1
 8008660:	e066      	b.n	8008730 <LoRa_Init+0x198>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 8008662:	238e      	movs	r3, #142	; 0x8e
 8008664:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 8008666:	2316      	movs	r3, #22
 8008668:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = LORA_STANDARD_RAMPTIME;
 800866a:	2304      	movs	r3, #4
 800866c:	73bb      	strb	r3, [r7, #14]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 800866e:	f107 030c 	add.w	r3, r7, #12
 8008672:	2200      	movs	r2, #0
 8008674:	2103      	movs	r1, #3
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff ff22 	bl	80084c0 <SPI_Send>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <LoRa_Init+0xee>
  {
	  return(LoRa_ERROR);
 8008682:	2301      	movs	r3, #1
 8008684:	e054      	b.n	8008730 <LoRa_Init+0x198>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 8008686:	239d      	movs	r3, #157	; 0x9d
 8008688:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* enable */
 800868a:	2301      	movs	r3, #1
 800868c:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 800868e:	f107 030c 	add.w	r3, r7, #12
 8008692:	2200      	movs	r2, #0
 8008694:	2102      	movs	r1, #2
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff ff12 	bl	80084c0 <SPI_Send>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <LoRa_Init+0x10e>
  {
	  return(LoRa_ERROR);
 80086a2:	2301      	movs	r3, #1
 80086a4:	e044      	b.n	8008730 <LoRa_Init+0x198>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 80086a6:	2396      	movs	r3, #150	; 0x96
 80086a8:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 80086aa:	2301      	movs	r3, #1
 80086ac:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80086ae:	f107 030c 	add.w	r3, r7, #12
 80086b2:	2200      	movs	r2, #0
 80086b4:	2102      	movs	r1, #2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff02 	bl	80084c0 <SPI_Send>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <LoRa_Init+0x12e>
  {
	  return(LoRa_ERROR);
 80086c2:	2301      	movs	r3, #1
 80086c4:	e034      	b.n	8008730 <LoRa_Init+0x198>
  }

  /* Set LoRa modulation parameters */
  xmitBuffer[0] = LORA_SET_MODULATION_PARAMS_OPCODE;
 80086c6:	238b      	movs	r3, #139	; 0x8b
 80086c8:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 7; 		/* Spreading factor */
 80086ca:	2307      	movs	r3, #7
 80086cc:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x04; 	/* BW = 125 KHz */
 80086ce:	2304      	movs	r3, #4
 80086d0:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x01;		/* Coding Rate = 4/5 */
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0;		/* Low data rate optimization off */
 80086d6:	2300      	movs	r3, #0
 80086d8:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 80086da:	f107 030c 	add.w	r3, r7, #12
 80086de:	2200      	movs	r2, #0
 80086e0:	2105      	movs	r1, #5
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff feec 	bl	80084c0 <SPI_Send>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <LoRa_Init+0x15a>
  {
	  return(LoRa_ERROR);
 80086ee:	2301      	movs	r3, #1
 80086f0:	e01e      	b.n	8008730 <LoRa_Init+0x198>
  }

  /* Set DIO IRQ parameters */
  xmitBuffer[0] = LORA_SET_DIO_IRQ_PARAMS_OPCODE;
 80086f2:	2308      	movs	r3, #8
 80086f4:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x02;	/* Enable timeout interrupt */
 80086f6:	2302      	movs	r3, #2
 80086f8:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x02;	/* Enable RX done interrupt */
 80086fa:	2302      	movs	r3, #2
 80086fc:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x02;	/* Map timeout to DIO1 */
 80086fe:	2302      	movs	r3, #2
 8008700:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x02; /* Map RX done to DIO1 */
 8008702:	2302      	movs	r3, #2
 8008704:	743b      	strb	r3, [r7, #16]
  xmitBuffer[5] = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	747b      	strb	r3, [r7, #17]
  xmitBuffer[6] = 0;	/* No interrupts to DIO2 */
 800870a:	2300      	movs	r3, #0
 800870c:	74bb      	strb	r3, [r7, #18]
  xmitBuffer[7]	= 0;
 800870e:	2300      	movs	r3, #0
 8008710:	74fb      	strb	r3, [r7, #19]
  xmitBuffer[8]	= 0;	/* No interrupts to DIO3 */
 8008712:	2300      	movs	r3, #0
 8008714:	753b      	strb	r3, [r7, #20]
  if(SPI_Send(xmitBuffer, 9, false) != LoRa_OK)
 8008716:	f107 030c 	add.w	r3, r7, #12
 800871a:	2200      	movs	r2, #0
 800871c:	2109      	movs	r1, #9
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fece 	bl	80084c0 <SPI_Send>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <LoRa_Init+0x196>
  {
	  return(LoRa_ERROR);
 800872a:	2301      	movs	r3, #1
 800872c:	e000      	b.n	8008730 <LoRa_Init+0x198>
  }

  return(LoRa_OK);
 800872e:	2300      	movs	r3, #0

}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	200002b4 	.word	0x200002b4
 800873c:	40020000 	.word	0x40020000

08008740 <LoRaTransmit>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaTransmit(uint8_t *msg, uint8_t numBytes)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b0a4      	sub	sp, #144	; 0x90
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
	uint8_t xmitBuffer[128];
	uint8_t i;

	if(numBytes > 127) return(LoRa_ERROR);
 800874c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008750:	2b00      	cmp	r3, #0
 8008752:	da01      	bge.n	8008758 <LoRaTransmit+0x18>
 8008754:	2301      	movs	r3, #1
 8008756:	e077      	b.n	8008848 <LoRaTransmit+0x108>

	/* Set base address of transmit and receive buffer */
	xmitBuffer[0] = LORA_SET_BUFFER_BASE_ADDRESS_OPCODE;
 8008758:	238f      	movs	r3, #143	; 0x8f
 800875a:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0; /* Transmit buffer start address */
 800875c:	2300      	movs	r3, #0
 800875e:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0; /* Receive buffer start address */
 8008760:	2300      	movs	r3, #0
 8008762:	73bb      	strb	r3, [r7, #14]
	if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	2200      	movs	r2, #0
 800876a:	2103      	movs	r1, #3
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff fea7 	bl	80084c0 <SPI_Send>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <LoRaTransmit+0x3c>
	{
		return(LoRa_ERROR);
 8008778:	2301      	movs	r3, #1
 800877a:	e065      	b.n	8008848 <LoRaTransmit+0x108>
	}

	/* Write the message to the transmit buffer on the SX1262 chip*/
	xmitBuffer[0] = LORA_WRITE_BUFFER_OPCODE;
 800877c:	230e      	movs	r3, #14
 800877e:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0; 		/* Offset of transmit buffer */
 8008780:	2300      	movs	r3, #0
 8008782:	737b      	strb	r3, [r7, #13]
	for(i=2; i <= (numBytes+1); i++)
 8008784:	2302      	movs	r3, #2
 8008786:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800878a:	e010      	b.n	80087ae <LoRaTransmit+0x6e>
	{
		xmitBuffer[i] = *msg++;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	607a      	str	r2, [r7, #4]
 8008792:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8008796:	7819      	ldrb	r1, [r3, #0]
 8008798:	f102 0390 	add.w	r3, r2, #144	; 0x90
 800879c:	443b      	add	r3, r7
 800879e:	460a      	mov	r2, r1
 80087a0:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(i=2; i <= (numBytes+1); i++)
 80087a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80087a8:	3301      	adds	r3, #1
 80087aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80087ae:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	3301      	adds	r3, #1
 80087b6:	429a      	cmp	r2, r3
 80087b8:	dde8      	ble.n	800878c <LoRaTransmit+0x4c>
	}
	if(SPI_Send(xmitBuffer, numBytes+2, false) != LoRa_OK)
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3302      	adds	r3, #2
 80087c0:	b299      	uxth	r1, r3
 80087c2:	f107 030c 	add.w	r3, r7, #12
 80087c6:	2200      	movs	r2, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fe79 	bl	80084c0 <SPI_Send>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <LoRaTransmit+0x98>
	{
		return(LoRa_ERROR);
 80087d4:	2301      	movs	r3, #1
 80087d6:	e037      	b.n	8008848 <LoRaTransmit+0x108>
	}

	/* Set LoRa packet parameters */
	xmitBuffer[0] = LORA_SET_PACKET_PARAMS_OPCODE;
 80087d8:	238c      	movs	r3, #140	; 0x8c
 80087da:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0x08;		/* Preamble length (2 bytes) */
 80087e0:	2308      	movs	r3, #8
 80087e2:	73bb      	strb	r3, [r7, #14]
	xmitBuffer[3] = 0;			/* Variable length packet */
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]
	xmitBuffer[4] = numBytes; 	/* Size of message */
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	743b      	strb	r3, [r7, #16]
	xmitBuffer[5] = 0;			/* CRC off */
 80087ec:	2300      	movs	r3, #0
 80087ee:	747b      	strb	r3, [r7, #17]
	xmitBuffer[6] = 0;			/* Standard IQ setup */
 80087f0:	2300      	movs	r3, #0
 80087f2:	74bb      	strb	r3, [r7, #18]
	if(SPI_Send(xmitBuffer, 7, false) != LoRa_OK)
 80087f4:	f107 030c 	add.w	r3, r7, #12
 80087f8:	2200      	movs	r2, #0
 80087fa:	2107      	movs	r1, #7
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fe5f 	bl	80084c0 <SPI_Send>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <LoRaTransmit+0xcc>
	{
		return(LoRa_ERROR);
 8008808:	2301      	movs	r3, #1
 800880a:	e01d      	b.n	8008848 <LoRaTransmit+0x108>
	}

	/* Put the chip in transmit mode to send the message */
	xmitBuffer[0] = LORA_SET_TX_OPCODE;
 800880c:	2383      	movs	r3, #131	; 0x83
 800880e:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	73bb      	strb	r3, [r7, #14]
	xmitBuffer[3] = 0; 	/* timeout value (3 bytes) set to zero for no timeout */
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
	if(SPI_Send(xmitBuffer, 4, false) != LoRa_OK)
 800881c:	f107 030c 	add.w	r3, r7, #12
 8008820:	2200      	movs	r2, #0
 8008822:	2104      	movs	r1, #4
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fe4b 	bl	80084c0 <SPI_Send>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <LoRaTransmit+0xf4>
	{
		return(LoRa_ERROR);
 8008830:	2301      	movs	r3, #1
 8008832:	e009      	b.n	8008848 <LoRaTransmit+0x108>
	}

	if(WaitWhileTransmit(500) != LoRa_OK)
 8008834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008838:	f7ff fdfe 	bl	8008438 <WaitWhileTransmit>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <LoRaTransmit+0x106>
	{
		return(LoRa_ERROR);
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <LoRaTransmit+0x108>
	}

	return(LoRa_OK);
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3790      	adds	r7, #144	; 0x90
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <LoRaReceive>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaReceive(uint8_t *msg, uint32_t timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
	uint8_t SPIbuffer[10];
	uint8_t RxStatus, RxPayloadLength, RxStartBufferPointer;

	/* Set base address of transmit and receive buffer */
	SPIbuffer[0] = LORA_SET_BUFFER_BASE_ADDRESS_OPCODE;
 800885a:	238f      	movs	r3, #143	; 0x8f
 800885c:	723b      	strb	r3, [r7, #8]
	SPIbuffer[1] = 0; /* Transmit buffer start address */
 800885e:	2300      	movs	r3, #0
 8008860:	727b      	strb	r3, [r7, #9]
	SPIbuffer[2] = 0; /* Receive buffer start address */
 8008862:	2300      	movs	r3, #0
 8008864:	72bb      	strb	r3, [r7, #10]
	if(SPI_Send(SPIbuffer, 3, false) != LoRa_OK)
 8008866:	f107 0308 	add.w	r3, r7, #8
 800886a:	2200      	movs	r2, #0
 800886c:	2103      	movs	r1, #3
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fe26 	bl	80084c0 <SPI_Send>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <LoRaReceive+0x2e>
	{
		return(LoRa_ERROR);
 800887a:	2301      	movs	r3, #1
 800887c:	e094      	b.n	80089a8 <LoRaReceive+0x158>
	}

	/* Set LoRa packet parameters */
	SPIbuffer[0] = LORA_SET_PACKET_PARAMS_OPCODE;
 800887e:	238c      	movs	r3, #140	; 0x8c
 8008880:	723b      	strb	r3, [r7, #8]
	SPIbuffer[1] = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	727b      	strb	r3, [r7, #9]
	SPIbuffer[2] = 0x08;		/* Preamble length (2 bytes) */
 8008886:	2308      	movs	r3, #8
 8008888:	72bb      	strb	r3, [r7, #10]
	SPIbuffer[3] = 0;			/* Variable length packet */
 800888a:	2300      	movs	r3, #0
 800888c:	72fb      	strb	r3, [r7, #11]
	SPIbuffer[4] = 128; 		/* Max size of message */
 800888e:	2380      	movs	r3, #128	; 0x80
 8008890:	733b      	strb	r3, [r7, #12]
	SPIbuffer[5] = 0;			/* CRC off */
 8008892:	2300      	movs	r3, #0
 8008894:	737b      	strb	r3, [r7, #13]
	SPIbuffer[6] = 0;			/* Standard IQ setup */
 8008896:	2300      	movs	r3, #0
 8008898:	73bb      	strb	r3, [r7, #14]
	if(SPI_Send(SPIbuffer, 7, false) != LoRa_OK)
 800889a:	f107 0308 	add.w	r3, r7, #8
 800889e:	2200      	movs	r2, #0
 80088a0:	2107      	movs	r1, #7
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff fe0c 	bl	80084c0 <SPI_Send>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <LoRaReceive+0x62>
	{
		return(LoRa_ERROR);
 80088ae:	2301      	movs	r3, #1
 80088b0:	e07a      	b.n	80089a8 <LoRaReceive+0x158>
	}

	/* Put the chip in receive mode */
	SPIbuffer[0] = LORA_SET_RX_OPCODE;
 80088b2:	2382      	movs	r3, #130	; 0x82
 80088b4:	723b      	strb	r3, [r7, #8]
	SPIbuffer[1] = (timeout & 0xFF0000) >> 16;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	0c1b      	lsrs	r3, r3, #16
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	727b      	strb	r3, [r7, #9]
	SPIbuffer[2] = (timeout & 0xFF00) >> 8;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	0a1b      	lsrs	r3, r3, #8
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	72bb      	strb	r3, [r7, #10]
	SPIbuffer[3] = timeout & 0xFF;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	72fb      	strb	r3, [r7, #11]
	if(SPI_Send(SPIbuffer, 4, false) != LoRa_OK)
 80088cc:	f107 0308 	add.w	r3, r7, #8
 80088d0:	2200      	movs	r2, #0
 80088d2:	2104      	movs	r1, #4
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff fdf3 	bl	80084c0 <SPI_Send>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <LoRaReceive+0x94>
	{
		return(LoRa_ERROR);
 80088e0:	2301      	movs	r3, #1
 80088e2:	e061      	b.n	80089a8 <LoRaReceive+0x158>
	}

	if(WaitWhileReceive() != LoRa_OK)
 80088e4:	f7ff fddc 	bl	80084a0 <WaitWhileReceive>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <LoRaReceive+0xa2>
	{
		return(LoRa_ERROR);
 80088ee:	2301      	movs	r3, #1
 80088f0:	e05a      	b.n	80089a8 <LoRaReceive+0x158>
	}

	/* Clear IRQ status */
	SPIbuffer[0] = LORA_CLEAR_IRQ_STATUS_OPCODE;
 80088f2:	2302      	movs	r3, #2
 80088f4:	723b      	strb	r3, [r7, #8]
	SPIbuffer[1] = 0x02; /* Clear timeout interrupt */
 80088f6:	2302      	movs	r3, #2
 80088f8:	727b      	strb	r3, [r7, #9]
	SPIbuffer[2] = 0x02; /* Clear RX done interrupt */
 80088fa:	2302      	movs	r3, #2
 80088fc:	72bb      	strb	r3, [r7, #10]
	if(SPI_Send(SPIbuffer, 3, false) != LoRa_OK)
 80088fe:	f107 0308 	add.w	r3, r7, #8
 8008902:	2200      	movs	r2, #0
 8008904:	2103      	movs	r1, #3
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff fdda 	bl	80084c0 <SPI_Send>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <LoRaReceive+0xc6>
	{
		return(LoRa_ERROR);
 8008912:	2301      	movs	r3, #1
 8008914:	e048      	b.n	80089a8 <LoRaReceive+0x158>
	}

	/* Get the receive buffer status */
	SPIbuffer[0] = LORA_GET_RX_BUFFER_STATUS_OPCODE;
 8008916:	2313      	movs	r3, #19
 8008918:	723b      	strb	r3, [r7, #8]
	if(SPI_Send(SPIbuffer, 1, true) != LoRa_OK)
 800891a:	f107 0308 	add.w	r3, r7, #8
 800891e:	2201      	movs	r2, #1
 8008920:	2101      	movs	r1, #1
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff fdcc 	bl	80084c0 <SPI_Send>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <LoRaReceive+0xe2>
	{
		return(LoRa_ERROR);
 800892e:	2301      	movs	r3, #1
 8008930:	e03a      	b.n	80089a8 <LoRaReceive+0x158>
	}
	if(SPI_Receive(SPIbuffer, 3, false) != LoRa_OK)
 8008932:	f107 0308 	add.w	r3, r7, #8
 8008936:	2200      	movs	r2, #0
 8008938:	2103      	movs	r1, #3
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fdf6 	bl	800852c <SPI_Receive>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <LoRaReceive+0xfa>
	{
		return(LoRa_ERROR);
 8008946:	2301      	movs	r3, #1
 8008948:	e02e      	b.n	80089a8 <LoRaReceive+0x158>
	}
	RxStatus = SPIbuffer[0];
 800894a:	7a3b      	ldrb	r3, [r7, #8]
 800894c:	75fb      	strb	r3, [r7, #23]
	RxPayloadLength = SPIbuffer[1];
 800894e:	7a7b      	ldrb	r3, [r7, #9]
 8008950:	75bb      	strb	r3, [r7, #22]
	RxStartBufferPointer = SPIbuffer[2];
 8008952:	7abb      	ldrb	r3, [r7, #10]
 8008954:	757b      	strb	r3, [r7, #21]

	/* Read the packet data */
	SPIbuffer[0] = LORA_READ_BUFFER_OPCODE;
 8008956:	231e      	movs	r3, #30
 8008958:	723b      	strb	r3, [r7, #8]
	SPIbuffer[1] = RxStartBufferPointer;
 800895a:	7d7b      	ldrb	r3, [r7, #21]
 800895c:	727b      	strb	r3, [r7, #9]
	if(SPI_Send(SPIbuffer, 2, true) != LoRa_OK)
 800895e:	f107 0308 	add.w	r3, r7, #8
 8008962:	2201      	movs	r2, #1
 8008964:	2102      	movs	r1, #2
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff fdaa 	bl	80084c0 <SPI_Send>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <LoRaReceive+0x126>
	{
		return(LoRa_ERROR);
 8008972:	2301      	movs	r3, #1
 8008974:	e018      	b.n	80089a8 <LoRaReceive+0x158>
	}
	if(SPI_Receive(SPIbuffer, 1, true) != LoRa_OK) /* get the status byte */
 8008976:	f107 0308 	add.w	r3, r7, #8
 800897a:	2201      	movs	r2, #1
 800897c:	2101      	movs	r1, #1
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff fdd4 	bl	800852c <SPI_Receive>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <LoRaReceive+0x13e>
	{
		return(LoRa_ERROR);
 800898a:	2301      	movs	r3, #1
 800898c:	e00c      	b.n	80089a8 <LoRaReceive+0x158>
	}
	if(SPI_Receive(msg, RxPayloadLength, false) != LoRa_OK) /* get the packet message */
 800898e:	7dbb      	ldrb	r3, [r7, #22]
 8008990:	b29b      	uxth	r3, r3
 8008992:	2200      	movs	r2, #0
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fdc8 	bl	800852c <SPI_Receive>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <LoRaReceive+0x156>
	{
		return(LoRa_ERROR);
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <LoRaReceive+0x158>
	}

	return(LoRa_OK);
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089b4:	2200      	movs	r2, #0
 80089b6:	4912      	ldr	r1, [pc, #72]	; (8008a00 <MX_USB_DEVICE_Init+0x50>)
 80089b8:	4812      	ldr	r0, [pc, #72]	; (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089ba:	f7fe fcf6 	bl	80073aa <USBD_Init>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089c4:	f7f7 fef6 	bl	80007b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089c8:	490f      	ldr	r1, [pc, #60]	; (8008a08 <MX_USB_DEVICE_Init+0x58>)
 80089ca:	480e      	ldr	r0, [pc, #56]	; (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089cc:	f7fe fd18 	bl	8007400 <USBD_RegisterClass>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089d6:	f7f7 feed 	bl	80007b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089da:	490c      	ldr	r1, [pc, #48]	; (8008a0c <MX_USB_DEVICE_Init+0x5c>)
 80089dc:	4809      	ldr	r0, [pc, #36]	; (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089de:	f7fe fc49 	bl	8007274 <USBD_CDC_RegisterInterface>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089e8:	f7f7 fee4 	bl	80007b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089ec:	4805      	ldr	r0, [pc, #20]	; (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089ee:	f7fe fd20 	bl	8007432 <USBD_Start>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089f8:	f7f7 fedc 	bl	80007b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089fc:	bf00      	nop
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	2000012c 	.word	0x2000012c
 8008a04:	200002b8 	.word	0x200002b8
 8008a08:	20000018 	.word	0x20000018
 8008a0c:	2000011c 	.word	0x2000011c

08008a10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a14:	2200      	movs	r2, #0
 8008a16:	4905      	ldr	r1, [pc, #20]	; (8008a2c <CDC_Init_FS+0x1c>)
 8008a18:	4805      	ldr	r0, [pc, #20]	; (8008a30 <CDC_Init_FS+0x20>)
 8008a1a:	f7fe fc41 	bl	80072a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a1e:	4905      	ldr	r1, [pc, #20]	; (8008a34 <CDC_Init_FS+0x24>)
 8008a20:	4803      	ldr	r0, [pc, #12]	; (8008a30 <CDC_Init_FS+0x20>)
 8008a22:	f7fe fc56 	bl	80072d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20000954 	.word	0x20000954
 8008a30:	200002b8 	.word	0x200002b8
 8008a34:	20000554 	.word	0x20000554

08008a38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr
	...

08008a48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
 8008a54:	4613      	mov	r3, r2
 8008a56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b23      	cmp	r3, #35	; 0x23
 8008a5c:	d84a      	bhi.n	8008af4 <CDC_Control_FS+0xac>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <CDC_Control_FS+0x1c>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008af5 	.word	0x08008af5
 8008a68:	08008af5 	.word	0x08008af5
 8008a6c:	08008af5 	.word	0x08008af5
 8008a70:	08008af5 	.word	0x08008af5
 8008a74:	08008af5 	.word	0x08008af5
 8008a78:	08008af5 	.word	0x08008af5
 8008a7c:	08008af5 	.word	0x08008af5
 8008a80:	08008af5 	.word	0x08008af5
 8008a84:	08008af5 	.word	0x08008af5
 8008a88:	08008af5 	.word	0x08008af5
 8008a8c:	08008af5 	.word	0x08008af5
 8008a90:	08008af5 	.word	0x08008af5
 8008a94:	08008af5 	.word	0x08008af5
 8008a98:	08008af5 	.word	0x08008af5
 8008a9c:	08008af5 	.word	0x08008af5
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008af5 	.word	0x08008af5
 8008aa8:	08008af5 	.word	0x08008af5
 8008aac:	08008af5 	.word	0x08008af5
 8008ab0:	08008af5 	.word	0x08008af5
 8008ab4:	08008af5 	.word	0x08008af5
 8008ab8:	08008af5 	.word	0x08008af5
 8008abc:	08008af5 	.word	0x08008af5
 8008ac0:	08008af5 	.word	0x08008af5
 8008ac4:	08008af5 	.word	0x08008af5
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	08008af5 	.word	0x08008af5
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008af5 	.word	0x08008af5
 8008ad8:	08008af5 	.word	0x08008af5
 8008adc:	08008af5 	.word	0x08008af5
 8008ae0:	08008af5 	.word	0x08008af5
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008af5 	.word	0x08008af5
 8008aec:	08008af5 	.word	0x08008af5
 8008af0:	08008af5 	.word	0x08008af5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008af4:	bf00      	nop
  }

  return (USBD_OK);
 8008af6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc80      	pop	{r7}
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop

08008b04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4805      	ldr	r0, [pc, #20]	; (8008b28 <CDC_Receive_FS+0x24>)
 8008b12:	f7fe fbde 	bl	80072d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b16:	4804      	ldr	r0, [pc, #16]	; (8008b28 <CDC_Receive_FS+0x24>)
 8008b18:	f7fe fc1d 	bl	8007356 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200002b8 	.word	0x200002b8

08008b2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <CDC_Transmit_FS+0x48>)
 8008b3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e00b      	b.n	8008b6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b52:	887b      	ldrh	r3, [r7, #2]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	4806      	ldr	r0, [pc, #24]	; (8008b74 <CDC_Transmit_FS+0x48>)
 8008b5a:	f7fe fba1 	bl	80072a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b5e:	4805      	ldr	r0, [pc, #20]	; (8008b74 <CDC_Transmit_FS+0x48>)
 8008b60:	f7fe fbca 	bl	80072f8 <USBD_CDC_TransmitPacket>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	200002b8 	.word	0x200002b8

08008b78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6039      	str	r1, [r7, #0]
 8008b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2212      	movs	r2, #18
 8008b88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b8a:	4b03      	ldr	r3, [pc, #12]	; (8008b98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	20000148 	.word	0x20000148

08008b9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2204      	movs	r2, #4
 8008bac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bae:	4b03      	ldr	r3, [pc, #12]	; (8008bbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bc80      	pop	{r7}
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	2000015c 	.word	0x2000015c

08008bc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d105      	bne.n	8008bde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4907      	ldr	r1, [pc, #28]	; (8008bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bd6:	4808      	ldr	r0, [pc, #32]	; (8008bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bd8:	f7ff fb2e 	bl	8008238 <USBD_GetString>
 8008bdc:	e004      	b.n	8008be8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	4904      	ldr	r1, [pc, #16]	; (8008bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008be2:	4805      	ldr	r0, [pc, #20]	; (8008bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008be4:	f7ff fb28 	bl	8008238 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be8:	4b02      	ldr	r3, [pc, #8]	; (8008bf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000d54 	.word	0x20000d54
 8008bf8:	08009ca8 	.word	0x08009ca8

08008bfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	6039      	str	r1, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	4904      	ldr	r1, [pc, #16]	; (8008c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c0c:	4804      	ldr	r0, [pc, #16]	; (8008c20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c0e:	f7ff fb13 	bl	8008238 <USBD_GetString>
  return USBD_StrDesc;
 8008c12:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20000d54 	.word	0x20000d54
 8008c20:	08009cc0 	.word	0x08009cc0

08008c24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	6039      	str	r1, [r7, #0]
 8008c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	221a      	movs	r2, #26
 8008c34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c36:	f000 f843 	bl	8008cc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c3a:	4b02      	ldr	r3, [pc, #8]	; (8008c44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000160 	.word	0x20000160

08008c48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	4907      	ldr	r1, [pc, #28]	; (8008c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c5e:	4808      	ldr	r0, [pc, #32]	; (8008c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c60:	f7ff faea 	bl	8008238 <USBD_GetString>
 8008c64:	e004      	b.n	8008c70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	4904      	ldr	r1, [pc, #16]	; (8008c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c6a:	4805      	ldr	r0, [pc, #20]	; (8008c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c6c:	f7ff fae4 	bl	8008238 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c70:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000d54 	.word	0x20000d54
 8008c80:	08009cd4 	.word	0x08009cd4

08008c84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	6039      	str	r1, [r7, #0]
 8008c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d105      	bne.n	8008ca2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	4907      	ldr	r1, [pc, #28]	; (8008cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c9a:	4808      	ldr	r0, [pc, #32]	; (8008cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c9c:	f7ff facc 	bl	8008238 <USBD_GetString>
 8008ca0:	e004      	b.n	8008cac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4904      	ldr	r1, [pc, #16]	; (8008cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ca6:	4805      	ldr	r0, [pc, #20]	; (8008cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ca8:	f7ff fac6 	bl	8008238 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000d54 	.word	0x20000d54
 8008cbc:	08009ce0 	.word	0x08009ce0

08008cc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cc6:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <Get_SerialNum+0x44>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ccc:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <Get_SerialNum+0x48>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cd2:	4b0e      	ldr	r3, [pc, #56]	; (8008d0c <Get_SerialNum+0x4c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4413      	add	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d009      	beq.n	8008cfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ce6:	2208      	movs	r2, #8
 8008ce8:	4909      	ldr	r1, [pc, #36]	; (8008d10 <Get_SerialNum+0x50>)
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 f814 	bl	8008d18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cf0:	2204      	movs	r2, #4
 8008cf2:	4908      	ldr	r1, [pc, #32]	; (8008d14 <Get_SerialNum+0x54>)
 8008cf4:	68b8      	ldr	r0, [r7, #8]
 8008cf6:	f000 f80f 	bl	8008d18 <IntToUnicode>
  }
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	1ff80050 	.word	0x1ff80050
 8008d08:	1ff80054 	.word	0x1ff80054
 8008d0c:	1ff80058 	.word	0x1ff80058
 8008d10:	20000162 	.word	0x20000162
 8008d14:	20000172 	.word	0x20000172

08008d18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4613      	mov	r3, r2
 8008d24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	75fb      	strb	r3, [r7, #23]
 8008d2e:	e027      	b.n	8008d80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	0f1b      	lsrs	r3, r3, #28
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	d80b      	bhi.n	8008d50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	0f1b      	lsrs	r3, r3, #28
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	4619      	mov	r1, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	440b      	add	r3, r1
 8008d48:	3230      	adds	r2, #48	; 0x30
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	e00a      	b.n	8008d66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	0f1b      	lsrs	r3, r3, #28
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	440b      	add	r3, r1
 8008d60:	3237      	adds	r2, #55	; 0x37
 8008d62:	b2d2      	uxtb	r2, r2
 8008d64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	3301      	adds	r3, #1
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	4413      	add	r3, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	75fb      	strb	r3, [r7, #23]
 8008d80:	7dfa      	ldrb	r2, [r7, #23]
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d3d3      	bcc.n	8008d30 <IntToUnicode+0x18>
  }
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc80      	pop	{r7}
 8008d92:	4770      	bx	lr

08008d94 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d106      	bne.n	8008db4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <HAL_PCDEx_SetConnectionState+0x38>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4a08      	ldr	r2, [pc, #32]	; (8008dcc <HAL_PCDEx_SetConnectionState+0x38>)
 8008dac:	f043 0301 	orr.w	r3, r3, #1
 8008db0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008db2:	e005      	b.n	8008dc0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <HAL_PCDEx_SetConnectionState+0x38>)
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4a04      	ldr	r2, [pc, #16]	; (8008dcc <HAL_PCDEx_SetConnectionState+0x38>)
 8008dba:	f023 0301 	bic.w	r3, r3, #1
 8008dbe:	6053      	str	r3, [r2, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40010000 	.word	0x40010000

08008dd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a0d      	ldr	r2, [pc, #52]	; (8008e14 <HAL_PCD_MspInit+0x44>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d113      	bne.n	8008e0a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008de2:	4b0d      	ldr	r3, [pc, #52]	; (8008e18 <HAL_PCD_MspInit+0x48>)
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	4a0c      	ldr	r2, [pc, #48]	; (8008e18 <HAL_PCD_MspInit+0x48>)
 8008de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008dec:	6253      	str	r3, [r2, #36]	; 0x24
 8008dee:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <HAL_PCD_MspInit+0x48>)
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	2014      	movs	r0, #20
 8008e00:	f7f7 ff8f 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008e04:	2014      	movs	r0, #20
 8008e06:	f7f7 ffa8 	bl	8000d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40005c00 	.word	0x40005c00
 8008e18:	40023800 	.word	0x40023800

08008e1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f7fe fb45 	bl	80074c2 <USBD_LL_SetupStage>
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	00db      	lsls	r3, r3, #3
 8008e5e:	440b      	add	r3, r1
 8008e60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7fe fb77 	bl	800755c <USBD_LL_DataOutStage>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	440b      	add	r3, r1
 8008e96:	333c      	adds	r3, #60	; 0x3c
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	78fb      	ldrb	r3, [r7, #3]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	f7fe fbce 	bl	800763e <USBD_LL_DataInStage>
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fcd9 	bl	8007870 <USBD_LL_SOF>
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d001      	beq.n	8008ede <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008eda:	f7f7 fc6b 	bl	80007b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ee4:	7bfa      	ldrb	r2, [r7, #15]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe fc8e 	bl	800780a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fc47 	bl	8007788 <USBD_LL_Reset>
}
 8008efa:	bf00      	nop
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fe fc88 	bl	8007828 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d005      	beq.n	8008f2c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f20:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <HAL_PCD_SuspendCallback+0x30>)
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4a03      	ldr	r2, [pc, #12]	; (8008f34 <HAL_PCD_SuspendCallback+0x30>)
 8008f26:	f043 0306 	orr.w	r3, r3, #6
 8008f2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	e000ed00 	.word	0xe000ed00

08008f38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fc82 	bl	8007850 <USBD_LL_Resume>
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008f5c:	4a28      	ldr	r2, [pc, #160]	; (8009000 <USBD_LL_Init+0xac>)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a26      	ldr	r2, [pc, #152]	; (8009000 <USBD_LL_Init+0xac>)
 8008f68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008f6c:	4b24      	ldr	r3, [pc, #144]	; (8009000 <USBD_LL_Init+0xac>)
 8008f6e:	4a25      	ldr	r2, [pc, #148]	; (8009004 <USBD_LL_Init+0xb0>)
 8008f70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f72:	4b23      	ldr	r3, [pc, #140]	; (8009000 <USBD_LL_Init+0xac>)
 8008f74:	2208      	movs	r2, #8
 8008f76:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008f78:	4b21      	ldr	r3, [pc, #132]	; (8009000 <USBD_LL_Init+0xac>)
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f7e:	4b20      	ldr	r3, [pc, #128]	; (8009000 <USBD_LL_Init+0xac>)
 8008f80:	2202      	movs	r2, #2
 8008f82:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008f84:	4b1e      	ldr	r3, [pc, #120]	; (8009000 <USBD_LL_Init+0xac>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f8a:	4b1d      	ldr	r3, [pc, #116]	; (8009000 <USBD_LL_Init+0xac>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f90:	481b      	ldr	r0, [pc, #108]	; (8009000 <USBD_LL_Init+0xac>)
 8008f92:	f7f8 f9f1 	bl	8001378 <HAL_PCD_Init>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008f9c:	f7f7 fc0a 	bl	80007b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008fa6:	2318      	movs	r3, #24
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2100      	movs	r1, #0
 8008fac:	f7f9 fdce 	bl	8002b4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008fb6:	2358      	movs	r3, #88	; 0x58
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2180      	movs	r1, #128	; 0x80
 8008fbc:	f7f9 fdc6 	bl	8002b4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008fc6:	23c0      	movs	r3, #192	; 0xc0
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2181      	movs	r1, #129	; 0x81
 8008fcc:	f7f9 fdbe 	bl	8002b4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008fd6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2101      	movs	r1, #1
 8008fde:	f7f9 fdb5 	bl	8002b4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fec:	2200      	movs	r2, #0
 8008fee:	2182      	movs	r1, #130	; 0x82
 8008ff0:	f7f9 fdac 	bl	8002b4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000f54 	.word	0x20000f54
 8009004:	40005c00 	.word	0x40005c00

08009008 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800901e:	4618      	mov	r0, r3
 8009020:	f7f8 fa88 	bl	8001534 <HAL_PCD_Start>
 8009024:	4603      	mov	r3, r0
 8009026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f944 	bl	80092b8 <USBD_Get_USB_Status>
 8009030:	4603      	mov	r3, r0
 8009032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009034:	7bbb      	ldrb	r3, [r7, #14]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	4608      	mov	r0, r1
 8009048:	4611      	mov	r1, r2
 800904a:	461a      	mov	r2, r3
 800904c:	4603      	mov	r3, r0
 800904e:	70fb      	strb	r3, [r7, #3]
 8009050:	460b      	mov	r3, r1
 8009052:	70bb      	strb	r3, [r7, #2]
 8009054:	4613      	mov	r3, r2
 8009056:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009066:	78bb      	ldrb	r3, [r7, #2]
 8009068:	883a      	ldrh	r2, [r7, #0]
 800906a:	78f9      	ldrb	r1, [r7, #3]
 800906c:	f7f8 fba4 	bl	80017b8 <HAL_PCD_EP_Open>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 f91e 	bl	80092b8 <USBD_Get_USB_Status>
 800907c:	4603      	mov	r3, r0
 800907e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009080:	7bbb      	ldrb	r3, [r7, #14]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f8 fbeb 	bl	8001884 <HAL_PCD_EP_Close>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f8ff 	bl	80092b8 <USBD_Get_USB_Status>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090be:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80090e2:	78fa      	ldrb	r2, [r7, #3]
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7f8 fcab 	bl	8001a42 <HAL_PCD_EP_SetStall>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f8e0 	bl	80092b8 <USBD_Get_USB_Status>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f7f8 fcde 	bl	8001ae6 <HAL_PCD_EP_ClrStall>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	4618      	mov	r0, r3
 8009132:	f000 f8c1 	bl	80092b8 <USBD_Get_USB_Status>
 8009136:	4603      	mov	r3, r0
 8009138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913a:	7bbb      	ldrb	r3, [r7, #14]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009156:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800915c:	2b00      	cmp	r3, #0
 800915e:	da0c      	bge.n	800917a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	440b      	add	r3, r1
 8009174:	3302      	adds	r3, #2
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	e00b      	b.n	8009192 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009180:	68f9      	ldr	r1, [r7, #12]
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	440b      	add	r3, r1
 800918c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009190:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	bc80      	pop	{r7}
 800919a:	4770      	bx	lr

0800919c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80091b6:	78fa      	ldrb	r2, [r7, #3]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7f8 fad7 	bl	800176e <HAL_PCD_SetAddress>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f876 	bl	80092b8 <USBD_Get_USB_Status>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b086      	sub	sp, #24
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	461a      	mov	r2, r3
 80091e6:	460b      	mov	r3, r1
 80091e8:	72fb      	strb	r3, [r7, #11]
 80091ea:	4613      	mov	r3, r2
 80091ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80091fc:	893b      	ldrh	r3, [r7, #8]
 80091fe:	7af9      	ldrb	r1, [r7, #11]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	f7f8 fbdb 	bl	80019bc <HAL_PCD_EP_Transmit>
 8009206:	4603      	mov	r3, r0
 8009208:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f853 	bl	80092b8 <USBD_Get_USB_Status>
 8009212:	4603      	mov	r3, r0
 8009214:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009216:	7dbb      	ldrb	r3, [r7, #22]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	461a      	mov	r2, r3
 800922c:	460b      	mov	r3, r1
 800922e:	72fb      	strb	r3, [r7, #11]
 8009230:	4613      	mov	r3, r2
 8009232:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009242:	893b      	ldrh	r3, [r7, #8]
 8009244:	7af9      	ldrb	r1, [r7, #11]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	f7f8 fb64 	bl	8001914 <HAL_PCD_EP_Receive>
 800924c:	4603      	mov	r3, r0
 800924e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f830 	bl	80092b8 <USBD_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800925c:	7dbb      	ldrb	r3, [r7, #22]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7f8 fb86 	bl	800198e <HAL_PCD_EP_GetRxCount>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009294:	4b02      	ldr	r3, [pc, #8]	; (80092a0 <USBD_static_malloc+0x14>)
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr
 80092a0:	20001240 	.word	0x20001240

080092a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]

}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr
	...

080092b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d817      	bhi.n	80092fc <USBD_Get_USB_Status+0x44>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <USBD_Get_USB_Status+0x1c>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	080092e5 	.word	0x080092e5
 80092d8:	080092eb 	.word	0x080092eb
 80092dc:	080092f1 	.word	0x080092f1
 80092e0:	080092f7 	.word	0x080092f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
    break;
 80092e8:	e00b      	b.n	8009302 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ea:	2302      	movs	r3, #2
 80092ec:	73fb      	strb	r3, [r7, #15]
    break;
 80092ee:	e008      	b.n	8009302 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
    break;
 80092f4:	e005      	b.n	8009302 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	73fb      	strb	r3, [r7, #15]
    break;
 80092fa:	e002      	b.n	8009302 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092fc:	2302      	movs	r3, #2
 80092fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009300:	bf00      	nop
  }
  return usb_status;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop

08009310 <__errno>:
 8009310:	4b01      	ldr	r3, [pc, #4]	; (8009318 <__errno+0x8>)
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	2000017c 	.word	0x2000017c

0800931c <__libc_init_array>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	2600      	movs	r6, #0
 8009320:	4d0c      	ldr	r5, [pc, #48]	; (8009354 <__libc_init_array+0x38>)
 8009322:	4c0d      	ldr	r4, [pc, #52]	; (8009358 <__libc_init_array+0x3c>)
 8009324:	1b64      	subs	r4, r4, r5
 8009326:	10a4      	asrs	r4, r4, #2
 8009328:	42a6      	cmp	r6, r4
 800932a:	d109      	bne.n	8009340 <__libc_init_array+0x24>
 800932c:	f000 fc9c 	bl	8009c68 <_init>
 8009330:	2600      	movs	r6, #0
 8009332:	4d0a      	ldr	r5, [pc, #40]	; (800935c <__libc_init_array+0x40>)
 8009334:	4c0a      	ldr	r4, [pc, #40]	; (8009360 <__libc_init_array+0x44>)
 8009336:	1b64      	subs	r4, r4, r5
 8009338:	10a4      	asrs	r4, r4, #2
 800933a:	42a6      	cmp	r6, r4
 800933c:	d105      	bne.n	800934a <__libc_init_array+0x2e>
 800933e:	bd70      	pop	{r4, r5, r6, pc}
 8009340:	f855 3b04 	ldr.w	r3, [r5], #4
 8009344:	4798      	blx	r3
 8009346:	3601      	adds	r6, #1
 8009348:	e7ee      	b.n	8009328 <__libc_init_array+0xc>
 800934a:	f855 3b04 	ldr.w	r3, [r5], #4
 800934e:	4798      	blx	r3
 8009350:	3601      	adds	r6, #1
 8009352:	e7f2      	b.n	800933a <__libc_init_array+0x1e>
 8009354:	08009d50 	.word	0x08009d50
 8009358:	08009d50 	.word	0x08009d50
 800935c:	08009d50 	.word	0x08009d50
 8009360:	08009d54 	.word	0x08009d54

08009364 <memset>:
 8009364:	4603      	mov	r3, r0
 8009366:	4402      	add	r2, r0
 8009368:	4293      	cmp	r3, r2
 800936a:	d100      	bne.n	800936e <memset+0xa>
 800936c:	4770      	bx	lr
 800936e:	f803 1b01 	strb.w	r1, [r3], #1
 8009372:	e7f9      	b.n	8009368 <memset+0x4>

08009374 <siprintf>:
 8009374:	b40e      	push	{r1, r2, r3}
 8009376:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800937a:	b500      	push	{lr}
 800937c:	b09c      	sub	sp, #112	; 0x70
 800937e:	ab1d      	add	r3, sp, #116	; 0x74
 8009380:	9002      	str	r0, [sp, #8]
 8009382:	9006      	str	r0, [sp, #24]
 8009384:	9107      	str	r1, [sp, #28]
 8009386:	9104      	str	r1, [sp, #16]
 8009388:	4808      	ldr	r0, [pc, #32]	; (80093ac <siprintf+0x38>)
 800938a:	4909      	ldr	r1, [pc, #36]	; (80093b0 <siprintf+0x3c>)
 800938c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009390:	9105      	str	r1, [sp, #20]
 8009392:	6800      	ldr	r0, [r0, #0]
 8009394:	a902      	add	r1, sp, #8
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	f000 f868 	bl	800946c <_svfiprintf_r>
 800939c:	2200      	movs	r2, #0
 800939e:	9b02      	ldr	r3, [sp, #8]
 80093a0:	701a      	strb	r2, [r3, #0]
 80093a2:	b01c      	add	sp, #112	; 0x70
 80093a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093a8:	b003      	add	sp, #12
 80093aa:	4770      	bx	lr
 80093ac:	2000017c 	.word	0x2000017c
 80093b0:	ffff0208 	.word	0xffff0208

080093b4 <__ssputs_r>:
 80093b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b8:	688e      	ldr	r6, [r1, #8]
 80093ba:	4682      	mov	sl, r0
 80093bc:	429e      	cmp	r6, r3
 80093be:	460c      	mov	r4, r1
 80093c0:	4690      	mov	r8, r2
 80093c2:	461f      	mov	r7, r3
 80093c4:	d838      	bhi.n	8009438 <__ssputs_r+0x84>
 80093c6:	898a      	ldrh	r2, [r1, #12]
 80093c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093cc:	d032      	beq.n	8009434 <__ssputs_r+0x80>
 80093ce:	6825      	ldr	r5, [r4, #0]
 80093d0:	6909      	ldr	r1, [r1, #16]
 80093d2:	3301      	adds	r3, #1
 80093d4:	eba5 0901 	sub.w	r9, r5, r1
 80093d8:	6965      	ldr	r5, [r4, #20]
 80093da:	444b      	add	r3, r9
 80093dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093e4:	106d      	asrs	r5, r5, #1
 80093e6:	429d      	cmp	r5, r3
 80093e8:	bf38      	it	cc
 80093ea:	461d      	movcc	r5, r3
 80093ec:	0553      	lsls	r3, r2, #21
 80093ee:	d531      	bpl.n	8009454 <__ssputs_r+0xa0>
 80093f0:	4629      	mov	r1, r5
 80093f2:	f000 fb6f 	bl	8009ad4 <_malloc_r>
 80093f6:	4606      	mov	r6, r0
 80093f8:	b950      	cbnz	r0, 8009410 <__ssputs_r+0x5c>
 80093fa:	230c      	movs	r3, #12
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	f8ca 3000 	str.w	r3, [sl]
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940a:	81a3      	strh	r3, [r4, #12]
 800940c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009410:	464a      	mov	r2, r9
 8009412:	6921      	ldr	r1, [r4, #16]
 8009414:	f000 face 	bl	80099b4 <memcpy>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800941e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009422:	81a3      	strh	r3, [r4, #12]
 8009424:	6126      	str	r6, [r4, #16]
 8009426:	444e      	add	r6, r9
 8009428:	6026      	str	r6, [r4, #0]
 800942a:	463e      	mov	r6, r7
 800942c:	6165      	str	r5, [r4, #20]
 800942e:	eba5 0509 	sub.w	r5, r5, r9
 8009432:	60a5      	str	r5, [r4, #8]
 8009434:	42be      	cmp	r6, r7
 8009436:	d900      	bls.n	800943a <__ssputs_r+0x86>
 8009438:	463e      	mov	r6, r7
 800943a:	4632      	mov	r2, r6
 800943c:	4641      	mov	r1, r8
 800943e:	6820      	ldr	r0, [r4, #0]
 8009440:	f000 fac6 	bl	80099d0 <memmove>
 8009444:	68a3      	ldr	r3, [r4, #8]
 8009446:	2000      	movs	r0, #0
 8009448:	1b9b      	subs	r3, r3, r6
 800944a:	60a3      	str	r3, [r4, #8]
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	4433      	add	r3, r6
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	e7db      	b.n	800940c <__ssputs_r+0x58>
 8009454:	462a      	mov	r2, r5
 8009456:	f000 fbb1 	bl	8009bbc <_realloc_r>
 800945a:	4606      	mov	r6, r0
 800945c:	2800      	cmp	r0, #0
 800945e:	d1e1      	bne.n	8009424 <__ssputs_r+0x70>
 8009460:	4650      	mov	r0, sl
 8009462:	6921      	ldr	r1, [r4, #16]
 8009464:	f000 face 	bl	8009a04 <_free_r>
 8009468:	e7c7      	b.n	80093fa <__ssputs_r+0x46>
	...

0800946c <_svfiprintf_r>:
 800946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	4698      	mov	r8, r3
 8009472:	898b      	ldrh	r3, [r1, #12]
 8009474:	4607      	mov	r7, r0
 8009476:	061b      	lsls	r3, r3, #24
 8009478:	460d      	mov	r5, r1
 800947a:	4614      	mov	r4, r2
 800947c:	b09d      	sub	sp, #116	; 0x74
 800947e:	d50e      	bpl.n	800949e <_svfiprintf_r+0x32>
 8009480:	690b      	ldr	r3, [r1, #16]
 8009482:	b963      	cbnz	r3, 800949e <_svfiprintf_r+0x32>
 8009484:	2140      	movs	r1, #64	; 0x40
 8009486:	f000 fb25 	bl	8009ad4 <_malloc_r>
 800948a:	6028      	str	r0, [r5, #0]
 800948c:	6128      	str	r0, [r5, #16]
 800948e:	b920      	cbnz	r0, 800949a <_svfiprintf_r+0x2e>
 8009490:	230c      	movs	r3, #12
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	f04f 30ff 	mov.w	r0, #4294967295
 8009498:	e0d1      	b.n	800963e <_svfiprintf_r+0x1d2>
 800949a:	2340      	movs	r3, #64	; 0x40
 800949c:	616b      	str	r3, [r5, #20]
 800949e:	2300      	movs	r3, #0
 80094a0:	9309      	str	r3, [sp, #36]	; 0x24
 80094a2:	2320      	movs	r3, #32
 80094a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094a8:	2330      	movs	r3, #48	; 0x30
 80094aa:	f04f 0901 	mov.w	r9, #1
 80094ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80094b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009658 <_svfiprintf_r+0x1ec>
 80094b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094ba:	4623      	mov	r3, r4
 80094bc:	469a      	mov	sl, r3
 80094be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c2:	b10a      	cbz	r2, 80094c8 <_svfiprintf_r+0x5c>
 80094c4:	2a25      	cmp	r2, #37	; 0x25
 80094c6:	d1f9      	bne.n	80094bc <_svfiprintf_r+0x50>
 80094c8:	ebba 0b04 	subs.w	fp, sl, r4
 80094cc:	d00b      	beq.n	80094e6 <_svfiprintf_r+0x7a>
 80094ce:	465b      	mov	r3, fp
 80094d0:	4622      	mov	r2, r4
 80094d2:	4629      	mov	r1, r5
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff ff6d 	bl	80093b4 <__ssputs_r>
 80094da:	3001      	adds	r0, #1
 80094dc:	f000 80aa 	beq.w	8009634 <_svfiprintf_r+0x1c8>
 80094e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e2:	445a      	add	r2, fp
 80094e4:	9209      	str	r2, [sp, #36]	; 0x24
 80094e6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 80a2 	beq.w	8009634 <_svfiprintf_r+0x1c8>
 80094f0:	2300      	movs	r3, #0
 80094f2:	f04f 32ff 	mov.w	r2, #4294967295
 80094f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094fa:	f10a 0a01 	add.w	sl, sl, #1
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	9307      	str	r3, [sp, #28]
 8009502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009506:	931a      	str	r3, [sp, #104]	; 0x68
 8009508:	4654      	mov	r4, sl
 800950a:	2205      	movs	r2, #5
 800950c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009510:	4851      	ldr	r0, [pc, #324]	; (8009658 <_svfiprintf_r+0x1ec>)
 8009512:	f000 fa41 	bl	8009998 <memchr>
 8009516:	9a04      	ldr	r2, [sp, #16]
 8009518:	b9d8      	cbnz	r0, 8009552 <_svfiprintf_r+0xe6>
 800951a:	06d0      	lsls	r0, r2, #27
 800951c:	bf44      	itt	mi
 800951e:	2320      	movmi	r3, #32
 8009520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009524:	0711      	lsls	r1, r2, #28
 8009526:	bf44      	itt	mi
 8009528:	232b      	movmi	r3, #43	; 0x2b
 800952a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800952e:	f89a 3000 	ldrb.w	r3, [sl]
 8009532:	2b2a      	cmp	r3, #42	; 0x2a
 8009534:	d015      	beq.n	8009562 <_svfiprintf_r+0xf6>
 8009536:	4654      	mov	r4, sl
 8009538:	2000      	movs	r0, #0
 800953a:	f04f 0c0a 	mov.w	ip, #10
 800953e:	9a07      	ldr	r2, [sp, #28]
 8009540:	4621      	mov	r1, r4
 8009542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009546:	3b30      	subs	r3, #48	; 0x30
 8009548:	2b09      	cmp	r3, #9
 800954a:	d94e      	bls.n	80095ea <_svfiprintf_r+0x17e>
 800954c:	b1b0      	cbz	r0, 800957c <_svfiprintf_r+0x110>
 800954e:	9207      	str	r2, [sp, #28]
 8009550:	e014      	b.n	800957c <_svfiprintf_r+0x110>
 8009552:	eba0 0308 	sub.w	r3, r0, r8
 8009556:	fa09 f303 	lsl.w	r3, r9, r3
 800955a:	4313      	orrs	r3, r2
 800955c:	46a2      	mov	sl, r4
 800955e:	9304      	str	r3, [sp, #16]
 8009560:	e7d2      	b.n	8009508 <_svfiprintf_r+0x9c>
 8009562:	9b03      	ldr	r3, [sp, #12]
 8009564:	1d19      	adds	r1, r3, #4
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	9103      	str	r1, [sp, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	bfbb      	ittet	lt
 800956e:	425b      	neglt	r3, r3
 8009570:	f042 0202 	orrlt.w	r2, r2, #2
 8009574:	9307      	strge	r3, [sp, #28]
 8009576:	9307      	strlt	r3, [sp, #28]
 8009578:	bfb8      	it	lt
 800957a:	9204      	strlt	r2, [sp, #16]
 800957c:	7823      	ldrb	r3, [r4, #0]
 800957e:	2b2e      	cmp	r3, #46	; 0x2e
 8009580:	d10c      	bne.n	800959c <_svfiprintf_r+0x130>
 8009582:	7863      	ldrb	r3, [r4, #1]
 8009584:	2b2a      	cmp	r3, #42	; 0x2a
 8009586:	d135      	bne.n	80095f4 <_svfiprintf_r+0x188>
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	3402      	adds	r4, #2
 800958c:	1d1a      	adds	r2, r3, #4
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	9203      	str	r2, [sp, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	bfb8      	it	lt
 8009596:	f04f 33ff 	movlt.w	r3, #4294967295
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800965c <_svfiprintf_r+0x1f0>
 80095a0:	2203      	movs	r2, #3
 80095a2:	4650      	mov	r0, sl
 80095a4:	7821      	ldrb	r1, [r4, #0]
 80095a6:	f000 f9f7 	bl	8009998 <memchr>
 80095aa:	b140      	cbz	r0, 80095be <_svfiprintf_r+0x152>
 80095ac:	2340      	movs	r3, #64	; 0x40
 80095ae:	eba0 000a 	sub.w	r0, r0, sl
 80095b2:	fa03 f000 	lsl.w	r0, r3, r0
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	3401      	adds	r4, #1
 80095ba:	4303      	orrs	r3, r0
 80095bc:	9304      	str	r3, [sp, #16]
 80095be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c2:	2206      	movs	r2, #6
 80095c4:	4826      	ldr	r0, [pc, #152]	; (8009660 <_svfiprintf_r+0x1f4>)
 80095c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ca:	f000 f9e5 	bl	8009998 <memchr>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d038      	beq.n	8009644 <_svfiprintf_r+0x1d8>
 80095d2:	4b24      	ldr	r3, [pc, #144]	; (8009664 <_svfiprintf_r+0x1f8>)
 80095d4:	bb1b      	cbnz	r3, 800961e <_svfiprintf_r+0x1b2>
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	3307      	adds	r3, #7
 80095da:	f023 0307 	bic.w	r3, r3, #7
 80095de:	3308      	adds	r3, #8
 80095e0:	9303      	str	r3, [sp, #12]
 80095e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e4:	4433      	add	r3, r6
 80095e6:	9309      	str	r3, [sp, #36]	; 0x24
 80095e8:	e767      	b.n	80094ba <_svfiprintf_r+0x4e>
 80095ea:	460c      	mov	r4, r1
 80095ec:	2001      	movs	r0, #1
 80095ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80095f2:	e7a5      	b.n	8009540 <_svfiprintf_r+0xd4>
 80095f4:	2300      	movs	r3, #0
 80095f6:	f04f 0c0a 	mov.w	ip, #10
 80095fa:	4619      	mov	r1, r3
 80095fc:	3401      	adds	r4, #1
 80095fe:	9305      	str	r3, [sp, #20]
 8009600:	4620      	mov	r0, r4
 8009602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009606:	3a30      	subs	r2, #48	; 0x30
 8009608:	2a09      	cmp	r2, #9
 800960a:	d903      	bls.n	8009614 <_svfiprintf_r+0x1a8>
 800960c:	2b00      	cmp	r3, #0
 800960e:	d0c5      	beq.n	800959c <_svfiprintf_r+0x130>
 8009610:	9105      	str	r1, [sp, #20]
 8009612:	e7c3      	b.n	800959c <_svfiprintf_r+0x130>
 8009614:	4604      	mov	r4, r0
 8009616:	2301      	movs	r3, #1
 8009618:	fb0c 2101 	mla	r1, ip, r1, r2
 800961c:	e7f0      	b.n	8009600 <_svfiprintf_r+0x194>
 800961e:	ab03      	add	r3, sp, #12
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	462a      	mov	r2, r5
 8009624:	4638      	mov	r0, r7
 8009626:	4b10      	ldr	r3, [pc, #64]	; (8009668 <_svfiprintf_r+0x1fc>)
 8009628:	a904      	add	r1, sp, #16
 800962a:	f3af 8000 	nop.w
 800962e:	1c42      	adds	r2, r0, #1
 8009630:	4606      	mov	r6, r0
 8009632:	d1d6      	bne.n	80095e2 <_svfiprintf_r+0x176>
 8009634:	89ab      	ldrh	r3, [r5, #12]
 8009636:	065b      	lsls	r3, r3, #25
 8009638:	f53f af2c 	bmi.w	8009494 <_svfiprintf_r+0x28>
 800963c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800963e:	b01d      	add	sp, #116	; 0x74
 8009640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009644:	ab03      	add	r3, sp, #12
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	462a      	mov	r2, r5
 800964a:	4638      	mov	r0, r7
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <_svfiprintf_r+0x1fc>)
 800964e:	a904      	add	r1, sp, #16
 8009650:	f000 f87c 	bl	800974c <_printf_i>
 8009654:	e7eb      	b.n	800962e <_svfiprintf_r+0x1c2>
 8009656:	bf00      	nop
 8009658:	08009d14 	.word	0x08009d14
 800965c:	08009d1a 	.word	0x08009d1a
 8009660:	08009d1e 	.word	0x08009d1e
 8009664:	00000000 	.word	0x00000000
 8009668:	080093b5 	.word	0x080093b5

0800966c <_printf_common>:
 800966c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009670:	4616      	mov	r6, r2
 8009672:	4699      	mov	r9, r3
 8009674:	688a      	ldr	r2, [r1, #8]
 8009676:	690b      	ldr	r3, [r1, #16]
 8009678:	4607      	mov	r7, r0
 800967a:	4293      	cmp	r3, r2
 800967c:	bfb8      	it	lt
 800967e:	4613      	movlt	r3, r2
 8009680:	6033      	str	r3, [r6, #0]
 8009682:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009686:	460c      	mov	r4, r1
 8009688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800968c:	b10a      	cbz	r2, 8009692 <_printf_common+0x26>
 800968e:	3301      	adds	r3, #1
 8009690:	6033      	str	r3, [r6, #0]
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	0699      	lsls	r1, r3, #26
 8009696:	bf42      	ittt	mi
 8009698:	6833      	ldrmi	r3, [r6, #0]
 800969a:	3302      	addmi	r3, #2
 800969c:	6033      	strmi	r3, [r6, #0]
 800969e:	6825      	ldr	r5, [r4, #0]
 80096a0:	f015 0506 	ands.w	r5, r5, #6
 80096a4:	d106      	bne.n	80096b4 <_printf_common+0x48>
 80096a6:	f104 0a19 	add.w	sl, r4, #25
 80096aa:	68e3      	ldr	r3, [r4, #12]
 80096ac:	6832      	ldr	r2, [r6, #0]
 80096ae:	1a9b      	subs	r3, r3, r2
 80096b0:	42ab      	cmp	r3, r5
 80096b2:	dc28      	bgt.n	8009706 <_printf_common+0x9a>
 80096b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096b8:	1e13      	subs	r3, r2, #0
 80096ba:	6822      	ldr	r2, [r4, #0]
 80096bc:	bf18      	it	ne
 80096be:	2301      	movne	r3, #1
 80096c0:	0692      	lsls	r2, r2, #26
 80096c2:	d42d      	bmi.n	8009720 <_printf_common+0xb4>
 80096c4:	4649      	mov	r1, r9
 80096c6:	4638      	mov	r0, r7
 80096c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096cc:	47c0      	blx	r8
 80096ce:	3001      	adds	r0, #1
 80096d0:	d020      	beq.n	8009714 <_printf_common+0xa8>
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	68e5      	ldr	r5, [r4, #12]
 80096d6:	f003 0306 	and.w	r3, r3, #6
 80096da:	2b04      	cmp	r3, #4
 80096dc:	bf18      	it	ne
 80096de:	2500      	movne	r5, #0
 80096e0:	6832      	ldr	r2, [r6, #0]
 80096e2:	f04f 0600 	mov.w	r6, #0
 80096e6:	68a3      	ldr	r3, [r4, #8]
 80096e8:	bf08      	it	eq
 80096ea:	1aad      	subeq	r5, r5, r2
 80096ec:	6922      	ldr	r2, [r4, #16]
 80096ee:	bf08      	it	eq
 80096f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f4:	4293      	cmp	r3, r2
 80096f6:	bfc4      	itt	gt
 80096f8:	1a9b      	subgt	r3, r3, r2
 80096fa:	18ed      	addgt	r5, r5, r3
 80096fc:	341a      	adds	r4, #26
 80096fe:	42b5      	cmp	r5, r6
 8009700:	d11a      	bne.n	8009738 <_printf_common+0xcc>
 8009702:	2000      	movs	r0, #0
 8009704:	e008      	b.n	8009718 <_printf_common+0xac>
 8009706:	2301      	movs	r3, #1
 8009708:	4652      	mov	r2, sl
 800970a:	4649      	mov	r1, r9
 800970c:	4638      	mov	r0, r7
 800970e:	47c0      	blx	r8
 8009710:	3001      	adds	r0, #1
 8009712:	d103      	bne.n	800971c <_printf_common+0xb0>
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971c:	3501      	adds	r5, #1
 800971e:	e7c4      	b.n	80096aa <_printf_common+0x3e>
 8009720:	2030      	movs	r0, #48	; 0x30
 8009722:	18e1      	adds	r1, r4, r3
 8009724:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800972e:	4422      	add	r2, r4
 8009730:	3302      	adds	r3, #2
 8009732:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009736:	e7c5      	b.n	80096c4 <_printf_common+0x58>
 8009738:	2301      	movs	r3, #1
 800973a:	4622      	mov	r2, r4
 800973c:	4649      	mov	r1, r9
 800973e:	4638      	mov	r0, r7
 8009740:	47c0      	blx	r8
 8009742:	3001      	adds	r0, #1
 8009744:	d0e6      	beq.n	8009714 <_printf_common+0xa8>
 8009746:	3601      	adds	r6, #1
 8009748:	e7d9      	b.n	80096fe <_printf_common+0x92>
	...

0800974c <_printf_i>:
 800974c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009750:	7e0f      	ldrb	r7, [r1, #24]
 8009752:	4691      	mov	r9, r2
 8009754:	2f78      	cmp	r7, #120	; 0x78
 8009756:	4680      	mov	r8, r0
 8009758:	460c      	mov	r4, r1
 800975a:	469a      	mov	sl, r3
 800975c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800975e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009762:	d807      	bhi.n	8009774 <_printf_i+0x28>
 8009764:	2f62      	cmp	r7, #98	; 0x62
 8009766:	d80a      	bhi.n	800977e <_printf_i+0x32>
 8009768:	2f00      	cmp	r7, #0
 800976a:	f000 80d9 	beq.w	8009920 <_printf_i+0x1d4>
 800976e:	2f58      	cmp	r7, #88	; 0x58
 8009770:	f000 80a4 	beq.w	80098bc <_printf_i+0x170>
 8009774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800977c:	e03a      	b.n	80097f4 <_printf_i+0xa8>
 800977e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009782:	2b15      	cmp	r3, #21
 8009784:	d8f6      	bhi.n	8009774 <_printf_i+0x28>
 8009786:	a101      	add	r1, pc, #4	; (adr r1, 800978c <_printf_i+0x40>)
 8009788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800978c:	080097e5 	.word	0x080097e5
 8009790:	080097f9 	.word	0x080097f9
 8009794:	08009775 	.word	0x08009775
 8009798:	08009775 	.word	0x08009775
 800979c:	08009775 	.word	0x08009775
 80097a0:	08009775 	.word	0x08009775
 80097a4:	080097f9 	.word	0x080097f9
 80097a8:	08009775 	.word	0x08009775
 80097ac:	08009775 	.word	0x08009775
 80097b0:	08009775 	.word	0x08009775
 80097b4:	08009775 	.word	0x08009775
 80097b8:	08009907 	.word	0x08009907
 80097bc:	08009829 	.word	0x08009829
 80097c0:	080098e9 	.word	0x080098e9
 80097c4:	08009775 	.word	0x08009775
 80097c8:	08009775 	.word	0x08009775
 80097cc:	08009929 	.word	0x08009929
 80097d0:	08009775 	.word	0x08009775
 80097d4:	08009829 	.word	0x08009829
 80097d8:	08009775 	.word	0x08009775
 80097dc:	08009775 	.word	0x08009775
 80097e0:	080098f1 	.word	0x080098f1
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	1d1a      	adds	r2, r3, #4
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	602a      	str	r2, [r5, #0]
 80097ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097f4:	2301      	movs	r3, #1
 80097f6:	e0a4      	b.n	8009942 <_printf_i+0x1f6>
 80097f8:	6820      	ldr	r0, [r4, #0]
 80097fa:	6829      	ldr	r1, [r5, #0]
 80097fc:	0606      	lsls	r6, r0, #24
 80097fe:	f101 0304 	add.w	r3, r1, #4
 8009802:	d50a      	bpl.n	800981a <_printf_i+0xce>
 8009804:	680e      	ldr	r6, [r1, #0]
 8009806:	602b      	str	r3, [r5, #0]
 8009808:	2e00      	cmp	r6, #0
 800980a:	da03      	bge.n	8009814 <_printf_i+0xc8>
 800980c:	232d      	movs	r3, #45	; 0x2d
 800980e:	4276      	negs	r6, r6
 8009810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009814:	230a      	movs	r3, #10
 8009816:	485e      	ldr	r0, [pc, #376]	; (8009990 <_printf_i+0x244>)
 8009818:	e019      	b.n	800984e <_printf_i+0x102>
 800981a:	680e      	ldr	r6, [r1, #0]
 800981c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009820:	602b      	str	r3, [r5, #0]
 8009822:	bf18      	it	ne
 8009824:	b236      	sxthne	r6, r6
 8009826:	e7ef      	b.n	8009808 <_printf_i+0xbc>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	6820      	ldr	r0, [r4, #0]
 800982c:	1d19      	adds	r1, r3, #4
 800982e:	6029      	str	r1, [r5, #0]
 8009830:	0601      	lsls	r1, r0, #24
 8009832:	d501      	bpl.n	8009838 <_printf_i+0xec>
 8009834:	681e      	ldr	r6, [r3, #0]
 8009836:	e002      	b.n	800983e <_printf_i+0xf2>
 8009838:	0646      	lsls	r6, r0, #25
 800983a:	d5fb      	bpl.n	8009834 <_printf_i+0xe8>
 800983c:	881e      	ldrh	r6, [r3, #0]
 800983e:	2f6f      	cmp	r7, #111	; 0x6f
 8009840:	bf0c      	ite	eq
 8009842:	2308      	moveq	r3, #8
 8009844:	230a      	movne	r3, #10
 8009846:	4852      	ldr	r0, [pc, #328]	; (8009990 <_printf_i+0x244>)
 8009848:	2100      	movs	r1, #0
 800984a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800984e:	6865      	ldr	r5, [r4, #4]
 8009850:	2d00      	cmp	r5, #0
 8009852:	bfa8      	it	ge
 8009854:	6821      	ldrge	r1, [r4, #0]
 8009856:	60a5      	str	r5, [r4, #8]
 8009858:	bfa4      	itt	ge
 800985a:	f021 0104 	bicge.w	r1, r1, #4
 800985e:	6021      	strge	r1, [r4, #0]
 8009860:	b90e      	cbnz	r6, 8009866 <_printf_i+0x11a>
 8009862:	2d00      	cmp	r5, #0
 8009864:	d04d      	beq.n	8009902 <_printf_i+0x1b6>
 8009866:	4615      	mov	r5, r2
 8009868:	fbb6 f1f3 	udiv	r1, r6, r3
 800986c:	fb03 6711 	mls	r7, r3, r1, r6
 8009870:	5dc7      	ldrb	r7, [r0, r7]
 8009872:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009876:	4637      	mov	r7, r6
 8009878:	42bb      	cmp	r3, r7
 800987a:	460e      	mov	r6, r1
 800987c:	d9f4      	bls.n	8009868 <_printf_i+0x11c>
 800987e:	2b08      	cmp	r3, #8
 8009880:	d10b      	bne.n	800989a <_printf_i+0x14e>
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	07de      	lsls	r6, r3, #31
 8009886:	d508      	bpl.n	800989a <_printf_i+0x14e>
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	6861      	ldr	r1, [r4, #4]
 800988c:	4299      	cmp	r1, r3
 800988e:	bfde      	ittt	le
 8009890:	2330      	movle	r3, #48	; 0x30
 8009892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009896:	f105 35ff 	addle.w	r5, r5, #4294967295
 800989a:	1b52      	subs	r2, r2, r5
 800989c:	6122      	str	r2, [r4, #16]
 800989e:	464b      	mov	r3, r9
 80098a0:	4621      	mov	r1, r4
 80098a2:	4640      	mov	r0, r8
 80098a4:	f8cd a000 	str.w	sl, [sp]
 80098a8:	aa03      	add	r2, sp, #12
 80098aa:	f7ff fedf 	bl	800966c <_printf_common>
 80098ae:	3001      	adds	r0, #1
 80098b0:	d14c      	bne.n	800994c <_printf_i+0x200>
 80098b2:	f04f 30ff 	mov.w	r0, #4294967295
 80098b6:	b004      	add	sp, #16
 80098b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098bc:	4834      	ldr	r0, [pc, #208]	; (8009990 <_printf_i+0x244>)
 80098be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098c2:	6829      	ldr	r1, [r5, #0]
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80098ca:	6029      	str	r1, [r5, #0]
 80098cc:	061d      	lsls	r5, r3, #24
 80098ce:	d514      	bpl.n	80098fa <_printf_i+0x1ae>
 80098d0:	07df      	lsls	r7, r3, #31
 80098d2:	bf44      	itt	mi
 80098d4:	f043 0320 	orrmi.w	r3, r3, #32
 80098d8:	6023      	strmi	r3, [r4, #0]
 80098da:	b91e      	cbnz	r6, 80098e4 <_printf_i+0x198>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	f023 0320 	bic.w	r3, r3, #32
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	2310      	movs	r3, #16
 80098e6:	e7af      	b.n	8009848 <_printf_i+0xfc>
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	f043 0320 	orr.w	r3, r3, #32
 80098ee:	6023      	str	r3, [r4, #0]
 80098f0:	2378      	movs	r3, #120	; 0x78
 80098f2:	4828      	ldr	r0, [pc, #160]	; (8009994 <_printf_i+0x248>)
 80098f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098f8:	e7e3      	b.n	80098c2 <_printf_i+0x176>
 80098fa:	0659      	lsls	r1, r3, #25
 80098fc:	bf48      	it	mi
 80098fe:	b2b6      	uxthmi	r6, r6
 8009900:	e7e6      	b.n	80098d0 <_printf_i+0x184>
 8009902:	4615      	mov	r5, r2
 8009904:	e7bb      	b.n	800987e <_printf_i+0x132>
 8009906:	682b      	ldr	r3, [r5, #0]
 8009908:	6826      	ldr	r6, [r4, #0]
 800990a:	1d18      	adds	r0, r3, #4
 800990c:	6961      	ldr	r1, [r4, #20]
 800990e:	6028      	str	r0, [r5, #0]
 8009910:	0635      	lsls	r5, r6, #24
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	d501      	bpl.n	800991a <_printf_i+0x1ce>
 8009916:	6019      	str	r1, [r3, #0]
 8009918:	e002      	b.n	8009920 <_printf_i+0x1d4>
 800991a:	0670      	lsls	r0, r6, #25
 800991c:	d5fb      	bpl.n	8009916 <_printf_i+0x1ca>
 800991e:	8019      	strh	r1, [r3, #0]
 8009920:	2300      	movs	r3, #0
 8009922:	4615      	mov	r5, r2
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	e7ba      	b.n	800989e <_printf_i+0x152>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	2100      	movs	r1, #0
 800992c:	1d1a      	adds	r2, r3, #4
 800992e:	602a      	str	r2, [r5, #0]
 8009930:	681d      	ldr	r5, [r3, #0]
 8009932:	6862      	ldr	r2, [r4, #4]
 8009934:	4628      	mov	r0, r5
 8009936:	f000 f82f 	bl	8009998 <memchr>
 800993a:	b108      	cbz	r0, 8009940 <_printf_i+0x1f4>
 800993c:	1b40      	subs	r0, r0, r5
 800993e:	6060      	str	r0, [r4, #4]
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	6123      	str	r3, [r4, #16]
 8009944:	2300      	movs	r3, #0
 8009946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994a:	e7a8      	b.n	800989e <_printf_i+0x152>
 800994c:	462a      	mov	r2, r5
 800994e:	4649      	mov	r1, r9
 8009950:	4640      	mov	r0, r8
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	47d0      	blx	sl
 8009956:	3001      	adds	r0, #1
 8009958:	d0ab      	beq.n	80098b2 <_printf_i+0x166>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	079b      	lsls	r3, r3, #30
 800995e:	d413      	bmi.n	8009988 <_printf_i+0x23c>
 8009960:	68e0      	ldr	r0, [r4, #12]
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	4298      	cmp	r0, r3
 8009966:	bfb8      	it	lt
 8009968:	4618      	movlt	r0, r3
 800996a:	e7a4      	b.n	80098b6 <_printf_i+0x16a>
 800996c:	2301      	movs	r3, #1
 800996e:	4632      	mov	r2, r6
 8009970:	4649      	mov	r1, r9
 8009972:	4640      	mov	r0, r8
 8009974:	47d0      	blx	sl
 8009976:	3001      	adds	r0, #1
 8009978:	d09b      	beq.n	80098b2 <_printf_i+0x166>
 800997a:	3501      	adds	r5, #1
 800997c:	68e3      	ldr	r3, [r4, #12]
 800997e:	9903      	ldr	r1, [sp, #12]
 8009980:	1a5b      	subs	r3, r3, r1
 8009982:	42ab      	cmp	r3, r5
 8009984:	dcf2      	bgt.n	800996c <_printf_i+0x220>
 8009986:	e7eb      	b.n	8009960 <_printf_i+0x214>
 8009988:	2500      	movs	r5, #0
 800998a:	f104 0619 	add.w	r6, r4, #25
 800998e:	e7f5      	b.n	800997c <_printf_i+0x230>
 8009990:	08009d25 	.word	0x08009d25
 8009994:	08009d36 	.word	0x08009d36

08009998 <memchr>:
 8009998:	4603      	mov	r3, r0
 800999a:	b510      	push	{r4, lr}
 800999c:	b2c9      	uxtb	r1, r1
 800999e:	4402      	add	r2, r0
 80099a0:	4293      	cmp	r3, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	d101      	bne.n	80099aa <memchr+0x12>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e003      	b.n	80099b2 <memchr+0x1a>
 80099aa:	7804      	ldrb	r4, [r0, #0]
 80099ac:	3301      	adds	r3, #1
 80099ae:	428c      	cmp	r4, r1
 80099b0:	d1f6      	bne.n	80099a0 <memchr+0x8>
 80099b2:	bd10      	pop	{r4, pc}

080099b4 <memcpy>:
 80099b4:	440a      	add	r2, r1
 80099b6:	4291      	cmp	r1, r2
 80099b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099bc:	d100      	bne.n	80099c0 <memcpy+0xc>
 80099be:	4770      	bx	lr
 80099c0:	b510      	push	{r4, lr}
 80099c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c6:	4291      	cmp	r1, r2
 80099c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099cc:	d1f9      	bne.n	80099c2 <memcpy+0xe>
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <memmove>:
 80099d0:	4288      	cmp	r0, r1
 80099d2:	b510      	push	{r4, lr}
 80099d4:	eb01 0402 	add.w	r4, r1, r2
 80099d8:	d902      	bls.n	80099e0 <memmove+0x10>
 80099da:	4284      	cmp	r4, r0
 80099dc:	4623      	mov	r3, r4
 80099de:	d807      	bhi.n	80099f0 <memmove+0x20>
 80099e0:	1e43      	subs	r3, r0, #1
 80099e2:	42a1      	cmp	r1, r4
 80099e4:	d008      	beq.n	80099f8 <memmove+0x28>
 80099e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099ee:	e7f8      	b.n	80099e2 <memmove+0x12>
 80099f0:	4601      	mov	r1, r0
 80099f2:	4402      	add	r2, r0
 80099f4:	428a      	cmp	r2, r1
 80099f6:	d100      	bne.n	80099fa <memmove+0x2a>
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a02:	e7f7      	b.n	80099f4 <memmove+0x24>

08009a04 <_free_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4605      	mov	r5, r0
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d040      	beq.n	8009a8e <_free_r+0x8a>
 8009a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a10:	1f0c      	subs	r4, r1, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfb8      	it	lt
 8009a16:	18e4      	addlt	r4, r4, r3
 8009a18:	f000 f910 	bl	8009c3c <__malloc_lock>
 8009a1c:	4a1c      	ldr	r2, [pc, #112]	; (8009a90 <_free_r+0x8c>)
 8009a1e:	6813      	ldr	r3, [r2, #0]
 8009a20:	b933      	cbnz	r3, 8009a30 <_free_r+0x2c>
 8009a22:	6063      	str	r3, [r4, #4]
 8009a24:	6014      	str	r4, [r2, #0]
 8009a26:	4628      	mov	r0, r5
 8009a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a2c:	f000 b90c 	b.w	8009c48 <__malloc_unlock>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d908      	bls.n	8009a46 <_free_r+0x42>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	1821      	adds	r1, r4, r0
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	bf01      	itttt	eq
 8009a3c:	6819      	ldreq	r1, [r3, #0]
 8009a3e:	685b      	ldreq	r3, [r3, #4]
 8009a40:	1809      	addeq	r1, r1, r0
 8009a42:	6021      	streq	r1, [r4, #0]
 8009a44:	e7ed      	b.n	8009a22 <_free_r+0x1e>
 8009a46:	461a      	mov	r2, r3
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b10b      	cbz	r3, 8009a50 <_free_r+0x4c>
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	d9fa      	bls.n	8009a46 <_free_r+0x42>
 8009a50:	6811      	ldr	r1, [r2, #0]
 8009a52:	1850      	adds	r0, r2, r1
 8009a54:	42a0      	cmp	r0, r4
 8009a56:	d10b      	bne.n	8009a70 <_free_r+0x6c>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	4401      	add	r1, r0
 8009a5c:	1850      	adds	r0, r2, r1
 8009a5e:	4283      	cmp	r3, r0
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	d1e0      	bne.n	8009a26 <_free_r+0x22>
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4401      	add	r1, r0
 8009a6a:	6011      	str	r1, [r2, #0]
 8009a6c:	6053      	str	r3, [r2, #4]
 8009a6e:	e7da      	b.n	8009a26 <_free_r+0x22>
 8009a70:	d902      	bls.n	8009a78 <_free_r+0x74>
 8009a72:	230c      	movs	r3, #12
 8009a74:	602b      	str	r3, [r5, #0]
 8009a76:	e7d6      	b.n	8009a26 <_free_r+0x22>
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	1821      	adds	r1, r4, r0
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	bf01      	itttt	eq
 8009a80:	6819      	ldreq	r1, [r3, #0]
 8009a82:	685b      	ldreq	r3, [r3, #4]
 8009a84:	1809      	addeq	r1, r1, r0
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	6063      	str	r3, [r4, #4]
 8009a8a:	6054      	str	r4, [r2, #4]
 8009a8c:	e7cb      	b.n	8009a26 <_free_r+0x22>
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	20001460 	.word	0x20001460

08009a94 <sbrk_aligned>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	4e0e      	ldr	r6, [pc, #56]	; (8009ad0 <sbrk_aligned+0x3c>)
 8009a98:	460c      	mov	r4, r1
 8009a9a:	6831      	ldr	r1, [r6, #0]
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	b911      	cbnz	r1, 8009aa6 <sbrk_aligned+0x12>
 8009aa0:	f000 f8bc 	bl	8009c1c <_sbrk_r>
 8009aa4:	6030      	str	r0, [r6, #0]
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f000 f8b7 	bl	8009c1c <_sbrk_r>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d00a      	beq.n	8009ac8 <sbrk_aligned+0x34>
 8009ab2:	1cc4      	adds	r4, r0, #3
 8009ab4:	f024 0403 	bic.w	r4, r4, #3
 8009ab8:	42a0      	cmp	r0, r4
 8009aba:	d007      	beq.n	8009acc <sbrk_aligned+0x38>
 8009abc:	1a21      	subs	r1, r4, r0
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f000 f8ac 	bl	8009c1c <_sbrk_r>
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	d101      	bne.n	8009acc <sbrk_aligned+0x38>
 8009ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8009acc:	4620      	mov	r0, r4
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	20001464 	.word	0x20001464

08009ad4 <_malloc_r>:
 8009ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad8:	1ccd      	adds	r5, r1, #3
 8009ada:	f025 0503 	bic.w	r5, r5, #3
 8009ade:	3508      	adds	r5, #8
 8009ae0:	2d0c      	cmp	r5, #12
 8009ae2:	bf38      	it	cc
 8009ae4:	250c      	movcc	r5, #12
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	4607      	mov	r7, r0
 8009aea:	db01      	blt.n	8009af0 <_malloc_r+0x1c>
 8009aec:	42a9      	cmp	r1, r5
 8009aee:	d905      	bls.n	8009afc <_malloc_r+0x28>
 8009af0:	230c      	movs	r3, #12
 8009af2:	2600      	movs	r6, #0
 8009af4:	603b      	str	r3, [r7, #0]
 8009af6:	4630      	mov	r0, r6
 8009af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afc:	4e2e      	ldr	r6, [pc, #184]	; (8009bb8 <_malloc_r+0xe4>)
 8009afe:	f000 f89d 	bl	8009c3c <__malloc_lock>
 8009b02:	6833      	ldr	r3, [r6, #0]
 8009b04:	461c      	mov	r4, r3
 8009b06:	bb34      	cbnz	r4, 8009b56 <_malloc_r+0x82>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7ff ffc2 	bl	8009a94 <sbrk_aligned>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	4604      	mov	r4, r0
 8009b14:	d14d      	bne.n	8009bb2 <_malloc_r+0xde>
 8009b16:	6834      	ldr	r4, [r6, #0]
 8009b18:	4626      	mov	r6, r4
 8009b1a:	2e00      	cmp	r6, #0
 8009b1c:	d140      	bne.n	8009ba0 <_malloc_r+0xcc>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	4631      	mov	r1, r6
 8009b22:	4638      	mov	r0, r7
 8009b24:	eb04 0803 	add.w	r8, r4, r3
 8009b28:	f000 f878 	bl	8009c1c <_sbrk_r>
 8009b2c:	4580      	cmp	r8, r0
 8009b2e:	d13a      	bne.n	8009ba6 <_malloc_r+0xd2>
 8009b30:	6821      	ldr	r1, [r4, #0]
 8009b32:	3503      	adds	r5, #3
 8009b34:	1a6d      	subs	r5, r5, r1
 8009b36:	f025 0503 	bic.w	r5, r5, #3
 8009b3a:	3508      	adds	r5, #8
 8009b3c:	2d0c      	cmp	r5, #12
 8009b3e:	bf38      	it	cc
 8009b40:	250c      	movcc	r5, #12
 8009b42:	4638      	mov	r0, r7
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7ff ffa5 	bl	8009a94 <sbrk_aligned>
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d02b      	beq.n	8009ba6 <_malloc_r+0xd2>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	442b      	add	r3, r5
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	e00e      	b.n	8009b74 <_malloc_r+0xa0>
 8009b56:	6822      	ldr	r2, [r4, #0]
 8009b58:	1b52      	subs	r2, r2, r5
 8009b5a:	d41e      	bmi.n	8009b9a <_malloc_r+0xc6>
 8009b5c:	2a0b      	cmp	r2, #11
 8009b5e:	d916      	bls.n	8009b8e <_malloc_r+0xba>
 8009b60:	1961      	adds	r1, r4, r5
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	6025      	str	r5, [r4, #0]
 8009b66:	bf18      	it	ne
 8009b68:	6059      	strne	r1, [r3, #4]
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	bf08      	it	eq
 8009b6e:	6031      	streq	r1, [r6, #0]
 8009b70:	5162      	str	r2, [r4, r5]
 8009b72:	604b      	str	r3, [r1, #4]
 8009b74:	4638      	mov	r0, r7
 8009b76:	f104 060b 	add.w	r6, r4, #11
 8009b7a:	f000 f865 	bl	8009c48 <__malloc_unlock>
 8009b7e:	f026 0607 	bic.w	r6, r6, #7
 8009b82:	1d23      	adds	r3, r4, #4
 8009b84:	1af2      	subs	r2, r6, r3
 8009b86:	d0b6      	beq.n	8009af6 <_malloc_r+0x22>
 8009b88:	1b9b      	subs	r3, r3, r6
 8009b8a:	50a3      	str	r3, [r4, r2]
 8009b8c:	e7b3      	b.n	8009af6 <_malloc_r+0x22>
 8009b8e:	6862      	ldr	r2, [r4, #4]
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	bf0c      	ite	eq
 8009b94:	6032      	streq	r2, [r6, #0]
 8009b96:	605a      	strne	r2, [r3, #4]
 8009b98:	e7ec      	b.n	8009b74 <_malloc_r+0xa0>
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	6864      	ldr	r4, [r4, #4]
 8009b9e:	e7b2      	b.n	8009b06 <_malloc_r+0x32>
 8009ba0:	4634      	mov	r4, r6
 8009ba2:	6876      	ldr	r6, [r6, #4]
 8009ba4:	e7b9      	b.n	8009b1a <_malloc_r+0x46>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	4638      	mov	r0, r7
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	f000 f84c 	bl	8009c48 <__malloc_unlock>
 8009bb0:	e7a1      	b.n	8009af6 <_malloc_r+0x22>
 8009bb2:	6025      	str	r5, [r4, #0]
 8009bb4:	e7de      	b.n	8009b74 <_malloc_r+0xa0>
 8009bb6:	bf00      	nop
 8009bb8:	20001460 	.word	0x20001460

08009bbc <_realloc_r>:
 8009bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	4614      	mov	r4, r2
 8009bc4:	460e      	mov	r6, r1
 8009bc6:	b921      	cbnz	r1, 8009bd2 <_realloc_r+0x16>
 8009bc8:	4611      	mov	r1, r2
 8009bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bce:	f7ff bf81 	b.w	8009ad4 <_malloc_r>
 8009bd2:	b92a      	cbnz	r2, 8009be0 <_realloc_r+0x24>
 8009bd4:	f7ff ff16 	bl	8009a04 <_free_r>
 8009bd8:	4625      	mov	r5, r4
 8009bda:	4628      	mov	r0, r5
 8009bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be0:	f000 f838 	bl	8009c54 <_malloc_usable_size_r>
 8009be4:	4284      	cmp	r4, r0
 8009be6:	4607      	mov	r7, r0
 8009be8:	d802      	bhi.n	8009bf0 <_realloc_r+0x34>
 8009bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bee:	d812      	bhi.n	8009c16 <_realloc_r+0x5a>
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f7ff ff6e 	bl	8009ad4 <_malloc_r>
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d0ed      	beq.n	8009bda <_realloc_r+0x1e>
 8009bfe:	42bc      	cmp	r4, r7
 8009c00:	4622      	mov	r2, r4
 8009c02:	4631      	mov	r1, r6
 8009c04:	bf28      	it	cs
 8009c06:	463a      	movcs	r2, r7
 8009c08:	f7ff fed4 	bl	80099b4 <memcpy>
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4640      	mov	r0, r8
 8009c10:	f7ff fef8 	bl	8009a04 <_free_r>
 8009c14:	e7e1      	b.n	8009bda <_realloc_r+0x1e>
 8009c16:	4635      	mov	r5, r6
 8009c18:	e7df      	b.n	8009bda <_realloc_r+0x1e>
	...

08009c1c <_sbrk_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	2300      	movs	r3, #0
 8009c20:	4d05      	ldr	r5, [pc, #20]	; (8009c38 <_sbrk_r+0x1c>)
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	f7f6 feb2 	bl	8000990 <_sbrk>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_sbrk_r+0x1a>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_sbrk_r+0x1a>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20001468 	.word	0x20001468

08009c3c <__malloc_lock>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__malloc_lock+0x8>)
 8009c3e:	f000 b811 	b.w	8009c64 <__retarget_lock_acquire_recursive>
 8009c42:	bf00      	nop
 8009c44:	2000146c 	.word	0x2000146c

08009c48 <__malloc_unlock>:
 8009c48:	4801      	ldr	r0, [pc, #4]	; (8009c50 <__malloc_unlock+0x8>)
 8009c4a:	f000 b80c 	b.w	8009c66 <__retarget_lock_release_recursive>
 8009c4e:	bf00      	nop
 8009c50:	2000146c 	.word	0x2000146c

08009c54 <_malloc_usable_size_r>:
 8009c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c58:	1f18      	subs	r0, r3, #4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bfbc      	itt	lt
 8009c5e:	580b      	ldrlt	r3, [r1, r0]
 8009c60:	18c0      	addlt	r0, r0, r3
 8009c62:	4770      	bx	lr

08009c64 <__retarget_lock_acquire_recursive>:
 8009c64:	4770      	bx	lr

08009c66 <__retarget_lock_release_recursive>:
 8009c66:	4770      	bx	lr

08009c68 <_init>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	bf00      	nop
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr

08009c74 <_fini>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	bf00      	nop
 8009c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7a:	bc08      	pop	{r3}
 8009c7c:	469e      	mov	lr, r3
 8009c7e:	4770      	bx	lr
