
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009368  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009570  08009570  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009578  08009578  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  200001cc  0800974c  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  0800974c  00021590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010538  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb5  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00033728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3e  00000000  00000000  000345f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016206  00000000  00000000  00035136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f4b  00000000  00000000  0004b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007be30  00000000  00000000  0005f287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041b4  00000000  00000000  000db0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000df26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001cc 	.word	0x200001cc
 8000158:	00000000 	.word	0x00000000
 800015c:	0800948c 	.word	0x0800948c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001d0 	.word	0x200001d0
 8000178:	0800948c 	.word	0x0800948c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14c      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d967      	bls.n	80002a2 <__udivmoddi4+0xe6>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b153      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001e4:	fa20 f202 	lsr.w	r2, r0, r2
 80001e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001f2:	fbbe f1f7 	udiv	r1, lr, r7
 80001f6:	fa1f f58c 	uxth.w	r5, ip
 80001fa:	fb07 ee11 	mls	lr, r7, r1, lr
 80001fe:	fb01 f005 	mul.w	r0, r1, r5
 8000202:	0c22      	lsrs	r2, r4, #16
 8000204:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0202 	adds.w	r2, ip, r2
 8000210:	f101 3eff 	add.w	lr, r1, #4294967295
 8000214:	f080 8119 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000218:	4290      	cmp	r0, r2
 800021a:	f240 8116 	bls.w	800044a <__udivmoddi4+0x28e>
 800021e:	3902      	subs	r1, #2
 8000220:	4462      	add	r2, ip
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f7 	udiv	r0, r2, r7
 8000228:	fb07 2210 	mls	r2, r7, r0, r2
 800022c:	fb00 f505 	mul.w	r5, r0, r5
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a5      	cmp	r5, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000242:	f080 8104 	bcs.w	800044e <__udivmoddi4+0x292>
 8000246:	42a5      	cmp	r5, r4
 8000248:	f240 8101 	bls.w	800044e <__udivmoddi4+0x292>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	1b64      	subs	r4, r4, r5
 8000258:	b11e      	cbz	r6, 8000262 <__udivmoddi4+0xa6>
 800025a:	40dc      	lsrs	r4, r3
 800025c:	2300      	movs	r3, #0
 800025e:	e9c6 4300 	strd	r4, r3, [r6]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d908      	bls.n	800027c <__udivmoddi4+0xc0>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80ea 	beq.w	8000444 <__udivmoddi4+0x288>
 8000270:	2100      	movs	r1, #0
 8000272:	e9c6 0500 	strd	r0, r5, [r6]
 8000276:	4608      	mov	r0, r1
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	fab3 f183 	clz	r1, r3
 8000280:	2900      	cmp	r1, #0
 8000282:	d148      	bne.n	8000316 <__udivmoddi4+0x15a>
 8000284:	42ab      	cmp	r3, r5
 8000286:	d302      	bcc.n	800028e <__udivmoddi4+0xd2>
 8000288:	4282      	cmp	r2, r0
 800028a:	f200 80f8 	bhi.w	800047e <__udivmoddi4+0x2c2>
 800028e:	1a84      	subs	r4, r0, r2
 8000290:	eb65 0203 	sbc.w	r2, r5, r3
 8000294:	2001      	movs	r0, #1
 8000296:	4696      	mov	lr, r2
 8000298:	2e00      	cmp	r6, #0
 800029a:	d0e2      	beq.n	8000262 <__udivmoddi4+0xa6>
 800029c:	e9c6 4e00 	strd	r4, lr, [r6]
 80002a0:	e7df      	b.n	8000262 <__udivmoddi4+0xa6>
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xea>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f382 	clz	r3, r2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 808e 	bne.w	80003cc <__udivmoddi4+0x210>
 80002b0:	1a88      	subs	r0, r1, r2
 80002b2:	2101      	movs	r1, #1
 80002b4:	0c17      	lsrs	r7, r2, #16
 80002b6:	fa1f fe82 	uxth.w	lr, r2
 80002ba:	fbb0 f5f7 	udiv	r5, r0, r7
 80002be:	fb07 0015 	mls	r0, r7, r5, r0
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c8:	fb0e f005 	mul.w	r0, lr, r5
 80002cc:	4290      	cmp	r0, r2
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d0:	eb1c 0202 	adds.w	r2, ip, r2
 80002d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f200 80cc 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002e0:	4645      	mov	r5, r8
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0x150>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14e>
 8000304:	45a6      	cmp	lr, r4
 8000306:	f200 80b4 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 800030a:	4610      	mov	r0, r2
 800030c:	eba4 040e 	sub.w	r4, r4, lr
 8000310:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000314:	e7a0      	b.n	8000258 <__udivmoddi4+0x9c>
 8000316:	f1c1 0720 	rsb	r7, r1, #32
 800031a:	408b      	lsls	r3, r1
 800031c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000320:	ea4c 0c03 	orr.w	ip, ip, r3
 8000324:	fa25 fa07 	lsr.w	sl, r5, r7
 8000328:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032c:	fbba f8f9 	udiv	r8, sl, r9
 8000330:	408d      	lsls	r5, r1
 8000332:	fa20 f307 	lsr.w	r3, r0, r7
 8000336:	fb09 aa18 	mls	sl, r9, r8, sl
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	432b      	orrs	r3, r5
 8000340:	fa00 f501 	lsl.w	r5, r0, r1
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	0c1c      	lsrs	r4, r3, #16
 800034a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800034e:	42a0      	cmp	r0, r4
 8000350:	fa02 f201 	lsl.w	r2, r2, r1
 8000354:	d90b      	bls.n	800036e <__udivmoddi4+0x1b2>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f108 3aff 	add.w	sl, r8, #4294967295
 800035e:	f080 8086 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000362:	42a0      	cmp	r0, r4
 8000364:	f240 8083 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000368:	f1a8 0802 	sub.w	r8, r8, #2
 800036c:	4464      	add	r4, ip
 800036e:	1a24      	subs	r4, r4, r0
 8000370:	b298      	uxth	r0, r3
 8000372:	fbb4 f3f9 	udiv	r3, r4, r9
 8000376:	fb09 4413 	mls	r4, r9, r3, r4
 800037a:	fb03 fe0e 	mul.w	lr, r3, lr
 800037e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000382:	45a6      	cmp	lr, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f103 30ff 	add.w	r0, r3, #4294967295
 800038e:	d26a      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 8000390:	45a6      	cmp	lr, r4
 8000392:	d968      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000394:	3b02      	subs	r3, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800039c:	fba0 9302 	umull	r9, r3, r0, r2
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	429c      	cmp	r4, r3
 80003a6:	46c8      	mov	r8, r9
 80003a8:	469e      	mov	lr, r3
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d067      	beq.n	8000482 <__udivmoddi4+0x2c6>
 80003b2:	ebb5 0308 	subs.w	r3, r5, r8
 80003b6:	eb64 040e 	sbc.w	r4, r4, lr
 80003ba:	40cb      	lsrs	r3, r1
 80003bc:	fa04 f707 	lsl.w	r7, r4, r7
 80003c0:	431f      	orrs	r7, r3
 80003c2:	40cc      	lsrs	r4, r1
 80003c4:	e9c6 7400 	strd	r7, r4, [r6]
 80003c8:	2100      	movs	r1, #0
 80003ca:	e74a      	b.n	8000262 <__udivmoddi4+0xa6>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0020 	rsb	r0, r3, #32
 80003d4:	40c1      	lsrs	r1, r0
 80003d6:	409d      	lsls	r5, r3
 80003d8:	fa24 f000 	lsr.w	r0, r4, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	4328      	orrs	r0, r5
 80003e2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003e6:	fb07 1115 	mls	r1, r7, r5, r1
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	0c02      	lsrs	r2, r0, #16
 80003f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003f4:	fb05 f10e 	mul.w	r1, r5, lr
 80003f8:	4291      	cmp	r1, r2
 80003fa:	fa04 f403 	lsl.w	r4, r4, r3
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x256>
 8000400:	eb1c 0202 	adds.w	r2, ip, r2
 8000404:	f105 38ff 	add.w	r8, r5, #4294967295
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	4291      	cmp	r1, r2
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3d02      	subs	r5, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a52      	subs	r2, r2, r1
 8000414:	fbb2 f1f7 	udiv	r1, r2, r7
 8000418:	fb07 2211 	mls	r2, r7, r1, r2
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000422:	fb01 f20e 	mul.w	r2, r1, lr
 8000426:	4282      	cmp	r2, r0
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x280>
 800042a:	eb1c 0000 	adds.w	r0, ip, r0
 800042e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000432:	d216      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000434:	4282      	cmp	r2, r0
 8000436:	d914      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000438:	3902      	subs	r1, #2
 800043a:	4460      	add	r0, ip
 800043c:	1a80      	subs	r0, r0, r2
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4631      	mov	r1, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e70b      	b.n	8000262 <__udivmoddi4+0xa6>
 800044a:	4671      	mov	r1, lr
 800044c:	e6e9      	b.n	8000222 <__udivmoddi4+0x66>
 800044e:	4610      	mov	r0, r2
 8000450:	e6fe      	b.n	8000250 <__udivmoddi4+0x94>
 8000452:	454d      	cmp	r5, r9
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb9 0802 	subs.w	r8, r9, r2
 800045a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800045e:	3801      	subs	r0, #1
 8000460:	e7a5      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000462:	4641      	mov	r1, r8
 8000464:	e7ea      	b.n	800043c <__udivmoddi4+0x280>
 8000466:	4603      	mov	r3, r0
 8000468:	e796      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046a:	4645      	mov	r5, r8
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	46d0      	mov	r8, sl
 8000470:	e77d      	b.n	800036e <__udivmoddi4+0x1b2>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e749      	b.n	800030c <__udivmoddi4+0x150>
 8000478:	3d02      	subs	r5, #2
 800047a:	4462      	add	r2, ip
 800047c:	e731      	b.n	80002e2 <__udivmoddi4+0x126>
 800047e:	4608      	mov	r0, r1
 8000480:	e70a      	b.n	8000298 <__udivmoddi4+0xdc>
 8000482:	4631      	mov	r1, r6
 8000484:	e6ed      	b.n	8000262 <__udivmoddi4+0xa6>
 8000486:	bf00      	nop

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <ReadModuleID>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t ReadModuleID(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
	uint8_t id;

	HAL_SPI_Receive(&hspi1, &id, 1, 100);				/* this read is just to initialize everything */
 8000492:	1df9      	adds	r1, r7, #7
 8000494:	2364      	movs	r3, #100	; 0x64
 8000496:	2201      	movs	r2, #1
 8000498:	4812      	ldr	r0, [pc, #72]	; (80004e4 <ReadModuleID+0x58>)
 800049a:	f003 fa1b 	bl	80038d4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOA, ID_PL_Pin, GPIO_PIN_RESET); /* Pull ID load signal low to prepare to load the shift register */
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	4810      	ldr	r0, [pc, #64]	; (80004e8 <ReadModuleID+0x5c>)
 80004a6:	f000 fe31 	bl	800110c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, ID_PL_Pin, GPIO_PIN_SET);   /* Pull ID load signal high to load the shift register */
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <ReadModuleID+0x5c>)
 80004b2:	f000 fe2b 	bl	800110c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, ID_CS_Pin, GPIO_PIN_RESET); /* Pull CS signal low to gate signal onto SPI bus */
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004bc:	480a      	ldr	r0, [pc, #40]	; (80004e8 <ReadModuleID+0x5c>)
 80004be:	f000 fe25 	bl	800110c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &id, 1, 100);				/* read module ID */
 80004c2:	1df9      	adds	r1, r7, #7
 80004c4:	2364      	movs	r3, #100	; 0x64
 80004c6:	2201      	movs	r2, #1
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <ReadModuleID+0x58>)
 80004ca:	f003 fa03 	bl	80038d4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOA, ID_CS_Pin, GPIO_PIN_SET); /* Pull CS signal high to release SPI bus */
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <ReadModuleID+0x5c>)
 80004d6:	f000 fe19 	bl	800110c <HAL_GPIO_WritePin>
	return(id);
 80004da:	79fb      	ldrb	r3, [r7, #7]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000023c 	.word	0x2000023c
 80004e8:	40020000 	.word	0x40020000

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b0c2      	sub	sp, #264	; 0x108
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 faec 	bl	8000ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f853 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f905 	bl	8000708 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004fe:	f000 f8a1 	bl	8000644 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000502:	f000 f8cd 	bl	80006a0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000506:	f007 fe5f 	bl	80081c8 <MX_USB_DEVICE_Init>
  /* initialize the LoRa chip */
 // LoRa_Init(&hspi1);

  /* Send a status message to USB port */
  uint8_t buffer[256];
  sprintf((char *)buffer, "Entering transmit loop\r\n");
 800050a:	463b      	mov	r3, r7
 800050c:	4921      	ldr	r1, [pc, #132]	; (8000594 <main+0xa8>)
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fb0a 	bl	8008b28 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 8000514:	463b      	mov	r3, r7
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe30 	bl	800017c <strlen>
 800051c:	4603      	mov	r3, r0
 800051e:	b29a      	uxth	r2, r3
 8000520:	463b      	mov	r3, r7
 8000522:	4611      	mov	r1, r2
 8000524:	4618      	mov	r0, r3
 8000526:	f007 ff0d 	bl	8008344 <CDC_Transmit_FS>

  int count = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 8000530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000534:	3301      	adds	r3, #1
 8000536:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  sprintf((char *)buffer, "Count = %d\r\n", count);
 800053a:	463b      	mov	r3, r7
 800053c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000540:	4915      	ldr	r1, [pc, #84]	; (8000598 <main+0xac>)
 8000542:	4618      	mov	r0, r3
 8000544:	f008 faf0 	bl	8008b28 <siprintf>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); /* Turn on the LED */
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4813      	ldr	r0, [pc, #76]	; (800059c <main+0xb0>)
 8000550:	f000 fddc 	bl	800110c <HAL_GPIO_WritePin>
//	  LoRaTransmit(buffer, strlen((char *)buffer));
	  moduleID = ReadModuleID();
 8000554:	f7ff ff9a 	bl	800048c <ReadModuleID>
 8000558:	4603      	mov	r3, r0
 800055a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	  HAL_Delay(500);
 800055e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000562:	f000 fb23 	bl	8000bac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off the LED */
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <main+0xb0>)
 800056e:	f000 fdcd 	bl	800110c <HAL_GPIO_WritePin>
//	  LoRaReceive(buffer, 0); /* go to receive mode with timeout = 0 (wait forever for one message) */
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 8000572:	463b      	mov	r3, r7
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe01 	bl	800017c <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	463b      	mov	r3, r7
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f007 fede 	bl	8008344 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058c:	f000 fb0e 	bl	8000bac <HAL_Delay>
	  count++;
 8000590:	e7ce      	b.n	8000530 <main+0x44>
 8000592:	bf00      	nop
 8000594:	080094a4 	.word	0x080094a4
 8000598:	080094c0 	.word	0x080094c0
 800059c:	40020800 	.word	0x40020800

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b092      	sub	sp, #72	; 0x48
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2234      	movs	r2, #52	; 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f008 fada 	bl	8008b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xa0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005ca:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <SystemClock_Config+0xa0>)
 80005cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005d0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005d2:	2303      	movs	r3, #3
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005de:	2310      	movs	r3, #16
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fb0d 	bl	8002c1c <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000608:	f000 f912 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800061c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000620:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe28 	bl	800327c <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000632:	f000 f8fd 	bl	8000830 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3748      	adds	r7, #72	; 0x48
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40007000 	.word	0x40007000

08000644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f000 fd5b 	bl	800113c <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f8d0 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200001e8 	.word	0x200001e8
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0

080006a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_SPI1_Init+0x60>)
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <MX_SPI1_Init+0x64>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_SPI1_Init+0x60>)
 80006ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_SPI1_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_SPI1_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_SPI1_Init+0x60>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_SPI1_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_SPI1_Init+0x60>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_SPI1_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SPI1_Init+0x60>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_SPI1_Init+0x60>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SPI1_Init+0x60>)
 80006e6:	220a      	movs	r2, #10
 80006e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_SPI1_Init+0x60>)
 80006ec:	f003 f876 	bl	80037dc <HAL_SPI_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80006f6:	f000 f89b 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000023c 	.word	0x2000023c
 8000704:	40013000 	.word	0x40013000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <MX_GPIO_Init+0x118>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a3f      	ldr	r2, [pc, #252]	; (8000820 <MX_GPIO_Init+0x118>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <MX_GPIO_Init+0x118>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <MX_GPIO_Init+0x118>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a39      	ldr	r2, [pc, #228]	; (8000820 <MX_GPIO_Init+0x118>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <MX_GPIO_Init+0x118>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <MX_GPIO_Init+0x118>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a33      	ldr	r2, [pc, #204]	; (8000820 <MX_GPIO_Init+0x118>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <MX_GPIO_Init+0x118>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <MX_GPIO_Init+0x118>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a2d      	ldr	r2, [pc, #180]	; (8000820 <MX_GPIO_Init+0x118>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_GPIO_Init+0x118>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	4827      	ldr	r0, [pc, #156]	; (8000824 <MX_GPIO_Init+0x11c>)
 8000786:	f000 fcc1 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin|ID_PL_Pin|ID_CS_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f240 6111 	movw	r1, #1553	; 0x611
 8000790:	4825      	ldr	r0, [pc, #148]	; (8000828 <MX_GPIO_Init+0x120>)
 8000792:	f000 fcbb 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OneWire_GPIO_Port, OneWire_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <MX_GPIO_Init+0x124>)
 800079e:	f000 fcb5 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <MX_GPIO_Init+0x11c>)
 80007bc:	f000 fb26 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin ID_PL_Pin ID_CS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin|ID_PL_Pin|ID_CS_Pin;
 80007c0:	f240 6311 	movw	r3, #1553	; 0x611
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_GPIO_Init+0x120>)
 80007da:	f000 fb17 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 80007de:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_GPIO_Init+0x120>)
 80007f4:	f000 fb0a 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OneWire_Pin */
  GPIO_InitStruct.Pin = OneWire_Pin;
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OneWire_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_GPIO_Init+0x124>)
 8000812:	f000 fafb 	bl	8000e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020400 	.word	0x40020400

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_MspInit+0x58>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <HAL_MspInit+0x58>)
 8000848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800084c:	6253      	str	r3, [r2, #36]	; 0x24
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_MspInit+0x58>)
 8000850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_MspInit+0x58>)
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <HAL_MspInit+0x58>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6213      	str	r3, [r2, #32]
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_MspInit+0x58>)
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_MspInit+0x58>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_MspInit+0x58>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6253      	str	r3, [r2, #36]	; 0x24
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_MspInit+0x58>)
 8000880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_I2C_MspInit+0x7c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d127      	bne.n	800090a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_I2C_MspInit+0x80>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <HAL_I2C_MspInit+0x80>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_I2C_MspInit+0x80>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d2:	23c0      	movs	r3, #192	; 0xc0
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	2312      	movs	r3, #18
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e2:	2304      	movs	r3, #4
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <HAL_I2C_MspInit+0x84>)
 80008ee:	f000 fa8d 	bl	8000e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_I2C_MspInit+0x80>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_I2C_MspInit+0x80>)
 80008f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008fc:	6253      	str	r3, [r2, #36]	; 0x24
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_I2C_MspInit+0x80>)
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40005400 	.word	0x40005400
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400

08000920 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_SPI_MspInit+0x7c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d127      	bne.n	8000992 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800094c:	6213      	str	r3, [r2, #32]
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000950:	6a1b      	ldr	r3, [r3, #32]
 8000952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000972:	23e0      	movs	r3, #224	; 0xe0
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000982:	2305      	movs	r3, #5
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_SPI_MspInit+0x84>)
 800098e:	f000 fa3d 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40013000 	.word	0x40013000
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ee:	f000 f8c1 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USB_LP_IRQHandler+0x10>)
 80009fe:	f000 fde5 	bl	80015cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000f3c 	.word	0x20000f3c

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f008 f89c 	bl	8008b78 <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20002800 	.word	0x20002800
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	20000294 	.word	0x20000294
 8000a74:	20001590 	.word	0x20001590

08000a78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aaa:	f7ff ffe5 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f008 f869 	bl	8008b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab2:	f7ff fd1b 	bl	80004ec <main>
  bx lr
 8000ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000ac0:	08009580 	.word	0x08009580
  ldr r2, =_sbss
 8000ac4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000ac8:	20001590 	.word	0x20001590

08000acc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_IRQHandler>

08000ace <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f955 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f000 f80e 	bl	8000b00 <HAL_InitTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	e001      	b.n	8000af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af0:	f7ff fea4 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_InitTick+0x68>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d022      	beq.n	8000b5a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_InitTick+0x6c>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_InitTick+0x68>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f962 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10f      	bne.n	8000b54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b0f      	cmp	r3, #15
 8000b38:	d809      	bhi.n	8000b4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b42:	f000 f92c 	bl	8000d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_InitTick+0x70>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	e007      	b.n	8000b5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	e004      	b.n	8000b5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e001      	b.n	8000b5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <HAL_IncTick+0x1c>)
 8000b84:	6013      	str	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000298 	.word	0x20000298
 8000b94:	20000008 	.word	0x20000008

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000298 	.word	0x20000298

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff fff0 	bl	8000b98 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d004      	beq.n	8000bd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_Delay+0x40>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd0:	bf00      	nop
 8000bd2:	f7ff ffe1 	bl	8000b98 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d8f7      	bhi.n	8000bd2 <HAL_Delay+0x26>
  {
  }
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000008 	.word	0x20000008

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4906      	ldr	r1, [pc, #24]	; (8000c88 <__NVIC_EnableIRQ+0x34>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff90 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff2d 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff42 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff90 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5f 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff35 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e22:	e154      	b.n	80010ce <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8146 	beq.w	80010c8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d005      	beq.n	8000e54 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 0201 	and.w	r2, r3, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d017      	beq.n	8000ef2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	6939      	ldr	r1, [r7, #16]
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0203 	and.w	r2, r3, #3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80a0 	beq.w	80010c8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	4b58      	ldr	r3, [pc, #352]	; (80010ec <HAL_GPIO_Init+0x2e0>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	4a57      	ldr	r2, [pc, #348]	; (80010ec <HAL_GPIO_Init+0x2e0>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6213      	str	r3, [r2, #32]
 8000f94:	4b55      	ldr	r3, [pc, #340]	; (80010ec <HAL_GPIO_Init+0x2e0>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fa0:	4a53      	ldr	r2, [pc, #332]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4b      	ldr	r2, [pc, #300]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d019      	beq.n	8001000 <HAL_GPIO_Init+0x1f4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d013      	beq.n	8000ffc <HAL_GPIO_Init+0x1f0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a49      	ldr	r2, [pc, #292]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a48      	ldr	r2, [pc, #288]	; (8001100 <HAL_GPIO_Init+0x2f4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a47      	ldr	r2, [pc, #284]	; (8001104 <HAL_GPIO_Init+0x2f8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1e4>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e008      	b.n	8001002 <HAL_GPIO_Init+0x1f6>
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1f6>
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1f6>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1f6>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1f6>
 8001000:	2300      	movs	r3, #0
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001012:	4937      	ldr	r1, [pc, #220]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001020:	4b39      	ldr	r3, [pc, #228]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001044:	4a30      	ldr	r2, [pc, #192]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800104a:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800106e:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010c2:	4a11      	ldr	r2, [pc, #68]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f47f aea3 	bne.w	8000e24 <HAL_GPIO_Init+0x18>
  }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e12b      	b.n	80013a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d106      	bne.n	8001168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff fb98 	bl	8000898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2224      	movs	r2, #36	; 0x24
 800116c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800118e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800119e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011a0:	f002 faa8 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 80011a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a81      	ldr	r2, [pc, #516]	; (80013b0 <HAL_I2C_Init+0x274>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d807      	bhi.n	80011c0 <HAL_I2C_Init+0x84>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4a80      	ldr	r2, [pc, #512]	; (80013b4 <HAL_I2C_Init+0x278>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	bf94      	ite	ls
 80011b8:	2301      	movls	r3, #1
 80011ba:	2300      	movhi	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	e006      	b.n	80011ce <HAL_I2C_Init+0x92>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4a7d      	ldr	r2, [pc, #500]	; (80013b8 <HAL_I2C_Init+0x27c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	bf94      	ite	ls
 80011c8:	2301      	movls	r3, #1
 80011ca:	2300      	movhi	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0e7      	b.n	80013a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4a78      	ldr	r2, [pc, #480]	; (80013bc <HAL_I2C_Init+0x280>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	0c9b      	lsrs	r3, r3, #18
 80011e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a6a      	ldr	r2, [pc, #424]	; (80013b0 <HAL_I2C_Init+0x274>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d802      	bhi.n	8001210 <HAL_I2C_Init+0xd4>
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3301      	adds	r3, #1
 800120e:	e009      	b.n	8001224 <HAL_I2C_Init+0xe8>
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	4a69      	ldr	r2, [pc, #420]	; (80013c0 <HAL_I2C_Init+0x284>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	099b      	lsrs	r3, r3, #6
 8001222:	3301      	adds	r3, #1
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	430b      	orrs	r3, r1
 800122a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	495c      	ldr	r1, [pc, #368]	; (80013b0 <HAL_I2C_Init+0x274>)
 8001240:	428b      	cmp	r3, r1
 8001242:	d819      	bhi.n	8001278 <HAL_I2C_Init+0x13c>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1e59      	subs	r1, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001252:	1c59      	adds	r1, r3, #1
 8001254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001258:	400b      	ands	r3, r1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <HAL_I2C_Init+0x138>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1e59      	subs	r1, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fbb1 f3f3 	udiv	r3, r1, r3
 800126c:	3301      	adds	r3, #1
 800126e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001272:	e051      	b.n	8001318 <HAL_I2C_Init+0x1dc>
 8001274:	2304      	movs	r3, #4
 8001276:	e04f      	b.n	8001318 <HAL_I2C_Init+0x1dc>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d111      	bne.n	80012a4 <HAL_I2C_Init+0x168>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1e58      	subs	r0, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	440b      	add	r3, r1
 800128e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001292:	3301      	adds	r3, #1
 8001294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	e012      	b.n	80012ca <HAL_I2C_Init+0x18e>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1e58      	subs	r0, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	0099      	lsls	r1, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_I2C_Init+0x196>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e022      	b.n	8001318 <HAL_I2C_Init+0x1dc>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10e      	bne.n	80012f8 <HAL_I2C_Init+0x1bc>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1e58      	subs	r0, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6859      	ldr	r1, [r3, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	440b      	add	r3, r1
 80012e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f6:	e00f      	b.n	8001318 <HAL_I2C_Init+0x1dc>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1e58      	subs	r0, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	0099      	lsls	r1, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	fbb0 f3f3 	udiv	r3, r0, r3
 800130e:	3301      	adds	r3, #1
 8001310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	6809      	ldr	r1, [r1, #0]
 800131c:	4313      	orrs	r3, r2
 800131e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69da      	ldr	r2, [r3, #28]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6911      	ldr	r1, [r2, #16]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68d2      	ldr	r2, [r2, #12]
 8001352:	4311      	orrs	r1, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	430b      	orrs	r3, r1
 800135a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	000186a0 	.word	0x000186a0
 80013b4:	001e847f 	.word	0x001e847f
 80013b8:	003d08ff 	.word	0x003d08ff
 80013bc:	431bde83 	.word	0x431bde83
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af06      	add	r7, sp, #24
 80013ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0d0      	b.n	8001578 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f007 f8fc 	bl	80085e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fe63 	bl	80040c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e04c      	b.n	80014a2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	3301      	adds	r3, #1
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	b298      	uxth	r0, r3
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	440b      	add	r3, r1
 8001444:	3336      	adds	r3, #54	; 0x36
 8001446:	4602      	mov	r2, r0
 8001448:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	3303      	adds	r3, #3
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3338      	adds	r3, #56	; 0x38
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	333c      	adds	r3, #60	; 0x3c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	3340      	adds	r3, #64	; 0x40
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	3301      	adds	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3ad      	bcc.n	8001408 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e044      	b.n	800153c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	440b      	add	r3, r1
 80014ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3b5      	bcc.n	80014b2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	687e      	ldr	r6, [r7, #4]
 800154e:	466d      	mov	r5, sp
 8001550:	f106 0410 	add.w	r4, r6, #16
 8001554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	602b      	str	r3, [r5, #0]
 800155c:	1d33      	adds	r3, r6, #4
 800155e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001560:	6838      	ldr	r0, [r7, #0]
 8001562:	f002 fdcb 	bl	80040fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001580 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_PCD_Start+0x16>
 8001592:	2302      	movs	r3, #2
 8001594:	e016      	b.n	80015c4 <HAL_PCD_Start+0x44>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fd7a 	bl	800409c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015a8:	2101      	movs	r1, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f006 fffe 	bl	80085ac <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f005 fa5f 	bl	8006a78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 fa57 	bl	8006a8c <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015e8:	d102      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 faf5 	bl	8001bda <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f005 fa49 	bl	8006a8c <USB_ReadInterrupts>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001604:	d112      	bne.n	800162c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001618:	b292      	uxth	r2, r2
 800161a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f007 f85d 	bl	80086de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001624:	2100      	movs	r1, #0
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f8c7 	bl	80017ba <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f005 fa2b 	bl	8006a8c <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001640:	d10b      	bne.n	800165a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001654:	b292      	uxth	r2, r2
 8001656:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f005 fa14 	bl	8006a8c <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	d10b      	bne.n	8001688 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001678:	b29a      	uxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001682:	b292      	uxth	r2, r2
 8001684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f005 f9fd 	bl	8006a8c <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169c:	d126      	bne.n	80016ec <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0204 	bic.w	r2, r2, #4
 80016b0:	b292      	uxth	r2, r2
 80016b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0208 	bic.w	r2, r2, #8
 80016c8:	b292      	uxth	r2, r2
 80016ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f007 f83e 	bl	8008750 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016e6:	b292      	uxth	r2, r2
 80016e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 f9cb 	bl	8006a8c <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001700:	d126      	bne.n	8001750 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800170a:	b29a      	uxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0208 	orr.w	r2, r2, #8
 8001714:	b292      	uxth	r2, r2
 8001716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172c:	b292      	uxth	r2, r2
 800172e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0204 	orr.w	r2, r2, #4
 8001744:	b292      	uxth	r2, r2
 8001746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f006 ffe6 	bl	800871c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f005 f999 	bl	8006a8c <USB_ReadInterrupts>
 800175a:	4603      	mov	r3, r0
 800175c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001764:	d10e      	bne.n	8001784 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800176e:	b29a      	uxth	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001778:	b292      	uxth	r2, r2
 800177a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f006 ff9f 	bl	80086c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f005 f97f 	bl	8006a8c <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001798:	d10b      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017ac:	b292      	uxth	r2, r2
 80017ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_PCD_SetAddress+0x1a>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e013      	b.n	80017fc <HAL_PCD_SetAddress+0x42>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 f930 	bl	8006a52 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4603      	mov	r3, r0
 8001814:	70fb      	strb	r3, [r7, #3]
 8001816:	460b      	mov	r3, r1
 8001818:	803b      	strh	r3, [r7, #0]
 800181a:	4613      	mov	r3, r2
 800181c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da0e      	bge.n	8001848 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	705a      	strb	r2, [r3, #1]
 8001846:	e00e      	b.n	8001866 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	f003 0207 	and.w	r2, r3, #7
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	78ba      	ldrb	r2, [r7, #2]
 800187c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001890:	78bb      	ldrb	r3, [r7, #2]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d102      	bne.n	800189c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_PCD_EP_Open+0xa6>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e00e      	b.n	80018c8 <HAL_PCD_EP_Open+0xc4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68f9      	ldr	r1, [r7, #12]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 fc3f 	bl	800413c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80018c6:	7afb      	ldrb	r3, [r7, #11]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da0e      	bge.n	8001902 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	705a      	strb	r2, [r3, #1]
 8001900:	e00e      	b.n	8001920 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	f003 0207 	and.w	r2, r3, #7
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	b2da      	uxtb	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_PCD_EP_Close+0x6a>
 8001936:	2302      	movs	r3, #2
 8001938:	e00e      	b.n	8001958 <HAL_PCD_EP_Close+0x88>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68f9      	ldr	r1, [r7, #12]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 ff61 	bl	8004810 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	460b      	mov	r3, r1
 800196e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001970:	7afb      	ldrb	r3, [r7, #11]
 8001972:	f003 0207 	and.w	r2, r3, #7
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2200      	movs	r2, #0
 800199e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a0:	7afb      	ldrb	r3, [r7, #11]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6979      	ldr	r1, [r7, #20]
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 f913 	bl	8004be8 <USB_EPStartXfer>
 80019c2:	e005      	b.n	80019d0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6979      	ldr	r1, [r7, #20]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 f90c 	bl	8004be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 0207 	and.w	r2, r3, #7
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019fc:	681b      	ldr	r3, [r3, #0]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	460b      	mov	r3, r1
 8001a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2201      	movs	r2, #1
 8001a52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a60:	7afb      	ldrb	r3, [r7, #11]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6979      	ldr	r1, [r7, #20]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 f8b9 	bl	8004be8 <USB_EPStartXfer>
 8001a76:	e005      	b.n	8001a84 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6979      	ldr	r1, [r7, #20]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 f8b2 	bl	8004be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	f003 0207 	and.w	r2, r3, #7
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d901      	bls.n	8001aac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e03e      	b.n	8001b2a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da0e      	bge.n	8001ad2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	705a      	strb	r2, [r3, #1]
 8001ad0:	e00c      	b.n	8001aec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_PCD_EP_SetStall+0x7e>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e00e      	b.n	8001b2a <HAL_PCD_EP_SetStall+0x9c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fe9c 	bl	8006858 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	f003 020f 	and.w	r2, r3, #15
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d901      	bls.n	8001b50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e040      	b.n	8001bd2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da0e      	bge.n	8001b76 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	705a      	strb	r2, [r3, #1]
 8001b74:	e00e      	b.n	8001b94 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 0207 	and.w	r2, r3, #7
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_PCD_EP_ClrStall+0x82>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e00e      	b.n	8001bd2 <HAL_PCD_EP_ClrStall+0xa0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 fe98 	bl	80068f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b08e      	sub	sp, #56	; 0x38
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001be2:	e2ec      	b.n	80021be <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bec:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001bfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 8161 	bne.w	8001ec6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d152      	bne.n	8001cb4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1e:	81fb      	strh	r3, [r7, #14]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	89fb      	ldrh	r3, [r7, #14]
 8001c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3328      	adds	r3, #40	; 0x28
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	441a      	add	r2, r3
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c72:	2100      	movs	r1, #0
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f006 fd0a 	bl	800868e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 829b 	beq.w	80021be <PCD_EP_ISR_Handler+0x5e4>
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 8296 	bne.w	80021be <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cb2:	e284      	b.n	80021be <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001cc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d034      	beq.n	8001d38 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3306      	adds	r3, #6
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f004 ff11 	bl	8006b34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d1e:	4013      	ands	r3, r2
 8001d20:	823b      	strh	r3, [r7, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	8a3a      	ldrh	r2, [r7, #16]
 8001d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f006 fc7f 	bl	8008634 <HAL_PCD_SetupStageCallback>
 8001d36:	e242      	b.n	80021be <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f280 823e 	bge.w	80021be <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d4e:	4013      	ands	r3, r2
 8001d50:	83bb      	strh	r3, [r7, #28]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	8bba      	ldrh	r2, [r7, #28]
 8001d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	3306      	adds	r3, #6
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d019      	beq.n	8001dc8 <PCD_EP_ISR_Handler+0x1ee>
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d015      	beq.n	8001dc8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	6959      	ldr	r1, [r3, #20]
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f004 fec1 	bl	8006b34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	441a      	add	r2, r3
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f006 fc48 	bl	8008658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 81f2 	bne.w	80021be <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	4413      	add	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d112      	bne.n	8001e28 <PCD_EP_ISR_Handler+0x24e>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	801a      	strh	r2, [r3, #0]
 8001e26:	e02f      	b.n	8001e88 <PCD_EP_ISR_Handler+0x2ae>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e2e:	d813      	bhi.n	8001e58 <PCD_EP_ISR_Handler+0x27e>
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	085b      	lsrs	r3, r3, #1
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <PCD_EP_ISR_Handler+0x270>
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	3301      	adds	r3, #1
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	029b      	lsls	r3, r3, #10
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	e017      	b.n	8001e88 <PCD_EP_ISR_Handler+0x2ae>
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <PCD_EP_ISR_Handler+0x298>
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e98:	827b      	strh	r3, [r7, #18]
 8001e9a:	8a7b      	ldrh	r3, [r7, #18]
 8001e9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ea0:	827b      	strh	r3, [r7, #18]
 8001ea2:	8a7b      	ldrh	r3, [r7, #18]
 8001ea4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ea8:	827b      	strh	r3, [r7, #18]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	8a7b      	ldrh	r3, [r7, #18]
 8001eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	8013      	strh	r3, [r2, #0]
 8001ec4:	e17b      	b.n	80021be <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ed8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f280 80ea 	bge.w	80020b6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ef8:	4013      	ands	r3, r2
 8001efa:	853b      	strh	r3, [r7, #40]	; 0x28
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f10:	b292      	uxth	r2, r2
 8001f12:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f14:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	7b1b      	ldrb	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d122      	bne.n	8001f78 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	3306      	adds	r3, #6
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8087 	beq.w	8002072 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	6959      	ldr	r1, [r3, #20]
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	88da      	ldrh	r2, [r3, #6]
 8001f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f72:	f004 fddf 	bl	8006b34 <USB_ReadPMA>
 8001f76:	e07c      	b.n	8002072 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	78db      	ldrb	r3, [r3, #3]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d108      	bne.n	8001f92 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f82:	461a      	mov	r2, r3
 8001f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f927 	bl	80021da <HAL_PCD_EP_DB_Receive>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f90:	e06f      	b.n	8002072 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fac:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	441a      	add	r2, r3
 8001fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d021      	beq.n	8002030 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	3302      	adds	r3, #2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002014:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002016:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002018:	2b00      	cmp	r3, #0
 800201a:	d02a      	beq.n	8002072 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	6959      	ldr	r1, [r3, #20]
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	891a      	ldrh	r2, [r3, #8]
 8002028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800202a:	f004 fd83 	bl	8006b34 <USB_ReadPMA>
 800202e:	e020      	b.n	8002072 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	3306      	adds	r3, #6
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002058:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800205a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	6959      	ldr	r1, [r3, #20]
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	895a      	ldrh	r2, [r3, #10]
 800206c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800206e:	f004 fd61 	bl	8006b34 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002078:	441a      	add	r2, r3
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002084:	441a      	add	r2, r3
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <PCD_EP_ISR_Handler+0x4c2>
 8002092:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d206      	bcs.n	80020aa <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f006 fad8 	bl	8008658 <HAL_PCD_DataOutStageCallback>
 80020a8:	e005      	b.n	80020b6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fd99 	bl	8004be8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d07e      	beq.n	80021be <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80020c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	843b      	strh	r3, [r7, #32]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	441a      	add	r2, r3
 80020fe:	8c3b      	ldrh	r3, [r7, #32]
 8002100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002108:	b29b      	uxth	r3, r3
 800210a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	78db      	ldrb	r3, [r3, #3]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d00c      	beq.n	800212e <PCD_EP_ISR_Handler+0x554>
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	78db      	ldrb	r3, [r3, #3]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002120:	2b02      	cmp	r3, #2
 8002122:	d146      	bne.n	80021b2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002124:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d141      	bne.n	80021b2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002136:	b29b      	uxth	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	3302      	adds	r3, #2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4413      	add	r3, r2
 800214c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002156:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	8bfb      	ldrh	r3, [r7, #30]
 800215e:	429a      	cmp	r2, r3
 8002160:	d906      	bls.n	8002170 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	8bfb      	ldrh	r3, [r7, #30]
 8002168:	1ad2      	subs	r2, r2, r3
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	619a      	str	r2, [r3, #24]
 800216e:	e002      	b.n	8002176 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f006 fa82 	bl	800868e <HAL_PCD_DataInStageCallback>
 800218a:	e018      	b.n	80021be <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	8bfb      	ldrh	r3, [r7, #30]
 8002192:	441a      	add	r2, r3
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	8bfb      	ldrh	r3, [r7, #30]
 800219e:	441a      	add	r2, r3
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 fd1c 	bl	8004be8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80021b0:	e005      	b.n	80021be <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021b4:	461a      	mov	r2, r3
 80021b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f91b 	bl	80023f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f6ff ad0a 	blt.w	8001be4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3738      	adds	r7, #56	; 0x38
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b088      	sub	sp, #32
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	4613      	mov	r3, r2
 80021e6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d07e      	beq.n	80022f0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	3302      	adds	r3, #2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	8b7b      	ldrh	r3, [r7, #26]
 8002222:	429a      	cmp	r2, r3
 8002224:	d306      	bcc.n	8002234 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	8b7b      	ldrh	r3, [r7, #26]
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	619a      	str	r2, [r3, #24]
 8002232:	e002      	b.n	800223a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d123      	bne.n	800228a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225c:	833b      	strh	r3, [r7, #24]
 800225e:	8b3b      	ldrh	r3, [r7, #24]
 8002260:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002264:	833b      	strh	r3, [r7, #24]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	441a      	add	r2, r3
 8002274:	8b3b      	ldrh	r3, [r7, #24]
 8002276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800227a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800227e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002286:	b29b      	uxth	r3, r3
 8002288:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01f      	beq.n	80022d4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ae:	82fb      	strh	r3, [r7, #22]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	8afb      	ldrh	r3, [r7, #22]
 80022c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022d4:	8b7b      	ldrh	r3, [r7, #26]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6959      	ldr	r1, [r3, #20]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	891a      	ldrh	r2, [r3, #8]
 80022e8:	8b7b      	ldrh	r3, [r7, #26]
 80022ea:	f004 fc23 	bl	8006b34 <USB_ReadPMA>
 80022ee:	e07c      	b.n	80023ea <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	3306      	adds	r3, #6
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002318:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	8b7b      	ldrh	r3, [r7, #26]
 8002320:	429a      	cmp	r2, r3
 8002322:	d306      	bcc.n	8002332 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	8b7b      	ldrh	r3, [r7, #26]
 800232a:	1ad2      	subs	r2, r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	619a      	str	r2, [r3, #24]
 8002330:	e002      	b.n	8002338 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d123      	bne.n	8002388 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	83fb      	strh	r3, [r7, #30]
 800235c:	8bfb      	ldrh	r3, [r7, #30]
 800235e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002362:	83fb      	strh	r3, [r7, #30]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	441a      	add	r2, r3
 8002372:	8bfb      	ldrh	r3, [r7, #30]
 8002374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800237c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	b29b      	uxth	r3, r3
 8002386:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11f      	bne.n	80023d2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ac:	83bb      	strh	r3, [r7, #28]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	441a      	add	r2, r3
 80023bc:	8bbb      	ldrh	r3, [r7, #28]
 80023be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023d2:	8b7b      	ldrh	r3, [r7, #26]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	6959      	ldr	r1, [r3, #20]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	895a      	ldrh	r2, [r3, #10]
 80023e4:	8b7b      	ldrh	r3, [r7, #26]
 80023e6:	f004 fba5 	bl	8006b34 <USB_ReadPMA>
    }
  }

  return count;
 80023ea:	8b7b      	ldrh	r3, [r7, #26]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0a2      	sub	sp, #136	; 0x88
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 81c7 	beq.w	800279c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	3302      	adds	r3, #2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002436:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002442:	429a      	cmp	r2, r3
 8002444:	d907      	bls.n	8002456 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800244e:	1ad2      	subs	r2, r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	619a      	str	r2, [r3, #24]
 8002454:	e002      	b.n	800245c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 80b9 	bne.w	80025d8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d126      	bne.n	80024bc <HAL_PCD_EP_DB_Transmit+0xc8>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247c:	b29b      	uxth	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	4413      	add	r3, r2
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	011a      	lsls	r2, r3, #4
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	4413      	add	r3, r2
 8002490:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	e01a      	b.n	80024f2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	785b      	ldrb	r3, [r3, #1]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d116      	bne.n	80024f2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	4413      	add	r3, r2
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	011a      	lsls	r2, r3, #4
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	4413      	add	r3, r2
 80024e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	2200      	movs	r2, #0
 80024f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	623b      	str	r3, [r7, #32]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d126      	bne.n	800254e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4413      	add	r3, r2
 8002522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002532:	b29a      	uxth	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	801a      	strh	r2, [r3, #0]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002546:	b29a      	uxth	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	e017      	b.n	800257e <HAL_PCD_EP_DB_Transmit+0x18a>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d113      	bne.n	800257e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	4413      	add	r3, r2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	011a      	lsls	r2, r3, #4
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	4413      	add	r3, r2
 8002572:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f006 f882 	bl	800868e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 82d4 	beq.w	8002b3e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b0:	827b      	strh	r3, [r7, #18]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	441a      	add	r2, r3
 80025c0:	8a7b      	ldrh	r3, [r7, #18]
 80025c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	8013      	strh	r3, [r2, #0]
 80025d6:	e2b2      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d021      	beq.n	8002626 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800261a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002622:	b29b      	uxth	r3, r3
 8002624:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262c:	2b01      	cmp	r3, #1
 800262e:	f040 8286 	bne.w	8002b3e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800263a:	441a      	add	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002648:	441a      	add	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	6a1a      	ldr	r2, [r3, #32]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	429a      	cmp	r2, r3
 8002658:	d309      	bcc.n	800266e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	621a      	str	r2, [r3, #32]
 800266c:	e015      	b.n	800269a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002676:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002684:	e009      	b.n	800269a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2200      	movs	r2, #0
 8002698:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	785b      	ldrb	r3, [r3, #1]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d155      	bne.n	800274e <HAL_PCD_EP_DB_Transmit+0x35a>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b6:	4413      	add	r3, r2
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	011a      	lsls	r2, r3, #4
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	4413      	add	r3, r2
 80026c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d112      	bne.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x302>
 80026d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026da:	b29a      	uxth	r2, r3
 80026dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	e047      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x392>
 80026f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f8:	2b3e      	cmp	r3, #62	; 0x3e
 80026fa:	d811      	bhi.n	8002720 <HAL_PCD_EP_DB_Transmit+0x32c>
 80026fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
 8002702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_PCD_EP_DB_Transmit+0x31e>
 800270c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270e:	3301      	adds	r3, #1
 8002710:	64bb      	str	r3, [r7, #72]	; 0x48
 8002712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002714:	b29b      	uxth	r3, r3
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	b29a      	uxth	r2, r3
 800271a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	e032      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x392>
 8002720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	64bb      	str	r3, [r7, #72]	; 0x48
 8002726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <HAL_PCD_EP_DB_Transmit+0x342>
 8002730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002732:	3b01      	subs	r3, #1
 8002734:	64bb      	str	r3, [r7, #72]	; 0x48
 8002736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002738:	b29b      	uxth	r3, r3
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	b29b      	uxth	r3, r3
 800273e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002746:	b29a      	uxth	r2, r3
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	e01b      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x392>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	785b      	ldrb	r3, [r3, #1]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d117      	bne.n	8002786 <HAL_PCD_EP_DB_Transmit+0x392>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276a:	4413      	add	r3, r2
 800276c:	643b      	str	r3, [r7, #64]	; 0x40
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	011a      	lsls	r2, r3, #4
 8002774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002776:	4413      	add	r3, r2
 8002778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	b29a      	uxth	r2, r3
 8002782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002784:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6959      	ldr	r1, [r3, #20]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	891a      	ldrh	r2, [r3, #8]
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002794:	b29b      	uxth	r3, r3
 8002796:	f004 f988 	bl	8006aaa <USB_WritePMA>
 800279a:	e1d0      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	3306      	adds	r3, #6
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d307      	bcc.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027dc:	1ad2      	subs	r2, r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	619a      	str	r2, [r3, #24]
 80027e2:	e002      	b.n	80027ea <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 80c4 	bne.w	800297c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d126      	bne.n	800284a <HAL_PCD_EP_DB_Transmit+0x456>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	4413      	add	r3, r2
 8002812:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	011a      	lsls	r2, r3, #4
 800281a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281c:	4413      	add	r3, r2
 800281e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002822:	66bb      	str	r3, [r7, #104]	; 0x68
 8002824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800282e:	b29a      	uxth	r2, r3
 8002830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002842:	b29a      	uxth	r2, r3
 8002844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	e01a      	b.n	8002880 <HAL_PCD_EP_DB_Transmit+0x48c>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d116      	bne.n	8002880 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	677b      	str	r3, [r7, #116]	; 0x74
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002866:	4413      	add	r3, r2
 8002868:	677b      	str	r3, [r7, #116]	; 0x74
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	011a      	lsls	r2, r3, #4
 8002870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002872:	4413      	add	r3, r2
 8002874:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002878:	673b      	str	r3, [r7, #112]	; 0x70
 800287a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287c:	2200      	movs	r2, #0
 800287e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	67bb      	str	r3, [r7, #120]	; 0x78
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d12f      	bne.n	80028ee <HAL_PCD_EP_DB_Transmit+0x4fa>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a6:	4413      	add	r3, r2
 80028a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	011a      	lsls	r2, r3, #4
 80028b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028b6:	4413      	add	r3, r2
 80028b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d2:	801a      	strh	r2, [r3, #0]
 80028d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	e017      	b.n	800291e <HAL_PCD_EP_DB_Transmit+0x52a>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d113      	bne.n	800291e <HAL_PCD_EP_DB_Transmit+0x52a>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fe:	b29b      	uxth	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002904:	4413      	add	r3, r2
 8002906:	67bb      	str	r3, [r7, #120]	; 0x78
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	011a      	lsls	r2, r3, #4
 800290e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002910:	4413      	add	r3, r2
 8002912:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002916:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800291a:	2200      	movs	r2, #0
 800291c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f005 feb2 	bl	800868e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 8104 	bne.w	8002b3e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002950:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002976:	b29b      	uxth	r3, r3
 8002978:	8013      	strh	r3, [r2, #0]
 800297a:	e0e0      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d121      	bne.n	80029ca <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	441a      	add	r2, r3
 80029b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 80b4 	bne.w	8002b3e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029de:	441a      	add	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ec:	441a      	add	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d309      	bcc.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6a1a      	ldr	r2, [r3, #32]
 8002a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	621a      	str	r2, [r3, #32]
 8002a10:	e015      	b.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002a1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a28:	e009      	b.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	667b      	str	r3, [r7, #100]	; 0x64
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d155      	bne.n	8002af8 <HAL_PCD_EP_DB_Transmit+0x704>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a60:	4413      	add	r3, r2
 8002a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	011a      	lsls	r2, r3, #4
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d112      	bne.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9c:	801a      	strh	r2, [r3, #0]
 8002a9e:	e044      	b.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x736>
 8002aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8002aa4:	d811      	bhi.n	8002aca <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8002aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab8:	3301      	adds	r3, #1
 8002aba:	657b      	str	r3, [r7, #84]	; 0x54
 8002abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	029b      	lsls	r3, r3, #10
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	e02f      	b.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x736>
 8002aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	657b      	str	r3, [r7, #84]	; 0x54
 8002ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002adc:	3b01      	subs	r3, #1
 8002ade:	657b      	str	r3, [r7, #84]	; 0x54
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	029b      	lsls	r3, r3, #10
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	e018      	b.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x736>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d114      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x736>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0e:	4413      	add	r3, r2
 8002b10:	667b      	str	r3, [r7, #100]	; 0x64
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	011a      	lsls	r2, r3, #4
 8002b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b20:	663b      	str	r3, [r7, #96]	; 0x60
 8002b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b28:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6959      	ldr	r1, [r3, #20]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	895a      	ldrh	r2, [r3, #10]
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f003 ffb6 	bl	8006aaa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b58:	823b      	strh	r3, [r7, #16]
 8002b5a:	8a3b      	ldrh	r3, [r7, #16]
 8002b5c:	f083 0310 	eor.w	r3, r3, #16
 8002b60:	823b      	strh	r3, [r7, #16]
 8002b62:	8a3b      	ldrh	r3, [r7, #16]
 8002b64:	f083 0320 	eor.w	r3, r3, #32
 8002b68:	823b      	strh	r3, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	441a      	add	r2, r3
 8002b78:	8a3b      	ldrh	r3, [r7, #16]
 8002b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3788      	adds	r7, #136	; 0x88
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e009      	b.n	8002be2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bce:	897a      	ldrh	r2, [r7, #10]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002be2:	893b      	ldrh	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d107      	bne.n	8002bf8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	80da      	strh	r2, [r3, #6]
 8002bf6:	e00b      	b.n	8002c10 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e31d      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b94      	ldr	r3, [pc, #592]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b91      	ldr	r3, [pc, #580]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c40:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d07b      	beq.n	8002d46 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d006      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d10b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	4b87      	ldr	r3, [pc, #540]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06a      	beq.n	8002d44 <HAL_RCC_OscConfig+0x128>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d166      	bne.n	8002d44 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e2f7      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x74>
 8002c82:	4b7f      	ldr	r3, [pc, #508]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7e      	ldr	r2, [pc, #504]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e02d      	b.n	8002cec <HAL_RCC_OscConfig+0xd0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x96>
 8002c98:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a78      	ldr	r2, [pc, #480]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a75      	ldr	r2, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	e01c      	b.n	8002cec <HAL_RCC_OscConfig+0xd0>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xb8>
 8002cba:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a70      	ldr	r2, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6d      	ldr	r2, [pc, #436]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xd0>
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a69      	ldr	r2, [pc, #420]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a66      	ldr	r2, [pc, #408]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fd ff50 	bl	8000b98 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fd ff4c 	bl	8000b98 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e2ad      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe0>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fd ff3c 	bl	8000b98 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fd ff38 	bl	8000b98 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e299      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d36:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x108>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d05a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d119      	bne.n	8002d92 <HAL_RCC_OscConfig+0x176>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d64:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_OscConfig+0x160>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e276      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	493d      	ldr	r1, [pc, #244]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d90:	e03a      	b.n	8002e08 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d020      	beq.n	8002ddc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_RCC_OscConfig+0x268>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fd fefa 	bl	8000b98 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da8:	f7fd fef6 	bl	8000b98 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e257      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	492a      	ldr	r1, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
 8002dda:	e015      	b.n	8002e08 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCC_OscConfig+0x268>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fd fed9 	bl	8000b98 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fd fed5 	bl	8000b98 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e236      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80b8 	beq.w	8002f86 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d170      	bne.n	8002efe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_OscConfig+0x218>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e21a      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d921      	bls.n	8002e88 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fc67 	bl	800371c <RCC_SetFlashLatencyFromMSIRange>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e208      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4906      	ldr	r1, [pc, #24]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	4901      	ldr	r1, [pc, #4]	; (8002e80 <HAL_RCC_OscConfig+0x264>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
 8002e7e:	e020      	b.n	8002ec2 <HAL_RCC_OscConfig+0x2a6>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e88:	4b99      	ldr	r3, [pc, #612]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4996      	ldr	r1, [pc, #600]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9a:	4b95      	ldr	r3, [pc, #596]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	061b      	lsls	r3, r3, #24
 8002ea8:	4991      	ldr	r1, [pc, #580]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fc32 	bl	800371c <RCC_SetFlashLatencyFromMSIRange>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1d3      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	0b5b      	lsrs	r3, r3, #13
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ed2:	4a87      	ldr	r2, [pc, #540]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002ed4:	6892      	ldr	r2, [r2, #8]
 8002ed6:	0912      	lsrs	r2, r2, #4
 8002ed8:	f002 020f 	and.w	r2, r2, #15
 8002edc:	4985      	ldr	r1, [pc, #532]	; (80030f4 <HAL_RCC_OscConfig+0x4d8>)
 8002ede:	5c8a      	ldrb	r2, [r1, r2]
 8002ee0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ee2:	4a85      	ldr	r2, [pc, #532]	; (80030f8 <HAL_RCC_OscConfig+0x4dc>)
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee6:	4b85      	ldr	r3, [pc, #532]	; (80030fc <HAL_RCC_OscConfig+0x4e0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fe08 	bl	8000b00 <HAL_InitTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d045      	beq.n	8002f86 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	e1b5      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d029      	beq.n	8002f5a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f06:	4b7e      	ldr	r3, [pc, #504]	; (8003100 <HAL_RCC_OscConfig+0x4e4>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd fe44 	bl	8000b98 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f14:	f7fd fe40 	bl	8000b98 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1a1      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f26:	4b72      	ldr	r3, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f32:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	496c      	ldr	r1, [pc, #432]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4967      	ldr	r1, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f5a:	4b69      	ldr	r3, [pc, #420]	; (8003100 <HAL_RCC_OscConfig+0x4e4>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fd fe1a 	bl	8000b98 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f68:	f7fd fe16 	bl	8000b98 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e177      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f7a:	4b5d      	ldr	r3, [pc, #372]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d030      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9a:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fd fdfa 	bl	8000b98 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7fd fdf6 	bl	8000b98 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e157      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fba:	4b4d      	ldr	r3, [pc, #308]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x38c>
 8002fc6:	e015      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <HAL_RCC_OscConfig+0x4e8>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fd fde3 	bl	8000b98 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7fd fddf 	bl	8000b98 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e140      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fe8:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80b5 	beq.w	800316c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	4a36      	ldr	r2, [pc, #216]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	6253      	str	r3, [r2, #36]	; 0x24
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302a:	2301      	movs	r3, #1
 800302c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a32      	ldr	r2, [pc, #200]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003046:	f7fd fda7 	bl	8000b98 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304e:	f7fd fda3 	bl	8000b98 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	; 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e104      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_RCC_OscConfig+0x4ec>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x466>
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6353      	str	r3, [r2, #52]	; 0x34
 8003080:	e02d      	b.n	80030de <HAL_RCC_OscConfig+0x4c2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x488>
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	6353      	str	r3, [r2, #52]	; 0x34
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 800309c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a0:	6353      	str	r3, [r2, #52]	; 0x34
 80030a2:	e01c      	b.n	80030de <HAL_RCC_OscConfig+0x4c2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x4aa>
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b0:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b6:	6353      	str	r3, [r2, #52]	; 0x34
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c2:	6353      	str	r3, [r2, #52]	; 0x34
 80030c4:	e00b      	b.n	80030de <HAL_RCC_OscConfig+0x4c2>
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d0:	6353      	str	r3, [r2, #52]	; 0x34
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	4a06      	ldr	r2, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x4d4>)
 80030d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030dc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d024      	beq.n	8003130 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fd fd57 	bl	8000b98 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ec:	e019      	b.n	8003122 <HAL_RCC_OscConfig+0x506>
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	08009524 	.word	0x08009524
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004
 8003100:	42470020 	.word	0x42470020
 8003104:	42470680 	.word	0x42470680
 8003108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fd fd44 	bl	8000b98 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0a3      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003122:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ee      	beq.n	800310c <HAL_RCC_OscConfig+0x4f0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7fd fd32 	bl	8000b98 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fd fd2e 	bl	8000b98 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e08d      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800314e:	4b49      	ldr	r3, [pc, #292]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1ee      	bne.n	8003138 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800315a:	7ffb      	ldrb	r3, [r7, #31]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	4a43      	ldr	r2, [pc, #268]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d079      	beq.n	8003268 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d056      	beq.n	8003228 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b02      	cmp	r3, #2
 8003180:	d13b      	bne.n	80031fa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCC_OscConfig+0x65c>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd fd06 	bl	8000b98 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fd fd02 	bl	8000b98 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e063      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031a2:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	4319      	orrs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	430b      	orrs	r3, r1
 80031c6:	492b      	ldr	r1, [pc, #172]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_RCC_OscConfig+0x65c>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fd fce1 	bl	8000b98 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7fd fcdd 	bl	8000b98 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03e      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031ec:	4b21      	ldr	r3, [pc, #132]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x5be>
 80031f8:	e036      	b.n	8003268 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <HAL_RCC_OscConfig+0x65c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd fcca 	bl	8000b98 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fd fcc6 	bl	8000b98 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e027      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x5ec>
 8003226:	e01f      	b.n	8003268 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e01a      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_RCC_OscConfig+0x658>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	429a      	cmp	r2, r3
 8003246:	d10d      	bne.n	8003264 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	42470060 	.word	0x42470060

0800327c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e11a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b8f      	ldr	r3, [pc, #572]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d919      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x34>
 80032a4:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a89      	ldr	r2, [pc, #548]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b87      	ldr	r3, [pc, #540]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 0201 	bic.w	r2, r3, #1
 80032b8:	4985      	ldr	r1, [pc, #532]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c0:	4b83      	ldr	r3, [pc, #524]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0f9      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032de:	4b7d      	ldr	r3, [pc, #500]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	497a      	ldr	r1, [pc, #488]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 808e 	beq.w	800341a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003306:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d121      	bne.n	8003356 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0d7      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800331e:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d115      	bne.n	8003356 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0cb      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003336:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0bf      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0b7      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	495c      	ldr	r1, [pc, #368]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7fd fc16 	bl	8000b98 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d112      	bne.n	800339c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fd fc0e 	bl	8000b98 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e09b      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800338e:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b08      	cmp	r3, #8
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_ClockConfig+0xfc>
 800339a:	e03e      	b.n	800341a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d112      	bne.n	80033ca <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a6:	f7fd fbf7 	bl	8000b98 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e084      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033bc:	4b45      	ldr	r3, [pc, #276]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b0c      	cmp	r3, #12
 80033c6:	d1ee      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x12a>
 80033c8:	e027      	b.n	800341a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d11d      	bne.n	800340e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fd fbe0 	bl	8000b98 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e06d      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d1ee      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x158>
 80033f6:	e010      	b.n	800341a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fd fbce 	bl	8000b98 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e05b      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800340e:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d219      	bcs.n	800345c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCC_ClockConfig+0x1be>
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	4923      	ldr	r1, [pc, #140]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_RCC_ClockConfig+0x254>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e034      	b.n	80034c6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4917      	ldr	r1, [pc, #92]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490f      	ldr	r1, [pc, #60]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f823 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_RCC_ClockConfig+0x258>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490b      	ldr	r1, [pc, #44]	; (80034d8 <HAL_RCC_ClockConfig+0x25c>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x260>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x264>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fb20 	bl	8000b00 <HAL_InitTick>
 80034c0:	4603      	mov	r3, r0
 80034c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80034c4:	7afb      	ldrb	r3, [r7, #11]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023c00 	.word	0x40023c00
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08009524 	.word	0x08009524
 80034dc:	20000000 	.word	0x20000000
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e8:	b092      	sub	sp, #72	; 0x48
 80034ea:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80034ec:	4b79      	ldr	r3, [pc, #484]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d00d      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	f200 80d5 	bhi.w	80036ac <HAL_RCC_GetSysClockFreq+0x1c8>
 8003502:	2b04      	cmp	r3, #4
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x28>
 8003506:	2b08      	cmp	r3, #8
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x2e>
 800350a:	e0cf      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b72      	ldr	r3, [pc, #456]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003510:	e0da      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003512:	4b71      	ldr	r3, [pc, #452]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003516:	e0d7      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351a:	0c9b      	lsrs	r3, r3, #18
 800351c:	f003 020f 	and.w	r2, r3, #15
 8003520:	4b6e      	ldr	r3, [pc, #440]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	0d9b      	lsrs	r3, r3, #22
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003532:	4b68      	ldr	r3, [pc, #416]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d05d      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	2200      	movs	r2, #0
 8003542:	4618      	mov	r0, r3
 8003544:	4611      	mov	r1, r2
 8003546:	4604      	mov	r4, r0
 8003548:	460d      	mov	r5, r1
 800354a:	4622      	mov	r2, r4
 800354c:	462b      	mov	r3, r5
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4621      	mov	r1, r4
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	6139      	str	r1, [r7, #16]
 8003568:	4629      	mov	r1, r5
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800357c:	4659      	mov	r1, fp
 800357e:	018b      	lsls	r3, r1, #6
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003586:	4651      	mov	r1, sl
 8003588:	018a      	lsls	r2, r1, #6
 800358a:	46d4      	mov	ip, sl
 800358c:	ebb2 080c 	subs.w	r8, r2, ip
 8003590:	4659      	mov	r1, fp
 8003592:	eb63 0901 	sbc.w	r9, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb18 0303 	adds.w	r3, r8, r3
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	462b      	mov	r3, r5
 80035b8:	eb49 0303 	adc.w	r3, r9, r3
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4620      	mov	r0, r4
 80035d0:	4629      	mov	r1, r5
 80035d2:	4604      	mov	r4, r0
 80035d4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80035d8:	4601      	mov	r1, r0
 80035da:	028a      	lsls	r2, r1, #10
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	2200      	movs	r2, #0
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ec:	f7fc fdce 	bl	800018c <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	647b      	str	r3, [r7, #68]	; 0x44
 80035f8:	e055      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	2200      	movs	r2, #0
 80035fe:	623b      	str	r3, [r7, #32]
 8003600:	627a      	str	r2, [r7, #36]	; 0x24
 8003602:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003606:	4642      	mov	r2, r8
 8003608:	464b      	mov	r3, r9
 800360a:	f04f 0000 	mov.w	r0, #0
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	0159      	lsls	r1, r3, #5
 8003614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003618:	0150      	lsls	r0, r2, #5
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	46c4      	mov	ip, r8
 8003620:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003624:	4640      	mov	r0, r8
 8003626:	4649      	mov	r1, r9
 8003628:	468c      	mov	ip, r1
 800362a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800363a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800363e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003642:	ebb2 040a 	subs.w	r4, r2, sl
 8003646:	eb63 050b 	sbc.w	r5, r3, fp
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	00eb      	lsls	r3, r5, #3
 8003654:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003658:	00e2      	lsls	r2, r4, #3
 800365a:	4614      	mov	r4, r2
 800365c:	461d      	mov	r5, r3
 800365e:	4603      	mov	r3, r0
 8003660:	18e3      	adds	r3, r4, r3
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	460b      	mov	r3, r1
 8003666:	eb45 0303 	adc.w	r3, r5, r3
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003678:	4629      	mov	r1, r5
 800367a:	028b      	lsls	r3, r1, #10
 800367c:	4620      	mov	r0, r4
 800367e:	4629      	mov	r1, r5
 8003680:	4604      	mov	r4, r0
 8003682:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003686:	4601      	mov	r1, r0
 8003688:	028a      	lsls	r2, r1, #10
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	2200      	movs	r2, #0
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	61fa      	str	r2, [r7, #28]
 8003696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800369a:	f7fc fd77 	bl	800018c <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4613      	mov	r3, r2
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80036a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036aa:	e00d      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0b5b      	lsrs	r3, r3, #13
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	3301      	adds	r3, #1
 80036bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3748      	adds	r7, #72	; 0x48
 80036ce:	46bd      	mov	sp, r7
 80036d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	08009518 	.word	0x08009518

080036e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e4:	4b02      	ldr	r3, [pc, #8]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80036e6:	681b      	ldr	r3, [r3, #0]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	20000000 	.word	0x20000000

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036f8:	f7ff fff2 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	08009534 	.word	0x08009534

0800371c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d12c      	bne.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e016      	b.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6253      	str	r3, [r2, #36]	; 0x24
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800376c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003780:	d105      	bne.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003788:	d101      	bne.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800378a:	2301      	movs	r3, #1
 800378c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 0201 	bic.w	r2, r3, #1
 80037a8:	490b      	ldr	r1, [pc, #44]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d001      	beq.n	80037c2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
 80037d8:	40023c00 	.word	0x40023c00

080037dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06e      	b.n	80038cc <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fe:	d009      	beq.n	8003814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
 8003806:	e005      	b.n	8003814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd f876 	bl	8000920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	ea42 0103 	orr.w	r1, r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	0c1a      	lsrs	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f002 0204 	and.w	r2, r2, #4
 80038ba:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038f0:	d112      	bne.n	8003918 <HAL_SPI_Receive+0x44>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10e      	bne.n	8003918 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2204      	movs	r2, #4
 80038fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f8f1 	bl	8003af6 <HAL_SPI_TransmitReceive>
 8003914:	4603      	mov	r3, r0
 8003916:	e0ea      	b.n	8003aee <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_SPI_Receive+0x52>
 8003922:	2302      	movs	r3, #2
 8003924:	e0e3      	b.n	8003aee <HAL_SPI_Receive+0x21a>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800392e:	f7fd f933 	bl	8000b98 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003940:	2302      	movs	r3, #2
 8003942:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003944:	e0ca      	b.n	8003adc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_SPI_Receive+0x7e>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003956:	e0c1      	b.n	8003adc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2204      	movs	r2, #4
 800395c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399e:	d10f      	bne.n	80039c0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d007      	beq.n	80039de <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d162      	bne.n	8003aac <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039e6:	e02e      	b.n	8003a46 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d115      	bne.n	8003a22 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f103 020c 	add.w	r2, r3, #12
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a20:	e011      	b.n	8003a46 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a22:	f7fd f8b9 	bl	8000b98 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d803      	bhi.n	8003a3a <HAL_SPI_Receive+0x166>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d102      	bne.n	8003a40 <HAL_SPI_Receive+0x16c>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a44:	e04a      	b.n	8003adc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1cb      	bne.n	80039e8 <HAL_SPI_Receive+0x114>
 8003a50:	e031      	b.n	8003ab6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d113      	bne.n	8003a88 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	1c9a      	adds	r2, r3, #2
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a86:	e011      	b.n	8003aac <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a88:	f7fd f886 	bl	8000b98 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d803      	bhi.n	8003aa0 <HAL_SPI_Receive+0x1cc>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d102      	bne.n	8003aa6 <HAL_SPI_Receive+0x1d2>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003aaa:	e017      	b.n	8003adc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1cd      	bne.n	8003a52 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fa46 	bl	8003f4c <SPI_EndRxTransaction>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
 8003ad8:	e000      	b.n	8003adc <HAL_SPI_Receive+0x208>
  }

error :
 8003ada:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b08c      	sub	sp, #48	; 0x30
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b04:	2301      	movs	r3, #1
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x26>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e18a      	b.n	8003e32 <HAL_SPI_TransmitReceive+0x33c>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b24:	f7fd f838 	bl	8000b98 <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d00f      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x70>
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4c:	d107      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x68>
 8003b56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d003      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b64:	e15b      	b.n	8003e1e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_SPI_TransmitReceive+0x82>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_SPI_TransmitReceive+0x82>
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b7e:	e14e      	b.n	8003e1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d003      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2205      	movs	r2, #5
 8003b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	887a      	ldrh	r2, [r7, #2]
 8003baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	887a      	ldrh	r2, [r7, #2]
 8003bb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d007      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d178      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_SPI_TransmitReceive+0x10a>
 8003bfa:	8b7b      	ldrh	r3, [r7, #26]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d166      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c24:	e053      	b.n	8003cce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d11b      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x176>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x176>
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d113      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d119      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x1b8>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d014      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	1c9a      	adds	r2, r3, #2
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003caa:	2301      	movs	r3, #1
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cae:	f7fc ff73 	bl	8000b98 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d807      	bhi.n	8003cce <HAL_SPI_TransmitReceive+0x1d8>
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d003      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ccc:	e0a7      	b.n	8003e1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1a6      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x130>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1a1      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x130>
 8003ce2:	e07c      	b.n	8003dde <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x1fc>
 8003cec:	8b7b      	ldrh	r3, [r7, #26]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d16b      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d18:	e057      	b.n	8003dca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d11c      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0x26c>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d017      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0x26c>
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d114      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	7812      	ldrb	r2, [r2, #0]
 8003d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d119      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x2ae>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da0:	2301      	movs	r3, #1
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003da4:	f7fc fef8 	bl	8000b98 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d803      	bhi.n	8003dbc <HAL_SPI_TransmitReceive+0x2c6>
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d102      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x2cc>
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dc8:	e029      	b.n	8003e1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1a2      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x224>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d19d      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f918 	bl	8004018 <SPI_EndRxTxTransaction>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003dfa:	e010      	b.n	8003e1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	e000      	b.n	8003e1e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3730      	adds	r7, #48	; 0x30
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e4c:	f7fc fea4 	bl	8000b98 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e5c:	f7fc fe9c 	bl	8000b98 <HAL_GetTick>
 8003e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e62:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	015b      	lsls	r3, r3, #5
 8003e68:	0d1b      	lsrs	r3, r3, #20
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	fb02 f303 	mul.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e72:	e054      	b.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d050      	beq.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e7c:	f7fc fe8c 	bl	8000b98 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d902      	bls.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d13d      	bne.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eaa:	d111      	bne.n	8003ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb4:	d004      	beq.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	d107      	bne.n	8003ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed8:	d10f      	bne.n	8003efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e017      	b.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2301      	moveq	r3, #1
 8003f30:	2300      	movne	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d19b      	bne.n	8003e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000000 	.word	0x20000000

08003f4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f60:	d111      	bne.n	8003f86 <SPI_EndRxTransaction+0x3a>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6a:	d004      	beq.n	8003f76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f74:	d107      	bne.n	8003f86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d12a      	bne.n	8003fe6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f98:	d012      	beq.n	8003fc0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff ff49 	bl	8003e3c <SPI_WaitFlagStateUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d02d      	beq.n	800400c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e026      	b.n	800400e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2101      	movs	r1, #1
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff ff36 	bl	8003e3c <SPI_WaitFlagStateUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01a      	beq.n	800400c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e013      	b.n	800400e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2101      	movs	r1, #1
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff ff23 	bl	8003e3c <SPI_WaitFlagStateUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e000      	b.n	800400e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <SPI_EndRxTxTransaction+0x7c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <SPI_EndRxTxTransaction+0x80>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0d5b      	lsrs	r3, r3, #21
 8004030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004042:	d112      	bne.n	800406a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2200      	movs	r2, #0
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff fef4 	bl	8003e3c <SPI_WaitFlagStateUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e00f      	b.n	800408a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3b01      	subs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	d0f2      	beq.n	800406a <SPI_EndRxTxTransaction+0x52>
 8004084:	e000      	b.n	8004088 <SPI_EndRxTxTransaction+0x70>
        break;
 8004086:	bf00      	nop
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000000 	.word	0x20000000
 8004098:	165e9f81 	.word	0x165e9f81

0800409c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	4013      	ands	r3, r2
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040fc:	b084      	sub	sp, #16
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	f107 0014 	add.w	r0, r7, #20
 800410a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	b004      	add	sp, #16
 800413a:	4770      	bx	lr

0800413c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800413c:	b480      	push	{r7}
 800413e:	b09b      	sub	sp, #108	; 0x6c
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	78db      	ldrb	r3, [r3, #3]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d81f      	bhi.n	80041ae <USB_ActivateEndpoint+0x72>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <USB_ActivateEndpoint+0x38>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004185 	.word	0x08004185
 8004178:	080041a1 	.word	0x080041a1
 800417c:	080041b7 	.word	0x080041b7
 8004180:	08004193 	.word	0x08004193
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004184:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004190:	e012      	b.n	80041b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004192:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004196:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800419a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800419e:	e00b      	b.n	80041b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041ac:	e004      	b.n	80041b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80041b4:	e000      	b.n	80041b8 <USB_ActivateEndpoint+0x7c>
      break;
 80041b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	441a      	add	r2, r3
 80041c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	441a      	add	r2, r3
 8004208:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800420c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800421c:	b29b      	uxth	r3, r3
 800421e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	7b1b      	ldrb	r3, [r3, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f040 8149 	bne.w	80044bc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	785b      	ldrb	r3, [r3, #1]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8084 	beq.w	800433c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	4413      	add	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	011a      	lsls	r2, r3, #4
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	88db      	ldrh	r3, [r3, #6]
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	b29b      	uxth	r3, r3
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	81fb      	strh	r3, [r7, #14]
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <USB_ActivateEndpoint+0x17c>
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	81bb      	strh	r3, [r7, #12]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	89bb      	ldrh	r3, [r7, #12]
 80042a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	78db      	ldrb	r3, [r3, #3]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d020      	beq.n	8004302 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d6:	813b      	strh	r3, [r7, #8]
 80042d8:	893b      	ldrh	r3, [r7, #8]
 80042da:	f083 0320 	eor.w	r3, r3, #32
 80042de:	813b      	strh	r3, [r7, #8]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	893b      	ldrh	r3, [r7, #8]
 80042ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8013      	strh	r3, [r2, #0]
 8004300:	e27f      	b.n	8004802 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004318:	817b      	strh	r3, [r7, #10]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	897b      	ldrh	r3, [r7, #10]
 8004326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004336:	b29b      	uxth	r3, r3
 8004338:	8013      	strh	r3, [r2, #0]
 800433a:	e262      	b.n	8004802 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	4413      	add	r3, r2
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	011a      	lsls	r2, r3, #4
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	4413      	add	r3, r2
 800435a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	88db      	ldrh	r3, [r3, #6]
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437a:	b29b      	uxth	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	4413      	add	r3, r2
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	011a      	lsls	r2, r3, #4
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	4413      	add	r3, r2
 800438e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004392:	623b      	str	r3, [r7, #32]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d112      	bne.n	80043c2 <USB_ActivateEndpoint+0x286>
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	801a      	strh	r2, [r3, #0]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	801a      	strh	r2, [r3, #0]
 80043c0:	e02f      	b.n	8004422 <USB_ActivateEndpoint+0x2e6>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b3e      	cmp	r3, #62	; 0x3e
 80043c8:	d813      	bhi.n	80043f2 <USB_ActivateEndpoint+0x2b6>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	663b      	str	r3, [r7, #96]	; 0x60
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <USB_ActivateEndpoint+0x2a8>
 80043de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e0:	3301      	adds	r3, #1
 80043e2:	663b      	str	r3, [r7, #96]	; 0x60
 80043e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	029b      	lsls	r3, r3, #10
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	e017      	b.n	8004422 <USB_ActivateEndpoint+0x2e6>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	663b      	str	r3, [r7, #96]	; 0x60
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <USB_ActivateEndpoint+0x2d0>
 8004406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004408:	3b01      	subs	r3, #1
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
 800440c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440e:	b29b      	uxth	r3, r3
 8004410:	029b      	lsls	r3, r3, #10
 8004412:	b29b      	uxth	r3, r3
 8004414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441c:	b29a      	uxth	r2, r3
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	83fb      	strh	r3, [r7, #30]
 8004430:	8bfb      	ldrh	r3, [r7, #30]
 8004432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01b      	beq.n	8004472 <USB_ActivateEndpoint+0x336>
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004450:	83bb      	strh	r3, [r7, #28]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	8bbb      	ldrh	r3, [r7, #28]
 800445e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800446a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446e:	b29b      	uxth	r3, r3
 8004470:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004488:	837b      	strh	r3, [r7, #26]
 800448a:	8b7b      	ldrh	r3, [r7, #26]
 800448c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004490:	837b      	strh	r3, [r7, #26]
 8004492:	8b7b      	ldrh	r3, [r7, #26]
 8004494:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004498:	837b      	strh	r3, [r7, #26]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	441a      	add	r2, r3
 80044a4:	8b7b      	ldrh	r3, [r7, #26]
 80044a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]
 80044ba:	e1a2      	b.n	8004802 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004502:	b29b      	uxth	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004508:	4413      	add	r3, r2
 800450a:	65bb      	str	r3, [r7, #88]	; 0x58
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	011a      	lsls	r2, r3, #4
 8004512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004514:	4413      	add	r3, r2
 8004516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451a:	657b      	str	r3, [r7, #84]	; 0x54
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	891b      	ldrh	r3, [r3, #8]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	653b      	str	r3, [r7, #80]	; 0x50
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004536:	b29b      	uxth	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453c:	4413      	add	r3, r2
 800453e:	653b      	str	r3, [r7, #80]	; 0x50
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	011a      	lsls	r2, r3, #4
 8004546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004548:	4413      	add	r3, r2
 800454a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	895b      	ldrh	r3, [r3, #10]
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f040 8091 	bne.w	800468c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004578:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800457a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01b      	beq.n	80045ba <USB_ActivateEndpoint+0x47e>
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004598:	877b      	strh	r3, [r7, #58]	; 0x3a
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80045c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01b      	beq.n	800460a <USB_ActivateEndpoint+0x4ce>
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800461c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004620:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004622:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004624:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004628:	86bb      	strh	r3, [r7, #52]	; 0x34
 800462a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800462c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004630:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800463e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004668:	867b      	strh	r3, [r7, #50]	; 0x32
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]
 800468a:	e0ba      	b.n	8004802 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800469c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01d      	beq.n	80046e4 <USB_ActivateEndpoint+0x5a8>
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01d      	beq.n	800473c <USB_ActivateEndpoint+0x600>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004734:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	78db      	ldrb	r3, [r3, #3]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d024      	beq.n	800478e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800475e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004762:	f083 0320 	eor.w	r3, r3, #32
 8004766:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
 800478c:	e01d      	b.n	80047ca <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	441a      	add	r2, r3
 80047ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004802:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004806:	4618      	mov	r0, r3
 8004808:	376c      	adds	r7, #108	; 0x6c
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004810:	b480      	push	{r7}
 8004812:	b08d      	sub	sp, #52	; 0x34
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	7b1b      	ldrb	r3, [r3, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 808e 	bne.w	8004940 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d044      	beq.n	80048b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	81bb      	strh	r3, [r7, #12]
 800483a:	89bb      	ldrh	r3, [r7, #12]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01b      	beq.n	800487c <USB_DeactivateEndpoint+0x6c>
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	817b      	strh	r3, [r7, #10]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	897b      	ldrh	r3, [r7, #10]
 8004868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004878:	b29b      	uxth	r3, r3
 800487a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004892:	813b      	strh	r3, [r7, #8]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	441a      	add	r2, r3
 800489e:	893b      	ldrh	r3, [r7, #8]
 80048a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	8013      	strh	r3, [r2, #0]
 80048b4:	e192      	b.n	8004bdc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	827b      	strh	r3, [r7, #18]
 80048c4:	8a7b      	ldrh	r3, [r7, #18]
 80048c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <USB_DeactivateEndpoint+0xf6>
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	823b      	strh	r3, [r7, #16]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	8a3b      	ldrh	r3, [r7, #16]
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491c:	81fb      	strh	r3, [r7, #14]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	441a      	add	r2, r3
 8004928:	89fb      	ldrh	r3, [r7, #14]
 800492a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493a:	b29b      	uxth	r3, r3
 800493c:	8013      	strh	r3, [r2, #0]
 800493e:	e14d      	b.n	8004bdc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 80a5 	bne.w	8004a94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	843b      	strh	r3, [r7, #32]
 8004958:	8c3b      	ldrh	r3, [r7, #32]
 800495a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01b      	beq.n	800499a <USB_DeactivateEndpoint+0x18a>
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	83fb      	strh	r3, [r7, #30]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	8bfb      	ldrh	r3, [r7, #30]
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	83bb      	strh	r3, [r7, #28]
 80049a8:	8bbb      	ldrh	r3, [r7, #28]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01b      	beq.n	80049ea <USB_DeactivateEndpoint+0x1da>
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	837b      	strh	r3, [r7, #26]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	8b7b      	ldrh	r3, [r7, #26]
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	833b      	strh	r3, [r7, #24]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	8b3b      	ldrh	r3, [r7, #24]
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a38:	82fb      	strh	r3, [r7, #22]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	8afb      	ldrh	r3, [r7, #22]
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a70:	82bb      	strh	r3, [r7, #20]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	8abb      	ldrh	r3, [r7, #20]
 8004a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	8013      	strh	r3, [r2, #0]
 8004a92:	e0a3      	b.n	8004bdc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <USB_DeactivateEndpoint+0x2d4>
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004af2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01b      	beq.n	8004b34 <USB_DeactivateEndpoint+0x324>
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	441a      	add	r2, r3
 8004b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	441a      	add	r2, r3
 8004b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3734      	adds	r7, #52	; 0x34
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b0cc      	sub	sp, #304	; 0x130
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf6:	6018      	str	r0, [r3, #0]
 8004bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c00:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	f041 817d 	bne.w	8005f0e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d908      	bls.n	8004c42 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c40:	e007      	b.n	8004c52 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	7b1b      	ldrb	r3, [r3, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d152      	bne.n	8004d08 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6959      	ldr	r1, [r3, #20]
 8004c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	88da      	ldrh	r2, [r3, #6]
 8004c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c88:	6800      	ldr	r0, [r0, #0]
 8004c8a:	f001 ff0e 	bl	8006aaa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004c96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c9a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cbc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cc0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	011a      	lsls	r2, r3, #4
 8004cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cdc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	f001 b8b5 	b.w	8005e72 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	78db      	ldrb	r3, [r3, #3]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	f040 84c6 	bne.w	80056a6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6a1a      	ldr	r2, [r3, #32]
 8004d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	f240 8443 	bls.w	80055be <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	441a      	add	r2, r3
 8004d7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a1a      	ldr	r2, [r3, #32]
 8004da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da4:	1ad2      	subs	r2, r2, r3
 8004da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 823e 	beq.w	8005256 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dde:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004de2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004de6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f040 809a 	bne.w	8004f34 <USB_EPStartXfer+0x34c>
 8004e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e0c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e32:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	440a      	add	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4413      	add	r3, r2
 8004e56:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d122      	bne.n	8004eb2 <USB_EPStartXfer+0x2ca>
 8004e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	801a      	strh	r2, [r3, #0]
 8004e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	e079      	b.n	8004fa6 <USB_EPStartXfer+0x3be>
 8004eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb8:	d81b      	bhi.n	8004ef2 <USB_EPStartXfer+0x30a>
 8004eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <USB_EPStartXfer+0x2f2>
 8004ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	029b      	lsls	r3, r3, #10
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	e059      	b.n	8004fa6 <USB_EPStartXfer+0x3be>
 8004ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <USB_EPStartXfer+0x32a>
 8004f08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	e038      	b.n	8004fa6 <USB_EPStartXfer+0x3be>
 8004f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d130      	bne.n	8004fa6 <USB_EPStartXfer+0x3be>
 8004f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f62:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	440a      	add	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	011a      	lsls	r2, r3, #4
 8004f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4413      	add	r3, r2
 8004f86:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	895b      	ldrh	r3, [r3, #10]
 8004fb2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6959      	ldr	r1, [r3, #20]
 8004fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fcc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fd0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fd4:	6800      	ldr	r0, [r0, #0]
 8004fd6:	f001 fd68 	bl	8006aaa <USB_WritePMA>
            ep->xfer_buff += len;
 8004fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fea:	441a      	add	r2, r3
 8004fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d90f      	bls.n	8005034 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005024:	1ad2      	subs	r2, r2, r3
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	621a      	str	r2, [r3, #32]
 8005032:	e00e      	b.n	8005052 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f040 809a 	bne.w	8005198 <USB_EPStartXfer+0x5b0>
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800506c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005070:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	4619      	mov	r1, r3
 800508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005092:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005096:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	440a      	add	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	011a      	lsls	r2, r3, #4
 80050ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4413      	add	r3, r2
 80050ba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d122      	bne.n	8005116 <USB_EPStartXfer+0x52e>
 80050d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005106:	b29a      	uxth	r2, r3
 8005108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	e083      	b.n	800521e <USB_EPStartXfer+0x636>
 8005116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511a:	2b3e      	cmp	r3, #62	; 0x3e
 800511c:	d81b      	bhi.n	8005156 <USB_EPStartXfer+0x56e>
 800511e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <USB_EPStartXfer+0x556>
 8005134:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005138:	3301      	adds	r3, #1
 800513a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800513e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005142:	b29b      	uxth	r3, r3
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	b29a      	uxth	r2, r3
 8005148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	e063      	b.n	800521e <USB_EPStartXfer+0x636>
 8005156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <USB_EPStartXfer+0x58e>
 800516c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005170:	3b01      	subs	r3, #1
 8005172:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005176:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800517a:	b29b      	uxth	r3, r3
 800517c:	029b      	lsls	r3, r3, #10
 800517e:	b29b      	uxth	r3, r3
 8005180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005188:	b29a      	uxth	r2, r3
 800518a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	e042      	b.n	800521e <USB_EPStartXfer+0x636>
 8005198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d13a      	bne.n	800521e <USB_EPStartXfer+0x636>
 80051a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051b4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4619      	mov	r1, r3
 80051ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051da:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	440a      	add	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	011a      	lsls	r2, r3, #4
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4413      	add	r3, r2
 80051fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005206:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005210:	b29a      	uxth	r2, r3
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	891b      	ldrh	r3, [r3, #8]
 800522a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800522e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6959      	ldr	r1, [r3, #20]
 800523a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523e:	b29b      	uxth	r3, r3
 8005240:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005244:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005248:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800524c:	6800      	ldr	r0, [r0, #0]
 800524e:	f001 fc2c 	bl	8006aaa <USB_WritePMA>
 8005252:	f000 be0e 	b.w	8005e72 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	785b      	ldrb	r3, [r3, #1]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d16d      	bne.n	8005342 <USB_EPStartXfer+0x75a>
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	64bb      	str	r3, [r7, #72]	; 0x48
 8005272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005286:	4413      	add	r3, r2
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
 800528a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	011a      	lsls	r2, r3, #4
 8005298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529a:	4413      	add	r3, r2
 800529c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
 80052a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d112      	bne.n	80052d0 <USB_EPStartXfer+0x6e8>
 80052aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	e063      	b.n	8005398 <USB_EPStartXfer+0x7b0>
 80052d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d4:	2b3e      	cmp	r3, #62	; 0x3e
 80052d6:	d817      	bhi.n	8005308 <USB_EPStartXfer+0x720>
 80052d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <USB_EPStartXfer+0x710>
 80052ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052f2:	3301      	adds	r3, #1
 80052f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	029b      	lsls	r3, r3, #10
 8005300:	b29a      	uxth	r2, r3
 8005302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e047      	b.n	8005398 <USB_EPStartXfer+0x7b0>
 8005308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <USB_EPStartXfer+0x740>
 800531e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005322:	3b01      	subs	r3, #1
 8005324:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005328:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800532c:	b29b      	uxth	r3, r3
 800532e:	029b      	lsls	r3, r3, #10
 8005330:	b29b      	uxth	r3, r3
 8005332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533a:	b29a      	uxth	r2, r3
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e02a      	b.n	8005398 <USB_EPStartXfer+0x7b0>
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d122      	bne.n	8005398 <USB_EPStartXfer+0x7b0>
 8005352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	653b      	str	r3, [r7, #80]	; 0x50
 800535e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005372:	4413      	add	r3, r2
 8005374:	653b      	str	r3, [r7, #80]	; 0x50
 8005376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	011a      	lsls	r2, r3, #4
 8005384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005386:	4413      	add	r3, r2
 8005388:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800538c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800538e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005392:	b29a      	uxth	r2, r3
 8005394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005396:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	891b      	ldrh	r3, [r3, #8]
 80053a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6959      	ldr	r1, [r3, #20]
 80053b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053be:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	f001 fb6f 	bl	8006aaa <USB_WritePMA>
            ep->xfer_buff += len;
 80053cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053dc:	441a      	add	r2, r3
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	429a      	cmp	r2, r3
 8005404:	d90f      	bls.n	8005426 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a1a      	ldr	r2, [r3, #32]
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	621a      	str	r2, [r3, #32]
 8005424:	e00e      	b.n	8005444 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	643b      	str	r3, [r7, #64]	; 0x40
 8005450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d16d      	bne.n	800553c <USB_EPStartXfer+0x954>
 8005460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
 800546c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	4413      	add	r3, r2
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
 8005484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	011a      	lsls	r2, r3, #4
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	4413      	add	r3, r2
 8005496:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
 800549c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d112      	bne.n	80054ca <USB_EPStartXfer+0x8e2>
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e05d      	b.n	8005586 <USB_EPStartXfer+0x99e>
 80054ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ce:	2b3e      	cmp	r3, #62	; 0x3e
 80054d0:	d817      	bhi.n	8005502 <USB_EPStartXfer+0x91a>
 80054d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <USB_EPStartXfer+0x90a>
 80054e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054ec:	3301      	adds	r3, #1
 80054ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	e041      	b.n	8005586 <USB_EPStartXfer+0x99e>
 8005502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800550c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <USB_EPStartXfer+0x93a>
 8005518:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800551c:	3b01      	subs	r3, #1
 800551e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005522:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005526:	b29b      	uxth	r3, r3
 8005528:	029b      	lsls	r3, r3, #10
 800552a:	b29b      	uxth	r3, r3
 800552c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005534:	b29a      	uxth	r2, r3
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e024      	b.n	8005586 <USB_EPStartXfer+0x99e>
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d11c      	bne.n	8005586 <USB_EPStartXfer+0x99e>
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005560:	4413      	add	r3, r2
 8005562:	643b      	str	r3, [r7, #64]	; 0x40
 8005564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	011a      	lsls	r2, r3, #4
 8005572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005574:	4413      	add	r3, r2
 8005576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005580:	b29a      	uxth	r2, r3
 8005582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005584:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	895b      	ldrh	r3, [r3, #10]
 8005592:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6959      	ldr	r1, [r3, #20]
 80055a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055b4:	6800      	ldr	r0, [r0, #0]
 80055b6:	f001 fa78 	bl	8006aaa <USB_WritePMA>
 80055ba:	f000 bc5a 	b.w	8005e72 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800562a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005644:	b29b      	uxth	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564a:	4413      	add	r3, r2
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	011a      	lsls	r2, r3, #4
 800565c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800565e:	4413      	add	r3, r2
 8005660:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005664:	65bb      	str	r3, [r7, #88]	; 0x58
 8005666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566a:	b29a      	uxth	r2, r3
 800566c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800566e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	891b      	ldrh	r3, [r3, #8]
 800567c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6959      	ldr	r1, [r3, #20]
 800568c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005690:	b29b      	uxth	r3, r3
 8005692:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005696:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800569a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800569e:	6800      	ldr	r0, [r0, #0]
 80056a0:	f001 fa03 	bl	8006aaa <USB_WritePMA>
 80056a4:	e3e5      	b.n	8005e72 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056cc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80056d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1a      	ldr	r2, [r3, #32]
 800570e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 81bc 	beq.w	8005ac0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d16d      	bne.n	8005842 <USB_EPStartXfer+0xc5a>
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	67bb      	str	r3, [r7, #120]	; 0x78
 8005772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005786:	4413      	add	r3, r2
 8005788:	67bb      	str	r3, [r7, #120]	; 0x78
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	011a      	lsls	r2, r3, #4
 8005798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800579a:	4413      	add	r3, r2
 800579c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057a0:	677b      	str	r3, [r7, #116]	; 0x74
 80057a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d112      	bne.n	80057d0 <USB_EPStartXfer+0xbe8>
 80057aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e060      	b.n	8005892 <USB_EPStartXfer+0xcaa>
 80057d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d4:	2b3e      	cmp	r3, #62	; 0x3e
 80057d6:	d817      	bhi.n	8005808 <USB_EPStartXfer+0xc20>
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <USB_EPStartXfer+0xc10>
 80057ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057f2:	3301      	adds	r3, #1
 80057f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	029b      	lsls	r3, r3, #10
 8005800:	b29a      	uxth	r2, r3
 8005802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e044      	b.n	8005892 <USB_EPStartXfer+0xcaa>
 8005808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <USB_EPStartXfer+0xc40>
 800581e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005822:	3b01      	subs	r3, #1
 8005824:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005828:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800582c:	b29b      	uxth	r3, r3
 800582e:	029b      	lsls	r3, r3, #10
 8005830:	b29b      	uxth	r3, r3
 8005832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583a:	b29a      	uxth	r2, r3
 800583c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	e027      	b.n	8005892 <USB_EPStartXfer+0xcaa>
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d11f      	bne.n	8005892 <USB_EPStartXfer+0xcaa>
 8005852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005860:	b29b      	uxth	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005868:	4413      	add	r3, r2
 800586a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	011a      	lsls	r2, r3, #4
 800587c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005880:	4413      	add	r3, r2
 8005882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005886:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588c:	b29a      	uxth	r2, r3
 800588e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005890:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	895b      	ldrh	r3, [r3, #10]
 800589e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6959      	ldr	r1, [r3, #20]
 80058ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058c0:	6800      	ldr	r0, [r0, #0]
 80058c2:	f001 f8f2 	bl	8006aaa <USB_WritePMA>
          ep->xfer_buff += len;
 80058c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d6:	441a      	add	r2, r3
 80058d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d90f      	bls.n	8005920 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6a1a      	ldr	r2, [r3, #32]
 800590c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005910:	1ad2      	subs	r2, r2, r3
 8005912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	621a      	str	r2, [r3, #32]
 800591e:	e00e      	b.n	800593e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800593e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8295 	beq.w	8005e72 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d16d      	bne.n	8005a34 <USB_EPStartXfer+0xe4c>
 8005958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	66bb      	str	r3, [r7, #104]	; 0x68
 8005964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005978:	4413      	add	r3, r2
 800597a:	66bb      	str	r3, [r7, #104]	; 0x68
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	011a      	lsls	r2, r3, #4
 800598a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800598c:	4413      	add	r3, r2
 800598e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005992:	667b      	str	r3, [r7, #100]	; 0x64
 8005994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d112      	bne.n	80059c2 <USB_EPStartXfer+0xdda>
 800599c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e063      	b.n	8005a8a <USB_EPStartXfer+0xea2>
 80059c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c6:	2b3e      	cmp	r3, #62	; 0x3e
 80059c8:	d817      	bhi.n	80059fa <USB_EPStartXfer+0xe12>
 80059ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d004      	beq.n	80059ea <USB_EPStartXfer+0xe02>
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e4:	3301      	adds	r3, #1
 80059e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	029b      	lsls	r3, r3, #10
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	e047      	b.n	8005a8a <USB_EPStartXfer+0xea2>
 80059fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a08:	f003 031f 	and.w	r3, r3, #31
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <USB_EPStartXfer+0xe32>
 8005a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a14:	3b01      	subs	r3, #1
 8005a16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	e02a      	b.n	8005a8a <USB_EPStartXfer+0xea2>
 8005a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d122      	bne.n	8005a8a <USB_EPStartXfer+0xea2>
 8005a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a64:	4413      	add	r3, r2
 8005a66:	673b      	str	r3, [r7, #112]	; 0x70
 8005a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	011a      	lsls	r2, r3, #4
 8005a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	891b      	ldrh	r3, [r3, #8]
 8005a96:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6959      	ldr	r1, [r3, #20]
 8005aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ab0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ab4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ab8:	6800      	ldr	r0, [r0, #0]
 8005aba:	f000 fff6 	bl	8006aaa <USB_WritePMA>
 8005abe:	e1d8      	b.n	8005e72 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d178      	bne.n	8005bc2 <USB_EPStartXfer+0xfda>
 8005ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005af4:	4413      	add	r3, r2
 8005af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	011a      	lsls	r2, r3, #4
 8005b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d116      	bne.n	8005b4c <USB_EPStartXfer+0xf64>
 8005b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e06b      	b.n	8005c24 <USB_EPStartXfer+0x103c>
 8005b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b50:	2b3e      	cmp	r3, #62	; 0x3e
 8005b52:	d818      	bhi.n	8005b86 <USB_EPStartXfer+0xf9e>
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <USB_EPStartXfer+0xf8c>
 8005b6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b6e:	3301      	adds	r3, #1
 8005b70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e04e      	b.n	8005c24 <USB_EPStartXfer+0x103c>
 8005b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d104      	bne.n	8005ba6 <USB_EPStartXfer+0xfbe>
 8005b9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ba6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	029b      	lsls	r3, r3, #10
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e030      	b.n	8005c24 <USB_EPStartXfer+0x103c>
 8005bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d128      	bne.n	8005c24 <USB_EPStartXfer+0x103c>
 8005bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	011a      	lsls	r2, r3, #4
 8005c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	891b      	ldrh	r3, [r3, #8]
 8005c30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6959      	ldr	r1, [r3, #20]
 8005c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c4a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c4e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c52:	6800      	ldr	r0, [r0, #0]
 8005c54:	f000 ff29 	bl	8006aaa <USB_WritePMA>
          ep->xfer_buff += len;
 8005c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c68:	441a      	add	r2, r3
 8005c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d90f      	bls.n	8005cb2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6a1a      	ldr	r2, [r3, #32]
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	1ad2      	subs	r2, r2, r3
 8005ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	621a      	str	r2, [r3, #32]
 8005cb0:	e00e      	b.n	8005cd0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80cc 	beq.w	8005e72 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d178      	bne.n	8005dea <USB_EPStartXfer+0x1202>
 8005cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	011a      	lsls	r2, r3, #4
 8005d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d116      	bne.n	8005d74 <USB_EPStartXfer+0x118c>
 8005d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	e064      	b.n	8005e3e <USB_EPStartXfer+0x1256>
 8005d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d78:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7a:	d818      	bhi.n	8005dae <USB_EPStartXfer+0x11c6>
 8005d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <USB_EPStartXfer+0x11b4>
 8005d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d96:	3301      	adds	r3, #1
 8005d98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	029b      	lsls	r3, r3, #10
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005daa:	801a      	strh	r2, [r3, #0]
 8005dac:	e047      	b.n	8005e3e <USB_EPStartXfer+0x1256>
 8005dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <USB_EPStartXfer+0x11e6>
 8005dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	029b      	lsls	r3, r3, #10
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	e029      	b.n	8005e3e <USB_EPStartXfer+0x1256>
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d121      	bne.n	8005e3e <USB_EPStartXfer+0x1256>
 8005dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e10:	4413      	add	r3, r2
 8005e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	011a      	lsls	r2, r3, #4
 8005e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e28:	4413      	add	r3, r2
 8005e2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	895b      	ldrh	r3, [r3, #10]
 8005e4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6959      	ldr	r1, [r3, #20]
 8005e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e6c:	6800      	ldr	r0, [r0, #0]
 8005e6e:	f000 fe1c 	bl	8006aaa <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e94:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea0:	8013      	strh	r3, [r2, #0]
 8005ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005eaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005eae:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005eb2:	8812      	ldrh	r2, [r2, #0]
 8005eb4:	f082 0210 	eor.w	r2, r2, #16
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ec2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ec6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005eca:	8812      	ldrh	r2, [r2, #0]
 8005ecc:	f082 0220 	eor.w	r2, r2, #32
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
 8005f0a:	f000 bc9f 	b.w	800684c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	7b1b      	ldrb	r3, [r3, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 80ae 	bne.w	800607c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d917      	bls.n	8005f6c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5c:	1ad2      	subs	r2, r2, r3
 8005f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	619a      	str	r2, [r3, #24]
 8005f6a:	e00e      	b.n	8005f8a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fae:	4413      	add	r3, r2
 8005fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	011a      	lsls	r2, r3, #4
 8005fc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d116      	bne.n	8006006 <USB_EPStartXfer+0x141e>
 8005fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e3e8      	b.n	80067d8 <USB_EPStartXfer+0x1bf0>
 8006006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600a:	2b3e      	cmp	r3, #62	; 0x3e
 800600c:	d818      	bhi.n	8006040 <USB_EPStartXfer+0x1458>
 800600e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <USB_EPStartXfer+0x1446>
 8006024:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006028:	3301      	adds	r3, #1
 800602a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800602e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29a      	uxth	r2, r3
 8006038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	e3cb      	b.n	80067d8 <USB_EPStartXfer+0x1bf0>
 8006040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800604a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <USB_EPStartXfer+0x1478>
 8006056:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800605a:	3b01      	subs	r3, #1
 800605c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006060:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006064:	b29b      	uxth	r3, r3
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	b29b      	uxth	r3, r3
 800606a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e3ad      	b.n	80067d8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800607c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	78db      	ldrb	r3, [r3, #3]
 8006088:	2b02      	cmp	r3, #2
 800608a:	f040 8200 	bne.w	800648e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800608e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	785b      	ldrb	r3, [r3, #1]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f040 8091 	bne.w	80061c2 <USB_EPStartXfer+0x15da>
 80060a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060c4:	4413      	add	r3, r2
 80060c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	011a      	lsls	r2, r3, #4
 80060d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060dc:	4413      	add	r3, r2
 80060de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d116      	bne.n	8006124 <USB_EPStartXfer+0x153c>
 80060f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	e083      	b.n	800622c <USB_EPStartXfer+0x1644>
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b3e      	cmp	r3, #62	; 0x3e
 8006132:	d820      	bhi.n	8006176 <USB_EPStartXfer+0x158e>
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <USB_EPStartXfer+0x157c>
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615e:	3301      	adds	r3, #1
 8006160:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006168:	b29b      	uxth	r3, r3
 800616a:	029b      	lsls	r3, r3, #10
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	e05a      	b.n	800622c <USB_EPStartXfer+0x1644>
 8006176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <USB_EPStartXfer+0x15be>
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a0:	3b01      	subs	r3, #1
 80061a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e034      	b.n	800622c <USB_EPStartXfer+0x1644>
 80061c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d12c      	bne.n	800622c <USB_EPStartXfer+0x1644>
 80061d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061f6:	4413      	add	r3, r2
 80061f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	011a      	lsls	r2, r3, #4
 800620a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800620e:	4413      	add	r3, r2
 8006210:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 8091 	bne.w	800636e <USB_EPStartXfer+0x1786>
 800624c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800625a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006270:	4413      	add	r3, r2
 8006272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	011a      	lsls	r2, r3, #4
 8006284:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006288:	4413      	add	r3, r2
 800628a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800628e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d116      	bne.n	80062d0 <USB_EPStartXfer+0x16e8>
 80062a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	e07c      	b.n	80063ca <USB_EPStartXfer+0x17e2>
 80062d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b3e      	cmp	r3, #62	; 0x3e
 80062de:	d820      	bhi.n	8006322 <USB_EPStartXfer+0x173a>
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <USB_EPStartXfer+0x1728>
 8006306:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800630a:	3301      	adds	r3, #1
 800630c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006310:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006314:	b29b      	uxth	r3, r3
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	b29a      	uxth	r2, r3
 800631a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	e053      	b.n	80063ca <USB_EPStartXfer+0x17e2>
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <USB_EPStartXfer+0x176a>
 8006348:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800634c:	3b01      	subs	r3, #1
 800634e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006352:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006356:	b29b      	uxth	r3, r3
 8006358:	029b      	lsls	r3, r3, #10
 800635a:	b29b      	uxth	r3, r3
 800635c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e02d      	b.n	80063ca <USB_EPStartXfer+0x17e2>
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d125      	bne.n	80063ca <USB_EPStartXfer+0x17e2>
 800637e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006382:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638c:	b29b      	uxth	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006394:	4413      	add	r3, r2
 8006396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800639a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	011a      	lsls	r2, r3, #4
 80063a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063c8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 81fe 	beq.w	80067d8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063fc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <USB_EPStartXfer+0x182c>
 8006408:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10d      	bne.n	8006430 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006414:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 81db 	bne.w	80067d8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006422:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	f040 81d4 	bne.w	80067d8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006434:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800645a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006488:	b29b      	uxth	r3, r3
 800648a:	8013      	strh	r3, [r2, #0]
 800648c:	e1a4      	b.n	80067d8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800648e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	78db      	ldrb	r3, [r3, #3]
 800649a:	2b01      	cmp	r3, #1
 800649c:	f040 819a 	bne.w	80067d4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d917      	bls.n	80064ec <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80064bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80064cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064dc:	1ad2      	subs	r2, r2, r3
 80064de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	619a      	str	r2, [r3, #24]
 80064ea:	e00e      	b.n	800650a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80064ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80064fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d178      	bne.n	800660c <USB_EPStartXfer+0x1a24>
 800651a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006536:	b29b      	uxth	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800653e:	4413      	add	r3, r2
 8006540:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	011a      	lsls	r2, r3, #4
 8006552:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006556:	4413      	add	r3, r2
 8006558:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800655c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d116      	bne.n	8006596 <USB_EPStartXfer+0x19ae>
 8006568:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006574:	b29a      	uxth	r2, r3
 8006576:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658c:	b29a      	uxth	r2, r3
 800658e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e06b      	b.n	800666e <USB_EPStartXfer+0x1a86>
 8006596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659a:	2b3e      	cmp	r3, #62	; 0x3e
 800659c:	d818      	bhi.n	80065d0 <USB_EPStartXfer+0x19e8>
 800659e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <USB_EPStartXfer+0x19d6>
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	3301      	adds	r3, #1
 80065ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	029b      	lsls	r3, r3, #10
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e04e      	b.n	800666e <USB_EPStartXfer+0x1a86>
 80065d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <USB_EPStartXfer+0x1a08>
 80065e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ea:	3b01      	subs	r3, #1
 80065ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e030      	b.n	800666e <USB_EPStartXfer+0x1a86>
 800660c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d128      	bne.n	800666e <USB_EPStartXfer+0x1a86>
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800662a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006638:	b29b      	uxth	r3, r3
 800663a:	461a      	mov	r2, r3
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	4413      	add	r3, r2
 8006642:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	011a      	lsls	r2, r3, #4
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	4413      	add	r3, r2
 800665a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800665e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006666:	b29a      	uxth	r2, r3
 8006668:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800667c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	785b      	ldrb	r3, [r3, #1]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d178      	bne.n	800677e <USB_EPStartXfer+0x1b96>
 800668c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800669a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b0:	4413      	add	r3, r2
 80066b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	011a      	lsls	r2, r3, #4
 80066c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c8:	4413      	add	r3, r2
 80066ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d116      	bne.n	8006708 <USB_EPStartXfer+0x1b20>
 80066da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fe:	b29a      	uxth	r2, r3
 8006700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	e067      	b.n	80067d8 <USB_EPStartXfer+0x1bf0>
 8006708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670c:	2b3e      	cmp	r3, #62	; 0x3e
 800670e:	d818      	bhi.n	8006742 <USB_EPStartXfer+0x1b5a>
 8006710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800671a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d004      	beq.n	8006730 <USB_EPStartXfer+0x1b48>
 8006726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800672a:	3301      	adds	r3, #1
 800672c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006730:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006734:	b29b      	uxth	r3, r3
 8006736:	029b      	lsls	r3, r3, #10
 8006738:	b29a      	uxth	r2, r3
 800673a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	e04a      	b.n	80067d8 <USB_EPStartXfer+0x1bf0>
 8006742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800674c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006750:	f003 031f 	and.w	r3, r3, #31
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <USB_EPStartXfer+0x1b7a>
 8006758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800675c:	3b01      	subs	r3, #1
 800675e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006766:	b29b      	uxth	r3, r3
 8006768:	029b      	lsls	r3, r3, #10
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	e02c      	b.n	80067d8 <USB_EPStartXfer+0x1bf0>
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d124      	bne.n	80067d8 <USB_EPStartXfer+0x1bf0>
 800678e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679c:	b29b      	uxth	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a4:	4413      	add	r3, r2
 80067a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	011a      	lsls	r2, r3, #4
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067bc:	4413      	add	r3, r2
 80067be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	e001      	b.n	80067d8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e03a      	b.n	800684e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006802:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006806:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800680a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800680e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006812:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006816:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800681a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006848:	b29b      	uxth	r3, r3
 800684a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d020      	beq.n	80068ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006880:	81bb      	strh	r3, [r7, #12]
 8006882:	89bb      	ldrh	r3, [r7, #12]
 8006884:	f083 0310 	eor.w	r3, r3, #16
 8006888:	81bb      	strh	r3, [r7, #12]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	89bb      	ldrh	r3, [r7, #12]
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
 80068aa:	e01f      	b.n	80068ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	81fb      	strh	r3, [r7, #14]
 80068c4:	89fb      	ldrh	r3, [r7, #14]
 80068c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ca:	81fb      	strh	r3, [r7, #14]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	89fb      	ldrh	r3, [r7, #14]
 80068d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	7b1b      	ldrb	r3, [r3, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f040 809d 	bne.w	8006a46 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d04c      	beq.n	80069ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	823b      	strh	r3, [r7, #16]
 8006922:	8a3b      	ldrh	r3, [r7, #16]
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01b      	beq.n	8006964 <USB_EPClearStall+0x6c>
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	81fb      	strh	r3, [r7, #14]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	89fb      	ldrh	r3, [r7, #14]
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	78db      	ldrb	r3, [r3, #3]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d06c      	beq.n	8006a46 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006982:	81bb      	strh	r3, [r7, #12]
 8006984:	89bb      	ldrh	r3, [r7, #12]
 8006986:	f083 0320 	eor.w	r3, r3, #32
 800698a:	81bb      	strh	r3, [r7, #12]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	89bb      	ldrh	r3, [r7, #12]
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]
 80069ac:	e04b      	b.n	8006a46 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	82fb      	strh	r3, [r7, #22]
 80069bc:	8afb      	ldrh	r3, [r7, #22]
 80069be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01b      	beq.n	80069fe <USB_EPClearStall+0x106>
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069dc:	82bb      	strh	r3, [r7, #20]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	8abb      	ldrh	r3, [r7, #20]
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a14:	827b      	strh	r3, [r7, #18]
 8006a16:	8a7b      	ldrh	r3, [r7, #18]
 8006a18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a1c:	827b      	strh	r3, [r7, #18]
 8006a1e:	8a7b      	ldrh	r3, [r7, #18]
 8006a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a24:	827b      	strh	r3, [r7, #18]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	441a      	add	r2, r3
 8006a30:	8a7b      	ldrh	r3, [r7, #18]
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2280      	movs	r2, #128	; 0x80
 8006a68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b08d      	sub	sp, #52	; 0x34
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	460b      	mov	r3, r1
 8006aba:	80fb      	strh	r3, [r7, #6]
 8006abc:	4613      	mov	r3, r2
 8006abe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ac0:	88bb      	ldrh	r3, [r7, #4]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	085b      	lsrs	r3, r3, #1
 8006ac6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	005a      	lsls	r2, r3, #1
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae2:	e01e      	b.n	8006b22 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	3301      	adds	r3, #1
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	3302      	adds	r3, #2
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	3301      	adds	r3, #1
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1dd      	bne.n	8006ae4 <USB_WritePMA+0x3a>
  }
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	3734      	adds	r7, #52	; 0x34
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr

08006b34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b08b      	sub	sp, #44	; 0x2c
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	460b      	mov	r3, r1
 8006b44:	80fb      	strh	r3, [r7, #6]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b4a:	88bb      	ldrh	r3, [r7, #4]
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	005a      	lsls	r2, r3, #1
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b66:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6c:	e01b      	b.n	8006ba6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	3302      	adds	r3, #2
 8006b7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	3301      	adds	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	0a1b      	lsrs	r3, r3, #8
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	3302      	adds	r3, #2
 8006b9e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e0      	bne.n	8006b6e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006bac:	88bb      	ldrh	r3, [r7, #4]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	701a      	strb	r2, [r3, #0]
  }
}
 8006bc8:	bf00      	nop
 8006bca:	372c      	adds	r7, #44	; 0x2c
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	7c1b      	ldrb	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d115      	bne.n	8006c16 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bee:	2202      	movs	r2, #2
 8006bf0:	2181      	movs	r1, #129	; 0x81
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fe2f 	bl	8008856 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c02:	2202      	movs	r2, #2
 8006c04:	2101      	movs	r1, #1
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fe25 	bl	8008856 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006c14:	e012      	b.n	8006c3c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c16:	2340      	movs	r3, #64	; 0x40
 8006c18:	2202      	movs	r2, #2
 8006c1a:	2181      	movs	r1, #129	; 0x81
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fe1a 	bl	8008856 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 fe11 	bl	8008856 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	2203      	movs	r2, #3
 8006c40:	2182      	movs	r1, #130	; 0x82
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fe07 	bl	8008856 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006c4e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c52:	f001 ff27 	bl	8008aa4 <USBD_static_malloc>
 8006c56:	4602      	mov	r2, r0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d102      	bne.n	8006c6e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
 8006c6c:	e026      	b.n	8006cbc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7c1b      	ldrb	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fec7 	bl	8008a38 <USBD_LL_PrepareReceive>
 8006caa:	e007      	b.n	8006cbc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cb2:	2340      	movs	r3, #64	; 0x40
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 febe 	bl	8008a38 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cd6:	2181      	movs	r1, #129	; 0x81
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fde2 	bl	80088a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fddb 	bl	80088a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cf4:	2182      	movs	r1, #130	; 0x82
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fdd3 	bl	80088a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00e      	beq.n	8006d2a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 fecd 	bl	8008abc <USBD_static_free>
    pdev->pClassData = NULL;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d039      	beq.n	8006dd2 <USBD_CDC_Setup+0x9e>
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d17f      	bne.n	8006e62 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	88db      	ldrh	r3, [r3, #6]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d029      	beq.n	8006dbe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da11      	bge.n	8006d98 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006d80:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	88d2      	ldrh	r2, [r2, #6]
 8006d86:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d88:	6939      	ldr	r1, [r7, #16]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f994 	bl	80080be <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006d96:	e06b      	b.n	8006e70 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	785a      	ldrb	r2, [r3, #1]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	88db      	ldrh	r3, [r3, #6]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dae:	6939      	ldr	r1, [r7, #16]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	88db      	ldrh	r3, [r3, #6]
 8006db4:	461a      	mov	r2, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 f9af 	bl	800811a <USBD_CtlPrepareRx>
    break;
 8006dbc:	e058      	b.n	8006e70 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	7850      	ldrb	r0, [r2, #1]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	4798      	blx	r3
    break;
 8006dd0:	e04e      	b.n	8006e70 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b0b      	cmp	r3, #11
 8006dd8:	d02e      	beq.n	8006e38 <USBD_CDC_Setup+0x104>
 8006dda:	2b0b      	cmp	r3, #11
 8006ddc:	dc38      	bgt.n	8006e50 <USBD_CDC_Setup+0x11c>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <USBD_CDC_Setup+0xb4>
 8006de2:	2b0a      	cmp	r3, #10
 8006de4:	d014      	beq.n	8006e10 <USBD_CDC_Setup+0xdc>
 8006de6:	e033      	b.n	8006e50 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d107      	bne.n	8006e02 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006df2:	f107 030c 	add.w	r3, r7, #12
 8006df6:	2202      	movs	r2, #2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 f95f 	bl	80080be <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006e00:	e02e      	b.n	8006e60 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 f8f0 	bl	8007fea <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0e:	e027      	b.n	8006e60 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d107      	bne.n	8006e2a <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006e1a:	f107 030f 	add.w	r3, r7, #15
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f94b 	bl	80080be <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006e28:	e01a      	b.n	8006e60 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f8dc 	bl	8007fea <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e32:	2302      	movs	r3, #2
 8006e34:	75fb      	strb	r3, [r7, #23]
      break;
 8006e36:	e013      	b.n	8006e60 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d00d      	beq.n	8006e5e <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f8d0 	bl	8007fea <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006e4e:	e006      	b.n	8006e5e <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 f8c9 	bl	8007fea <USBD_CtlError>
      ret = USBD_FAIL;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5c:	e000      	b.n	8006e60 <USBD_CDC_Setup+0x12c>
      break;
 8006e5e:	bf00      	nop
    }
    break;
 8006e60:	e006      	b.n	8006e70 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f8c0 	bl	8007fea <USBD_CtlError>
    ret = USBD_FAIL;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	75fb      	strb	r3, [r7, #23]
    break;
 8006e6e:	bf00      	nop
  }

  return ret;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e8c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006e94:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d03a      	beq.n	8006f16 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	331c      	adds	r3, #28
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d029      	beq.n	8006f0a <USBD_CDC_DataIn+0x90>
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	331c      	adds	r3, #28
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	78f9      	ldrb	r1, [r7, #3]
 8006eca:	68b8      	ldr	r0, [r7, #8]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	4403      	add	r3, r0
 8006ed6:	3338      	adds	r3, #56	; 0x38
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ede:	fb01 f303 	mul.w	r3, r1, r3
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d110      	bne.n	8006f0a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ee8:	78fa      	ldrb	r2, [r7, #3]
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	331c      	adds	r3, #28
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006efc:	78f9      	ldrb	r1, [r7, #3]
 8006efe:	2300      	movs	r3, #0
 8006f00:	2200      	movs	r2, #0
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 fd75 	bl	80089f2 <USBD_LL_Transmit>
 8006f08:	e003      	b.n	8006f12 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	e000      	b.n	8006f18 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f16:	2302      	movs	r3, #2
  }
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fda0 	bl	8008a7e <USBD_LL_GetRxDataSize>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00d      	beq.n	8006f6c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f64:	4611      	mov	r1, r2
 8006f66:	4798      	blx	r3

    return USBD_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e000      	b.n	8006f6e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f6c:	2302      	movs	r3, #2
  }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f84:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d015      	beq.n	8006fbc <USBD_CDC_EP0_RxReady+0x46>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f96:	2bff      	cmp	r3, #255	; 0xff
 8006f98:	d010      	beq.n	8006fbc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006fa8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fb0:	b292      	uxth	r2, r2
 8006fb2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	22ff      	movs	r2, #255	; 0xff
 8006fb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2243      	movs	r2, #67	; 0x43
 8006fd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006fd6:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000094 	.word	0x20000094

08006fe8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2243      	movs	r2, #67	; 0x43
 8006ff4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ff6:	4b03      	ldr	r3, [pc, #12]	; (8007004 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000050 	.word	0x20000050

08007008 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2243      	movs	r2, #67	; 0x43
 8007014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007016:	4b03      	ldr	r3, [pc, #12]	; (8007024 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	200000d8 	.word	0x200000d8

08007028 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	220a      	movs	r2, #10
 8007034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	2000000c 	.word	0x2000000c

08007048 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007052:	2302      	movs	r3, #2
 8007054:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007088:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007092:	88fa      	ldrh	r2, [r7, #6]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr

080070a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b085      	sub	sp, #20
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070da:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01c      	beq.n	8007120 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d115      	bne.n	800711c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800710e:	b29b      	uxth	r3, r3
 8007110:	2181      	movs	r1, #129	; 0x81
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fc6d 	bl	80089f2 <USBD_LL_Transmit>

      return USBD_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	e002      	b.n	8007122 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007120:	2302      	movs	r3, #2
  }
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007138:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007140:	2b00      	cmp	r3, #0
 8007142:	d017      	beq.n	8007174 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	7c1b      	ldrb	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007156:	2101      	movs	r1, #1
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fc6d 	bl	8008a38 <USBD_LL_PrepareReceive>
 800715e:	e007      	b.n	8007170 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007166:	2340      	movs	r3, #64	; 0x40
 8007168:	2101      	movs	r1, #1
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 fc64 	bl	8008a38 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	e000      	b.n	8007176 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	4613      	mov	r3, r2
 800718a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007192:	2302      	movs	r3, #2
 8007194:	e01a      	b.n	80071cc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	79fa      	ldrb	r2, [r7, #7]
 80071c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f001 fad1 	bl	800876c <USBD_LL_Init>

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]
 80071f4:	e001      	b.n	80071fa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071f6:	2302      	movs	r3, #2
 80071f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr

08007206 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fb06 	bl	8008820 <USBD_LL_Start>

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800723e:	2302      	movs	r3, #2
 8007240:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00c      	beq.n	8007266 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	78fa      	ldrb	r2, [r7, #3]
 8007256:	4611      	mov	r1, r2
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	78fa      	ldrb	r2, [r7, #3]
 8007286:	4611      	mov	r1, r2
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
  return USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 fe62 	bl	8007f72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80072bc:	461a      	mov	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d016      	beq.n	8007300 <USBD_LL_SetupStage+0x6a>
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d81c      	bhi.n	8007310 <USBD_LL_SetupStage+0x7a>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <USBD_LL_SetupStage+0x4a>
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d008      	beq.n	80072f0 <USBD_LL_SetupStage+0x5a>
 80072de:	e017      	b.n	8007310 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9c5 	bl	8007678 <USBD_StdDevReq>
    break;
 80072ee:	e01a      	b.n	8007326 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fa27 	bl	800774c <USBD_StdItfReq>
    break;
 80072fe:	e012      	b.n	8007326 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fa67 	bl	80077dc <USBD_StdEPReq>
    break;
 800730e:	e00a      	b.n	8007326 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007316:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800731a:	b2db      	uxtb	r3, r3
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fade 	bl	80088e0 <USBD_LL_StallEP>
    break;
 8007324:	bf00      	nop
  }

  return USBD_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	460b      	mov	r3, r1
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d14b      	bne.n	80073dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800734a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007352:	2b03      	cmp	r3, #3
 8007354:	d134      	bne.n	80073c0 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	429a      	cmp	r2, r3
 8007360:	d919      	bls.n	8007396 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007378:	429a      	cmp	r2, r3
 800737a:	d203      	bcs.n	8007384 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007380:	b29b      	uxth	r3, r3
 8007382:	e002      	b.n	800738a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007388:	b29b      	uxth	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 fee1 	bl	8008156 <USBD_CtlContinueRx>
 8007394:	e038      	b.n	8007408 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d105      	bne.n	80073b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 fede 	bl	800817a <USBD_CtlSendStatus>
 80073be:	e023      	b.n	8007408 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	d11e      	bne.n	8007408 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80073d2:	2100      	movs	r1, #0
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f001 fa83 	bl	80088e0 <USBD_LL_StallEP>
 80073da:	e015      	b.n	8007408 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00d      	beq.n	8007404 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d108      	bne.n	8007404 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	7afa      	ldrb	r2, [r7, #11]
 80073fc:	4611      	mov	r1, r2
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	4798      	blx	r3
 8007402:	e001      	b.n	8007408 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007404:	2302      	movs	r3, #2
 8007406:	e000      	b.n	800740a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b086      	sub	sp, #24
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	460b      	mov	r3, r1
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d17f      	bne.n	8007526 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3314      	adds	r3, #20
 800742a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007432:	2b02      	cmp	r3, #2
 8007434:	d15c      	bne.n	80074f0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d915      	bls.n	800746e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	b29b      	uxth	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fe4b 	bl	80080f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007460:	2300      	movs	r3, #0
 8007462:	2200      	movs	r2, #0
 8007464:	2100      	movs	r1, #0
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f001 fae6 	bl	8008a38 <USBD_LL_PrepareReceive>
 800746c:	e04e      	b.n	800750c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	6912      	ldr	r2, [r2, #16]
 8007476:	fbb3 f1f2 	udiv	r1, r3, r2
 800747a:	fb01 f202 	mul.w	r2, r1, r2
 800747e:	1a9b      	subs	r3, r3, r2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d11c      	bne.n	80074be <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800748c:	429a      	cmp	r2, r3
 800748e:	d316      	bcc.n	80074be <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800749a:	429a      	cmp	r2, r3
 800749c:	d20f      	bcs.n	80074be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800749e:	2200      	movs	r2, #0
 80074a0:	2100      	movs	r1, #0
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fe27 	bl	80080f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80074b0:	2300      	movs	r3, #0
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f001 fabe 	bl	8008a38 <USBD_LL_PrepareReceive>
 80074bc:	e026      	b.n	800750c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d105      	bne.n	80074e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074e0:	2180      	movs	r1, #128	; 0x80
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f001 f9fc 	bl	80088e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fe59 	bl	80081a0 <USBD_CtlReceiveStatus>
 80074ee:	e00d      	b.n	800750c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d004      	beq.n	8007504 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007500:	2b00      	cmp	r3, #0
 8007502:	d103      	bne.n	800750c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007504:	2180      	movs	r1, #128	; 0x80
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f001 f9ea 	bl	80088e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007512:	2b01      	cmp	r3, #1
 8007514:	d11d      	bne.n	8007552 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fe81 	bl	800721e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007524:	e015      	b.n	8007552 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007538:	2b03      	cmp	r3, #3
 800753a:	d108      	bne.n	800754e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	7afa      	ldrb	r2, [r7, #11]
 8007546:	4611      	mov	r1, r2
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	4798      	blx	r3
 800754c:	e001      	b.n	8007552 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800754e:	2302      	movs	r3, #2
 8007550:	e000      	b.n	8007554 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007564:	2340      	movs	r3, #64	; 0x40
 8007566:	2200      	movs	r2, #0
 8007568:	2100      	movs	r1, #0
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 f973 	bl	8008856 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2240      	movs	r2, #64	; 0x40
 800757c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007580:	2340      	movs	r3, #64	; 0x40
 8007582:	2200      	movs	r2, #0
 8007584:	2180      	movs	r1, #128	; 0x80
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 f965 	bl	8008856 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2240      	movs	r2, #64	; 0x40
 8007596:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6852      	ldr	r2, [r2, #4]
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	4611      	mov	r1, r2
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
  }

  return USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	78fa      	ldrb	r2, [r7, #3]
 80075ee:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr

080075fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2204      	movs	r2, #4
 8007614:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr

08007624 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr

08007644 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007652:	2b03      	cmp	r3, #3
 8007654:	d10b      	bne.n	800766e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d005      	beq.n	800769e <USBD_StdDevReq+0x26>
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	d84f      	bhi.n	8007736 <USBD_StdDevReq+0xbe>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <USBD_StdDevReq+0x36>
 800769a:	2b20      	cmp	r3, #32
 800769c:	d14b      	bne.n	8007736 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
    break;
 80076ac:	e048      	b.n	8007740 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	785b      	ldrb	r3, [r3, #1]
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	d839      	bhi.n	800772a <USBD_StdDevReq+0xb2>
 80076b6:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <USBD_StdDevReq+0x44>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	0800770d 	.word	0x0800770d
 80076c0:	08007721 	.word	0x08007721
 80076c4:	0800772b 	.word	0x0800772b
 80076c8:	08007717 	.word	0x08007717
 80076cc:	0800772b 	.word	0x0800772b
 80076d0:	080076ef 	.word	0x080076ef
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	0800772b 	.word	0x0800772b
 80076dc:	08007703 	.word	0x08007703
 80076e0:	080076f9 	.word	0x080076f9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f9da 	bl	8007aa0 <USBD_GetDescriptor>
      break;
 80076ec:	e022      	b.n	8007734 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 facf 	bl	8007c94 <USBD_SetAddress>
      break;
 80076f6:	e01d      	b.n	8007734 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fb0e 	bl	8007d1c <USBD_SetConfig>
      break;
 8007700:	e018      	b.n	8007734 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fb97 	bl	8007e38 <USBD_GetConfig>
      break;
 800770a:	e013      	b.n	8007734 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fbc7 	bl	8007ea2 <USBD_GetStatus>
      break;
 8007714:	e00e      	b.n	8007734 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fbf5 	bl	8007f08 <USBD_SetFeature>
      break;
 800771e:	e009      	b.n	8007734 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fc04 	bl	8007f30 <USBD_ClrFeature>
      break;
 8007728:	e004      	b.n	8007734 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc5c 	bl	8007fea <USBD_CtlError>
      break;
 8007732:	bf00      	nop
    }
    break;
 8007734:	e004      	b.n	8007740 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fc56 	bl	8007fea <USBD_CtlError>
    break;
 800773e:	bf00      	nop
  }

  return ret;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop

0800774c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d005      	beq.n	8007772 <USBD_StdItfReq+0x26>
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d82e      	bhi.n	80077c8 <USBD_StdItfReq+0x7c>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <USBD_StdItfReq+0x26>
 800776e:	2b20      	cmp	r3, #32
 8007770:	d12a      	bne.n	80077c8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007778:	3b01      	subs	r3, #1
 800777a:	2b02      	cmp	r3, #2
 800777c:	d81d      	bhi.n	80077ba <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	889b      	ldrh	r3, [r3, #4]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b01      	cmp	r3, #1
 8007786:	d813      	bhi.n	80077b0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	88db      	ldrh	r3, [r3, #6]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d110      	bne.n	80077c4 <USBD_StdItfReq+0x78>
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10d      	bne.n	80077c4 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fce6 	bl	800817a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077ae:	e009      	b.n	80077c4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fc19 	bl	8007fea <USBD_CtlError>
      break;
 80077b8:	e004      	b.n	80077c4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fc14 	bl	8007fea <USBD_CtlError>
      break;
 80077c2:	e000      	b.n	80077c6 <USBD_StdItfReq+0x7a>
      break;
 80077c4:	bf00      	nop
    }
    break;
 80077c6:	e004      	b.n	80077d2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fc0d 	bl	8007fea <USBD_CtlError>
    break;
 80077d0:	bf00      	nop
  }

  return USBD_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	889b      	ldrh	r3, [r3, #4]
 80077ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f8:	2b40      	cmp	r3, #64	; 0x40
 80077fa:	d007      	beq.n	800780c <USBD_StdEPReq+0x30>
 80077fc:	2b40      	cmp	r3, #64	; 0x40
 80077fe:	f200 8144 	bhi.w	8007a8a <USBD_StdEPReq+0x2ae>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <USBD_StdEPReq+0x40>
 8007806:	2b20      	cmp	r3, #32
 8007808:	f040 813f 	bne.w	8007a8a <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
    break;
 800781a:	e13b      	b.n	8007a94 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007824:	2b20      	cmp	r3, #32
 8007826:	d10a      	bne.n	800783e <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]

      return ret;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	e12b      	b.n	8007a96 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	785b      	ldrb	r3, [r3, #1]
 8007842:	2b03      	cmp	r3, #3
 8007844:	d007      	beq.n	8007856 <USBD_StdEPReq+0x7a>
 8007846:	2b03      	cmp	r3, #3
 8007848:	f300 8119 	bgt.w	8007a7e <USBD_StdEPReq+0x2a2>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d072      	beq.n	8007936 <USBD_StdEPReq+0x15a>
 8007850:	2b01      	cmp	r3, #1
 8007852:	d03a      	beq.n	80078ca <USBD_StdEPReq+0xee>
 8007854:	e113      	b.n	8007a7e <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800785c:	2b02      	cmp	r3, #2
 800785e:	d002      	beq.n	8007866 <USBD_StdEPReq+0x8a>
 8007860:	2b03      	cmp	r3, #3
 8007862:	d015      	beq.n	8007890 <USBD_StdEPReq+0xb4>
 8007864:	e02b      	b.n	80078be <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00c      	beq.n	8007886 <USBD_StdEPReq+0xaa>
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b80      	cmp	r3, #128	; 0x80
 8007870:	d009      	beq.n	8007886 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 f832 	bl	80088e0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800787c:	2180      	movs	r1, #128	; 0x80
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 f82e 	bl	80088e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007884:	e020      	b.n	80078c8 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fbae 	bl	8007fea <USBD_CtlError>
        break;
 800788e:	e01b      	b.n	80078c8 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	885b      	ldrh	r3, [r3, #2]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10e      	bne.n	80078b6 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00b      	beq.n	80078b6 <USBD_StdEPReq+0xda>
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	2b80      	cmp	r3, #128	; 0x80
 80078a2:	d008      	beq.n	80078b6 <USBD_StdEPReq+0xda>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	88db      	ldrh	r3, [r3, #6]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f815 	bl	80088e0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fc5f 	bl	800817a <USBD_CtlSendStatus>

        break;
 80078bc:	e004      	b.n	80078c8 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fb92 	bl	8007fea <USBD_CtlError>
        break;
 80078c6:	bf00      	nop
      }
      break;
 80078c8:	e0de      	b.n	8007a88 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d002      	beq.n	80078da <USBD_StdEPReq+0xfe>
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d015      	beq.n	8007904 <USBD_StdEPReq+0x128>
 80078d8:	e026      	b.n	8007928 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00c      	beq.n	80078fa <USBD_StdEPReq+0x11e>
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	d009      	beq.n	80078fa <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fff8 	bl	80088e0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80078f0:	2180      	movs	r1, #128	; 0x80
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fff4 	bl	80088e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078f8:	e01c      	b.n	8007934 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fb74 	bl	8007fea <USBD_CtlError>
        break;
 8007902:	e017      	b.n	8007934 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	885b      	ldrh	r3, [r3, #2]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d112      	bne.n	8007932 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 ffff 	bl	800891e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fc2a 	bl	800817a <USBD_CtlSendStatus>
        }
        break;
 8007926:	e004      	b.n	8007932 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fb5d 	bl	8007fea <USBD_CtlError>
        break;
 8007930:	e000      	b.n	8007934 <USBD_StdEPReq+0x158>
        break;
 8007932:	bf00      	nop
      }
      break;
 8007934:	e0a8      	b.n	8007a88 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800793c:	2b02      	cmp	r3, #2
 800793e:	d002      	beq.n	8007946 <USBD_StdEPReq+0x16a>
 8007940:	2b03      	cmp	r3, #3
 8007942:	d031      	beq.n	80079a8 <USBD_StdEPReq+0x1cc>
 8007944:	e095      	b.n	8007a72 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <USBD_StdEPReq+0x180>
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b80      	cmp	r3, #128	; 0x80
 8007950:	d004      	beq.n	800795c <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fb48 	bl	8007fea <USBD_CtlError>
          break;
 800795a:	e08f      	b.n	8007a7c <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800795c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007960:	2b00      	cmp	r3, #0
 8007962:	da0b      	bge.n	800797c <USBD_StdEPReq+0x1a0>
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	3310      	adds	r3, #16
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	4413      	add	r3, r2
 8007978:	3304      	adds	r3, #4
 800797a:	e00a      	b.n	8007992 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	4413      	add	r3, r2
 8007992:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2202      	movs	r2, #2
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fb8c 	bl	80080be <USBD_CtlSendData>
          break;
 80079a6:	e069      	b.n	8007a7c <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80079a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da11      	bge.n	80079d4 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	f003 020f 	and.w	r2, r3, #15
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	3318      	adds	r3, #24
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d117      	bne.n	80079fa <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fb0c 	bl	8007fea <USBD_CtlError>
            break;
 80079d2:	e053      	b.n	8007a7c <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 020f 	and.w	r2, r3, #15
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	440b      	add	r3, r1
 80079e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 faf9 	bl	8007fea <USBD_CtlError>
            break;
 80079f8:	e040      	b.n	8007a7c <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80079fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	da0b      	bge.n	8007a1a <USBD_StdEPReq+0x23e>
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	3310      	adds	r3, #16
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	3304      	adds	r3, #4
 8007a18:	e00a      	b.n	8007a30 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4413      	add	r3, r2
 8007a30:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <USBD_StdEPReq+0x262>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b80      	cmp	r3, #128	; 0x80
 8007a3c:	d103      	bne.n	8007a46 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	e00e      	b.n	8007a64 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 ff86 	bl	800895c <USBD_LL_IsStallEP>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	e002      	b.n	8007a64 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2202      	movs	r2, #2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fb27 	bl	80080be <USBD_CtlSendData>
          break;
 8007a70:	e004      	b.n	8007a7c <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fab8 	bl	8007fea <USBD_CtlError>
        break;
 8007a7a:	bf00      	nop
      }
      break;
 8007a7c:	e004      	b.n	8007a88 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fab2 	bl	8007fea <USBD_CtlError>
      break;
 8007a86:	bf00      	nop
    }
    break;
 8007a88:	e004      	b.n	8007a94 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 faac 	bl	8007fea <USBD_CtlError>
    break;
 8007a92:	bf00      	nop
  }

  return ret;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b06      	cmp	r3, #6
 8007ab6:	f200 80c9 	bhi.w	8007c4c <USBD_GetDescriptor+0x1ac>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBD_GetDescriptor+0x20>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007add 	.word	0x08007add
 8007ac4:	08007af5 	.word	0x08007af5
 8007ac8:	08007b35 	.word	0x08007b35
 8007acc:	08007c4d 	.word	0x08007c4d
 8007ad0:	08007c4d 	.word	0x08007c4d
 8007ad4:	08007bf9 	.word	0x08007bf9
 8007ad8:	08007c1f 	.word	0x08007c1f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	7c12      	ldrb	r2, [r2, #16]
 8007ae8:	f107 010a 	add.w	r1, r7, #10
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
    break;
 8007af2:	e0b0      	b.n	8007c56 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7c1b      	ldrb	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10d      	bne.n	8007b18 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	f107 020a 	add.w	r2, r7, #10
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4798      	blx	r3
 8007b0c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	2202      	movs	r2, #2
 8007b14:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b16:	e09e      	b.n	8007c56 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	f107 020a 	add.w	r2, r7, #10
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	2202      	movs	r2, #2
 8007b30:	701a      	strb	r2, [r3, #0]
    break;
 8007b32:	e090      	b.n	8007c56 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	885b      	ldrh	r3, [r3, #2]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b05      	cmp	r3, #5
 8007b3c:	d856      	bhi.n	8007bec <USBD_GetDescriptor+0x14c>
 8007b3e:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <USBD_GetDescriptor+0xa4>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007b5d 	.word	0x08007b5d
 8007b48:	08007b75 	.word	0x08007b75
 8007b4c:	08007b8d 	.word	0x08007b8d
 8007b50:	08007ba5 	.word	0x08007ba5
 8007b54:	08007bbd 	.word	0x08007bbd
 8007b58:	08007bd5 	.word	0x08007bd5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
 8007b68:	f107 010a 	add.w	r1, r7, #10
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
      break;
 8007b72:	e040      	b.n	8007bf6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7c12      	ldrb	r2, [r2, #16]
 8007b80:	f107 010a 	add.w	r1, r7, #10
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
      break;
 8007b8a:	e034      	b.n	8007bf6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 010a 	add.w	r1, r7, #10
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
      break;
 8007ba2:	e028      	b.n	8007bf6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7c12      	ldrb	r2, [r2, #16]
 8007bb0:	f107 010a 	add.w	r1, r7, #10
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
      break;
 8007bba:	e01c      	b.n	8007bf6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	7c12      	ldrb	r2, [r2, #16]
 8007bc8:	f107 010a 	add.w	r1, r7, #10
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4798      	blx	r3
 8007bd0:	60f8      	str	r0, [r7, #12]
      break;
 8007bd2:	e010      	b.n	8007bf6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 010a 	add.w	r1, r7, #10
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
      break;
 8007bea:	e004      	b.n	8007bf6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f9fb 	bl	8007fea <USBD_CtlError>
      return;
 8007bf4:	e04b      	b.n	8007c8e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007bf6:	e02e      	b.n	8007c56 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	7c1b      	ldrb	r3, [r3, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d109      	bne.n	8007c14 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c08:	f107 020a 	add.w	r2, r7, #10
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
      break;
 8007c12:	e020      	b.n	8007c56 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f9e7 	bl	8007fea <USBD_CtlError>
      return;
 8007c1c:	e037      	b.n	8007c8e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7c1b      	ldrb	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10d      	bne.n	8007c42 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	f107 020a 	add.w	r2, r7, #10
 8007c32:	4610      	mov	r0, r2
 8007c34:	4798      	blx	r3
 8007c36:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	701a      	strb	r2, [r3, #0]
      break;
 8007c40:	e009      	b.n	8007c56 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f9d0 	bl	8007fea <USBD_CtlError>
      return;
 8007c4a:	e020      	b.n	8007c8e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9cb 	bl	8007fea <USBD_CtlError>
    return;
 8007c54:	e01b      	b.n	8007c8e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007c56:	897b      	ldrh	r3, [r7, #10]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d011      	beq.n	8007c80 <USBD_GetDescriptor+0x1e0>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	88db      	ldrh	r3, [r3, #6]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00d      	beq.n	8007c80 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	88da      	ldrh	r2, [r3, #6]
 8007c68:	897b      	ldrh	r3, [r7, #10]
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	bf28      	it	cs
 8007c6e:	4613      	movcs	r3, r2
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007c74:	897b      	ldrh	r3, [r7, #10]
 8007c76:	461a      	mov	r2, r3
 8007c78:	68f9      	ldr	r1, [r7, #12]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa1f 	bl	80080be <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	88db      	ldrh	r3, [r3, #6]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d102      	bne.n	8007c8e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa76 	bl	800817a <USBD_CtlSendStatus>
  }
}
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	889b      	ldrh	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d130      	bne.n	8007d08 <USBD_SetAddress+0x74>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	88db      	ldrh	r3, [r3, #6]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d12c      	bne.n	8007d08 <USBD_SetAddress+0x74>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	885b      	ldrh	r3, [r3, #2]
 8007cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8007cb4:	d828      	bhi.n	8007d08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d104      	bne.n	8007cd6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f98b 	bl	8007fea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd4:	e01d      	b.n	8007d12 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7bfa      	ldrb	r2, [r7, #15]
 8007cda:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fe66 	bl	80089b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa46 	bl	800817a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfc:	e009      	b.n	8007d12 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d06:	e004      	b.n	8007d12 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f96d 	bl	8007fea <USBD_CtlError>
  }
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	4b41      	ldr	r3, [pc, #260]	; (8007e34 <USBD_SetConfig+0x118>)
 8007d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d30:	4b40      	ldr	r3, [pc, #256]	; (8007e34 <USBD_SetConfig+0x118>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d904      	bls.n	8007d42 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f955 	bl	8007fea <USBD_CtlError>
 8007d40:	e075      	b.n	8007e2e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d002      	beq.n	8007d52 <USBD_SetConfig+0x36>
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d023      	beq.n	8007d98 <USBD_SetConfig+0x7c>
 8007d50:	e062      	b.n	8007e18 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007d52:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <USBD_SetConfig+0x118>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01a      	beq.n	8007d90 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007d5a:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <USBD_SetConfig+0x118>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2203      	movs	r2, #3
 8007d68:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d6c:	4b31      	ldr	r3, [pc, #196]	; (8007e34 <USBD_SetConfig+0x118>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fa5d 	bl	8007232 <USBD_SetClassConfig>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d104      	bne.n	8007d88 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f932 	bl	8007fea <USBD_CtlError>
          return;
 8007d86:	e052      	b.n	8007e2e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f9f6 	bl	800817a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007d8e:	e04e      	b.n	8007e2e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f9f2 	bl	800817a <USBD_CtlSendStatus>
      break;
 8007d96:	e04a      	b.n	8007e2e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d98:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <USBD_SetConfig+0x118>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d112      	bne.n	8007dc6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007da8:	4b22      	ldr	r3, [pc, #136]	; (8007e34 <USBD_SetConfig+0x118>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007db2:	4b20      	ldr	r3, [pc, #128]	; (8007e34 <USBD_SetConfig+0x118>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff fa59 	bl	8007270 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f9db 	bl	800817a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007dc4:	e033      	b.n	8007e2e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007dc6:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <USBD_SetConfig+0x118>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d01d      	beq.n	8007e10 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7ff fa47 	bl	8007270 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <USBD_SetConfig+0x118>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <USBD_SetConfig+0x118>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff fa1d 	bl	8007232 <USBD_SetClassConfig>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d104      	bne.n	8007e08 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f8f2 	bl	8007fea <USBD_CtlError>
          return;
 8007e06:	e012      	b.n	8007e2e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f9b6 	bl	800817a <USBD_CtlSendStatus>
      break;
 8007e0e:	e00e      	b.n	8007e2e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f9b2 	bl	800817a <USBD_CtlSendStatus>
      break;
 8007e16:	e00a      	b.n	8007e2e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f8e5 	bl	8007fea <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <USBD_SetConfig+0x118>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff fa22 	bl	8007270 <USBD_ClrClassConfig>
      break;
 8007e2c:	bf00      	nop
    }
  }
}
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	2000029c 	.word	0x2000029c

08007e38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88db      	ldrh	r3, [r3, #6]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d004      	beq.n	8007e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f8cc 	bl	8007fea <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007e52:	e022      	b.n	8007e9a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	dc02      	bgt.n	8007e64 <USBD_GetConfig+0x2c>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dc03      	bgt.n	8007e6a <USBD_GetConfig+0x32>
 8007e62:	e015      	b.n	8007e90 <USBD_GetConfig+0x58>
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d00b      	beq.n	8007e80 <USBD_GetConfig+0x48>
 8007e68:	e012      	b.n	8007e90 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3308      	adds	r3, #8
 8007e74:	2201      	movs	r2, #1
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f920 	bl	80080be <USBD_CtlSendData>
      break;
 8007e7e:	e00c      	b.n	8007e9a <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3304      	adds	r3, #4
 8007e84:	2201      	movs	r2, #1
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f918 	bl	80080be <USBD_CtlSendData>
      break;
 8007e8e:	e004      	b.n	8007e9a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f8a9 	bl	8007fea <USBD_CtlError>
      break;
 8007e98:	bf00      	nop
}
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d81e      	bhi.n	8007ef6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	88db      	ldrh	r3, [r3, #6]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d004      	beq.n	8007eca <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f891 	bl	8007fea <USBD_CtlError>
      break;
 8007ec8:	e01a      	b.n	8007f00 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d005      	beq.n	8007ee6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f043 0202 	orr.w	r2, r3, #2
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	2202      	movs	r2, #2
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f8e5 	bl	80080be <USBD_CtlSendData>
    break;
 8007ef4:	e004      	b.n	8007f00 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f876 	bl	8007fea <USBD_CtlError>
    break;
 8007efe:	bf00      	nop
  }
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d106      	bne.n	8007f28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f929 	bl	800817a <USBD_CtlSendStatus>
  }

}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f40:	3b01      	subs	r3, #1
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d80b      	bhi.n	8007f5e <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	885b      	ldrh	r3, [r3, #2]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d10c      	bne.n	8007f68 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f90f 	bl	800817a <USBD_CtlSendStatus>
    }
    break;
 8007f5c:	e004      	b.n	8007f68 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f842 	bl	8007fea <USBD_CtlError>
    break;
 8007f66:	e000      	b.n	8007f6a <USBD_ClrFeature+0x3a>
    break;
 8007f68:	bf00      	nop
  }
}
 8007f6a:	bf00      	nop
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781a      	ldrb	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	785a      	ldrb	r2, [r3, #1]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	3302      	adds	r3, #2
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	3303      	adds	r3, #3
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	021b      	lsls	r3, r3, #8
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3304      	adds	r3, #4
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	3305      	adds	r3, #5
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	3306      	adds	r3, #6
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	3307      	adds	r3, #7
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	80da      	strh	r2, [r3, #6]

}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bc80      	pop	{r7}
 8007fe8:	4770      	bx	lr

08007fea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007ff4:	2180      	movs	r1, #128	; 0x80
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fc72 	bl	80088e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fc6e 	bl	80088e0 <USBD_LL_StallEP>
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d032      	beq.n	8008088 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f834 	bl	8008090 <USBD_GetLen>
 8008028:	4603      	mov	r3, r0
 800802a:	3301      	adds	r3, #1
 800802c:	b29b      	uxth	r3, r3
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	75fa      	strb	r2, [r7, #23]
 800803c:	461a      	mov	r2, r3
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	4413      	add	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	7812      	ldrb	r2, [r2, #0]
 8008046:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	75fa      	strb	r2, [r7, #23]
 800804e:	461a      	mov	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4413      	add	r3, r2
 8008054:	2203      	movs	r2, #3
 8008056:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008058:	e012      	b.n	8008080 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	60fa      	str	r2, [r7, #12]
 8008060:	7dfa      	ldrb	r2, [r7, #23]
 8008062:	1c51      	adds	r1, r2, #1
 8008064:	75f9      	strb	r1, [r7, #23]
 8008066:	4611      	mov	r1, r2
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	440a      	add	r2, r1
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	75fa      	strb	r2, [r7, #23]
 8008076:	461a      	mov	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4413      	add	r3, r2
 800807c:	2200      	movs	r2, #0
 800807e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e8      	bne.n	800805a <USBD_GetString+0x4e>
    }
  }
}
 8008088:	bf00      	nop
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800809c:	e005      	b.n	80080aa <USBD_GetLen+0x1a>
    {
        len++;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	3301      	adds	r3, #1
 80080a2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3301      	adds	r3, #1
 80080a8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f5      	bne.n	800809e <USBD_GetLen+0xe>
    }

    return len;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr

080080be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	4613      	mov	r3, r2
 80080ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80080d4:	88fa      	ldrh	r2, [r7, #6]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80080e0:	88fb      	ldrh	r3, [r7, #6]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	2100      	movs	r1, #0
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 fc83 	bl	80089f2 <USBD_LL_Transmit>

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	4613      	mov	r3, r2
 8008102:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	2100      	movs	r1, #0
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fc71 	bl	80089f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	4613      	mov	r3, r2
 8008126:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2203      	movs	r2, #3
 800812c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008130:	88fa      	ldrh	r2, [r7, #6]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008140:	88fb      	ldrh	r3, [r7, #6]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	2100      	movs	r1, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fc76 	bl	8008a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	4613      	mov	r3, r2
 8008162:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	2100      	movs	r1, #0
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fc64 	bl	8008a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2204      	movs	r2, #4
 8008186:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800818a:	2300      	movs	r3, #0
 800818c:	2200      	movs	r2, #0
 800818e:	2100      	movs	r1, #0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fc2e 	bl	80089f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2205      	movs	r2, #5
 80081ac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80081b0:	2300      	movs	r3, #0
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fc3e 	bl	8008a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081cc:	2200      	movs	r2, #0
 80081ce:	4912      	ldr	r1, [pc, #72]	; (8008218 <MX_USB_DEVICE_Init+0x50>)
 80081d0:	4812      	ldr	r0, [pc, #72]	; (800821c <MX_USB_DEVICE_Init+0x54>)
 80081d2:	f7fe ffd4 	bl	800717e <USBD_Init>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081dc:	f7f8 fb28 	bl	8000830 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081e0:	490f      	ldr	r1, [pc, #60]	; (8008220 <MX_USB_DEVICE_Init+0x58>)
 80081e2:	480e      	ldr	r0, [pc, #56]	; (800821c <MX_USB_DEVICE_Init+0x54>)
 80081e4:	f7fe fff6 	bl	80071d4 <USBD_RegisterClass>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081ee:	f7f8 fb1f 	bl	8000830 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081f2:	490c      	ldr	r1, [pc, #48]	; (8008224 <MX_USB_DEVICE_Init+0x5c>)
 80081f4:	4809      	ldr	r0, [pc, #36]	; (800821c <MX_USB_DEVICE_Init+0x54>)
 80081f6:	f7fe ff27 	bl	8007048 <USBD_CDC_RegisterInterface>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008200:	f7f8 fb16 	bl	8000830 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008204:	4805      	ldr	r0, [pc, #20]	; (800821c <MX_USB_DEVICE_Init+0x54>)
 8008206:	f7fe fffe 	bl	8007206 <USBD_Start>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008210:	f7f8 fb0e 	bl	8000830 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008214:	bf00      	nop
 8008216:	bd80      	pop	{r7, pc}
 8008218:	2000012c 	.word	0x2000012c
 800821c:	200002a0 	.word	0x200002a0
 8008220:	20000018 	.word	0x20000018
 8008224:	2000011c 	.word	0x2000011c

08008228 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800822c:	2200      	movs	r2, #0
 800822e:	4905      	ldr	r1, [pc, #20]	; (8008244 <CDC_Init_FS+0x1c>)
 8008230:	4805      	ldr	r0, [pc, #20]	; (8008248 <CDC_Init_FS+0x20>)
 8008232:	f7fe ff1f 	bl	8007074 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008236:	4905      	ldr	r1, [pc, #20]	; (800824c <CDC_Init_FS+0x24>)
 8008238:	4803      	ldr	r0, [pc, #12]	; (8008248 <CDC_Init_FS+0x20>)
 800823a:	f7fe ff34 	bl	80070a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800823e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008240:	4618      	mov	r0, r3
 8008242:	bd80      	pop	{r7, pc}
 8008244:	2000093c 	.word	0x2000093c
 8008248:	200002a0 	.word	0x200002a0
 800824c:	2000053c 	.word	0x2000053c

08008250 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008254:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008256:	4618      	mov	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr
	...

08008260 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
 800826c:	4613      	mov	r3, r2
 800826e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	2b23      	cmp	r3, #35	; 0x23
 8008274:	d84a      	bhi.n	800830c <CDC_Control_FS+0xac>
 8008276:	a201      	add	r2, pc, #4	; (adr r2, 800827c <CDC_Control_FS+0x1c>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	0800830d 	.word	0x0800830d
 8008280:	0800830d 	.word	0x0800830d
 8008284:	0800830d 	.word	0x0800830d
 8008288:	0800830d 	.word	0x0800830d
 800828c:	0800830d 	.word	0x0800830d
 8008290:	0800830d 	.word	0x0800830d
 8008294:	0800830d 	.word	0x0800830d
 8008298:	0800830d 	.word	0x0800830d
 800829c:	0800830d 	.word	0x0800830d
 80082a0:	0800830d 	.word	0x0800830d
 80082a4:	0800830d 	.word	0x0800830d
 80082a8:	0800830d 	.word	0x0800830d
 80082ac:	0800830d 	.word	0x0800830d
 80082b0:	0800830d 	.word	0x0800830d
 80082b4:	0800830d 	.word	0x0800830d
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	0800830d 	.word	0x0800830d
 80082c0:	0800830d 	.word	0x0800830d
 80082c4:	0800830d 	.word	0x0800830d
 80082c8:	0800830d 	.word	0x0800830d
 80082cc:	0800830d 	.word	0x0800830d
 80082d0:	0800830d 	.word	0x0800830d
 80082d4:	0800830d 	.word	0x0800830d
 80082d8:	0800830d 	.word	0x0800830d
 80082dc:	0800830d 	.word	0x0800830d
 80082e0:	0800830d 	.word	0x0800830d
 80082e4:	0800830d 	.word	0x0800830d
 80082e8:	0800830d 	.word	0x0800830d
 80082ec:	0800830d 	.word	0x0800830d
 80082f0:	0800830d 	.word	0x0800830d
 80082f4:	0800830d 	.word	0x0800830d
 80082f8:	0800830d 	.word	0x0800830d
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	0800830d 	.word	0x0800830d
 8008304:	0800830d 	.word	0x0800830d
 8008308:	0800830d 	.word	0x0800830d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800830c:	bf00      	nop
  }

  return (USBD_OK);
 800830e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop

0800831c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4805      	ldr	r0, [pc, #20]	; (8008340 <CDC_Receive_FS+0x24>)
 800832a:	f7fe febc 	bl	80070a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800832e:	4804      	ldr	r0, [pc, #16]	; (8008340 <CDC_Receive_FS+0x24>)
 8008330:	f7fe fefb 	bl	800712a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008334:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	200002a0 	.word	0x200002a0

08008344 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008354:	4b0d      	ldr	r3, [pc, #52]	; (800838c <CDC_Transmit_FS+0x48>)
 8008356:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800835a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008366:	2301      	movs	r3, #1
 8008368:	e00b      	b.n	8008382 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800836a:	887b      	ldrh	r3, [r7, #2]
 800836c:	461a      	mov	r2, r3
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4806      	ldr	r0, [pc, #24]	; (800838c <CDC_Transmit_FS+0x48>)
 8008372:	f7fe fe7f 	bl	8007074 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008376:	4805      	ldr	r0, [pc, #20]	; (800838c <CDC_Transmit_FS+0x48>)
 8008378:	f7fe fea8 	bl	80070cc <USBD_CDC_TransmitPacket>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	200002a0 	.word	0x200002a0

08008390 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2212      	movs	r2, #18
 80083a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083a2:	4b03      	ldr	r3, [pc, #12]	; (80083b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000148 	.word	0x20000148

080083b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2204      	movs	r2, #4
 80083c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083c6:	4b03      	ldr	r3, [pc, #12]	; (80083d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	2000015c 	.word	0x2000015c

080083d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	4907      	ldr	r1, [pc, #28]	; (800840c <USBD_FS_ProductStrDescriptor+0x34>)
 80083ee:	4808      	ldr	r0, [pc, #32]	; (8008410 <USBD_FS_ProductStrDescriptor+0x38>)
 80083f0:	f7ff fe0c 	bl	800800c <USBD_GetString>
 80083f4:	e004      	b.n	8008400 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4904      	ldr	r1, [pc, #16]	; (800840c <USBD_FS_ProductStrDescriptor+0x34>)
 80083fa:	4805      	ldr	r0, [pc, #20]	; (8008410 <USBD_FS_ProductStrDescriptor+0x38>)
 80083fc:	f7ff fe06 	bl	800800c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000d3c 	.word	0x20000d3c
 8008410:	080094d0 	.word	0x080094d0

08008414 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	4904      	ldr	r1, [pc, #16]	; (8008434 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008424:	4804      	ldr	r0, [pc, #16]	; (8008438 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008426:	f7ff fdf1 	bl	800800c <USBD_GetString>
  return USBD_StrDesc;
 800842a:	4b02      	ldr	r3, [pc, #8]	; (8008434 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20000d3c 	.word	0x20000d3c
 8008438:	080094e8 	.word	0x080094e8

0800843c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	221a      	movs	r2, #26
 800844c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800844e:	f000 f843 	bl	80084d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008452:	4b02      	ldr	r3, [pc, #8]	; (800845c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000160 	.word	0x20000160

08008460 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	4907      	ldr	r1, [pc, #28]	; (8008494 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008476:	4808      	ldr	r0, [pc, #32]	; (8008498 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008478:	f7ff fdc8 	bl	800800c <USBD_GetString>
 800847c:	e004      	b.n	8008488 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4904      	ldr	r1, [pc, #16]	; (8008494 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008482:	4805      	ldr	r0, [pc, #20]	; (8008498 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008484:	f7ff fdc2 	bl	800800c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000d3c 	.word	0x20000d3c
 8008498:	080094fc 	.word	0x080094fc

0800849c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084a8:	79fb      	ldrb	r3, [r7, #7]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d105      	bne.n	80084ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4907      	ldr	r1, [pc, #28]	; (80084d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084b2:	4808      	ldr	r0, [pc, #32]	; (80084d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084b4:	f7ff fdaa 	bl	800800c <USBD_GetString>
 80084b8:	e004      	b.n	80084c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	4904      	ldr	r1, [pc, #16]	; (80084d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084be:	4805      	ldr	r0, [pc, #20]	; (80084d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084c0:	f7ff fda4 	bl	800800c <USBD_GetString>
  }
  return USBD_StrDesc;
 80084c4:	4b02      	ldr	r3, [pc, #8]	; (80084d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000d3c 	.word	0x20000d3c
 80084d4:	08009508 	.word	0x08009508

080084d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <Get_SerialNum+0x44>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084e4:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <Get_SerialNum+0x48>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084ea:	4b0e      	ldr	r3, [pc, #56]	; (8008524 <Get_SerialNum+0x4c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4413      	add	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084fe:	2208      	movs	r2, #8
 8008500:	4909      	ldr	r1, [pc, #36]	; (8008528 <Get_SerialNum+0x50>)
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f000 f814 	bl	8008530 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008508:	2204      	movs	r2, #4
 800850a:	4908      	ldr	r1, [pc, #32]	; (800852c <Get_SerialNum+0x54>)
 800850c:	68b8      	ldr	r0, [r7, #8]
 800850e:	f000 f80f 	bl	8008530 <IntToUnicode>
  }
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	1ff80050 	.word	0x1ff80050
 8008520:	1ff80054 	.word	0x1ff80054
 8008524:	1ff80058 	.word	0x1ff80058
 8008528:	20000162 	.word	0x20000162
 800852c:	20000172 	.word	0x20000172

08008530 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	4613      	mov	r3, r2
 800853c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
 8008546:	e027      	b.n	8008598 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	0f1b      	lsrs	r3, r3, #28
 800854c:	2b09      	cmp	r3, #9
 800854e:	d80b      	bhi.n	8008568 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	0f1b      	lsrs	r3, r3, #28
 8008554:	b2da      	uxtb	r2, r3
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	4619      	mov	r1, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	440b      	add	r3, r1
 8008560:	3230      	adds	r2, #48	; 0x30
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	e00a      	b.n	800857e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	0f1b      	lsrs	r3, r3, #28
 800856c:	b2da      	uxtb	r2, r3
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	4619      	mov	r1, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	440b      	add	r3, r1
 8008578:	3237      	adds	r2, #55	; 0x37
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	3301      	adds	r3, #1
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	3301      	adds	r3, #1
 8008596:	75fb      	strb	r3, [r7, #23]
 8008598:	7dfa      	ldrb	r2, [r7, #23]
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	429a      	cmp	r2, r3
 800859e:	d3d3      	bcc.n	8008548 <IntToUnicode+0x18>
  }
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr

080085ac <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d106      	bne.n	80085cc <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 80085be:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <HAL_PCDEx_SetConnectionState+0x38>)
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <HAL_PCDEx_SetConnectionState+0x38>)
 80085c4:	f043 0301 	orr.w	r3, r3, #1
 80085c8:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 80085ca:	e005      	b.n	80085d8 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80085cc:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <HAL_PCDEx_SetConnectionState+0x38>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <HAL_PCDEx_SetConnectionState+0x38>)
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	6053      	str	r3, [r2, #4]
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	40010000 	.word	0x40010000

080085e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a0d      	ldr	r2, [pc, #52]	; (800862c <HAL_PCD_MspInit+0x44>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d113      	bne.n	8008622 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085fa:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <HAL_PCD_MspInit+0x48>)
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <HAL_PCD_MspInit+0x48>)
 8008600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008604:	6253      	str	r3, [r2, #36]	; 0x24
 8008606:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <HAL_PCD_MspInit+0x48>)
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008612:	2200      	movs	r2, #0
 8008614:	2100      	movs	r1, #0
 8008616:	2014      	movs	r0, #20
 8008618:	f7f8 fbc1 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800861c:	2014      	movs	r0, #20
 800861e:	f7f8 fbda 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	40005c00 	.word	0x40005c00
 8008630:	40023800 	.word	0x40023800

08008634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f7fe fe23 	bl	8007296 <USBD_LL_SetupStage>
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	440b      	add	r3, r1
 8008678:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	4619      	mov	r1, r3
 8008682:	f7fe fe55 	bl	8007330 <USBD_LL_DataOutStage>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	00db      	lsls	r3, r3, #3
 80086ac:	440b      	add	r3, r1
 80086ae:	333c      	adds	r3, #60	; 0x3c
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7fe feac 	bl	8007412 <USBD_LL_DataInStage>
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe ffb7 	bl	8007644 <USBD_LL_SOF>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d001      	beq.n	80086f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086f2:	f7f8 f89d 	bl	8000830 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086fc:	7bfa      	ldrb	r2, [r7, #15]
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe ff6c 	bl	80075de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe ff25 	bl	800755c <USBD_LL_Reset>
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe ff66 	bl	80075fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008738:	4b04      	ldr	r3, [pc, #16]	; (800874c <HAL_PCD_SuspendCallback+0x30>)
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	4a03      	ldr	r2, [pc, #12]	; (800874c <HAL_PCD_SuspendCallback+0x30>)
 800873e:	f043 0306 	orr.w	r3, r3, #6
 8008742:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	e000ed00 	.word	0xe000ed00

08008750 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe ff60 	bl	8007624 <USBD_LL_Resume>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008774:	4a28      	ldr	r2, [pc, #160]	; (8008818 <USBD_LL_Init+0xac>)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a26      	ldr	r2, [pc, #152]	; (8008818 <USBD_LL_Init+0xac>)
 8008780:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008784:	4b24      	ldr	r3, [pc, #144]	; (8008818 <USBD_LL_Init+0xac>)
 8008786:	4a25      	ldr	r2, [pc, #148]	; (800881c <USBD_LL_Init+0xb0>)
 8008788:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800878a:	4b23      	ldr	r3, [pc, #140]	; (8008818 <USBD_LL_Init+0xac>)
 800878c:	2208      	movs	r2, #8
 800878e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008790:	4b21      	ldr	r3, [pc, #132]	; (8008818 <USBD_LL_Init+0xac>)
 8008792:	2202      	movs	r2, #2
 8008794:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008796:	4b20      	ldr	r3, [pc, #128]	; (8008818 <USBD_LL_Init+0xac>)
 8008798:	2202      	movs	r2, #2
 800879a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800879c:	4b1e      	ldr	r3, [pc, #120]	; (8008818 <USBD_LL_Init+0xac>)
 800879e:	2200      	movs	r2, #0
 80087a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087a2:	4b1d      	ldr	r3, [pc, #116]	; (8008818 <USBD_LL_Init+0xac>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087a8:	481b      	ldr	r0, [pc, #108]	; (8008818 <USBD_LL_Init+0xac>)
 80087aa:	f7f8 fe0b 	bl	80013c4 <HAL_PCD_Init>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087b4:	f7f8 f83c 	bl	8000830 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087be:	2318      	movs	r3, #24
 80087c0:	2200      	movs	r2, #0
 80087c2:	2100      	movs	r1, #0
 80087c4:	f7fa f9e8 	bl	8002b98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087ce:	2358      	movs	r3, #88	; 0x58
 80087d0:	2200      	movs	r2, #0
 80087d2:	2180      	movs	r1, #128	; 0x80
 80087d4:	f7fa f9e0 	bl	8002b98 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087de:	23c0      	movs	r3, #192	; 0xc0
 80087e0:	2200      	movs	r2, #0
 80087e2:	2181      	movs	r1, #129	; 0x81
 80087e4:	f7fa f9d8 	bl	8002b98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087f2:	2200      	movs	r2, #0
 80087f4:	2101      	movs	r1, #1
 80087f6:	f7fa f9cf 	bl	8002b98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008804:	2200      	movs	r2, #0
 8008806:	2182      	movs	r1, #130	; 0x82
 8008808:	f7fa f9c6 	bl	8002b98 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000f3c 	.word	0x20000f3c
 800881c:	40005c00 	.word	0x40005c00

08008820 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008836:	4618      	mov	r0, r3
 8008838:	f7f8 fea2 	bl	8001580 <HAL_PCD_Start>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f944 	bl	8008ad0 <USBD_Get_USB_Status>
 8008848:	4603      	mov	r3, r0
 800884a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884c:	7bbb      	ldrb	r3, [r7, #14]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	461a      	mov	r2, r3
 8008864:	4603      	mov	r3, r0
 8008866:	70fb      	strb	r3, [r7, #3]
 8008868:	460b      	mov	r3, r1
 800886a:	70bb      	strb	r3, [r7, #2]
 800886c:	4613      	mov	r3, r2
 800886e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800887e:	78bb      	ldrb	r3, [r7, #2]
 8008880:	883a      	ldrh	r2, [r7, #0]
 8008882:	78f9      	ldrb	r1, [r7, #3]
 8008884:	f7f8 ffbe 	bl	8001804 <HAL_PCD_EP_Open>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	4618      	mov	r0, r3
 8008890:	f000 f91e 	bl	8008ad0 <USBD_Get_USB_Status>
 8008894:	4603      	mov	r3, r0
 8008896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008898:	7bbb      	ldrb	r3, [r7, #14]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7f9 f805 	bl	80018d0 <HAL_PCD_EP_Close>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 f8ff 	bl	8008ad0 <USBD_Get_USB_Status>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088fa:	78fa      	ldrb	r2, [r7, #3]
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f9 f8c5 	bl	8001a8e <HAL_PCD_EP_SetStall>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 f8e0 	bl	8008ad0 <USBD_Get_USB_Status>
 8008910:	4603      	mov	r3, r0
 8008912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008914:	7bbb      	ldrb	r3, [r7, #14]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	4611      	mov	r1, r2
 800893c:	4618      	mov	r0, r3
 800893e:	f7f9 f8f8 	bl	8001b32 <HAL_PCD_EP_ClrStall>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f8c1 	bl	8008ad0 <USBD_Get_USB_Status>
 800894e:	4603      	mov	r3, r0
 8008950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008952:	7bbb      	ldrb	r3, [r7, #14]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800896e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008974:	2b00      	cmp	r3, #0
 8008976:	da0c      	bge.n	8008992 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897e:	68f9      	ldr	r1, [r7, #12]
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	440b      	add	r3, r1
 800898c:	3302      	adds	r3, #2
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	e00b      	b.n	80089aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008998:	68f9      	ldr	r1, [r7, #12]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	00db      	lsls	r3, r3, #3
 80089a2:	440b      	add	r3, r1
 80089a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr

080089b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80089ce:	78fa      	ldrb	r2, [r7, #3]
 80089d0:	4611      	mov	r1, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7f8 fef1 	bl	80017ba <HAL_PCD_SetAddress>
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 f876 	bl	8008ad0 <USBD_Get_USB_Status>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b086      	sub	sp, #24
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60f8      	str	r0, [r7, #12]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	461a      	mov	r2, r3
 80089fe:	460b      	mov	r3, r1
 8008a00:	72fb      	strb	r3, [r7, #11]
 8008a02:	4613      	mov	r3, r2
 8008a04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a14:	893b      	ldrh	r3, [r7, #8]
 8008a16:	7af9      	ldrb	r1, [r7, #11]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	f7f8 fff5 	bl	8001a08 <HAL_PCD_EP_Transmit>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 f853 	bl	8008ad0 <USBD_Get_USB_Status>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	461a      	mov	r2, r3
 8008a44:	460b      	mov	r3, r1
 8008a46:	72fb      	strb	r3, [r7, #11]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a5a:	893b      	ldrh	r3, [r7, #8]
 8008a5c:	7af9      	ldrb	r1, [r7, #11]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	f7f8 ff7e 	bl	8001960 <HAL_PCD_EP_Receive>
 8008a64:	4603      	mov	r3, r0
 8008a66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f830 	bl	8008ad0 <USBD_Get_USB_Status>
 8008a70:	4603      	mov	r3, r0
 8008a72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a74:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a90:	78fa      	ldrb	r2, [r7, #3]
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7f8 ffa0 	bl	80019da <HAL_PCD_EP_GetRxCount>
 8008a9a:	4603      	mov	r3, r0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008aac:	4b02      	ldr	r3, [pc, #8]	; (8008ab8 <USBD_static_malloc+0x14>)
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr
 8008ab8:	20001228 	.word	0x20001228

08008abc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]

}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
	...

08008ad0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d817      	bhi.n	8008b14 <USBD_Get_USB_Status+0x44>
 8008ae4:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <USBD_Get_USB_Status+0x1c>)
 8008ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aea:	bf00      	nop
 8008aec:	08008afd 	.word	0x08008afd
 8008af0:	08008b03 	.word	0x08008b03
 8008af4:	08008b09 	.word	0x08008b09
 8008af8:	08008b0f 	.word	0x08008b0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
    break;
 8008b00:	e00b      	b.n	8008b1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b02:	2302      	movs	r3, #2
 8008b04:	73fb      	strb	r3, [r7, #15]
    break;
 8008b06:	e008      	b.n	8008b1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0c:	e005      	b.n	8008b1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b0e:	2302      	movs	r3, #2
 8008b10:	73fb      	strb	r3, [r7, #15]
    break;
 8008b12:	e002      	b.n	8008b1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b14:	2302      	movs	r3, #2
 8008b16:	73fb      	strb	r3, [r7, #15]
    break;
 8008b18:	bf00      	nop
  }
  return usb_status;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bc80      	pop	{r7}
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop

08008b28 <siprintf>:
 8008b28:	b40e      	push	{r1, r2, r3}
 8008b2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b2e:	b500      	push	{lr}
 8008b30:	b09c      	sub	sp, #112	; 0x70
 8008b32:	ab1d      	add	r3, sp, #116	; 0x74
 8008b34:	9002      	str	r0, [sp, #8]
 8008b36:	9006      	str	r0, [sp, #24]
 8008b38:	9107      	str	r1, [sp, #28]
 8008b3a:	9104      	str	r1, [sp, #16]
 8008b3c:	4808      	ldr	r0, [pc, #32]	; (8008b60 <siprintf+0x38>)
 8008b3e:	4909      	ldr	r1, [pc, #36]	; (8008b64 <siprintf+0x3c>)
 8008b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b44:	9105      	str	r1, [sp, #20]
 8008b46:	6800      	ldr	r0, [r0, #0]
 8008b48:	a902      	add	r1, sp, #8
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	f000 f98e 	bl	8008e6c <_svfiprintf_r>
 8008b50:	2200      	movs	r2, #0
 8008b52:	9b02      	ldr	r3, [sp, #8]
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	b01c      	add	sp, #112	; 0x70
 8008b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b5c:	b003      	add	sp, #12
 8008b5e:	4770      	bx	lr
 8008b60:	200001c8 	.word	0x200001c8
 8008b64:	ffff0208 	.word	0xffff0208

08008b68 <memset>:
 8008b68:	4603      	mov	r3, r0
 8008b6a:	4402      	add	r2, r0
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d100      	bne.n	8008b72 <memset+0xa>
 8008b70:	4770      	bx	lr
 8008b72:	f803 1b01 	strb.w	r1, [r3], #1
 8008b76:	e7f9      	b.n	8008b6c <memset+0x4>

08008b78 <__errno>:
 8008b78:	4b01      	ldr	r3, [pc, #4]	; (8008b80 <__errno+0x8>)
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	200001c8 	.word	0x200001c8

08008b84 <__libc_init_array>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	2600      	movs	r6, #0
 8008b88:	4d0c      	ldr	r5, [pc, #48]	; (8008bbc <__libc_init_array+0x38>)
 8008b8a:	4c0d      	ldr	r4, [pc, #52]	; (8008bc0 <__libc_init_array+0x3c>)
 8008b8c:	1b64      	subs	r4, r4, r5
 8008b8e:	10a4      	asrs	r4, r4, #2
 8008b90:	42a6      	cmp	r6, r4
 8008b92:	d109      	bne.n	8008ba8 <__libc_init_array+0x24>
 8008b94:	f000 fc7a 	bl	800948c <_init>
 8008b98:	2600      	movs	r6, #0
 8008b9a:	4d0a      	ldr	r5, [pc, #40]	; (8008bc4 <__libc_init_array+0x40>)
 8008b9c:	4c0a      	ldr	r4, [pc, #40]	; (8008bc8 <__libc_init_array+0x44>)
 8008b9e:	1b64      	subs	r4, r4, r5
 8008ba0:	10a4      	asrs	r4, r4, #2
 8008ba2:	42a6      	cmp	r6, r4
 8008ba4:	d105      	bne.n	8008bb2 <__libc_init_array+0x2e>
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bac:	4798      	blx	r3
 8008bae:	3601      	adds	r6, #1
 8008bb0:	e7ee      	b.n	8008b90 <__libc_init_array+0xc>
 8008bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb6:	4798      	blx	r3
 8008bb8:	3601      	adds	r6, #1
 8008bba:	e7f2      	b.n	8008ba2 <__libc_init_array+0x1e>
 8008bbc:	08009578 	.word	0x08009578
 8008bc0:	08009578 	.word	0x08009578
 8008bc4:	08009578 	.word	0x08009578
 8008bc8:	0800957c 	.word	0x0800957c

08008bcc <__retarget_lock_acquire_recursive>:
 8008bcc:	4770      	bx	lr

08008bce <__retarget_lock_release_recursive>:
 8008bce:	4770      	bx	lr

08008bd0 <_free_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d040      	beq.n	8008c5a <_free_r+0x8a>
 8008bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bdc:	1f0c      	subs	r4, r1, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfb8      	it	lt
 8008be2:	18e4      	addlt	r4, r4, r3
 8008be4:	f000 f8dc 	bl	8008da0 <__malloc_lock>
 8008be8:	4a1c      	ldr	r2, [pc, #112]	; (8008c5c <_free_r+0x8c>)
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	b933      	cbnz	r3, 8008bfc <_free_r+0x2c>
 8008bee:	6063      	str	r3, [r4, #4]
 8008bf0:	6014      	str	r4, [r2, #0]
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf8:	f000 b8d8 	b.w	8008dac <__malloc_unlock>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d908      	bls.n	8008c12 <_free_r+0x42>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	1821      	adds	r1, r4, r0
 8008c04:	428b      	cmp	r3, r1
 8008c06:	bf01      	itttt	eq
 8008c08:	6819      	ldreq	r1, [r3, #0]
 8008c0a:	685b      	ldreq	r3, [r3, #4]
 8008c0c:	1809      	addeq	r1, r1, r0
 8008c0e:	6021      	streq	r1, [r4, #0]
 8008c10:	e7ed      	b.n	8008bee <_free_r+0x1e>
 8008c12:	461a      	mov	r2, r3
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	b10b      	cbz	r3, 8008c1c <_free_r+0x4c>
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	d9fa      	bls.n	8008c12 <_free_r+0x42>
 8008c1c:	6811      	ldr	r1, [r2, #0]
 8008c1e:	1850      	adds	r0, r2, r1
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d10b      	bne.n	8008c3c <_free_r+0x6c>
 8008c24:	6820      	ldr	r0, [r4, #0]
 8008c26:	4401      	add	r1, r0
 8008c28:	1850      	adds	r0, r2, r1
 8008c2a:	4283      	cmp	r3, r0
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	d1e0      	bne.n	8008bf2 <_free_r+0x22>
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4408      	add	r0, r1
 8008c36:	6010      	str	r0, [r2, #0]
 8008c38:	6053      	str	r3, [r2, #4]
 8008c3a:	e7da      	b.n	8008bf2 <_free_r+0x22>
 8008c3c:	d902      	bls.n	8008c44 <_free_r+0x74>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	e7d6      	b.n	8008bf2 <_free_r+0x22>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	1821      	adds	r1, r4, r0
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	bf01      	itttt	eq
 8008c4c:	6819      	ldreq	r1, [r3, #0]
 8008c4e:	685b      	ldreq	r3, [r3, #4]
 8008c50:	1809      	addeq	r1, r1, r0
 8008c52:	6021      	streq	r1, [r4, #0]
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	6054      	str	r4, [r2, #4]
 8008c58:	e7cb      	b.n	8008bf2 <_free_r+0x22>
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
 8008c5c:	20001588 	.word	0x20001588

08008c60 <sbrk_aligned>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4e0e      	ldr	r6, [pc, #56]	; (8008c9c <sbrk_aligned+0x3c>)
 8008c64:	460c      	mov	r4, r1
 8008c66:	6831      	ldr	r1, [r6, #0]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	b911      	cbnz	r1, 8008c72 <sbrk_aligned+0x12>
 8008c6c:	f000 fbaa 	bl	80093c4 <_sbrk_r>
 8008c70:	6030      	str	r0, [r6, #0]
 8008c72:	4621      	mov	r1, r4
 8008c74:	4628      	mov	r0, r5
 8008c76:	f000 fba5 	bl	80093c4 <_sbrk_r>
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	d00a      	beq.n	8008c94 <sbrk_aligned+0x34>
 8008c7e:	1cc4      	adds	r4, r0, #3
 8008c80:	f024 0403 	bic.w	r4, r4, #3
 8008c84:	42a0      	cmp	r0, r4
 8008c86:	d007      	beq.n	8008c98 <sbrk_aligned+0x38>
 8008c88:	1a21      	subs	r1, r4, r0
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 fb9a 	bl	80093c4 <_sbrk_r>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d101      	bne.n	8008c98 <sbrk_aligned+0x38>
 8008c94:	f04f 34ff 	mov.w	r4, #4294967295
 8008c98:	4620      	mov	r0, r4
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	2000158c 	.word	0x2000158c

08008ca0 <_malloc_r>:
 8008ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	1ccd      	adds	r5, r1, #3
 8008ca6:	f025 0503 	bic.w	r5, r5, #3
 8008caa:	3508      	adds	r5, #8
 8008cac:	2d0c      	cmp	r5, #12
 8008cae:	bf38      	it	cc
 8008cb0:	250c      	movcc	r5, #12
 8008cb2:	2d00      	cmp	r5, #0
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	db01      	blt.n	8008cbc <_malloc_r+0x1c>
 8008cb8:	42a9      	cmp	r1, r5
 8008cba:	d905      	bls.n	8008cc8 <_malloc_r+0x28>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	2600      	movs	r6, #0
 8008cc0:	603b      	str	r3, [r7, #0]
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d9c <_malloc_r+0xfc>
 8008ccc:	f000 f868 	bl	8008da0 <__malloc_lock>
 8008cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd4:	461c      	mov	r4, r3
 8008cd6:	bb5c      	cbnz	r4, 8008d30 <_malloc_r+0x90>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f7ff ffc0 	bl	8008c60 <sbrk_aligned>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	d155      	bne.n	8008d92 <_malloc_r+0xf2>
 8008ce6:	f8d8 4000 	ldr.w	r4, [r8]
 8008cea:	4626      	mov	r6, r4
 8008cec:	2e00      	cmp	r6, #0
 8008cee:	d145      	bne.n	8008d7c <_malloc_r+0xdc>
 8008cf0:	2c00      	cmp	r4, #0
 8008cf2:	d048      	beq.n	8008d86 <_malloc_r+0xe6>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	eb04 0903 	add.w	r9, r4, r3
 8008cfe:	f000 fb61 	bl	80093c4 <_sbrk_r>
 8008d02:	4581      	cmp	r9, r0
 8008d04:	d13f      	bne.n	8008d86 <_malloc_r+0xe6>
 8008d06:	6821      	ldr	r1, [r4, #0]
 8008d08:	4638      	mov	r0, r7
 8008d0a:	1a6d      	subs	r5, r5, r1
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	f7ff ffa7 	bl	8008c60 <sbrk_aligned>
 8008d12:	3001      	adds	r0, #1
 8008d14:	d037      	beq.n	8008d86 <_malloc_r+0xe6>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	442b      	add	r3, r5
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d038      	beq.n	8008d96 <_malloc_r+0xf6>
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	42a2      	cmp	r2, r4
 8008d28:	d12b      	bne.n	8008d82 <_malloc_r+0xe2>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
 8008d2e:	e00f      	b.n	8008d50 <_malloc_r+0xb0>
 8008d30:	6822      	ldr	r2, [r4, #0]
 8008d32:	1b52      	subs	r2, r2, r5
 8008d34:	d41f      	bmi.n	8008d76 <_malloc_r+0xd6>
 8008d36:	2a0b      	cmp	r2, #11
 8008d38:	d917      	bls.n	8008d6a <_malloc_r+0xca>
 8008d3a:	1961      	adds	r1, r4, r5
 8008d3c:	42a3      	cmp	r3, r4
 8008d3e:	6025      	str	r5, [r4, #0]
 8008d40:	bf18      	it	ne
 8008d42:	6059      	strne	r1, [r3, #4]
 8008d44:	6863      	ldr	r3, [r4, #4]
 8008d46:	bf08      	it	eq
 8008d48:	f8c8 1000 	streq.w	r1, [r8]
 8008d4c:	5162      	str	r2, [r4, r5]
 8008d4e:	604b      	str	r3, [r1, #4]
 8008d50:	4638      	mov	r0, r7
 8008d52:	f104 060b 	add.w	r6, r4, #11
 8008d56:	f000 f829 	bl	8008dac <__malloc_unlock>
 8008d5a:	f026 0607 	bic.w	r6, r6, #7
 8008d5e:	1d23      	adds	r3, r4, #4
 8008d60:	1af2      	subs	r2, r6, r3
 8008d62:	d0ae      	beq.n	8008cc2 <_malloc_r+0x22>
 8008d64:	1b9b      	subs	r3, r3, r6
 8008d66:	50a3      	str	r3, [r4, r2]
 8008d68:	e7ab      	b.n	8008cc2 <_malloc_r+0x22>
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	6862      	ldr	r2, [r4, #4]
 8008d6e:	d1dd      	bne.n	8008d2c <_malloc_r+0x8c>
 8008d70:	f8c8 2000 	str.w	r2, [r8]
 8008d74:	e7ec      	b.n	8008d50 <_malloc_r+0xb0>
 8008d76:	4623      	mov	r3, r4
 8008d78:	6864      	ldr	r4, [r4, #4]
 8008d7a:	e7ac      	b.n	8008cd6 <_malloc_r+0x36>
 8008d7c:	4634      	mov	r4, r6
 8008d7e:	6876      	ldr	r6, [r6, #4]
 8008d80:	e7b4      	b.n	8008cec <_malloc_r+0x4c>
 8008d82:	4613      	mov	r3, r2
 8008d84:	e7cc      	b.n	8008d20 <_malloc_r+0x80>
 8008d86:	230c      	movs	r3, #12
 8008d88:	4638      	mov	r0, r7
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	f000 f80e 	bl	8008dac <__malloc_unlock>
 8008d90:	e797      	b.n	8008cc2 <_malloc_r+0x22>
 8008d92:	6025      	str	r5, [r4, #0]
 8008d94:	e7dc      	b.n	8008d50 <_malloc_r+0xb0>
 8008d96:	605b      	str	r3, [r3, #4]
 8008d98:	deff      	udf	#255	; 0xff
 8008d9a:	bf00      	nop
 8008d9c:	20001588 	.word	0x20001588

08008da0 <__malloc_lock>:
 8008da0:	4801      	ldr	r0, [pc, #4]	; (8008da8 <__malloc_lock+0x8>)
 8008da2:	f7ff bf13 	b.w	8008bcc <__retarget_lock_acquire_recursive>
 8008da6:	bf00      	nop
 8008da8:	20001584 	.word	0x20001584

08008dac <__malloc_unlock>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__malloc_unlock+0x8>)
 8008dae:	f7ff bf0e 	b.w	8008bce <__retarget_lock_release_recursive>
 8008db2:	bf00      	nop
 8008db4:	20001584 	.word	0x20001584

08008db8 <__ssputs_r>:
 8008db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbc:	461f      	mov	r7, r3
 8008dbe:	688e      	ldr	r6, [r1, #8]
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	42be      	cmp	r6, r7
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	4690      	mov	r8, r2
 8008dc8:	680b      	ldr	r3, [r1, #0]
 8008dca:	d82c      	bhi.n	8008e26 <__ssputs_r+0x6e>
 8008dcc:	898a      	ldrh	r2, [r1, #12]
 8008dce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dd2:	d026      	beq.n	8008e22 <__ssputs_r+0x6a>
 8008dd4:	6965      	ldr	r5, [r4, #20]
 8008dd6:	6909      	ldr	r1, [r1, #16]
 8008dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ddc:	eba3 0901 	sub.w	r9, r3, r1
 8008de0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008de4:	1c7b      	adds	r3, r7, #1
 8008de6:	444b      	add	r3, r9
 8008de8:	106d      	asrs	r5, r5, #1
 8008dea:	429d      	cmp	r5, r3
 8008dec:	bf38      	it	cc
 8008dee:	461d      	movcc	r5, r3
 8008df0:	0553      	lsls	r3, r2, #21
 8008df2:	d527      	bpl.n	8008e44 <__ssputs_r+0x8c>
 8008df4:	4629      	mov	r1, r5
 8008df6:	f7ff ff53 	bl	8008ca0 <_malloc_r>
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	b360      	cbz	r0, 8008e58 <__ssputs_r+0xa0>
 8008dfe:	464a      	mov	r2, r9
 8008e00:	6921      	ldr	r1, [r4, #16]
 8008e02:	f000 fafd 	bl	8009400 <memcpy>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	6126      	str	r6, [r4, #16]
 8008e14:	444e      	add	r6, r9
 8008e16:	6026      	str	r6, [r4, #0]
 8008e18:	463e      	mov	r6, r7
 8008e1a:	6165      	str	r5, [r4, #20]
 8008e1c:	eba5 0509 	sub.w	r5, r5, r9
 8008e20:	60a5      	str	r5, [r4, #8]
 8008e22:	42be      	cmp	r6, r7
 8008e24:	d900      	bls.n	8008e28 <__ssputs_r+0x70>
 8008e26:	463e      	mov	r6, r7
 8008e28:	4632      	mov	r2, r6
 8008e2a:	4641      	mov	r1, r8
 8008e2c:	6820      	ldr	r0, [r4, #0]
 8008e2e:	f000 faaf 	bl	8009390 <memmove>
 8008e32:	2000      	movs	r0, #0
 8008e34:	68a3      	ldr	r3, [r4, #8]
 8008e36:	1b9b      	subs	r3, r3, r6
 8008e38:	60a3      	str	r3, [r4, #8]
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	4433      	add	r3, r6
 8008e3e:	6023      	str	r3, [r4, #0]
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	462a      	mov	r2, r5
 8008e46:	f000 fae9 	bl	800941c <_realloc_r>
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d1e0      	bne.n	8008e12 <__ssputs_r+0x5a>
 8008e50:	4650      	mov	r0, sl
 8008e52:	6921      	ldr	r1, [r4, #16]
 8008e54:	f7ff febc 	bl	8008bd0 <_free_r>
 8008e58:	230c      	movs	r3, #12
 8008e5a:	f8ca 3000 	str.w	r3, [sl]
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	e7e9      	b.n	8008e40 <__ssputs_r+0x88>

08008e6c <_svfiprintf_r>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	4698      	mov	r8, r3
 8008e72:	898b      	ldrh	r3, [r1, #12]
 8008e74:	4607      	mov	r7, r0
 8008e76:	061b      	lsls	r3, r3, #24
 8008e78:	460d      	mov	r5, r1
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	b09d      	sub	sp, #116	; 0x74
 8008e7e:	d50e      	bpl.n	8008e9e <_svfiprintf_r+0x32>
 8008e80:	690b      	ldr	r3, [r1, #16]
 8008e82:	b963      	cbnz	r3, 8008e9e <_svfiprintf_r+0x32>
 8008e84:	2140      	movs	r1, #64	; 0x40
 8008e86:	f7ff ff0b 	bl	8008ca0 <_malloc_r>
 8008e8a:	6028      	str	r0, [r5, #0]
 8008e8c:	6128      	str	r0, [r5, #16]
 8008e8e:	b920      	cbnz	r0, 8008e9a <_svfiprintf_r+0x2e>
 8008e90:	230c      	movs	r3, #12
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	e0d0      	b.n	800903c <_svfiprintf_r+0x1d0>
 8008e9a:	2340      	movs	r3, #64	; 0x40
 8008e9c:	616b      	str	r3, [r5, #20]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea2:	2320      	movs	r3, #32
 8008ea4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ea8:	2330      	movs	r3, #48	; 0x30
 8008eaa:	f04f 0901 	mov.w	r9, #1
 8008eae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009054 <_svfiprintf_r+0x1e8>
 8008eb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eba:	4623      	mov	r3, r4
 8008ebc:	469a      	mov	sl, r3
 8008ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec2:	b10a      	cbz	r2, 8008ec8 <_svfiprintf_r+0x5c>
 8008ec4:	2a25      	cmp	r2, #37	; 0x25
 8008ec6:	d1f9      	bne.n	8008ebc <_svfiprintf_r+0x50>
 8008ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ecc:	d00b      	beq.n	8008ee6 <_svfiprintf_r+0x7a>
 8008ece:	465b      	mov	r3, fp
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	f7ff ff6f 	bl	8008db8 <__ssputs_r>
 8008eda:	3001      	adds	r0, #1
 8008edc:	f000 80a9 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee2:	445a      	add	r2, fp
 8008ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 80a1 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008efa:	f10a 0a01 	add.w	sl, sl, #1
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	9307      	str	r3, [sp, #28]
 8008f02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f06:	931a      	str	r3, [sp, #104]	; 0x68
 8008f08:	4654      	mov	r4, sl
 8008f0a:	2205      	movs	r2, #5
 8008f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f10:	4850      	ldr	r0, [pc, #320]	; (8009054 <_svfiprintf_r+0x1e8>)
 8008f12:	f000 fa67 	bl	80093e4 <memchr>
 8008f16:	9a04      	ldr	r2, [sp, #16]
 8008f18:	b9d8      	cbnz	r0, 8008f52 <_svfiprintf_r+0xe6>
 8008f1a:	06d0      	lsls	r0, r2, #27
 8008f1c:	bf44      	itt	mi
 8008f1e:	2320      	movmi	r3, #32
 8008f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f24:	0711      	lsls	r1, r2, #28
 8008f26:	bf44      	itt	mi
 8008f28:	232b      	movmi	r3, #43	; 0x2b
 8008f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f32:	2b2a      	cmp	r3, #42	; 0x2a
 8008f34:	d015      	beq.n	8008f62 <_svfiprintf_r+0xf6>
 8008f36:	4654      	mov	r4, sl
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f04f 0c0a 	mov.w	ip, #10
 8008f3e:	9a07      	ldr	r2, [sp, #28]
 8008f40:	4621      	mov	r1, r4
 8008f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f46:	3b30      	subs	r3, #48	; 0x30
 8008f48:	2b09      	cmp	r3, #9
 8008f4a:	d94d      	bls.n	8008fe8 <_svfiprintf_r+0x17c>
 8008f4c:	b1b0      	cbz	r0, 8008f7c <_svfiprintf_r+0x110>
 8008f4e:	9207      	str	r2, [sp, #28]
 8008f50:	e014      	b.n	8008f7c <_svfiprintf_r+0x110>
 8008f52:	eba0 0308 	sub.w	r3, r0, r8
 8008f56:	fa09 f303 	lsl.w	r3, r9, r3
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	46a2      	mov	sl, r4
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	e7d2      	b.n	8008f08 <_svfiprintf_r+0x9c>
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	1d19      	adds	r1, r3, #4
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	9103      	str	r1, [sp, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bfbb      	ittet	lt
 8008f6e:	425b      	neglt	r3, r3
 8008f70:	f042 0202 	orrlt.w	r2, r2, #2
 8008f74:	9307      	strge	r3, [sp, #28]
 8008f76:	9307      	strlt	r3, [sp, #28]
 8008f78:	bfb8      	it	lt
 8008f7a:	9204      	strlt	r2, [sp, #16]
 8008f7c:	7823      	ldrb	r3, [r4, #0]
 8008f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f80:	d10c      	bne.n	8008f9c <_svfiprintf_r+0x130>
 8008f82:	7863      	ldrb	r3, [r4, #1]
 8008f84:	2b2a      	cmp	r3, #42	; 0x2a
 8008f86:	d134      	bne.n	8008ff2 <_svfiprintf_r+0x186>
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	3402      	adds	r4, #2
 8008f8c:	1d1a      	adds	r2, r3, #4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	9203      	str	r2, [sp, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bfb8      	it	lt
 8008f96:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009058 <_svfiprintf_r+0x1ec>
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	7821      	ldrb	r1, [r4, #0]
 8008fa6:	f000 fa1d 	bl	80093e4 <memchr>
 8008faa:	b138      	cbz	r0, 8008fbc <_svfiprintf_r+0x150>
 8008fac:	2240      	movs	r2, #64	; 0x40
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	eba0 000a 	sub.w	r0, r0, sl
 8008fb4:	4082      	lsls	r2, r0
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc0:	2206      	movs	r2, #6
 8008fc2:	4826      	ldr	r0, [pc, #152]	; (800905c <_svfiprintf_r+0x1f0>)
 8008fc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fc8:	f000 fa0c 	bl	80093e4 <memchr>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d038      	beq.n	8009042 <_svfiprintf_r+0x1d6>
 8008fd0:	4b23      	ldr	r3, [pc, #140]	; (8009060 <_svfiprintf_r+0x1f4>)
 8008fd2:	bb1b      	cbnz	r3, 800901c <_svfiprintf_r+0x1b0>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	3307      	adds	r3, #7
 8008fd8:	f023 0307 	bic.w	r3, r3, #7
 8008fdc:	3308      	adds	r3, #8
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe2:	4433      	add	r3, r6
 8008fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe6:	e768      	b.n	8008eba <_svfiprintf_r+0x4e>
 8008fe8:	460c      	mov	r4, r1
 8008fea:	2001      	movs	r0, #1
 8008fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff0:	e7a6      	b.n	8008f40 <_svfiprintf_r+0xd4>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f04f 0c0a 	mov.w	ip, #10
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	3401      	adds	r4, #1
 8008ffc:	9305      	str	r3, [sp, #20]
 8008ffe:	4620      	mov	r0, r4
 8009000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009004:	3a30      	subs	r2, #48	; 0x30
 8009006:	2a09      	cmp	r2, #9
 8009008:	d903      	bls.n	8009012 <_svfiprintf_r+0x1a6>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c6      	beq.n	8008f9c <_svfiprintf_r+0x130>
 800900e:	9105      	str	r1, [sp, #20]
 8009010:	e7c4      	b.n	8008f9c <_svfiprintf_r+0x130>
 8009012:	4604      	mov	r4, r0
 8009014:	2301      	movs	r3, #1
 8009016:	fb0c 2101 	mla	r1, ip, r1, r2
 800901a:	e7f0      	b.n	8008ffe <_svfiprintf_r+0x192>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4638      	mov	r0, r7
 8009024:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <_svfiprintf_r+0x1f8>)
 8009026:	a904      	add	r1, sp, #16
 8009028:	f3af 8000 	nop.w
 800902c:	1c42      	adds	r2, r0, #1
 800902e:	4606      	mov	r6, r0
 8009030:	d1d6      	bne.n	8008fe0 <_svfiprintf_r+0x174>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	065b      	lsls	r3, r3, #25
 8009036:	f53f af2d 	bmi.w	8008e94 <_svfiprintf_r+0x28>
 800903a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800903c:	b01d      	add	sp, #116	; 0x74
 800903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009042:	ab03      	add	r3, sp, #12
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	462a      	mov	r2, r5
 8009048:	4638      	mov	r0, r7
 800904a:	4b06      	ldr	r3, [pc, #24]	; (8009064 <_svfiprintf_r+0x1f8>)
 800904c:	a904      	add	r1, sp, #16
 800904e:	f000 f87d 	bl	800914c <_printf_i>
 8009052:	e7eb      	b.n	800902c <_svfiprintf_r+0x1c0>
 8009054:	0800953c 	.word	0x0800953c
 8009058:	08009542 	.word	0x08009542
 800905c:	08009546 	.word	0x08009546
 8009060:	00000000 	.word	0x00000000
 8009064:	08008db9 	.word	0x08008db9

08009068 <_printf_common>:
 8009068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800906c:	4616      	mov	r6, r2
 800906e:	4699      	mov	r9, r3
 8009070:	688a      	ldr	r2, [r1, #8]
 8009072:	690b      	ldr	r3, [r1, #16]
 8009074:	4607      	mov	r7, r0
 8009076:	4293      	cmp	r3, r2
 8009078:	bfb8      	it	lt
 800907a:	4613      	movlt	r3, r2
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009082:	460c      	mov	r4, r1
 8009084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009088:	b10a      	cbz	r2, 800908e <_printf_common+0x26>
 800908a:	3301      	adds	r3, #1
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	0699      	lsls	r1, r3, #26
 8009092:	bf42      	ittt	mi
 8009094:	6833      	ldrmi	r3, [r6, #0]
 8009096:	3302      	addmi	r3, #2
 8009098:	6033      	strmi	r3, [r6, #0]
 800909a:	6825      	ldr	r5, [r4, #0]
 800909c:	f015 0506 	ands.w	r5, r5, #6
 80090a0:	d106      	bne.n	80090b0 <_printf_common+0x48>
 80090a2:	f104 0a19 	add.w	sl, r4, #25
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	6832      	ldr	r2, [r6, #0]
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dc2b      	bgt.n	8009108 <_printf_common+0xa0>
 80090b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090b4:	1e13      	subs	r3, r2, #0
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	0692      	lsls	r2, r2, #26
 80090be:	d430      	bmi.n	8009122 <_printf_common+0xba>
 80090c0:	4649      	mov	r1, r9
 80090c2:	4638      	mov	r0, r7
 80090c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d023      	beq.n	8009116 <_printf_common+0xae>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	6922      	ldr	r2, [r4, #16]
 80090d2:	f003 0306 	and.w	r3, r3, #6
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	bf14      	ite	ne
 80090da:	2500      	movne	r5, #0
 80090dc:	6833      	ldreq	r3, [r6, #0]
 80090de:	f04f 0600 	mov.w	r6, #0
 80090e2:	bf08      	it	eq
 80090e4:	68e5      	ldreq	r5, [r4, #12]
 80090e6:	f104 041a 	add.w	r4, r4, #26
 80090ea:	bf08      	it	eq
 80090ec:	1aed      	subeq	r5, r5, r3
 80090ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80090f2:	bf08      	it	eq
 80090f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f8:	4293      	cmp	r3, r2
 80090fa:	bfc4      	itt	gt
 80090fc:	1a9b      	subgt	r3, r3, r2
 80090fe:	18ed      	addgt	r5, r5, r3
 8009100:	42b5      	cmp	r5, r6
 8009102:	d11a      	bne.n	800913a <_printf_common+0xd2>
 8009104:	2000      	movs	r0, #0
 8009106:	e008      	b.n	800911a <_printf_common+0xb2>
 8009108:	2301      	movs	r3, #1
 800910a:	4652      	mov	r2, sl
 800910c:	4649      	mov	r1, r9
 800910e:	4638      	mov	r0, r7
 8009110:	47c0      	blx	r8
 8009112:	3001      	adds	r0, #1
 8009114:	d103      	bne.n	800911e <_printf_common+0xb6>
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911e:	3501      	adds	r5, #1
 8009120:	e7c1      	b.n	80090a6 <_printf_common+0x3e>
 8009122:	2030      	movs	r0, #48	; 0x30
 8009124:	18e1      	adds	r1, r4, r3
 8009126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009130:	4422      	add	r2, r4
 8009132:	3302      	adds	r3, #2
 8009134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009138:	e7c2      	b.n	80090c0 <_printf_common+0x58>
 800913a:	2301      	movs	r3, #1
 800913c:	4622      	mov	r2, r4
 800913e:	4649      	mov	r1, r9
 8009140:	4638      	mov	r0, r7
 8009142:	47c0      	blx	r8
 8009144:	3001      	adds	r0, #1
 8009146:	d0e6      	beq.n	8009116 <_printf_common+0xae>
 8009148:	3601      	adds	r6, #1
 800914a:	e7d9      	b.n	8009100 <_printf_common+0x98>

0800914c <_printf_i>:
 800914c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009150:	7e0f      	ldrb	r7, [r1, #24]
 8009152:	4691      	mov	r9, r2
 8009154:	2f78      	cmp	r7, #120	; 0x78
 8009156:	4680      	mov	r8, r0
 8009158:	460c      	mov	r4, r1
 800915a:	469a      	mov	sl, r3
 800915c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800915e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009162:	d807      	bhi.n	8009174 <_printf_i+0x28>
 8009164:	2f62      	cmp	r7, #98	; 0x62
 8009166:	d80a      	bhi.n	800917e <_printf_i+0x32>
 8009168:	2f00      	cmp	r7, #0
 800916a:	f000 80d5 	beq.w	8009318 <_printf_i+0x1cc>
 800916e:	2f58      	cmp	r7, #88	; 0x58
 8009170:	f000 80c1 	beq.w	80092f6 <_printf_i+0x1aa>
 8009174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800917c:	e03a      	b.n	80091f4 <_printf_i+0xa8>
 800917e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009182:	2b15      	cmp	r3, #21
 8009184:	d8f6      	bhi.n	8009174 <_printf_i+0x28>
 8009186:	a101      	add	r1, pc, #4	; (adr r1, 800918c <_printf_i+0x40>)
 8009188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800918c:	080091e5 	.word	0x080091e5
 8009190:	080091f9 	.word	0x080091f9
 8009194:	08009175 	.word	0x08009175
 8009198:	08009175 	.word	0x08009175
 800919c:	08009175 	.word	0x08009175
 80091a0:	08009175 	.word	0x08009175
 80091a4:	080091f9 	.word	0x080091f9
 80091a8:	08009175 	.word	0x08009175
 80091ac:	08009175 	.word	0x08009175
 80091b0:	08009175 	.word	0x08009175
 80091b4:	08009175 	.word	0x08009175
 80091b8:	080092ff 	.word	0x080092ff
 80091bc:	08009225 	.word	0x08009225
 80091c0:	080092b9 	.word	0x080092b9
 80091c4:	08009175 	.word	0x08009175
 80091c8:	08009175 	.word	0x08009175
 80091cc:	08009321 	.word	0x08009321
 80091d0:	08009175 	.word	0x08009175
 80091d4:	08009225 	.word	0x08009225
 80091d8:	08009175 	.word	0x08009175
 80091dc:	08009175 	.word	0x08009175
 80091e0:	080092c1 	.word	0x080092c1
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	1d1a      	adds	r2, r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	602a      	str	r2, [r5, #0]
 80091ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091f4:	2301      	movs	r3, #1
 80091f6:	e0a0      	b.n	800933a <_printf_i+0x1ee>
 80091f8:	6820      	ldr	r0, [r4, #0]
 80091fa:	682b      	ldr	r3, [r5, #0]
 80091fc:	0607      	lsls	r7, r0, #24
 80091fe:	f103 0104 	add.w	r1, r3, #4
 8009202:	6029      	str	r1, [r5, #0]
 8009204:	d501      	bpl.n	800920a <_printf_i+0xbe>
 8009206:	681e      	ldr	r6, [r3, #0]
 8009208:	e003      	b.n	8009212 <_printf_i+0xc6>
 800920a:	0646      	lsls	r6, r0, #25
 800920c:	d5fb      	bpl.n	8009206 <_printf_i+0xba>
 800920e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009212:	2e00      	cmp	r6, #0
 8009214:	da03      	bge.n	800921e <_printf_i+0xd2>
 8009216:	232d      	movs	r3, #45	; 0x2d
 8009218:	4276      	negs	r6, r6
 800921a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800921e:	230a      	movs	r3, #10
 8009220:	4859      	ldr	r0, [pc, #356]	; (8009388 <_printf_i+0x23c>)
 8009222:	e012      	b.n	800924a <_printf_i+0xfe>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	6820      	ldr	r0, [r4, #0]
 8009228:	1d19      	adds	r1, r3, #4
 800922a:	6029      	str	r1, [r5, #0]
 800922c:	0605      	lsls	r5, r0, #24
 800922e:	d501      	bpl.n	8009234 <_printf_i+0xe8>
 8009230:	681e      	ldr	r6, [r3, #0]
 8009232:	e002      	b.n	800923a <_printf_i+0xee>
 8009234:	0641      	lsls	r1, r0, #25
 8009236:	d5fb      	bpl.n	8009230 <_printf_i+0xe4>
 8009238:	881e      	ldrh	r6, [r3, #0]
 800923a:	2f6f      	cmp	r7, #111	; 0x6f
 800923c:	bf0c      	ite	eq
 800923e:	2308      	moveq	r3, #8
 8009240:	230a      	movne	r3, #10
 8009242:	4851      	ldr	r0, [pc, #324]	; (8009388 <_printf_i+0x23c>)
 8009244:	2100      	movs	r1, #0
 8009246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800924a:	6865      	ldr	r5, [r4, #4]
 800924c:	2d00      	cmp	r5, #0
 800924e:	bfa8      	it	ge
 8009250:	6821      	ldrge	r1, [r4, #0]
 8009252:	60a5      	str	r5, [r4, #8]
 8009254:	bfa4      	itt	ge
 8009256:	f021 0104 	bicge.w	r1, r1, #4
 800925a:	6021      	strge	r1, [r4, #0]
 800925c:	b90e      	cbnz	r6, 8009262 <_printf_i+0x116>
 800925e:	2d00      	cmp	r5, #0
 8009260:	d04b      	beq.n	80092fa <_printf_i+0x1ae>
 8009262:	4615      	mov	r5, r2
 8009264:	fbb6 f1f3 	udiv	r1, r6, r3
 8009268:	fb03 6711 	mls	r7, r3, r1, r6
 800926c:	5dc7      	ldrb	r7, [r0, r7]
 800926e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009272:	4637      	mov	r7, r6
 8009274:	42bb      	cmp	r3, r7
 8009276:	460e      	mov	r6, r1
 8009278:	d9f4      	bls.n	8009264 <_printf_i+0x118>
 800927a:	2b08      	cmp	r3, #8
 800927c:	d10b      	bne.n	8009296 <_printf_i+0x14a>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	07de      	lsls	r6, r3, #31
 8009282:	d508      	bpl.n	8009296 <_printf_i+0x14a>
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	6861      	ldr	r1, [r4, #4]
 8009288:	4299      	cmp	r1, r3
 800928a:	bfde      	ittt	le
 800928c:	2330      	movle	r3, #48	; 0x30
 800928e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009292:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009296:	1b52      	subs	r2, r2, r5
 8009298:	6122      	str	r2, [r4, #16]
 800929a:	464b      	mov	r3, r9
 800929c:	4621      	mov	r1, r4
 800929e:	4640      	mov	r0, r8
 80092a0:	f8cd a000 	str.w	sl, [sp]
 80092a4:	aa03      	add	r2, sp, #12
 80092a6:	f7ff fedf 	bl	8009068 <_printf_common>
 80092aa:	3001      	adds	r0, #1
 80092ac:	d14a      	bne.n	8009344 <_printf_i+0x1f8>
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295
 80092b2:	b004      	add	sp, #16
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	f043 0320 	orr.w	r3, r3, #32
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	2778      	movs	r7, #120	; 0x78
 80092c2:	4832      	ldr	r0, [pc, #200]	; (800938c <_printf_i+0x240>)
 80092c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	6829      	ldr	r1, [r5, #0]
 80092cc:	061f      	lsls	r7, r3, #24
 80092ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80092d2:	d402      	bmi.n	80092da <_printf_i+0x18e>
 80092d4:	065f      	lsls	r7, r3, #25
 80092d6:	bf48      	it	mi
 80092d8:	b2b6      	uxthmi	r6, r6
 80092da:	07df      	lsls	r7, r3, #31
 80092dc:	bf48      	it	mi
 80092de:	f043 0320 	orrmi.w	r3, r3, #32
 80092e2:	6029      	str	r1, [r5, #0]
 80092e4:	bf48      	it	mi
 80092e6:	6023      	strmi	r3, [r4, #0]
 80092e8:	b91e      	cbnz	r6, 80092f2 <_printf_i+0x1a6>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	f023 0320 	bic.w	r3, r3, #32
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	2310      	movs	r3, #16
 80092f4:	e7a6      	b.n	8009244 <_printf_i+0xf8>
 80092f6:	4824      	ldr	r0, [pc, #144]	; (8009388 <_printf_i+0x23c>)
 80092f8:	e7e4      	b.n	80092c4 <_printf_i+0x178>
 80092fa:	4615      	mov	r5, r2
 80092fc:	e7bd      	b.n	800927a <_printf_i+0x12e>
 80092fe:	682b      	ldr	r3, [r5, #0]
 8009300:	6826      	ldr	r6, [r4, #0]
 8009302:	1d18      	adds	r0, r3, #4
 8009304:	6961      	ldr	r1, [r4, #20]
 8009306:	6028      	str	r0, [r5, #0]
 8009308:	0635      	lsls	r5, r6, #24
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	d501      	bpl.n	8009312 <_printf_i+0x1c6>
 800930e:	6019      	str	r1, [r3, #0]
 8009310:	e002      	b.n	8009318 <_printf_i+0x1cc>
 8009312:	0670      	lsls	r0, r6, #25
 8009314:	d5fb      	bpl.n	800930e <_printf_i+0x1c2>
 8009316:	8019      	strh	r1, [r3, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	4615      	mov	r5, r2
 800931c:	6123      	str	r3, [r4, #16]
 800931e:	e7bc      	b.n	800929a <_printf_i+0x14e>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	2100      	movs	r1, #0
 8009324:	1d1a      	adds	r2, r3, #4
 8009326:	602a      	str	r2, [r5, #0]
 8009328:	681d      	ldr	r5, [r3, #0]
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	4628      	mov	r0, r5
 800932e:	f000 f859 	bl	80093e4 <memchr>
 8009332:	b108      	cbz	r0, 8009338 <_printf_i+0x1ec>
 8009334:	1b40      	subs	r0, r0, r5
 8009336:	6060      	str	r0, [r4, #4]
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	2300      	movs	r3, #0
 800933e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009342:	e7aa      	b.n	800929a <_printf_i+0x14e>
 8009344:	462a      	mov	r2, r5
 8009346:	4649      	mov	r1, r9
 8009348:	4640      	mov	r0, r8
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	47d0      	blx	sl
 800934e:	3001      	adds	r0, #1
 8009350:	d0ad      	beq.n	80092ae <_printf_i+0x162>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	079b      	lsls	r3, r3, #30
 8009356:	d413      	bmi.n	8009380 <_printf_i+0x234>
 8009358:	68e0      	ldr	r0, [r4, #12]
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	4298      	cmp	r0, r3
 800935e:	bfb8      	it	lt
 8009360:	4618      	movlt	r0, r3
 8009362:	e7a6      	b.n	80092b2 <_printf_i+0x166>
 8009364:	2301      	movs	r3, #1
 8009366:	4632      	mov	r2, r6
 8009368:	4649      	mov	r1, r9
 800936a:	4640      	mov	r0, r8
 800936c:	47d0      	blx	sl
 800936e:	3001      	adds	r0, #1
 8009370:	d09d      	beq.n	80092ae <_printf_i+0x162>
 8009372:	3501      	adds	r5, #1
 8009374:	68e3      	ldr	r3, [r4, #12]
 8009376:	9903      	ldr	r1, [sp, #12]
 8009378:	1a5b      	subs	r3, r3, r1
 800937a:	42ab      	cmp	r3, r5
 800937c:	dcf2      	bgt.n	8009364 <_printf_i+0x218>
 800937e:	e7eb      	b.n	8009358 <_printf_i+0x20c>
 8009380:	2500      	movs	r5, #0
 8009382:	f104 0619 	add.w	r6, r4, #25
 8009386:	e7f5      	b.n	8009374 <_printf_i+0x228>
 8009388:	0800954d 	.word	0x0800954d
 800938c:	0800955e 	.word	0x0800955e

08009390 <memmove>:
 8009390:	4288      	cmp	r0, r1
 8009392:	b510      	push	{r4, lr}
 8009394:	eb01 0402 	add.w	r4, r1, r2
 8009398:	d902      	bls.n	80093a0 <memmove+0x10>
 800939a:	4284      	cmp	r4, r0
 800939c:	4623      	mov	r3, r4
 800939e:	d807      	bhi.n	80093b0 <memmove+0x20>
 80093a0:	1e43      	subs	r3, r0, #1
 80093a2:	42a1      	cmp	r1, r4
 80093a4:	d008      	beq.n	80093b8 <memmove+0x28>
 80093a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ae:	e7f8      	b.n	80093a2 <memmove+0x12>
 80093b0:	4601      	mov	r1, r0
 80093b2:	4402      	add	r2, r0
 80093b4:	428a      	cmp	r2, r1
 80093b6:	d100      	bne.n	80093ba <memmove+0x2a>
 80093b8:	bd10      	pop	{r4, pc}
 80093ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093c2:	e7f7      	b.n	80093b4 <memmove+0x24>

080093c4 <_sbrk_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	2300      	movs	r3, #0
 80093c8:	4d05      	ldr	r5, [pc, #20]	; (80093e0 <_sbrk_r+0x1c>)
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	602b      	str	r3, [r5, #0]
 80093d0:	f7f7 fb1c 	bl	8000a0c <_sbrk>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_sbrk_r+0x1a>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	b103      	cbz	r3, 80093de <_sbrk_r+0x1a>
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	20001580 	.word	0x20001580

080093e4 <memchr>:
 80093e4:	4603      	mov	r3, r0
 80093e6:	b510      	push	{r4, lr}
 80093e8:	b2c9      	uxtb	r1, r1
 80093ea:	4402      	add	r2, r0
 80093ec:	4293      	cmp	r3, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	d101      	bne.n	80093f6 <memchr+0x12>
 80093f2:	2000      	movs	r0, #0
 80093f4:	e003      	b.n	80093fe <memchr+0x1a>
 80093f6:	7804      	ldrb	r4, [r0, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	428c      	cmp	r4, r1
 80093fc:	d1f6      	bne.n	80093ec <memchr+0x8>
 80093fe:	bd10      	pop	{r4, pc}

08009400 <memcpy>:
 8009400:	440a      	add	r2, r1
 8009402:	4291      	cmp	r1, r2
 8009404:	f100 33ff 	add.w	r3, r0, #4294967295
 8009408:	d100      	bne.n	800940c <memcpy+0xc>
 800940a:	4770      	bx	lr
 800940c:	b510      	push	{r4, lr}
 800940e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009412:	4291      	cmp	r1, r2
 8009414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009418:	d1f9      	bne.n	800940e <memcpy+0xe>
 800941a:	bd10      	pop	{r4, pc}

0800941c <_realloc_r>:
 800941c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009420:	4680      	mov	r8, r0
 8009422:	4614      	mov	r4, r2
 8009424:	460e      	mov	r6, r1
 8009426:	b921      	cbnz	r1, 8009432 <_realloc_r+0x16>
 8009428:	4611      	mov	r1, r2
 800942a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800942e:	f7ff bc37 	b.w	8008ca0 <_malloc_r>
 8009432:	b92a      	cbnz	r2, 8009440 <_realloc_r+0x24>
 8009434:	f7ff fbcc 	bl	8008bd0 <_free_r>
 8009438:	4625      	mov	r5, r4
 800943a:	4628      	mov	r0, r5
 800943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009440:	f000 f81b 	bl	800947a <_malloc_usable_size_r>
 8009444:	4284      	cmp	r4, r0
 8009446:	4607      	mov	r7, r0
 8009448:	d802      	bhi.n	8009450 <_realloc_r+0x34>
 800944a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800944e:	d812      	bhi.n	8009476 <_realloc_r+0x5a>
 8009450:	4621      	mov	r1, r4
 8009452:	4640      	mov	r0, r8
 8009454:	f7ff fc24 	bl	8008ca0 <_malloc_r>
 8009458:	4605      	mov	r5, r0
 800945a:	2800      	cmp	r0, #0
 800945c:	d0ed      	beq.n	800943a <_realloc_r+0x1e>
 800945e:	42bc      	cmp	r4, r7
 8009460:	4622      	mov	r2, r4
 8009462:	4631      	mov	r1, r6
 8009464:	bf28      	it	cs
 8009466:	463a      	movcs	r2, r7
 8009468:	f7ff ffca 	bl	8009400 <memcpy>
 800946c:	4631      	mov	r1, r6
 800946e:	4640      	mov	r0, r8
 8009470:	f7ff fbae 	bl	8008bd0 <_free_r>
 8009474:	e7e1      	b.n	800943a <_realloc_r+0x1e>
 8009476:	4635      	mov	r5, r6
 8009478:	e7df      	b.n	800943a <_realloc_r+0x1e>

0800947a <_malloc_usable_size_r>:
 800947a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800947e:	1f18      	subs	r0, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	bfbc      	itt	lt
 8009484:	580b      	ldrlt	r3, [r1, r0]
 8009486:	18c0      	addlt	r0, r0, r3
 8009488:	4770      	bx	lr
	...

0800948c <_init>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	bf00      	nop
 8009490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009492:	bc08      	pop	{r3}
 8009494:	469e      	mov	lr, r3
 8009496:	4770      	bx	lr

08009498 <_fini>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr
