
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009878  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a64  08009a64  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a64  08009a64  00019a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a6c  08009a6c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a70  08009a70  00019a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  200001e0  08009c54  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  08009c54  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bbe  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a6  00000000  00000000  00031dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00034e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00035d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a48  00000000  00000000  00036b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001419a  00000000  00000000  0004d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c2a8  00000000  00000000  00061732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd9da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004180  00000000  00000000  000dda2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800999c 	.word	0x0800999c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	0800999c 	.word	0x0800999c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09a      	sub	sp, #104	; 0x68
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fabe 	bl	8000a1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f83f 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f8f1 	bl	8000688 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f88d 	bl	80005c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8b9 	bl	8000620 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f008 f919 	bl	80086e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[100];
  uint8_t LoRaStatus;
  LoRa_Init(&hspi1);	/* initialize the LoRa chip */
 80004b2:	4818      	ldr	r0, [pc, #96]	; (8000514 <main+0x80>)
 80004b4:	f008 f828 	bl	8008508 <LoRa_Init>
  LoRaStatus = LoRaGetStatus();
 80004b8:	f008 f8c6 	bl	8008648 <LoRaGetStatus>
 80004bc:	4603      	mov	r3, r0
 80004be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  sprintf((char *)buffer, "Status = %x\r\n", LoRaStatus);
 80004c2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80004c6:	463b      	mov	r3, r7
 80004c8:	4913      	ldr	r1, [pc, #76]	; (8000518 <main+0x84>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f008 fdec 	bl	80090a8 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004d0:	463b      	mov	r3, r7
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fe52 	bl	800017c <strlen>
 80004d8:	4603      	mov	r3, r0
 80004da:	b29a      	uxth	r2, r3
 80004dc:	463b      	mov	r3, r7
 80004de:	4611      	mov	r1, r2
 80004e0:	4618      	mov	r0, r3
 80004e2:	f008 f9bd 	bl	8008860 <CDC_Transmit_FS>
  /* Try a little transmitting */
  LoRaSetTxContinuousWave();
 80004e6:	f008 f8d1 	bl	800868c <LoRaSetTxContinuousWave>
  LoRaStatus = LoRaGetStatus();
 80004ea:	f008 f8ad 	bl	8008648 <LoRaGetStatus>
 80004ee:	4603      	mov	r3, r0
 80004f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f000 faff 	bl	8000af8 <HAL_Delay>
  LoRaSetStandbyMode();
 80004fa:	f008 f8dc 	bl	80086b6 <LoRaSetStandbyMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin); /* Toggle the LED */
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <main+0x88>)
 8000504:	f000 fdd7 	bl	80010b6 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Delay 500 ms */
 8000508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050c:	f000 faf4 	bl	8000af8 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin); /* Toggle the LED */
 8000510:	e7f5      	b.n	80004fe <main+0x6a>
 8000512:	bf00      	nop
 8000514:	20000250 	.word	0x20000250
 8000518:	080099b4 	.word	0x080099b4
 800051c:	40020800 	.word	0x40020800

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b092      	sub	sp, #72	; 0x48
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f008 fdb2 	bl	8009098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SystemClock_Config+0xa0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <SystemClock_Config+0xa0>)
 800054c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000550:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000552:	2303      	movs	r3, #3
 8000554:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800056c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000570:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fb23 	bl	8002bc8 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000588:	f000 f8f8 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000590:	2301      	movs	r3, #1
 8000592:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800059c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fe3e 	bl	8003228 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b2:	f000 f8e3 	bl	800077c <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3748      	adds	r7, #72	; 0x48
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_I2C1_Init+0x50>)
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <MX_I2C1_Init+0x54>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_I2C1_Init+0x50>)
 80005d0:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_I2C1_Init+0x58>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_I2C1_Init+0x50>)
 80005e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_I2C1_Init+0x50>)
 8000602:	f000 fd71 	bl	80010e8 <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f8b6 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200001fc 	.word	0x200001fc
 8000618:	40005400 	.word	0x40005400
 800061c:	000186a0 	.word	0x000186a0

08000620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_SPI1_Init+0x60>)
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_SPI1_Init+0x64>)
 8000628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_SPI1_Init+0x60>)
 800062c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_SPI1_Init+0x60>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_SPI1_Init+0x60>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_SPI1_Init+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_SPI1_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_SPI1_Init+0x60>)
 800064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_SPI1_Init+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_SPI1_Init+0x60>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_SPI1_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_SPI1_Init+0x60>)
 8000666:	220a      	movs	r2, #10
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_SPI1_Init+0x60>)
 800066c:	f003 f88c 	bl	8003788 <HAL_SPI_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000676:	f000 f881 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000250 	.word	0x20000250
 8000684:	40013000 	.word	0x40013000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a33      	ldr	r2, [pc, #204]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a2d      	ldr	r2, [pc, #180]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a27      	ldr	r2, [pc, #156]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a21      	ldr	r2, [pc, #132]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_GPIO_Init+0xe8>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000704:	481b      	ldr	r0, [pc, #108]	; (8000774 <MX_GPIO_Init+0xec>)
 8000706:	f000 fcbe 	bl	8001086 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2111      	movs	r1, #17
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <MX_GPIO_Init+0xf0>)
 8000710:	f000 fcb9 	bl	8001086 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_GPIO_Init+0xec>)
 800072e:	f000 fb13 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin;
 8000732:	2311      	movs	r3, #17
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <MX_GPIO_Init+0xf0>)
 800074a:	f000 fb05 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 800074e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_GPIO_Init+0xf0>)
 8000764:	f000 faf8 	bl	8000d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020800 	.word	0x40020800
 8000778:	40020000 	.word	0x40020000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_MspInit+0x58>)
 8000790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <HAL_MspInit+0x58>)
 8000794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000798:	6253      	str	r3, [r2, #36]	; 0x24
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_MspInit+0x58>)
 800079c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_MspInit+0x58>)
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <HAL_MspInit+0x58>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6213      	str	r3, [r2, #32]
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_MspInit+0x58>)
 80007b4:	6a1b      	ldr	r3, [r3, #32]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_MspInit+0x58>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <HAL_MspInit+0x58>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6253      	str	r3, [r2, #36]	; 0x24
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_MspInit+0x58>)
 80007cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_I2C_MspInit+0x7c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d127      	bne.n	8000856 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <HAL_I2C_MspInit+0x80>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800081e:	23c0      	movs	r3, #192	; 0xc0
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000822:	2312      	movs	r3, #18
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082e:	2304      	movs	r3, #4
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <HAL_I2C_MspInit+0x84>)
 800083a:	f000 fa8d 	bl	8000d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000848:	6253      	str	r3, [r2, #36]	; 0x24
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x80>)
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_SPI_MspInit+0x7c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d127      	bne.n	80008de <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_SPI_MspInit+0x80>)
 8000890:	6a1b      	ldr	r3, [r3, #32]
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_SPI_MspInit+0x80>)
 8000894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000898:	6213      	str	r3, [r2, #32]
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_SPI_MspInit+0x80>)
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23e0      	movs	r3, #224	; 0xe0
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ce:	2305      	movs	r3, #5
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_SPI_MspInit+0x84>)
 80008da:	f000 fa3d 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <NMI_Handler+0x4>

080008fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler+0x4>

08000906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler+0x4>

08000912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093a:	f000 f8c1 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <USB_LP_IRQHandler+0x10>)
 800094a:	f000 fe15 	bl	8001578 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000f54 	.word	0x20000f54

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f008 fb5c 	bl	8009044 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20002800 	.word	0x20002800
 80009b8:	00000400 	.word	0x00000400
 80009bc:	200002a8 	.word	0x200002a8
 80009c0:	20001470 	.word	0x20001470

080009c4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d2:	490d      	ldr	r1, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e8:	4c0a      	ldr	r4, [pc, #40]	; (8000a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009f6:	f7ff ffe5 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f008 fb29 	bl	8009050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fd49 	bl	8000494 <main>
  bx lr
 8000a02:	4770      	bx	lr
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a0c:	08009a74 	.word	0x08009a74
  ldr r2, =_sbss
 8000a10:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a14:	20001470 	.word	0x20001470

08000a18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_IRQHandler>

08000a1a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f955 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f80e 	bl	8000a4c <HAL_InitTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	e001      	b.n	8000a40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3c:	f7ff fea4 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_InitTick+0x68>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d022      	beq.n	8000aa6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_InitTick+0x68>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f962 	bl	8000d3e <HAL_SYSTICK_Config>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10f      	bne.n	8000aa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	d809      	bhi.n	8000a9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a86:	2200      	movs	r2, #0
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8e:	f000 f92c 	bl	8000cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_InitTick+0x70>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e007      	b.n	8000aaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e004      	b.n	8000aaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e001      	b.n	8000aaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a03      	ldr	r2, [pc, #12]	; (8000adc <HAL_IncTick+0x1c>)
 8000ad0:	6013      	str	r3, [r2, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200002ac 	.word	0x200002ac
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	200002ac 	.word	0x200002ac

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff fff0 	bl	8000ae4 <HAL_GetTick>
 8000b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d004      	beq.n	8000b1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_Delay+0x40>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1c:	bf00      	nop
 8000b1e:	f7ff ffe1 	bl	8000ae4 <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d8f7      	bhi.n	8000b1e <HAL_Delay+0x26>
  {
  }
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000008 	.word	0x20000008

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4906      	ldr	r1, [pc, #24]	; (8000bd4 <__NVIC_EnableIRQ+0x34>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff90 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff2d 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff42 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff90 	bl	8000c2c <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5f 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff35 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffa2 	bl	8000c90 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d6e:	e154      	b.n	800101a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 8146 	beq.w	8001014 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d005      	beq.n	8000da0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d130      	bne.n	8000e02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	f003 0201 	and.w	r2, r3, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d017      	beq.n	8000e3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d123      	bne.n	8000e92 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	691a      	ldr	r2, [r3, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	6939      	ldr	r1, [r7, #16]
 8000e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0203 	and.w	r2, r3, #3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 80a0 	beq.w	8001014 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed4:	4b58      	ldr	r3, [pc, #352]	; (8001038 <HAL_GPIO_Init+0x2e0>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a57      	ldr	r2, [pc, #348]	; (8001038 <HAL_GPIO_Init+0x2e0>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	4b55      	ldr	r3, [pc, #340]	; (8001038 <HAL_GPIO_Init+0x2e0>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000eec:	4a53      	ldr	r2, [pc, #332]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d019      	beq.n	8000f4c <HAL_GPIO_Init+0x1f4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a4a      	ldr	r2, [pc, #296]	; (8001044 <HAL_GPIO_Init+0x2ec>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d013      	beq.n	8000f48 <HAL_GPIO_Init+0x1f0>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a49      	ldr	r2, [pc, #292]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d00d      	beq.n	8000f44 <HAL_GPIO_Init+0x1ec>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a48      	ldr	r2, [pc, #288]	; (800104c <HAL_GPIO_Init+0x2f4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d007      	beq.n	8000f40 <HAL_GPIO_Init+0x1e8>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d101      	bne.n	8000f3c <HAL_GPIO_Init+0x1e4>
 8000f38:	2304      	movs	r3, #4
 8000f3a:	e008      	b.n	8000f4e <HAL_GPIO_Init+0x1f6>
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_Init+0x1f6>
 8000f40:	2303      	movs	r3, #3
 8000f42:	e004      	b.n	8000f4e <HAL_GPIO_Init+0x1f6>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e002      	b.n	8000f4e <HAL_GPIO_Init+0x1f6>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <HAL_GPIO_Init+0x1f6>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	f002 0203 	and.w	r2, r2, #3
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	4093      	lsls	r3, r2
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f5e:	4937      	ldr	r1, [pc, #220]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6c:	4b39      	ldr	r3, [pc, #228]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f90:	4a30      	ldr	r2, [pc, #192]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fba:	4a26      	ldr	r2, [pc, #152]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa22 f303 	lsr.w	r3, r2, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	f47f aea3 	bne.w	8000d70 <HAL_GPIO_Init+0x18>
  }
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	371c      	adds	r7, #28
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40010000 	.word	0x40010000
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e001      	b.n	800107a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	807b      	strh	r3, [r7, #2]
 8001092:	4613      	mov	r3, r2
 8001094:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001096:	787b      	ldrb	r3, [r7, #1]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109c:	887a      	ldrh	r2, [r7, #2]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010a2:	e003      	b.n	80010ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	041a      	lsls	r2, r3, #16
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c8:	887a      	ldrh	r2, [r7, #2]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4013      	ands	r3, r2
 80010ce:	041a      	lsls	r2, r3, #16
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	400b      	ands	r3, r1
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e12b      	b.n	8001352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fb68 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2224      	movs	r2, #36	; 0x24
 8001118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800113a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800114a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800114c:	f002 faa8 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8001150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4a81      	ldr	r2, [pc, #516]	; (800135c <HAL_I2C_Init+0x274>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d807      	bhi.n	800116c <HAL_I2C_Init+0x84>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4a80      	ldr	r2, [pc, #512]	; (8001360 <HAL_I2C_Init+0x278>)
 8001160:	4293      	cmp	r3, r2
 8001162:	bf94      	ite	ls
 8001164:	2301      	movls	r3, #1
 8001166:	2300      	movhi	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	e006      	b.n	800117a <HAL_I2C_Init+0x92>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4a7d      	ldr	r2, [pc, #500]	; (8001364 <HAL_I2C_Init+0x27c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	bf94      	ite	ls
 8001174:	2301      	movls	r3, #1
 8001176:	2300      	movhi	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0e7      	b.n	8001352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4a78      	ldr	r2, [pc, #480]	; (8001368 <HAL_I2C_Init+0x280>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	0c9b      	lsrs	r3, r3, #18
 800118c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	430a      	orrs	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a6a      	ldr	r2, [pc, #424]	; (800135c <HAL_I2C_Init+0x274>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d802      	bhi.n	80011bc <HAL_I2C_Init+0xd4>
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3301      	adds	r3, #1
 80011ba:	e009      	b.n	80011d0 <HAL_I2C_Init+0xe8>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	4a69      	ldr	r2, [pc, #420]	; (800136c <HAL_I2C_Init+0x284>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	3301      	adds	r3, #1
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	495c      	ldr	r1, [pc, #368]	; (800135c <HAL_I2C_Init+0x274>)
 80011ec:	428b      	cmp	r3, r1
 80011ee:	d819      	bhi.n	8001224 <HAL_I2C_Init+0x13c>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1e59      	subs	r1, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001204:	400b      	ands	r3, r1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00a      	beq.n	8001220 <HAL_I2C_Init+0x138>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1e59      	subs	r1, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fbb1 f3f3 	udiv	r3, r1, r3
 8001218:	3301      	adds	r3, #1
 800121a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121e:	e051      	b.n	80012c4 <HAL_I2C_Init+0x1dc>
 8001220:	2304      	movs	r3, #4
 8001222:	e04f      	b.n	80012c4 <HAL_I2C_Init+0x1dc>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d111      	bne.n	8001250 <HAL_I2C_Init+0x168>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	1e58      	subs	r0, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	440b      	add	r3, r1
 800123a:	fbb0 f3f3 	udiv	r3, r0, r3
 800123e:	3301      	adds	r3, #1
 8001240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	e012      	b.n	8001276 <HAL_I2C_Init+0x18e>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e58      	subs	r0, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	0099      	lsls	r1, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	fbb0 f3f3 	udiv	r3, r0, r3
 8001266:	3301      	adds	r3, #1
 8001268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_I2C_Init+0x196>
 800127a:	2301      	movs	r3, #1
 800127c:	e022      	b.n	80012c4 <HAL_I2C_Init+0x1dc>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10e      	bne.n	80012a4 <HAL_I2C_Init+0x1bc>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1e58      	subs	r0, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6859      	ldr	r1, [r3, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	440b      	add	r3, r1
 8001294:	fbb0 f3f3 	udiv	r3, r0, r3
 8001298:	3301      	adds	r3, #1
 800129a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a2:	e00f      	b.n	80012c4 <HAL_I2C_Init+0x1dc>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1e58      	subs	r0, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	0099      	lsls	r1, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	6809      	ldr	r1, [r1, #0]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69da      	ldr	r2, [r3, #28]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6911      	ldr	r1, [r2, #16]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68d2      	ldr	r2, [r2, #12]
 80012fe:	4311      	orrs	r1, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	430b      	orrs	r3, r1
 8001306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2220      	movs	r2, #32
 800133e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	000186a0 	.word	0x000186a0
 8001360:	001e847f 	.word	0x001e847f
 8001364:	003d08ff 	.word	0x003d08ff
 8001368:	431bde83 	.word	0x431bde83
 800136c:	10624dd3 	.word	0x10624dd3

08001370 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af06      	add	r7, sp, #24
 8001376:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0d0      	b.n	8001524 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f007 fbb4 	bl	8008b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 ff9f 	bl	80042ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e04c      	b.n	800144e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3301      	adds	r3, #1
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b298      	uxth	r0, r3
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	3336      	adds	r3, #54	; 0x36
 80013f2:	4602      	mov	r2, r0
 80013f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3303      	adds	r3, #3
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3338      	adds	r3, #56	; 0x38
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	333c      	adds	r3, #60	; 0x3c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3340      	adds	r3, #64	; 0x40
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3ad      	bcc.n	80013b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e044      	b.n	80014e8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3b5      	bcc.n	800145e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	687e      	ldr	r6, [r7, #4]
 80014fa:	466d      	mov	r5, sp
 80014fc:	f106 0410 	add.w	r4, r6, #16
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	602b      	str	r3, [r5, #0]
 8001508:	1d33      	adds	r3, r6, #4
 800150a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f002 ff07 	bl	8004320 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800152c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_PCD_Start+0x16>
 800153e:	2302      	movs	r3, #2
 8001540:	e016      	b.n	8001570 <HAL_PCD_Start+0x44>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f002 feb6 	bl	80042c0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001554:	2101      	movs	r1, #1
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f007 fab6 	bl	8008ac8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f005 fb9b 	bl	8006c9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fb93 	bl	8006cb0 <USB_ReadInterrupts>
 800158a:	4603      	mov	r3, r0
 800158c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001594:	d102      	bne.n	800159c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 faf5 	bl	8001b86 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 fb85 	bl	8006cb0 <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b0:	d112      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c4:	b292      	uxth	r2, r2
 80015c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f007 fb15 	bl	8008bfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015d0:	2100      	movs	r1, #0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f8c7 	bl	8001766 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 fb67 	bl	8006cb0 <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ec:	d10b      	bne.n	8001606 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001600:	b292      	uxth	r2, r2
 8001602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f005 fb50 	bl	8006cb0 <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800161a:	d10b      	bne.n	8001634 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001624:	b29a      	uxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800162e:	b292      	uxth	r2, r2
 8001630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f005 fb39 	bl	8006cb0 <USB_ReadInterrupts>
 800163e:	4603      	mov	r3, r0
 8001640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001648:	d126      	bne.n	8001698 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001652:	b29a      	uxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0204 	bic.w	r2, r2, #4
 800165c:	b292      	uxth	r2, r2
 800165e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0208 	bic.w	r2, r2, #8
 8001674:	b292      	uxth	r2, r2
 8001676:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f007 faf6 	bl	8008c6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001688:	b29a      	uxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001692:	b292      	uxth	r2, r2
 8001694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f005 fb07 	bl	8006cb0 <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ac:	d126      	bne.n	80016fc <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0208 	orr.w	r2, r2, #8
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0204 	orr.w	r2, r2, #4
 80016f0:	b292      	uxth	r2, r2
 80016f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f007 fa9e 	bl	8008c38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fad5 	bl	8006cb0 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001710:	d10e      	bne.n	8001730 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001724:	b292      	uxth	r2, r2
 8001726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f007 fa57 	bl	8008bde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f005 fabb 	bl	8006cb0 <USB_ReadInterrupts>
 800173a:	4603      	mov	r3, r0
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001744:	d10b      	bne.n	800175e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174e:	b29a      	uxth	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001758:	b292      	uxth	r2, r2
 800175a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_PCD_SetAddress+0x1a>
 800177c:	2302      	movs	r3, #2
 800177e:	e013      	b.n	80017a8 <HAL_PCD_SetAddress+0x42>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f005 fa6c 	bl	8006c76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	70fb      	strb	r3, [r7, #3]
 80017c2:	460b      	mov	r3, r1
 80017c4:	803b      	strh	r3, [r7, #0]
 80017c6:	4613      	mov	r3, r2
 80017c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da0e      	bge.n	80017f4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	705a      	strb	r2, [r3, #1]
 80017f2:	e00e      	b.n	8001812 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	f003 0207 	and.w	r2, r3, #7
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	b2da      	uxtb	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800181e:	883a      	ldrh	r2, [r7, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	78ba      	ldrb	r2, [r7, #2]
 8001828:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	785b      	ldrb	r3, [r3, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800183c:	78bb      	ldrb	r3, [r7, #2]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d102      	bne.n	8001848 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_PCD_EP_Open+0xa6>
 8001852:	2302      	movs	r3, #2
 8001854:	e00e      	b.n	8001874 <HAL_PCD_EP_Open+0xc4>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68f9      	ldr	r1, [r7, #12]
 8001864:	4618      	mov	r0, r3
 8001866:	f002 fd7b 	bl	8004360 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001872:	7afb      	ldrb	r3, [r7, #11]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800188c:	2b00      	cmp	r3, #0
 800188e:	da0e      	bge.n	80018ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	705a      	strb	r2, [r3, #1]
 80018ac:	e00e      	b.n	80018cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0207 	and.w	r2, r3, #7
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_PCD_EP_Close+0x6a>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e00e      	b.n	8001904 <HAL_PCD_EP_Close+0x88>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 f89d 	bl	8004a34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	460b      	mov	r3, r1
 800191a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	f003 0207 	and.w	r2, r3, #7
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4413      	add	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2200      	movs	r2, #0
 800194a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	b2da      	uxtb	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6979      	ldr	r1, [r7, #20]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fa4f 	bl	8004e0c <USB_EPStartXfer>
 800196e:	e005      	b.n	800197c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6979      	ldr	r1, [r7, #20]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fa48 	bl	8004e0c <USB_EPStartXfer>
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	f003 0207 	and.w	r2, r3, #7
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019a8:	681b      	ldr	r3, [r3, #0]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	460b      	mov	r3, r1
 80019c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2201      	movs	r2, #1
 80019fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a00:	7afb      	ldrb	r3, [r7, #11]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6979      	ldr	r1, [r7, #20]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 f9f5 	bl	8004e0c <USB_EPStartXfer>
 8001a22:	e005      	b.n	8001a30 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6979      	ldr	r1, [r7, #20]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 f9ee 	bl	8004e0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	f003 0207 	and.w	r2, r3, #7
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d901      	bls.n	8001a58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e03e      	b.n	8001ad6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da0e      	bge.n	8001a7e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	705a      	strb	r2, [r3, #1]
 8001a7c:	e00c      	b.n	8001a98 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_PCD_EP_SetStall+0x7e>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e00e      	b.n	8001ad6 <HAL_PCD_EP_SetStall+0x9c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 ffd8 	bl	8006a7c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d901      	bls.n	8001afc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e040      	b.n	8001b7e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da0e      	bge.n	8001b22 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
 8001b20:	e00e      	b.n	8001b40 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 0207 	and.w	r2, r3, #7
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_PCD_EP_ClrStall+0x82>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e00e      	b.n	8001b7e <HAL_PCD_EP_ClrStall+0xa0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 ffd4 	bl	8006b1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b08e      	sub	sp, #56	; 0x38
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b8e:	e2ec      	b.n	800216a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b98:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ba6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 8161 	bne.w	8001e72 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d152      	bne.n	8001c60 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bca:	81fb      	strh	r3, [r7, #14]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3328      	adds	r3, #40	; 0x28
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	441a      	add	r2, r3
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f006 ffc2 	bl	8008baa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 829b 	beq.w	800216a <PCD_EP_ISR_Handler+0x5e4>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 8296 	bne.w	800216a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b292      	uxth	r2, r2
 8001c52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c5e:	e284      	b.n	800216a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d034      	beq.n	8001ce4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3306      	adds	r3, #6
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f005 f84d 	bl	8006d58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cca:	4013      	ands	r3, r2
 8001ccc:	823b      	strh	r3, [r7, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	8a3a      	ldrh	r2, [r7, #16]
 8001cd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f006 ff37 	bl	8008b50 <HAL_PCD_SetupStageCallback>
 8001ce2:	e242      	b.n	800216a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ce4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f280 823e 	bge.w	800216a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	83bb      	strh	r3, [r7, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	8bba      	ldrh	r2, [r7, #28]
 8001d04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3306      	adds	r3, #6
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d019      	beq.n	8001d74 <PCD_EP_ISR_Handler+0x1ee>
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d015      	beq.n	8001d74 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	6959      	ldr	r1, [r3, #20]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f004 fffd 	bl	8006d58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	441a      	add	r2, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f006 ff00 	bl	8008b74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 81f2 	bne.w	800216a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d112      	bne.n	8001dd4 <PCD_EP_ISR_Handler+0x24e>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	e02f      	b.n	8001e34 <PCD_EP_ISR_Handler+0x2ae>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8001dda:	d813      	bhi.n	8001e04 <PCD_EP_ISR_Handler+0x27e>
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <PCD_EP_ISR_Handler+0x270>
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df2:	3301      	adds	r3, #1
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	e017      	b.n	8001e34 <PCD_EP_ISR_Handler+0x2ae>
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <PCD_EP_ISR_Handler+0x298>
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e44:	827b      	strh	r3, [r7, #18]
 8001e46:	8a7b      	ldrh	r3, [r7, #18]
 8001e48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e4c:	827b      	strh	r3, [r7, #18]
 8001e4e:	8a7b      	ldrh	r3, [r7, #18]
 8001e50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e54:	827b      	strh	r3, [r7, #18]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	8a7b      	ldrh	r3, [r7, #18]
 8001e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	8013      	strh	r3, [r2, #0]
 8001e70:	e17b      	b.n	800216a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e84:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f280 80ea 	bge.w	8002062 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ec0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	7b1b      	ldrb	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d122      	bne.n	8001f24 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3306      	adds	r3, #6
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f06:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8087 	beq.w	800201e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	6959      	ldr	r1, [r3, #20]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	88da      	ldrh	r2, [r3, #6]
 8001f1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f1e:	f004 ff1b 	bl	8006d58 <USB_ReadPMA>
 8001f22:	e07c      	b.n	800201e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	78db      	ldrb	r3, [r3, #3]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d108      	bne.n	8001f3e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f927 	bl	8002186 <HAL_PCD_EP_DB_Receive>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f3c:	e06f      	b.n	800201e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f58:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	441a      	add	r2, r3
 8001f68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d021      	beq.n	8001fdc <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	3302      	adds	r3, #2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d02a      	beq.n	800201e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	6959      	ldr	r1, [r3, #20]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	891a      	ldrh	r2, [r3, #8]
 8001fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fd6:	f004 febf 	bl	8006d58 <USB_ReadPMA>
 8001fda:	e020      	b.n	800201e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	3306      	adds	r3, #6
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002004:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002006:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	6959      	ldr	r1, [r3, #20]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	895a      	ldrh	r2, [r3, #10]
 8002018:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800201a:	f004 fe9d 	bl	8006d58 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002024:	441a      	add	r2, r3
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002030:	441a      	add	r2, r3
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d004      	beq.n	8002048 <PCD_EP_ISR_Handler+0x4c2>
 800203e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d206      	bcs.n	8002056 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f006 fd90 	bl	8008b74 <HAL_PCD_DataOutStageCallback>
 8002054:	e005      	b.n	8002062 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800205c:	4618      	mov	r0, r3
 800205e:	f002 fed5 	bl	8004e0c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002062:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	2b00      	cmp	r3, #0
 800206a:	d07e      	beq.n	800216a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800206c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209a:	843b      	strh	r3, [r7, #32]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	8c3b      	ldrh	r3, [r7, #32]
 80020ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	78db      	ldrb	r3, [r3, #3]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d00c      	beq.n	80020da <PCD_EP_ISR_Handler+0x554>
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	78db      	ldrb	r3, [r3, #3]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d146      	bne.n	800215e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d141      	bne.n	800215e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	3302      	adds	r3, #2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002102:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	429a      	cmp	r2, r3
 800210c:	d906      	bls.n	800211c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	8bfb      	ldrh	r3, [r7, #30]
 8002114:	1ad2      	subs	r2, r2, r3
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	619a      	str	r2, [r3, #24]
 800211a:	e002      	b.n	8002122 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f006 fd3a 	bl	8008baa <HAL_PCD_DataInStageCallback>
 8002136:	e018      	b.n	800216a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	8bfb      	ldrh	r3, [r7, #30]
 800213e:	441a      	add	r2, r3
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	8bfb      	ldrh	r3, [r7, #30]
 800214a:	441a      	add	r2, r3
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fe58 	bl	8004e0c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800215c:	e005      	b.n	800216a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800215e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002160:	461a      	mov	r2, r3
 8002162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f91b 	bl	80023a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002172:	b29b      	uxth	r3, r3
 8002174:	b21b      	sxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f6ff ad0a 	blt.w	8001b90 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3738      	adds	r7, #56	; 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	4613      	mov	r3, r2
 8002192:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07e      	beq.n	800229c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	3302      	adds	r3, #2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	8b7b      	ldrh	r3, [r7, #26]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d306      	bcc.n	80021e0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	8b7b      	ldrh	r3, [r7, #26]
 80021d8:	1ad2      	subs	r2, r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	e002      	b.n	80021e6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d123      	bne.n	8002236 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	833b      	strh	r3, [r7, #24]
 800220a:	8b3b      	ldrh	r3, [r7, #24]
 800220c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002210:	833b      	strh	r3, [r7, #24]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	441a      	add	r2, r3
 8002220:	8b3b      	ldrh	r3, [r7, #24]
 8002222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800222a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002232:	b29b      	uxth	r3, r3
 8002234:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01f      	beq.n	8002280 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	82fb      	strh	r3, [r7, #22]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	441a      	add	r2, r3
 800226a:	8afb      	ldrh	r3, [r7, #22]
 800226c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800227c:	b29b      	uxth	r3, r3
 800227e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002280:	8b7b      	ldrh	r3, [r7, #26]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8087 	beq.w	8002396 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6959      	ldr	r1, [r3, #20]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	891a      	ldrh	r2, [r3, #8]
 8002294:	8b7b      	ldrh	r3, [r7, #26]
 8002296:	f004 fd5f 	bl	8006d58 <USB_ReadPMA>
 800229a:	e07c      	b.n	8002396 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	3306      	adds	r3, #6
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	8b7b      	ldrh	r3, [r7, #26]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d306      	bcc.n	80022de <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	8b7b      	ldrh	r3, [r7, #26]
 80022d6:	1ad2      	subs	r2, r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	619a      	str	r2, [r3, #24]
 80022dc:	e002      	b.n	80022e4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d123      	bne.n	8002334 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002306:	83fb      	strh	r3, [r7, #30]
 8002308:	8bfb      	ldrh	r3, [r7, #30]
 800230a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800230e:	83fb      	strh	r3, [r7, #30]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	441a      	add	r2, r3
 800231e:	8bfb      	ldrh	r3, [r7, #30]
 8002320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002330:	b29b      	uxth	r3, r3
 8002332:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002358:	83bb      	strh	r3, [r7, #28]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	441a      	add	r2, r3
 8002368:	8bbb      	ldrh	r3, [r7, #28]
 800236a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800236e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002376:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800237a:	b29b      	uxth	r3, r3
 800237c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800237e:	8b7b      	ldrh	r3, [r7, #26]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6959      	ldr	r1, [r3, #20]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	895a      	ldrh	r2, [r3, #10]
 8002390:	8b7b      	ldrh	r3, [r7, #26]
 8002392:	f004 fce1 	bl	8006d58 <USB_ReadPMA>
    }
  }

  return count;
 8002396:	8b7b      	ldrh	r3, [r7, #26]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0a2      	sub	sp, #136	; 0x88
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 81c7 	beq.w	8002748 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	3302      	adds	r3, #2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d907      	bls.n	8002402 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023fa:	1ad2      	subs	r2, r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	619a      	str	r2, [r3, #24]
 8002400:	e002      	b.n	8002408 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 80b9 	bne.w	8002584 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d126      	bne.n	8002468 <HAL_PCD_EP_DB_Transmit+0xc8>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	4413      	add	r3, r2
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	011a      	lsls	r2, r3, #4
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	4413      	add	r3, r2
 800243c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800244c:	b29a      	uxth	r2, r3
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002460:	b29a      	uxth	r2, r3
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	e01a      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d116      	bne.n	800249e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	4413      	add	r3, r2
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	011a      	lsls	r2, r3, #4
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	4413      	add	r3, r2
 8002492:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	2200      	movs	r2, #0
 800249c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d126      	bne.n	80024fa <HAL_PCD_EP_DB_Transmit+0x15a>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	011a      	lsls	r2, r3, #4
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4413      	add	r3, r2
 80024ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024de:	b29a      	uxth	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	e017      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x18a>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	785b      	ldrb	r3, [r3, #1]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d113      	bne.n	800252a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	4413      	add	r3, r2
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	011a      	lsls	r2, r3, #4
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	4413      	add	r3, r2
 800251e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2200      	movs	r2, #0
 8002528:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f006 fb3a 	bl	8008baa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 82d4 	beq.w	8002aea <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255c:	827b      	strh	r3, [r7, #18]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	441a      	add	r2, r3
 800256c:	8a7b      	ldrh	r3, [r7, #18]
 800256e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800257e:	b29b      	uxth	r3, r3
 8002580:	8013      	strh	r3, [r2, #0]
 8002582:	e2b2      	b.n	8002aea <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d021      	beq.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	441a      	add	r2, r3
 80025ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f040 8286 	bne.w	8002aea <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e6:	441a      	add	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025f4:	441a      	add	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	429a      	cmp	r2, r3
 8002604:	d309      	bcc.n	800261a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002612:	1ad2      	subs	r2, r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	621a      	str	r2, [r3, #32]
 8002618:	e015      	b.n	8002646 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002626:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002630:	e009      	b.n	8002646 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	785b      	ldrb	r3, [r3, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d155      	bne.n	80026fa <HAL_PCD_EP_DB_Transmit+0x35a>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	4413      	add	r3, r2
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	011a      	lsls	r2, r3, #4
 800266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266e:	4413      	add	r3, r2
 8002670:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
 8002676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002678:	2b00      	cmp	r3, #0
 800267a:	d112      	bne.n	80026a2 <HAL_PCD_EP_DB_Transmit+0x302>
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002686:	b29a      	uxth	r2, r3
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	801a      	strh	r2, [r3, #0]
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269a:	b29a      	uxth	r2, r3
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	801a      	strh	r2, [r3, #0]
 80026a0:	e047      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x392>
 80026a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a4:	2b3e      	cmp	r3, #62	; 0x3e
 80026a6:	d811      	bhi.n	80026cc <HAL_PCD_EP_DB_Transmit+0x32c>
 80026a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_PCD_EP_DB_Transmit+0x31e>
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	3301      	adds	r3, #1
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80026be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	801a      	strh	r2, [r3, #0]
 80026ca:	e032      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x392>
 80026cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x342>
 80026dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026de:	3b01      	subs	r3, #1
 80026e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	e01b      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x392>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	785b      	ldrb	r3, [r3, #1]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d117      	bne.n	8002732 <HAL_PCD_EP_DB_Transmit+0x392>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	643b      	str	r3, [r7, #64]	; 0x40
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002716:	4413      	add	r3, r2
 8002718:	643b      	str	r3, [r7, #64]	; 0x40
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	011a      	lsls	r2, r3, #4
 8002720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002722:	4413      	add	r3, r2
 8002724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272c:	b29a      	uxth	r2, r3
 800272e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002730:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	6959      	ldr	r1, [r3, #20]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	891a      	ldrh	r2, [r3, #8]
 800273e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	f004 fac4 	bl	8006cce <USB_WritePMA>
 8002746:	e1d0      	b.n	8002aea <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002750:	b29b      	uxth	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	3306      	adds	r3, #6
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002770:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800277c:	429a      	cmp	r2, r3
 800277e:	d307      	bcc.n	8002790 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002788:	1ad2      	subs	r2, r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	619a      	str	r2, [r3, #24]
 800278e:	e002      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80c4 	bne.w	8002928 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d126      	bne.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x456>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027bc:	4413      	add	r3, r2
 80027be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	011a      	lsls	r2, r3, #4
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c8:	4413      	add	r3, r2
 80027ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80027d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f2:	801a      	strh	r2, [r3, #0]
 80027f4:	e01a      	b.n	800282c <HAL_PCD_EP_DB_Transmit+0x48c>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d116      	bne.n	800282c <HAL_PCD_EP_DB_Transmit+0x48c>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	677b      	str	r3, [r7, #116]	; 0x74
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002812:	4413      	add	r3, r2
 8002814:	677b      	str	r3, [r7, #116]	; 0x74
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	011a      	lsls	r2, r3, #4
 800281c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281e:	4413      	add	r3, r2
 8002820:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002824:	673b      	str	r3, [r7, #112]	; 0x70
 8002826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002828:	2200      	movs	r2, #0
 800282a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	67bb      	str	r3, [r7, #120]	; 0x78
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d12f      	bne.n	800289a <HAL_PCD_EP_DB_Transmit+0x4fa>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002852:	4413      	add	r3, r2
 8002854:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	011a      	lsls	r2, r3, #4
 800285e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002862:	4413      	add	r3, r2
 8002864:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800286c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002878:	b29a      	uxth	r2, r3
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002890:	b29a      	uxth	r2, r3
 8002892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	e017      	b.n	80028ca <HAL_PCD_EP_DB_Transmit+0x52a>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	785b      	ldrb	r3, [r3, #1]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d113      	bne.n	80028ca <HAL_PCD_EP_DB_Transmit+0x52a>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b0:	4413      	add	r3, r2
 80028b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	011a      	lsls	r2, r3, #4
 80028ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028bc:	4413      	add	r3, r2
 80028be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028c6:	2200      	movs	r2, #0
 80028c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f006 f96a 	bl	8008baa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 8104 	bne.w	8002aea <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002922:	b29b      	uxth	r3, r3
 8002924:	8013      	strh	r3, [r2, #0]
 8002926:	e0e0      	b.n	8002aea <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d121      	bne.n	8002976 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800296e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002972:	b29b      	uxth	r3, r3
 8002974:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800297c:	2b01      	cmp	r3, #1
 800297e:	f040 80b4 	bne.w	8002aea <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800298a:	441a      	add	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002998:	441a      	add	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d309      	bcc.n	80029be <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	6a1a      	ldr	r2, [r3, #32]
 80029b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b6:	1ad2      	subs	r2, r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	621a      	str	r2, [r3, #32]
 80029bc:	e015      	b.n	80029ea <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80029c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029d4:	e009      	b.n	80029ea <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2200      	movs	r2, #0
 80029e0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	667b      	str	r3, [r7, #100]	; 0x64
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d155      	bne.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x704>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0c:	4413      	add	r3, r2
 8002a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	011a      	lsls	r2, r3, #4
 8002a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a18:	4413      	add	r3, r2
 8002a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d112      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a48:	801a      	strh	r2, [r3, #0]
 8002a4a:	e044      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4e:	2b3e      	cmp	r3, #62	; 0x3e
 8002a50:	d811      	bhi.n	8002a76 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	657b      	str	r3, [r7, #84]	; 0x54
 8002a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	3301      	adds	r3, #1
 8002a66:	657b      	str	r3, [r7, #84]	; 0x54
 8002a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a72:	801a      	strh	r2, [r3, #0]
 8002a74:	e02f      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa0:	801a      	strh	r2, [r3, #0]
 8002aa2:	e018      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d114      	bne.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aba:	4413      	add	r3, r2
 8002abc:	667b      	str	r3, [r7, #100]	; 0x64
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	011a      	lsls	r2, r3, #4
 8002ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002acc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	6959      	ldr	r1, [r3, #20]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	895a      	ldrh	r2, [r3, #10]
 8002ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f004 f8f2 	bl	8006cce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	823b      	strh	r3, [r7, #16]
 8002b06:	8a3b      	ldrh	r3, [r7, #16]
 8002b08:	f083 0310 	eor.w	r3, r3, #16
 8002b0c:	823b      	strh	r3, [r7, #16]
 8002b0e:	8a3b      	ldrh	r3, [r7, #16]
 8002b10:	f083 0320 	eor.w	r3, r3, #32
 8002b14:	823b      	strh	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	8a3b      	ldrh	r3, [r7, #16]
 8002b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3788      	adds	r7, #136	; 0x88
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	817b      	strh	r3, [r7, #10]
 8002b52:	4613      	mov	r3, r2
 8002b54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e009      	b.n	8002b8e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b7a:	897a      	ldrh	r2, [r7, #10]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b8e:	893b      	ldrh	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2200      	movs	r2, #0
 8002b98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	80da      	strh	r2, [r3, #6]
 8002ba2:	e00b      	b.n	8002bbc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e31d      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bda:	4b94      	ldr	r3, [pc, #592]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be4:	4b91      	ldr	r3, [pc, #580]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d07b      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d006      	beq.n	8002c0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d10f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x5e>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d10b      	bne.n	8002c26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0e:	4b87      	ldr	r3, [pc, #540]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d06a      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x128>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d166      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e2f7      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x74>
 8002c2e:	4b7f      	ldr	r3, [pc, #508]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7e      	ldr	r2, [pc, #504]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e02d      	b.n	8002c98 <HAL_RCC_OscConfig+0xd0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x96>
 8002c44:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a78      	ldr	r2, [pc, #480]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0xd0>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0xb8>
 8002c66:	4b71      	ldr	r3, [pc, #452]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a70      	ldr	r2, [pc, #448]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6d      	ldr	r2, [pc, #436]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0xd0>
 8002c80:	4b6a      	ldr	r3, [pc, #424]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a69      	ldr	r2, [pc, #420]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a66      	ldr	r2, [pc, #408]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fd ff20 	bl	8000ae4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fd ff1c 	bl	8000ae4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e2ad      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cba:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe0>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fd ff0c 	bl	8000ae4 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fd ff08 	bl	8000ae4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e299      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ce2:	4b52      	ldr	r3, [pc, #328]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x108>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d05a      	beq.n	8002db4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_OscConfig+0x176>
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d116      	bne.n	8002d3e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x160>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e276      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	493d      	ldr	r1, [pc, #244]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3c:	e03a      	b.n	8002db4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d020      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCC_OscConfig+0x268>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fd feca 	bl	8000ae4 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fd fec6 	bl	8000ae4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e257      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	492a      	ldr	r1, [pc, #168]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
 8002d86:	e015      	b.n	8002db4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d88:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_RCC_OscConfig+0x268>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fd fea9 	bl	8000ae4 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fd fea5 	bl	8000ae4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e236      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b8 	beq.w	8002f32 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d170      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_OscConfig+0x218>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e21a      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1a      	ldr	r2, [r3, #32]
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d921      	bls.n	8002e34 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fc67 	bl	80036c8 <RCC_SetFlashLatencyFromMSIRange>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e208      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4906      	ldr	r1, [pc, #24]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	4901      	ldr	r1, [pc, #4]	; (8002e2c <HAL_RCC_OscConfig+0x264>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
 8002e2a:	e020      	b.n	8002e6e <HAL_RCC_OscConfig+0x2a6>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e34:	4b99      	ldr	r3, [pc, #612]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4996      	ldr	r1, [pc, #600]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e46:	4b95      	ldr	r3, [pc, #596]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	4991      	ldr	r1, [pc, #580]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fc32 	bl	80036c8 <RCC_SetFlashLatencyFromMSIRange>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1d3      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	3301      	adds	r3, #1
 8002e76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e7e:	4a87      	ldr	r2, [pc, #540]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002e80:	6892      	ldr	r2, [r2, #8]
 8002e82:	0912      	lsrs	r2, r2, #4
 8002e84:	f002 020f 	and.w	r2, r2, #15
 8002e88:	4985      	ldr	r1, [pc, #532]	; (80030a0 <HAL_RCC_OscConfig+0x4d8>)
 8002e8a:	5c8a      	ldrb	r2, [r1, r2]
 8002e8c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e8e:	4a85      	ldr	r2, [pc, #532]	; (80030a4 <HAL_RCC_OscConfig+0x4dc>)
 8002e90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e92:	4b85      	ldr	r3, [pc, #532]	; (80030a8 <HAL_RCC_OscConfig+0x4e0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fdd8 	bl	8000a4c <HAL_InitTick>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d045      	beq.n	8002f32 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	e1b5      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d029      	beq.n	8002f06 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eb2:	4b7e      	ldr	r3, [pc, #504]	; (80030ac <HAL_RCC_OscConfig+0x4e4>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fd fe14 	bl	8000ae4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec0:	f7fd fe10 	bl	8000ae4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e1a1      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ed2:	4b72      	ldr	r3, [pc, #456]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ede:	4b6f      	ldr	r3, [pc, #444]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	496c      	ldr	r1, [pc, #432]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	4967      	ldr	r1, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f06:	4b69      	ldr	r3, [pc, #420]	; (80030ac <HAL_RCC_OscConfig+0x4e4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd fdea 	bl	8000ae4 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f14:	f7fd fde6 	bl	8000ae4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e177      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f26:	4b5d      	ldr	r3, [pc, #372]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d030      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f46:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7fd fdca 	bl	8000ae4 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f54:	f7fd fdc6 	bl	8000ae4 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e157      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f66:	4b4d      	ldr	r3, [pc, #308]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x38c>
 8002f72:	e015      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f74:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7fd fdb3 	bl	8000ae4 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f82:	f7fd fdaf 	bl	8000ae4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e140      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f94:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80b5 	beq.w	8003118 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb2:	4b3a      	ldr	r3, [pc, #232]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10d      	bne.n	8002fda <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	4a36      	ldr	r2, [pc, #216]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6253      	str	r3, [r2, #36]	; 0x24
 8002fca:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b33      	ldr	r3, [pc, #204]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a32      	ldr	r2, [pc, #200]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7fd fd77 	bl	8000ae4 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7fd fd73 	bl	8000ae4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b64      	cmp	r3, #100	; 0x64
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e104      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x466>
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6353      	str	r3, [r2, #52]	; 0x34
 800302c:	e02d      	b.n	800308a <HAL_RCC_OscConfig+0x4c2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x488>
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 800303c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003040:	6353      	str	r3, [r2, #52]	; 0x34
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	4a15      	ldr	r2, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800304c:	6353      	str	r3, [r2, #52]	; 0x34
 800304e:	e01c      	b.n	800308a <HAL_RCC_OscConfig+0x4c2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d10c      	bne.n	8003072 <HAL_RCC_OscConfig+0x4aa>
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	4a0f      	ldr	r2, [pc, #60]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 800305e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003062:	6353      	str	r3, [r2, #52]	; 0x34
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	4a0c      	ldr	r2, [pc, #48]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6353      	str	r3, [r2, #52]	; 0x34
 8003070:	e00b      	b.n	800308a <HAL_RCC_OscConfig+0x4c2>
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307c:	6353      	str	r3, [r2, #52]	; 0x34
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	4a06      	ldr	r2, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8003084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003088:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d024      	beq.n	80030dc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fd fd27 	bl	8000ae4 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003098:	e019      	b.n	80030ce <HAL_RCC_OscConfig+0x506>
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	08009a18 	.word	0x08009a18
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000004 	.word	0x20000004
 80030ac:	42470020 	.word	0x42470020
 80030b0:	42470680 	.word	0x42470680
 80030b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fd fd14 	bl	8000ae4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0a3      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ce:	4b54      	ldr	r3, [pc, #336]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 80030d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ee      	beq.n	80030b8 <HAL_RCC_OscConfig+0x4f0>
 80030da:	e014      	b.n	8003106 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fd fd02 	bl	8000ae4 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fd fcfe 	bl	8000ae4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e08d      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030fa:	4b49      	ldr	r3, [pc, #292]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ee      	bne.n	80030e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003106:	7ffb      	ldrb	r3, [r7, #31]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310c:	4b44      	ldr	r3, [pc, #272]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	4a43      	ldr	r2, [pc, #268]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 8003112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003116:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	d079      	beq.n	8003214 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d056      	beq.n	80031d4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b02      	cmp	r3, #2
 800312c:	d13b      	bne.n	80031a6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_RCC_OscConfig+0x65c>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fd fcd6 	bl	8000ae4 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313c:	f7fd fcd2 	bl	8000ae4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e063      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800314e:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315a:	4b31      	ldr	r3, [pc, #196]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	4319      	orrs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	430b      	orrs	r3, r1
 8003172:	492b      	ldr	r1, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x65c>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fd fcb1 	bl	8000ae4 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fd fcad 	bl	8000ae4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e03e      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x5be>
 80031a4:	e036      	b.n	8003214 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <HAL_RCC_OscConfig+0x65c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fd fc9a 	bl	8000ae4 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fd fc96 	bl	8000ae4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e027      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x5ec>
 80031d2:	e01f      	b.n	8003214 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e01a      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <HAL_RCC_OscConfig+0x658>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d10d      	bne.n	8003210 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d106      	bne.n	8003210 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	42470060 	.word	0x42470060

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e11a      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b8f      	ldr	r3, [pc, #572]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d919      	bls.n	800327e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_ClockConfig+0x34>
 8003250:	4b8a      	ldr	r3, [pc, #552]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a89      	ldr	r2, [pc, #548]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b87      	ldr	r3, [pc, #540]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 0201 	bic.w	r2, r3, #1
 8003264:	4985      	ldr	r1, [pc, #532]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	4313      	orrs	r3, r2
 800326a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326c:	4b83      	ldr	r3, [pc, #524]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d001      	beq.n	800327e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0f9      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328a:	4b7d      	ldr	r3, [pc, #500]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	497a      	ldr	r1, [pc, #488]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 808e 	beq.w	80033c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b2:	4b73      	ldr	r3, [pc, #460]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d121      	bne.n	8003302 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0d7      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ca:	4b6d      	ldr	r3, [pc, #436]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d115      	bne.n	8003302 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0cb      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0bf      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032f2:	4b63      	ldr	r3, [pc, #396]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0b7      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b5f      	ldr	r3, [pc, #380]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	495c      	ldr	r1, [pc, #368]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fd fbe6 	bl	8000ae4 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d112      	bne.n	8003348 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fd fbde 	bl	8000ae4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e09b      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800333a:	4b51      	ldr	r3, [pc, #324]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	d1ee      	bne.n	8003324 <HAL_RCC_ClockConfig+0xfc>
 8003346:	e03e      	b.n	80033c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d112      	bne.n	8003376 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003352:	f7fd fbc7 	bl	8000ae4 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e084      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003368:	4b45      	ldr	r3, [pc, #276]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d1ee      	bne.n	8003352 <HAL_RCC_ClockConfig+0x12a>
 8003374:	e027      	b.n	80033c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d11d      	bne.n	80033ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003380:	f7fd fbb0 	bl	8000ae4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e06d      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003396:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d1ee      	bne.n	8003380 <HAL_RCC_ClockConfig+0x158>
 80033a2:	e010      	b.n	80033c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a4:	f7fd fb9e 	bl	8000ae4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e05b      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ee      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d219      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_ClockConfig+0x1be>
 80033da:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a27      	ldr	r2, [pc, #156]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 80033e0:	f043 0304 	orr.w	r3, r3, #4
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 0201 	bic.w	r2, r3, #1
 80033ee:	4923      	ldr	r1, [pc, #140]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <HAL_RCC_ClockConfig+0x254>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e034      	b.n	8003472 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003414:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4917      	ldr	r1, [pc, #92]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	490f      	ldr	r1, [pc, #60]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003446:	f000 f823 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <HAL_RCC_ClockConfig+0x258>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	490b      	ldr	r1, [pc, #44]	; (8003484 <HAL_RCC_ClockConfig+0x25c>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd faf0 	bl	8000a4c <HAL_InitTick>
 800346c:	4603      	mov	r3, r0
 800346e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003470:	7afb      	ldrb	r3, [r7, #11]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023c00 	.word	0x40023c00
 8003480:	40023800 	.word	0x40023800
 8003484:	08009a18 	.word	0x08009a18
 8003488:	20000000 	.word	0x20000000
 800348c:	20000004 	.word	0x20000004

08003490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b092      	sub	sp, #72	; 0x48
 8003496:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003498:	4b79      	ldr	r3, [pc, #484]	; (8003680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800349e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d00d      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x34>
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	f200 80d5 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x1c8>
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d002      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x28>
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d003      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x2e>
 80034b6:	e0cf      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b8:	4b72      	ldr	r3, [pc, #456]	; (8003684 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034ba:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034bc:	e0da      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034be:	4b71      	ldr	r3, [pc, #452]	; (8003684 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034c2:	e0d7      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c6:	0c9b      	lsrs	r3, r3, #18
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	4b6e      	ldr	r3, [pc, #440]	; (8003688 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d4:	0d9b      	lsrs	r3, r3, #22
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	3301      	adds	r3, #1
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034de:	4b68      	ldr	r3, [pc, #416]	; (8003680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d05d      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	2200      	movs	r2, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	4611      	mov	r1, r2
 80034f2:	4604      	mov	r4, r0
 80034f4:	460d      	mov	r5, r1
 80034f6:	4622      	mov	r2, r4
 80034f8:	462b      	mov	r3, r5
 80034fa:	f04f 0000 	mov.w	r0, #0
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	0159      	lsls	r1, r3, #5
 8003504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003508:	0150      	lsls	r0, r2, #5
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4621      	mov	r1, r4
 8003510:	1a51      	subs	r1, r2, r1
 8003512:	6139      	str	r1, [r7, #16]
 8003514:	4629      	mov	r1, r5
 8003516:	eb63 0301 	sbc.w	r3, r3, r1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003528:	4659      	mov	r1, fp
 800352a:	018b      	lsls	r3, r1, #6
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003532:	4651      	mov	r1, sl
 8003534:	018a      	lsls	r2, r1, #6
 8003536:	46d4      	mov	ip, sl
 8003538:	ebb2 080c 	subs.w	r8, r2, ip
 800353c:	4659      	mov	r1, fp
 800353e:	eb63 0901 	sbc.w	r9, r3, r1
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800354e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003556:	4690      	mov	r8, r2
 8003558:	4699      	mov	r9, r3
 800355a:	4623      	mov	r3, r4
 800355c:	eb18 0303 	adds.w	r3, r8, r3
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	462b      	mov	r3, r5
 8003564:	eb49 0303 	adc.w	r3, r9, r3
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003576:	4629      	mov	r1, r5
 8003578:	028b      	lsls	r3, r1, #10
 800357a:	4620      	mov	r0, r4
 800357c:	4629      	mov	r1, r5
 800357e:	4604      	mov	r4, r0
 8003580:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003584:	4601      	mov	r1, r0
 8003586:	028a      	lsls	r2, r1, #10
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	2200      	movs	r2, #0
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
 8003592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003598:	f7fc fdf8 	bl	800018c <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	647b      	str	r3, [r7, #68]	; 0x44
 80035a4:	e055      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	2200      	movs	r2, #0
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	627a      	str	r2, [r7, #36]	; 0x24
 80035ae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035b2:	4642      	mov	r2, r8
 80035b4:	464b      	mov	r3, r9
 80035b6:	f04f 0000 	mov.w	r0, #0
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	0159      	lsls	r1, r3, #5
 80035c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c4:	0150      	lsls	r0, r2, #5
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	46c4      	mov	ip, r8
 80035cc:	ebb2 0a0c 	subs.w	sl, r2, ip
 80035d0:	4640      	mov	r0, r8
 80035d2:	4649      	mov	r1, r9
 80035d4:	468c      	mov	ip, r1
 80035d6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035e6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035ea:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035ee:	ebb2 040a 	subs.w	r4, r2, sl
 80035f2:	eb63 050b 	sbc.w	r5, r3, fp
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	00eb      	lsls	r3, r5, #3
 8003600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003604:	00e2      	lsls	r2, r4, #3
 8003606:	4614      	mov	r4, r2
 8003608:	461d      	mov	r5, r3
 800360a:	4603      	mov	r3, r0
 800360c:	18e3      	adds	r3, r4, r3
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	460b      	mov	r3, r1
 8003612:	eb45 0303 	adc.w	r3, r5, r3
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003624:	4629      	mov	r1, r5
 8003626:	028b      	lsls	r3, r1, #10
 8003628:	4620      	mov	r0, r4
 800362a:	4629      	mov	r1, r5
 800362c:	4604      	mov	r4, r0
 800362e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003632:	4601      	mov	r1, r0
 8003634:	028a      	lsls	r2, r1, #10
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363c:	2200      	movs	r2, #0
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	61fa      	str	r2, [r7, #28]
 8003642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003646:	f7fc fda1 	bl	800018c <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4613      	mov	r3, r2
 8003650:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003654:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003656:	e00d      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0b5b      	lsrs	r3, r3, #13
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	3301      	adds	r3, #1
 8003668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003672:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003676:	4618      	mov	r0, r3
 8003678:	3748      	adds	r7, #72	; 0x48
 800367a:	46bd      	mov	sp, r7
 800367c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	00f42400 	.word	0x00f42400
 8003688:	08009a0c 	.word	0x08009a0c

0800368c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <HAL_RCC_GetHCLKFreq+0x10>)
 8003692:	681b      	ldr	r3, [r3, #0]
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr
 800369c:	20000000 	.word	0x20000000

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a4:	f7ff fff2 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4903      	ldr	r1, [pc, #12]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	08009a28 	.word	0x08009a28

080036c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036d4:	4b29      	ldr	r3, [pc, #164]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d12c      	bne.n	800373a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e0:	4b26      	ldr	r3, [pc, #152]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e016      	b.n	8003726 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	4a1f      	ldr	r2, [pc, #124]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6253      	str	r3, [r2, #36]	; 0x24
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003718:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800372c:	d105      	bne.n	800373a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003734:	d101      	bne.n	800373a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003736:	2301      	movs	r3, #1
 8003738:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003746:	f043 0304 	orr.w	r3, r3, #4
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 0201 	bic.w	r2, r3, #1
 8003754:	490b      	ldr	r1, [pc, #44]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	429a      	cmp	r2, r3
 8003768:	d001      	beq.n	800376e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	40007000 	.word	0x40007000
 8003784:	40023c00 	.word	0x40023c00

08003788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e06e      	b.n	8003878 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037aa:	d009      	beq.n	80037c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	61da      	str	r2, [r3, #28]
 80037b2:	e005      	b.n	80037c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f846 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	ea42 0103 	orr.w	r1, r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	0c1a      	lsrs	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f002 0204 	and.w	r2, r2, #4
 8003866:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_SPI_Transmit+0x22>
 800389e:	2302      	movs	r3, #2
 80038a0:	e126      	b.n	8003af0 <HAL_SPI_Transmit+0x270>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038aa:	f7fd f91b 	bl	8000ae4 <HAL_GetTick>
 80038ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d002      	beq.n	80038c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
 80038c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c4:	e10b      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_Transmit+0x52>
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d6:	e102      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2203      	movs	r2, #3
 80038dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391e:	d10f      	bne.n	8003940 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d007      	beq.n	800395e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003966:	d14b      	bne.n	8003a00 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_Transmit+0xf6>
 8003970:	8afb      	ldrh	r3, [r7, #22]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d13e      	bne.n	80039f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800399a:	e02b      	b.n	80039f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d112      	bne.n	80039d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80039ce:	e011      	b.n	80039f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d0:	f7fd f888 	bl	8000ae4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d803      	bhi.n	80039e8 <HAL_SPI_Transmit+0x168>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d102      	bne.n	80039ee <HAL_SPI_Transmit+0x16e>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f2:	e074      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ce      	bne.n	800399c <HAL_SPI_Transmit+0x11c>
 80039fe:	e04c      	b.n	8003a9a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_Transmit+0x18e>
 8003a08:	8afb      	ldrh	r3, [r7, #22]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d140      	bne.n	8003a90 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a34:	e02c      	b.n	8003a90 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d113      	bne.n	8003a6c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	7812      	ldrb	r2, [r2, #0]
 8003a50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a6a:	e011      	b.n	8003a90 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6c:	f7fd f83a 	bl	8000ae4 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d803      	bhi.n	8003a84 <HAL_SPI_Transmit+0x204>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d102      	bne.n	8003a8a <HAL_SPI_Transmit+0x20a>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a8e:	e026      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1cd      	bne.n	8003a36 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fbcc 	bl	800423c <SPI_EndRxTxTransaction>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e000      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
  }

error:
 8003adc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aee:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b14:	d112      	bne.n	8003b3c <HAL_SPI_Receive+0x44>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10e      	bne.n	8003b3c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2204      	movs	r2, #4
 8003b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f8f1 	bl	8003d1a <HAL_SPI_TransmitReceive>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	e0ea      	b.n	8003d12 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_SPI_Receive+0x52>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0e3      	b.n	8003d12 <HAL_SPI_Receive+0x21a>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b52:	f7fc ffc7 	bl	8000ae4 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
 8003b66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b68:	e0ca      	b.n	8003d00 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_SPI_Receive+0x7e>
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b7a:	e0c1      	b.n	8003d00 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	d10f      	bne.n	8003be4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003be2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d007      	beq.n	8003c02 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d162      	bne.n	8003cd0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c0a:	e02e      	b.n	8003c6a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d115      	bne.n	8003c46 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f103 020c 	add.w	r2, r3, #12
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	7812      	ldrb	r2, [r2, #0]
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c44:	e011      	b.n	8003c6a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c46:	f7fc ff4d 	bl	8000ae4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d803      	bhi.n	8003c5e <HAL_SPI_Receive+0x166>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d102      	bne.n	8003c64 <HAL_SPI_Receive+0x16c>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c68:	e04a      	b.n	8003d00 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1cb      	bne.n	8003c0c <HAL_SPI_Receive+0x114>
 8003c74:	e031      	b.n	8003cda <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d113      	bne.n	8003cac <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	1c9a      	adds	r2, r3, #2
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003caa:	e011      	b.n	8003cd0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cac:	f7fc ff1a 	bl	8000ae4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d803      	bhi.n	8003cc4 <HAL_SPI_Receive+0x1cc>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d102      	bne.n	8003cca <HAL_SPI_Receive+0x1d2>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cce:	e017      	b.n	8003d00 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1cd      	bne.n	8003c76 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	6839      	ldr	r1, [r7, #0]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fa46 	bl	8004170 <SPI_EndRxTransaction>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
 8003cfc:	e000      	b.n	8003d00 <HAL_SPI_Receive+0x208>
  }

error :
 8003cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b08c      	sub	sp, #48	; 0x30
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x26>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e18a      	b.n	8004056 <HAL_SPI_TransmitReceive+0x33c>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d48:	f7fc fecc 	bl	8000ae4 <HAL_GetTick>
 8003d4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d00f      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x70>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d70:	d107      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x68>
 8003d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d003      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d88:	e15b      	b.n	8004042 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x82>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x82>
 8003d96:	887b      	ldrh	r3, [r7, #2]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003da2:	e14e      	b.n	8004042 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d003      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2205      	movs	r2, #5
 8003db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	887a      	ldrh	r2, [r7, #2]
 8003dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	887a      	ldrh	r2, [r7, #2]
 8003dda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d007      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e14:	d178      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_SPI_TransmitReceive+0x10a>
 8003e1e:	8b7b      	ldrh	r3, [r7, #26]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d166      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e48:	e053      	b.n	8003ef2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d11b      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x176>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0x176>
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d113      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d119      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x1b8>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d014      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	b292      	uxth	r2, r2
 8003eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ed2:	f7fc fe07 	bl	8000ae4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d807      	bhi.n	8003ef2 <HAL_SPI_TransmitReceive+0x1d8>
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d003      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ef0:	e0a7      	b.n	8004042 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1a6      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x130>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1a1      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x130>
 8003f06:	e07c      	b.n	8004002 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x1fc>
 8003f10:	8b7b      	ldrh	r3, [r7, #26]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d16b      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	7812      	ldrb	r2, [r2, #0]
 8003f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3c:	e057      	b.n	8003fee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d11c      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x26c>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d017      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x26c>
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d114      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d119      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x2ae>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d014      	beq.n	8003fc8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fc8:	f7fc fd8c 	bl	8000ae4 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d803      	bhi.n	8003fe0 <HAL_SPI_TransmitReceive+0x2c6>
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d102      	bne.n	8003fe6 <HAL_SPI_TransmitReceive+0x2cc>
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fec:	e029      	b.n	8004042 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1a2      	bne.n	8003f3e <HAL_SPI_TransmitReceive+0x224>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d19d      	bne.n	8003f3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f918 	bl	800423c <SPI_EndRxTxTransaction>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d006      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800401e:	e010      	b.n	8004042 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	e000      	b.n	8004042 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004040:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004056:	4618      	mov	r0, r3
 8004058:	3730      	adds	r7, #48	; 0x30
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004070:	f7fc fd38 	bl	8000ae4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4413      	add	r3, r2
 800407e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004080:	f7fc fd30 	bl	8000ae4 <HAL_GetTick>
 8004084:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	015b      	lsls	r3, r3, #5
 800408c:	0d1b      	lsrs	r3, r3, #20
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004096:	e054      	b.n	8004142 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d050      	beq.n	8004142 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040a0:	f7fc fd20 	bl	8000ae4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d902      	bls.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d13d      	bne.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ce:	d111      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d8:	d004      	beq.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d107      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fc:	d10f      	bne.n	800411e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800411c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e017      	b.n	8004162 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3b01      	subs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4013      	ands	r3, r2
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	429a      	cmp	r2, r3
 800415e:	d19b      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000000 	.word	0x20000000

08004170 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004184:	d111      	bne.n	80041aa <SPI_EndRxTransaction+0x3a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800418e:	d004      	beq.n	800419a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004198:	d107      	bne.n	80041aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b2:	d12a      	bne.n	800420a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d012      	beq.n	80041e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff ff49 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02d      	beq.n	8004230 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e026      	b.n	8004232 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2101      	movs	r1, #1
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff ff36 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01a      	beq.n	8004230 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e013      	b.n	8004232 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2200      	movs	r2, #0
 8004212:	2101      	movs	r1, #1
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff ff23 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e000      	b.n	8004232 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <SPI_EndRxTxTransaction+0x7c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <SPI_EndRxTxTransaction+0x80>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0d5b      	lsrs	r3, r3, #21
 8004254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004266:	d112      	bne.n	800428e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff fef4 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e00f      	b.n	80042ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3b01      	subs	r3, #1
 8004298:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d0f2      	beq.n	800428e <SPI_EndRxTxTransaction+0x52>
 80042a8:	e000      	b.n	80042ac <SPI_EndRxTxTransaction+0x70>
        break;
 80042aa:	bf00      	nop
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000000 	.word	0x20000000
 80042bc:	165e9f81 	.word	0x165e9f81

080042c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	b29b      	uxth	r3, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	b29b      	uxth	r3, r3
 800430a:	4013      	ands	r3, r2
 800430c:	b29a      	uxth	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004320:	b084      	sub	sp, #16
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	f107 0014 	add.w	r0, r7, #20
 800432e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	b004      	add	sp, #16
 800435e:	4770      	bx	lr

08004360 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004360:	b480      	push	{r7}
 8004362:	b09b      	sub	sp, #108	; 0x6c
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	78db      	ldrb	r3, [r3, #3]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d81f      	bhi.n	80043d2 <USB_ActivateEndpoint+0x72>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <USB_ActivateEndpoint+0x38>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043db 	.word	0x080043db
 80043a4:	080043b7 	.word	0x080043b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043b4:	e012      	b.n	80043dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80043be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043c2:	e00b      	b.n	80043dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043d0:	e004      	b.n	80043dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80043d8:	e000      	b.n	80043dc <USB_ActivateEndpoint+0x7c>
      break;
 80043da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	441a      	add	r2, r3
 80043e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004414:	b29a      	uxth	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	4313      	orrs	r3, r2
 800441e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	441a      	add	r2, r3
 800442c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004440:	b29b      	uxth	r3, r3
 8004442:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	7b1b      	ldrb	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f040 8149 	bne.w	80046e0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	785b      	ldrb	r3, [r3, #1]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8084 	beq.w	8004560 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4413      	add	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	011a      	lsls	r2, r3, #4
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	88db      	ldrh	r3, [r3, #6]
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	b29b      	uxth	r3, r3
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	81fb      	strh	r3, [r7, #14]
 800449a:	89fb      	ldrh	r3, [r7, #14]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01b      	beq.n	80044dc <USB_ActivateEndpoint+0x17c>
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	81bb      	strh	r3, [r7, #12]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	89bb      	ldrh	r3, [r7, #12]
 80044c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044d8:	b29b      	uxth	r3, r3
 80044da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	78db      	ldrb	r3, [r3, #3]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d020      	beq.n	8004526 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fa:	813b      	strh	r3, [r7, #8]
 80044fc:	893b      	ldrh	r3, [r7, #8]
 80044fe:	f083 0320 	eor.w	r3, r3, #32
 8004502:	813b      	strh	r3, [r7, #8]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	893b      	ldrh	r3, [r7, #8]
 8004510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	b29b      	uxth	r3, r3
 8004522:	8013      	strh	r3, [r2, #0]
 8004524:	e27f      	b.n	8004a26 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	441a      	add	r2, r3
 8004548:	897b      	ldrh	r3, [r7, #10]
 800454a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455a:	b29b      	uxth	r3, r3
 800455c:	8013      	strh	r3, [r2, #0]
 800455e:	e262      	b.n	8004a26 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456a:	b29b      	uxth	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	4413      	add	r3, r2
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	011a      	lsls	r2, r3, #4
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	4413      	add	r3, r2
 800457e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	88db      	ldrh	r3, [r3, #6]
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	b29b      	uxth	r3, r3
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	4413      	add	r3, r2
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	011a      	lsls	r2, r3, #4
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	4413      	add	r3, r2
 80045b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045b6:	623b      	str	r3, [r7, #32]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d112      	bne.n	80045e6 <USB_ActivateEndpoint+0x286>
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	e02f      	b.n	8004646 <USB_ActivateEndpoint+0x2e6>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b3e      	cmp	r3, #62	; 0x3e
 80045ec:	d813      	bhi.n	8004616 <USB_ActivateEndpoint+0x2b6>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	663b      	str	r3, [r7, #96]	; 0x60
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <USB_ActivateEndpoint+0x2a8>
 8004602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004604:	3301      	adds	r3, #1
 8004606:	663b      	str	r3, [r7, #96]	; 0x60
 8004608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800460a:	b29b      	uxth	r3, r3
 800460c:	029b      	lsls	r3, r3, #10
 800460e:	b29a      	uxth	r2, r3
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	e017      	b.n	8004646 <USB_ActivateEndpoint+0x2e6>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	663b      	str	r3, [r7, #96]	; 0x60
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <USB_ActivateEndpoint+0x2d0>
 800462a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462c:	3b01      	subs	r3, #1
 800462e:	663b      	str	r3, [r7, #96]	; 0x60
 8004630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004632:	b29b      	uxth	r3, r3
 8004634:	029b      	lsls	r3, r3, #10
 8004636:	b29b      	uxth	r3, r3
 8004638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004640:	b29a      	uxth	r2, r3
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	83fb      	strh	r3, [r7, #30]
 8004654:	8bfb      	ldrh	r3, [r7, #30]
 8004656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01b      	beq.n	8004696 <USB_ActivateEndpoint+0x336>
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	83bb      	strh	r3, [r7, #28]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	8bbb      	ldrh	r3, [r7, #28]
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800468e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ac:	837b      	strh	r3, [r7, #26]
 80046ae:	8b7b      	ldrh	r3, [r7, #26]
 80046b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046b4:	837b      	strh	r3, [r7, #26]
 80046b6:	8b7b      	ldrh	r3, [r7, #26]
 80046b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046bc:	837b      	strh	r3, [r7, #26]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	8b7b      	ldrh	r3, [r7, #26]
 80046ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046da:	b29b      	uxth	r3, r3
 80046dc:	8013      	strh	r3, [r2, #0]
 80046de:	e1a2      	b.n	8004a26 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	441a      	add	r2, r3
 8004704:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004710:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004718:	b29b      	uxth	r3, r3
 800471a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004726:	b29b      	uxth	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800472c:	4413      	add	r3, r2
 800472e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	011a      	lsls	r2, r3, #4
 8004736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004738:	4413      	add	r3, r2
 800473a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473e:	657b      	str	r3, [r7, #84]	; 0x54
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	891b      	ldrh	r3, [r3, #8]
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	b29b      	uxth	r3, r3
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	653b      	str	r3, [r7, #80]	; 0x50
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800475a:	b29b      	uxth	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	4413      	add	r3, r2
 8004762:	653b      	str	r3, [r7, #80]	; 0x50
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	011a      	lsls	r2, r3, #4
 800476a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800476c:	4413      	add	r3, r2
 800476e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	895b      	ldrh	r3, [r3, #10]
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004782:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 8091 	bne.w	80048b0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800479c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800479e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01b      	beq.n	80047de <USB_ActivateEndpoint+0x47e>
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80047ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80047ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01b      	beq.n	800482e <USB_ActivateEndpoint+0x4ce>
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004846:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004848:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800484c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800484e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004854:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488c:	867b      	strh	r3, [r7, #50]	; 0x32
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
 80048ae:	e0ba      	b.n	8004a26 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01d      	beq.n	8004908 <USB_ActivateEndpoint+0x5a8>
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004918:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01d      	beq.n	8004960 <USB_ActivateEndpoint+0x600>
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	441a      	add	r2, r3
 8004948:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	78db      	ldrb	r3, [r3, #3]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d024      	beq.n	80049b2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004982:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004986:	f083 0320 	eor.w	r3, r3, #32
 800498a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800499c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	8013      	strh	r3, [r2, #0]
 80049b0:	e01d      	b.n	80049ee <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	441a      	add	r2, r3
 8004a10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004a26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	376c      	adds	r7, #108	; 0x6c
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b08d      	sub	sp, #52	; 0x34
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	7b1b      	ldrb	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 808e 	bne.w	8004b64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d044      	beq.n	8004ada <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	81bb      	strh	r3, [r7, #12]
 8004a5e:	89bb      	ldrh	r3, [r7, #12]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01b      	beq.n	8004aa0 <USB_DeactivateEndpoint+0x6c>
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	817b      	strh	r3, [r7, #10]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab6:	813b      	strh	r3, [r7, #8]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	441a      	add	r2, r3
 8004ac2:	893b      	ldrh	r3, [r7, #8]
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]
 8004ad8:	e192      	b.n	8004e00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	827b      	strh	r3, [r7, #18]
 8004ae8:	8a7b      	ldrh	r3, [r7, #18]
 8004aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01b      	beq.n	8004b2a <USB_DeactivateEndpoint+0xf6>
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	823b      	strh	r3, [r7, #16]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	8a3b      	ldrh	r3, [r7, #16]
 8004b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b40:	81fb      	strh	r3, [r7, #14]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	89fb      	ldrh	r3, [r7, #14]
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]
 8004b62:	e14d      	b.n	8004e00 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f040 80a5 	bne.w	8004cb8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	843b      	strh	r3, [r7, #32]
 8004b7c:	8c3b      	ldrh	r3, [r7, #32]
 8004b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01b      	beq.n	8004bbe <USB_DeactivateEndpoint+0x18a>
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	83fb      	strh	r3, [r7, #30]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	8bfb      	ldrh	r3, [r7, #30]
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	83bb      	strh	r3, [r7, #28]
 8004bcc:	8bbb      	ldrh	r3, [r7, #28]
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01b      	beq.n	8004c0e <USB_DeactivateEndpoint+0x1da>
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	837b      	strh	r3, [r7, #26]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	8b7b      	ldrh	r3, [r7, #26]
 8004bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	833b      	strh	r3, [r7, #24]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	8b3b      	ldrh	r3, [r7, #24]
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5c:	82fb      	strh	r3, [r7, #22]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	8afb      	ldrh	r3, [r7, #22]
 8004c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c94:	82bb      	strh	r3, [r7, #20]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	8abb      	ldrh	r3, [r7, #20]
 8004ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]
 8004cb6:	e0a3      	b.n	8004e00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <USB_DeactivateEndpoint+0x2d4>
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <USB_DeactivateEndpoint+0x324>
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	847b      	strh	r3, [r7, #34]	; 0x22
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3734      	adds	r7, #52	; 0x34
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b0cc      	sub	sp, #304	; 0x130
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e1a:	6018      	str	r0, [r3, #0]
 8004e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e24:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	f041 817d 	bne.w	8006132 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d908      	bls.n	8004e66 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e64:	e007      	b.n	8004e76 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	7b1b      	ldrb	r3, [r3, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d152      	bne.n	8004f2c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6959      	ldr	r1, [r3, #20]
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	88da      	ldrh	r2, [r3, #6]
 8004e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ea8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	f001 ff0e 	bl	8006cce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004eba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ebe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004edc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ee0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ee4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	440a      	add	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	011a      	lsls	r2, r3, #4
 8004efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f00:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4413      	add	r3, r2
 8004f08:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	f001 b8b5 	b.w	8006096 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	78db      	ldrb	r3, [r3, #3]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	f040 84c6 	bne.w	80058ca <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6a1a      	ldr	r2, [r3, #32]
 8004f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	f240 8443 	bls.w	80057e2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a1a      	ldr	r2, [r3, #32]
 8004fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc8:	1ad2      	subs	r2, r2, r3
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 823e 	beq.w	800547a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005006:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800500a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f040 809a 	bne.w	8005158 <USB_EPStartXfer+0x34c>
 8005024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005030:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005046:	b29b      	uxth	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005052:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005056:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	440a      	add	r2, r1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	011a      	lsls	r2, r3, #4
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4413      	add	r3, r2
 800507a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800507e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005082:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d122      	bne.n	80050d6 <USB_EPStartXfer+0x2ca>
 8005090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005094:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	801a      	strh	r2, [r3, #0]
 80050b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e079      	b.n	80051ca <USB_EPStartXfer+0x3be>
 80050d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050da:	2b3e      	cmp	r3, #62	; 0x3e
 80050dc:	d81b      	bhi.n	8005116 <USB_EPStartXfer+0x30a>
 80050de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <USB_EPStartXfer+0x2f2>
 80050f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005102:	b29b      	uxth	r3, r3
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	b29a      	uxth	r2, r3
 8005108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	e059      	b.n	80051ca <USB_EPStartXfer+0x3be>
 8005116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <USB_EPStartXfer+0x32a>
 800512c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005130:	3b01      	subs	r3, #1
 8005132:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800513a:	b29b      	uxth	r3, r3
 800513c:	029b      	lsls	r3, r3, #10
 800513e:	b29b      	uxth	r3, r3
 8005140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005148:	b29a      	uxth	r2, r3
 800514a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	e038      	b.n	80051ca <USB_EPStartXfer+0x3be>
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d130      	bne.n	80051ca <USB_EPStartXfer+0x3be>
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005176:	b29b      	uxth	r3, r3
 8005178:	4619      	mov	r1, r3
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005182:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005186:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	440a      	add	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	011a      	lsls	r2, r3, #4
 800519e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051bc:	b29a      	uxth	r2, r3
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	895b      	ldrh	r3, [r3, #10]
 80051d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6959      	ldr	r1, [r3, #20]
 80051e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051f8:	6800      	ldr	r0, [r0, #0]
 80051fa:	f001 fd68 	bl	8006cce <USB_WritePMA>
            ep->xfer_buff += len;
 80051fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520e:	441a      	add	r2, r3
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800521c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	429a      	cmp	r2, r3
 8005236:	d90f      	bls.n	8005258 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005248:	1ad2      	subs	r2, r2, r3
 800524a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	621a      	str	r2, [r3, #32]
 8005256:	e00e      	b.n	8005276 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f040 809a 	bne.w	80053bc <USB_EPStartXfer+0x5b0>
 8005288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005290:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005294:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052ba:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	440a      	add	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	011a      	lsls	r2, r3, #4
 80052d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d122      	bne.n	800533a <USB_EPStartXfer+0x52e>
 80052f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005306:	b29a      	uxth	r2, r3
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005318:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005330:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e083      	b.n	8005442 <USB_EPStartXfer+0x636>
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	2b3e      	cmp	r3, #62	; 0x3e
 8005340:	d81b      	bhi.n	800537a <USB_EPStartXfer+0x56e>
 8005342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800534c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <USB_EPStartXfer+0x556>
 8005358:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800535c:	3301      	adds	r3, #1
 800535e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005362:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005366:	b29b      	uxth	r3, r3
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	b29a      	uxth	r2, r3
 800536c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005370:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e063      	b.n	8005442 <USB_EPStartXfer+0x636>
 800537a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <USB_EPStartXfer+0x58e>
 8005390:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005394:	3b01      	subs	r3, #1
 8005396:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800539a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800539e:	b29b      	uxth	r3, r3
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e042      	b.n	8005442 <USB_EPStartXfer+0x636>
 80053bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d13a      	bne.n	8005442 <USB_EPStartXfer+0x636>
 80053cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053d8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4619      	mov	r1, r3
 80053f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053fe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	440a      	add	r2, r1
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	011a      	lsls	r2, r3, #4
 8005416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4413      	add	r3, r2
 8005422:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005434:	b29a      	uxth	r2, r3
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	891b      	ldrh	r3, [r3, #8]
 800544e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6959      	ldr	r1, [r3, #20]
 800545e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005462:	b29b      	uxth	r3, r3
 8005464:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005468:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800546c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005470:	6800      	ldr	r0, [r0, #0]
 8005472:	f001 fc2c 	bl	8006cce <USB_WritePMA>
 8005476:	f000 be0e 	b.w	8006096 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800547a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d16d      	bne.n	8005566 <USB_EPStartXfer+0x75a>
 800548a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	64bb      	str	r3, [r7, #72]	; 0x48
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054aa:	4413      	add	r3, r2
 80054ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	011a      	lsls	r2, r3, #4
 80054bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054be:	4413      	add	r3, r2
 80054c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054c4:	647b      	str	r3, [r7, #68]	; 0x44
 80054c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d112      	bne.n	80054f4 <USB_EPStartXfer+0x6e8>
 80054ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054d8:	b29a      	uxth	r2, r3
 80054da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e063      	b.n	80055bc <USB_EPStartXfer+0x7b0>
 80054f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f8:	2b3e      	cmp	r3, #62	; 0x3e
 80054fa:	d817      	bhi.n	800552c <USB_EPStartXfer+0x720>
 80054fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005500:	085b      	lsrs	r3, r3, #1
 8005502:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d004      	beq.n	800551c <USB_EPStartXfer+0x710>
 8005512:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005516:	3301      	adds	r3, #1
 8005518:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800551c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005520:	b29b      	uxth	r3, r3
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	b29a      	uxth	r2, r3
 8005526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	e047      	b.n	80055bc <USB_EPStartXfer+0x7b0>
 800552c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <USB_EPStartXfer+0x740>
 8005542:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005546:	3b01      	subs	r3, #1
 8005548:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800554c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005550:	b29b      	uxth	r3, r3
 8005552:	029b      	lsls	r3, r3, #10
 8005554:	b29b      	uxth	r3, r3
 8005556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555e:	b29a      	uxth	r2, r3
 8005560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	e02a      	b.n	80055bc <USB_EPStartXfer+0x7b0>
 8005566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d122      	bne.n	80055bc <USB_EPStartXfer+0x7b0>
 8005576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	653b      	str	r3, [r7, #80]	; 0x50
 8005582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005590:	b29b      	uxth	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005596:	4413      	add	r3, r2
 8005598:	653b      	str	r3, [r7, #80]	; 0x50
 800559a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	011a      	lsls	r2, r3, #4
 80055a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055aa:	4413      	add	r3, r2
 80055ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	891b      	ldrh	r3, [r3, #8]
 80055c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6959      	ldr	r1, [r3, #20]
 80055d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055e2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055e6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	f001 fb6f 	bl	8006cce <USB_WritePMA>
            ep->xfer_buff += len;
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005600:	441a      	add	r2, r3
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800560e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d90f      	bls.n	800564a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800562a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563a:	1ad2      	subs	r2, r2, r3
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	621a      	str	r2, [r3, #32]
 8005648:	e00e      	b.n	8005668 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800564a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2200      	movs	r2, #0
 8005666:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	643b      	str	r3, [r7, #64]	; 0x40
 8005674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d16d      	bne.n	8005760 <USB_EPStartXfer+0x954>
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569e:	b29b      	uxth	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	4413      	add	r3, r2
 80056a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	011a      	lsls	r2, r3, #4
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
 80056c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d112      	bne.n	80056ee <USB_EPStartXfer+0x8e2>
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	e05d      	b.n	80057aa <USB_EPStartXfer+0x99e>
 80056ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f2:	2b3e      	cmp	r3, #62	; 0x3e
 80056f4:	d817      	bhi.n	8005726 <USB_EPStartXfer+0x91a>
 80056f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <USB_EPStartXfer+0x90a>
 800570c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005710:	3301      	adds	r3, #1
 8005712:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005716:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800571a:	b29b      	uxth	r3, r3
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	b29a      	uxth	r2, r3
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	e041      	b.n	80057aa <USB_EPStartXfer+0x99e>
 8005726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <USB_EPStartXfer+0x93a>
 800573c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005740:	3b01      	subs	r3, #1
 8005742:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800574a:	b29b      	uxth	r3, r3
 800574c:	029b      	lsls	r3, r3, #10
 800574e:	b29b      	uxth	r3, r3
 8005750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005758:	b29a      	uxth	r2, r3
 800575a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	e024      	b.n	80057aa <USB_EPStartXfer+0x99e>
 8005760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11c      	bne.n	80057aa <USB_EPStartXfer+0x99e>
 8005770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005774:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577e:	b29b      	uxth	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005784:	4413      	add	r3, r2
 8005786:	643b      	str	r3, [r7, #64]	; 0x40
 8005788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	011a      	lsls	r2, r3, #4
 8005796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005798:	4413      	add	r3, r2
 800579a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	895b      	ldrh	r3, [r3, #10]
 80057b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6959      	ldr	r1, [r3, #20]
 80057c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057d8:	6800      	ldr	r0, [r0, #0]
 80057da:	f001 fa78 	bl	8006cce <USB_WritePMA>
 80057de:	f000 bc5a 	b.w	8006096 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80057f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005818:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800581c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800583a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584a:	b29b      	uxth	r3, r3
 800584c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800584e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800585a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005868:	b29b      	uxth	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800586e:	4413      	add	r3, r2
 8005870:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	011a      	lsls	r2, r3, #4
 8005880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005882:	4413      	add	r3, r2
 8005884:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005888:	65bb      	str	r3, [r7, #88]	; 0x58
 800588a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588e:	b29a      	uxth	r2, r3
 8005890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005892:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	891b      	ldrh	r3, [r3, #8]
 80058a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6959      	ldr	r1, [r3, #20]
 80058b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058ba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058be:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	f001 fa03 	bl	8006cce <USB_WritePMA>
 80058c8:	e3e5      	b.n	8006096 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80058ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800591e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005922:	b29b      	uxth	r3, r3
 8005924:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 81bc 	beq.w	8005ce4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800597a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d16d      	bne.n	8005a66 <USB_EPStartXfer+0xc5a>
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	67bb      	str	r3, [r7, #120]	; 0x78
 8005996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059aa:	4413      	add	r3, r2
 80059ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80059ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	011a      	lsls	r2, r3, #4
 80059bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059be:	4413      	add	r3, r2
 80059c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c4:	677b      	str	r3, [r7, #116]	; 0x74
 80059c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d112      	bne.n	80059f4 <USB_EPStartXfer+0xbe8>
 80059ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	e060      	b.n	8005ab6 <USB_EPStartXfer+0xcaa>
 80059f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f8:	2b3e      	cmp	r3, #62	; 0x3e
 80059fa:	d817      	bhi.n	8005a2c <USB_EPStartXfer+0xc20>
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <USB_EPStartXfer+0xc10>
 8005a12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a16:	3301      	adds	r3, #1
 8005a18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e044      	b.n	8005ab6 <USB_EPStartXfer+0xcaa>
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <USB_EPStartXfer+0xc40>
 8005a42:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a46:	3b01      	subs	r3, #1
 8005a48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	029b      	lsls	r3, r3, #10
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e027      	b.n	8005ab6 <USB_EPStartXfer+0xcaa>
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d11f      	bne.n	8005ab6 <USB_EPStartXfer+0xcaa>
 8005a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	011a      	lsls	r2, r3, #4
 8005aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ab4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	895b      	ldrh	r3, [r3, #10]
 8005ac2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6959      	ldr	r1, [r3, #20]
 8005ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005adc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ae0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ae4:	6800      	ldr	r0, [r0, #0]
 8005ae6:	f001 f8f2 	bl	8006cce <USB_WritePMA>
          ep->xfer_buff += len;
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005afa:	441a      	add	r2, r3
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a1a      	ldr	r2, [r3, #32]
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d90f      	bls.n	8005b44 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b34:	1ad2      	subs	r2, r2, r3
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	621a      	str	r2, [r3, #32]
 8005b42:	e00e      	b.n	8005b62 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8295 	beq.w	8006096 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d16d      	bne.n	8005c58 <USB_EPStartXfer+0xe4c>
 8005b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b9c:	4413      	add	r3, r2
 8005b9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	011a      	lsls	r2, r3, #4
 8005bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8005bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d112      	bne.n	8005be6 <USB_EPStartXfer+0xdda>
 8005bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e063      	b.n	8005cae <USB_EPStartXfer+0xea2>
 8005be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bea:	2b3e      	cmp	r3, #62	; 0x3e
 8005bec:	d817      	bhi.n	8005c1e <USB_EPStartXfer+0xe12>
 8005bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <USB_EPStartXfer+0xe02>
 8005c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c08:	3301      	adds	r3, #1
 8005c0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e047      	b.n	8005cae <USB_EPStartXfer+0xea2>
 8005c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <USB_EPStartXfer+0xe32>
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	029b      	lsls	r3, r3, #10
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e02a      	b.n	8005cae <USB_EPStartXfer+0xea2>
 8005c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d122      	bne.n	8005cae <USB_EPStartXfer+0xea2>
 8005c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	673b      	str	r3, [r7, #112]	; 0x70
 8005c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c88:	4413      	add	r3, r2
 8005c8a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	891b      	ldrh	r3, [r3, #8]
 8005cba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6959      	ldr	r1, [r3, #20]
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cd4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cd8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cdc:	6800      	ldr	r0, [r0, #0]
 8005cde:	f000 fff6 	bl	8006cce <USB_WritePMA>
 8005ce2:	e1d8      	b.n	8006096 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d178      	bne.n	8005de6 <USB_EPStartXfer+0xfda>
 8005cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d18:	4413      	add	r3, r2
 8005d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	011a      	lsls	r2, r3, #4
 8005d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d30:	4413      	add	r3, r2
 8005d32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d116      	bne.n	8005d70 <USB_EPStartXfer+0xf64>
 8005d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e06b      	b.n	8005e48 <USB_EPStartXfer+0x103c>
 8005d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d74:	2b3e      	cmp	r3, #62	; 0x3e
 8005d76:	d818      	bhi.n	8005daa <USB_EPStartXfer+0xf9e>
 8005d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <USB_EPStartXfer+0xf8c>
 8005d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d92:	3301      	adds	r3, #1
 8005d94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	e04e      	b.n	8005e48 <USB_EPStartXfer+0x103c>
 8005daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <USB_EPStartXfer+0xfbe>
 8005dc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005dca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e030      	b.n	8005e48 <USB_EPStartXfer+0x103c>
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d128      	bne.n	8005e48 <USB_EPStartXfer+0x103c>
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	011a      	lsls	r2, r3, #4
 8005e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	891b      	ldrh	r3, [r3, #8]
 8005e54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6959      	ldr	r1, [r3, #20]
 8005e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e6e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e72:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e76:	6800      	ldr	r0, [r0, #0]
 8005e78:	f000 ff29 	bl	8006cce <USB_WritePMA>
          ep->xfer_buff += len;
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8c:	441a      	add	r2, r3
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d90f      	bls.n	8005ed6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec6:	1ad2      	subs	r2, r2, r3
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	621a      	str	r2, [r3, #32]
 8005ed4:	e00e      	b.n	8005ef4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80cc 	beq.w	8006096 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d178      	bne.n	800600e <USB_EPStartXfer+0x1202>
 8005f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f40:	4413      	add	r3, r2
 8005f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	011a      	lsls	r2, r3, #4
 8005f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f58:	4413      	add	r3, r2
 8005f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <USB_EPStartXfer+0x118c>
 8005f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e064      	b.n	8006062 <USB_EPStartXfer+0x1256>
 8005f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f9e:	d818      	bhi.n	8005fd2 <USB_EPStartXfer+0x11c6>
 8005fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <USB_EPStartXfer+0x11b4>
 8005fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fba:	3301      	adds	r3, #1
 8005fbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	e047      	b.n	8006062 <USB_EPStartXfer+0x1256>
 8005fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <USB_EPStartXfer+0x11e6>
 8005fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fec:	3b01      	subs	r3, #1
 8005fee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	029b      	lsls	r3, r3, #10
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006004:	b29a      	uxth	r2, r3
 8006006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e029      	b.n	8006062 <USB_EPStartXfer+0x1256>
 800600e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d121      	bne.n	8006062 <USB_EPStartXfer+0x1256>
 800601e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602c:	b29b      	uxth	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006034:	4413      	add	r3, r2
 8006036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800603a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	011a      	lsls	r2, r3, #4
 8006048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800604c:	4413      	add	r3, r2
 800604e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605a:	b29a      	uxth	r2, r3
 800605c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006060:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	895b      	ldrh	r3, [r3, #10]
 800606e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6959      	ldr	r1, [r3, #20]
 800607e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006082:	b29b      	uxth	r3, r3
 8006084:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006088:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800608c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006090:	6800      	ldr	r0, [r0, #0]
 8006092:	f000 fe1c 	bl	8006cce <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060b8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c4:	8013      	strh	r3, [r2, #0]
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80060ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060d2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	f082 0210 	eor.w	r2, r2, #16
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80060e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060ea:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060ee:	8812      	ldrh	r2, [r2, #0]
 80060f0:	f082 0220 	eor.w	r2, r2, #32
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006114:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]
 800612e:	f000 bc9f 	b.w	8006a70 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	7b1b      	ldrb	r3, [r3, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f040 80ae 	bne.w	80062a0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d917      	bls.n	8006190 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699a      	ldr	r2, [r3, #24]
 800617c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006180:	1ad2      	subs	r2, r2, r3
 8006182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	619a      	str	r2, [r3, #24]
 800618e:	e00e      	b.n	80061ae <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80061a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2200      	movs	r2, #0
 80061ac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	461a      	mov	r2, r3
 80061ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061d2:	4413      	add	r3, r2
 80061d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	011a      	lsls	r2, r3, #4
 80061e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ea:	4413      	add	r3, r2
 80061ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d116      	bne.n	800622a <USB_EPStartXfer+0x141e>
 80061fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006208:	b29a      	uxth	r2, r3
 800620a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006220:	b29a      	uxth	r2, r3
 8006222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	e3e8      	b.n	80069fc <USB_EPStartXfer+0x1bf0>
 800622a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622e:	2b3e      	cmp	r3, #62	; 0x3e
 8006230:	d818      	bhi.n	8006264 <USB_EPStartXfer+0x1458>
 8006232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800623c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <USB_EPStartXfer+0x1446>
 8006248:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800624c:	3301      	adds	r3, #1
 800624e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006252:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006256:	b29b      	uxth	r3, r3
 8006258:	029b      	lsls	r3, r3, #10
 800625a:	b29a      	uxth	r2, r3
 800625c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	e3cb      	b.n	80069fc <USB_EPStartXfer+0x1bf0>
 8006264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800626e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <USB_EPStartXfer+0x1478>
 800627a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800627e:	3b01      	subs	r3, #1
 8006280:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006284:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29b      	uxth	r3, r3
 800628e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006296:	b29a      	uxth	r2, r3
 8006298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	e3ad      	b.n	80069fc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80062a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	78db      	ldrb	r3, [r3, #3]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	f040 8200 	bne.w	80066b2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 8091 	bne.w	80063e6 <USB_EPStartXfer+0x15da>
 80062c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062e8:	4413      	add	r3, r2
 80062ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	011a      	lsls	r2, r3, #4
 80062fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006300:	4413      	add	r3, r2
 8006302:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d116      	bne.n	8006348 <USB_EPStartXfer+0x153c>
 800631a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006326:	b29a      	uxth	r2, r3
 8006328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633e:	b29a      	uxth	r2, r3
 8006340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	e083      	b.n	8006450 <USB_EPStartXfer+0x1644>
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b3e      	cmp	r3, #62	; 0x3e
 8006356:	d820      	bhi.n	800639a <USB_EPStartXfer+0x158e>
 8006358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800636a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <USB_EPStartXfer+0x157c>
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006382:	3301      	adds	r3, #1
 8006384:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638c:	b29b      	uxth	r3, r3
 800638e:	029b      	lsls	r3, r3, #10
 8006390:	b29a      	uxth	r2, r3
 8006392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	e05a      	b.n	8006450 <USB_EPStartXfer+0x1644>
 800639a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <USB_EPStartXfer+0x15be>
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c4:	3b01      	subs	r3, #1
 80063c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	e034      	b.n	8006450 <USB_EPStartXfer+0x1644>
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d12c      	bne.n	8006450 <USB_EPStartXfer+0x1644>
 80063f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006412:	b29b      	uxth	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800641a:	4413      	add	r3, r2
 800641c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	011a      	lsls	r2, r3, #4
 800642e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006432:	4413      	add	r3, r2
 8006434:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	b29a      	uxth	r2, r3
 800644a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800645e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f040 8091 	bne.w	8006592 <USB_EPStartXfer+0x1786>
 8006470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800647e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648c:	b29b      	uxth	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006494:	4413      	add	r3, r2
 8006496:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800649a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	011a      	lsls	r2, r3, #4
 80064a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064ac:	4413      	add	r3, r2
 80064ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d116      	bne.n	80064f4 <USB_EPStartXfer+0x16e8>
 80064c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	e07c      	b.n	80065ee <USB_EPStartXfer+0x17e2>
 80064f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b3e      	cmp	r3, #62	; 0x3e
 8006502:	d820      	bhi.n	8006546 <USB_EPStartXfer+0x173a>
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d004      	beq.n	8006534 <USB_EPStartXfer+0x1728>
 800652a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800652e:	3301      	adds	r3, #1
 8006530:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006534:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006538:	b29b      	uxth	r3, r3
 800653a:	029b      	lsls	r3, r3, #10
 800653c:	b29a      	uxth	r2, r3
 800653e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e053      	b.n	80065ee <USB_EPStartXfer+0x17e2>
 8006546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	2b00      	cmp	r3, #0
 800656a:	d104      	bne.n	8006576 <USB_EPStartXfer+0x176a>
 800656c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006570:	3b01      	subs	r3, #1
 8006572:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006576:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800657a:	b29b      	uxth	r3, r3
 800657c:	029b      	lsls	r3, r3, #10
 800657e:	b29b      	uxth	r3, r3
 8006580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e02d      	b.n	80065ee <USB_EPStartXfer+0x17e2>
 8006592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d125      	bne.n	80065ee <USB_EPStartXfer+0x17e2>
 80065a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065b8:	4413      	add	r3, r2
 80065ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	011a      	lsls	r2, r3, #4
 80065cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065ec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 81fe 	beq.w	80069fc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006620:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <USB_EPStartXfer+0x182c>
 800662c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10d      	bne.n	8006654 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006638:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800663c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 81db 	bne.w	80069fc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006646:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 81d4 	bne.w	80069fc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006658:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800667e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800669c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	8013      	strh	r3, [r2, #0]
 80066b0:	e1a4      	b.n	80069fc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80066b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	78db      	ldrb	r3, [r3, #3]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	f040 819a 	bne.w	80069f8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699a      	ldr	r2, [r3, #24]
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d917      	bls.n	8006710 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80066f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699a      	ldr	r2, [r3, #24]
 80066fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006700:	1ad2      	subs	r2, r2, r3
 8006702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	619a      	str	r2, [r3, #24]
 800670e:	e00e      	b.n	800672e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2200      	movs	r2, #0
 800672c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800672e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d178      	bne.n	8006830 <USB_EPStartXfer+0x1a24>
 800673e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800674c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006762:	4413      	add	r3, r2
 8006764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	011a      	lsls	r2, r3, #4
 8006776:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800677a:	4413      	add	r3, r2
 800677c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006780:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006788:	2b00      	cmp	r3, #0
 800678a:	d116      	bne.n	80067ba <USB_EPStartXfer+0x19ae>
 800678c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006798:	b29a      	uxth	r2, r3
 800679a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	e06b      	b.n	8006892 <USB_EPStartXfer+0x1a86>
 80067ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067be:	2b3e      	cmp	r3, #62	; 0x3e
 80067c0:	d818      	bhi.n	80067f4 <USB_EPStartXfer+0x19e8>
 80067c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <USB_EPStartXfer+0x19d6>
 80067d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067dc:	3301      	adds	r3, #1
 80067de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	029b      	lsls	r3, r3, #10
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e04e      	b.n	8006892 <USB_EPStartXfer+0x1a86>
 80067f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <USB_EPStartXfer+0x1a08>
 800680a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680e:	3b01      	subs	r3, #1
 8006810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006818:	b29b      	uxth	r3, r3
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	b29b      	uxth	r3, r3
 800681e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006826:	b29a      	uxth	r2, r3
 8006828:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	e030      	b.n	8006892 <USB_EPStartXfer+0x1a86>
 8006830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d128      	bne.n	8006892 <USB_EPStartXfer+0x1a86>
 8006840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685c:	b29b      	uxth	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	4413      	add	r3, r2
 8006866:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800686a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	011a      	lsls	r2, r3, #4
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687c:	4413      	add	r3, r2
 800687e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006882:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688a:	b29a      	uxth	r2, r3
 800688c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d178      	bne.n	80069a2 <USB_EPStartXfer+0x1b96>
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d4:	4413      	add	r3, r2
 80068d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	011a      	lsls	r2, r3, #4
 80068e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d116      	bne.n	800692c <USB_EPStartXfer+0x1b20>
 80068fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800690a:	b29a      	uxth	r2, r3
 800690c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006922:	b29a      	uxth	r2, r3
 8006924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	e067      	b.n	80069fc <USB_EPStartXfer+0x1bf0>
 800692c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006930:	2b3e      	cmp	r3, #62	; 0x3e
 8006932:	d818      	bhi.n	8006966 <USB_EPStartXfer+0x1b5a>
 8006934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006938:	085b      	lsrs	r3, r3, #1
 800693a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800693e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <USB_EPStartXfer+0x1b48>
 800694a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800694e:	3301      	adds	r3, #1
 8006950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006954:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006958:	b29b      	uxth	r3, r3
 800695a:	029b      	lsls	r3, r3, #10
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e04a      	b.n	80069fc <USB_EPStartXfer+0x1bf0>
 8006966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <USB_EPStartXfer+0x1b7a>
 800697c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006980:	3b01      	subs	r3, #1
 8006982:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800698a:	b29b      	uxth	r3, r3
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	b29b      	uxth	r3, r3
 8006990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006998:	b29a      	uxth	r2, r3
 800699a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800699e:	801a      	strh	r2, [r3, #0]
 80069a0:	e02c      	b.n	80069fc <USB_EPStartXfer+0x1bf0>
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d124      	bne.n	80069fc <USB_EPStartXfer+0x1bf0>
 80069b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	461a      	mov	r2, r3
 80069c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c8:	4413      	add	r3, r2
 80069ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	011a      	lsls	r2, r3, #4
 80069dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e0:	4413      	add	r3, r2
 80069e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	e001      	b.n	80069fc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e03a      	b.n	8006a72 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a32:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a3a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	441a      	add	r2, r3
 8006a58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d020      	beq.n	8006ad0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa4:	81bb      	strh	r3, [r7, #12]
 8006aa6:	89bb      	ldrh	r3, [r7, #12]
 8006aa8:	f083 0310 	eor.w	r3, r3, #16
 8006aac:	81bb      	strh	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	441a      	add	r2, r3
 8006ab8:	89bb      	ldrh	r3, [r7, #12]
 8006aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]
 8006ace:	e01f      	b.n	8006b10 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	81fb      	strh	r3, [r7, #14]
 8006ae8:	89fb      	ldrh	r3, [r7, #14]
 8006aea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006aee:	81fb      	strh	r3, [r7, #14]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	89fb      	ldrh	r3, [r7, #14]
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	7b1b      	ldrb	r3, [r3, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 809d 	bne.w	8006c6a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d04c      	beq.n	8006bd2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	823b      	strh	r3, [r7, #16]
 8006b46:	8a3b      	ldrh	r3, [r7, #16]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01b      	beq.n	8006b88 <USB_EPClearStall+0x6c>
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	81fb      	strh	r3, [r7, #14]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	89fb      	ldrh	r3, [r7, #14]
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	78db      	ldrb	r3, [r3, #3]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d06c      	beq.n	8006c6a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba6:	81bb      	strh	r3, [r7, #12]
 8006ba8:	89bb      	ldrh	r3, [r7, #12]
 8006baa:	f083 0320 	eor.w	r3, r3, #32
 8006bae:	81bb      	strh	r3, [r7, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	441a      	add	r2, r3
 8006bba:	89bb      	ldrh	r3, [r7, #12]
 8006bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	8013      	strh	r3, [r2, #0]
 8006bd0:	e04b      	b.n	8006c6a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	82fb      	strh	r3, [r7, #22]
 8006be0:	8afb      	ldrh	r3, [r7, #22]
 8006be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01b      	beq.n	8006c22 <USB_EPClearStall+0x106>
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c00:	82bb      	strh	r3, [r7, #20]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	441a      	add	r2, r3
 8006c0c:	8abb      	ldrh	r3, [r7, #20]
 8006c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c38:	827b      	strh	r3, [r7, #18]
 8006c3a:	8a7b      	ldrh	r3, [r7, #18]
 8006c3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c40:	827b      	strh	r3, [r7, #18]
 8006c42:	8a7b      	ldrh	r3, [r7, #18]
 8006c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c48:	827b      	strh	r3, [r7, #18]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	441a      	add	r2, r3
 8006c54:	8a7b      	ldrh	r3, [r7, #18]
 8006c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr

08006c76 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d103      	bne.n	8006c90 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2280      	movs	r2, #128	; 0x80
 8006c8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b08d      	sub	sp, #52	; 0x34
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	461a      	mov	r2, r3
 8006cdc:	460b      	mov	r3, r1
 8006cde:	80fb      	strh	r3, [r7, #6]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ce4:	88bb      	ldrh	r3, [r7, #4]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cf4:	88fb      	ldrh	r3, [r7, #6]
 8006cf6:	005a      	lsls	r2, r3, #1
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d00:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d06:	e01e      	b.n	8006d46 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	3301      	adds	r3, #1
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	3302      	adds	r3, #2
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	3302      	adds	r3, #2
 8006d38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	3b01      	subs	r3, #1
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1dd      	bne.n	8006d08 <USB_WritePMA+0x3a>
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	3734      	adds	r7, #52	; 0x34
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b08b      	sub	sp, #44	; 0x2c
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4611      	mov	r1, r2
 8006d64:	461a      	mov	r2, r3
 8006d66:	460b      	mov	r3, r1
 8006d68:	80fb      	strh	r3, [r7, #6]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d6e:	88bb      	ldrh	r3, [r7, #4]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	005a      	lsls	r2, r3, #1
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	e01b      	b.n	8006dca <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	3301      	adds	r3, #1
 8006dac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e0      	bne.n	8006d92 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006dd0:	88bb      	ldrh	r3, [r7, #4]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	701a      	strb	r2, [r3, #0]
  }
}
 8006dec:	bf00      	nop
 8006dee:	372c      	adds	r7, #44	; 0x2c
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr

08006df6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7c1b      	ldrb	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d115      	bne.n	8006e3a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e12:	2202      	movs	r2, #2
 8006e14:	2181      	movs	r1, #129	; 0x81
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 ffab 	bl	8008d72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e26:	2202      	movs	r2, #2
 8006e28:	2101      	movs	r1, #1
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 ffa1 	bl	8008d72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006e38:	e012      	b.n	8006e60 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e3a:	2340      	movs	r3, #64	; 0x40
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	2181      	movs	r1, #129	; 0x81
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 ff96 	bl	8008d72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	2202      	movs	r2, #2
 8006e50:	2101      	movs	r1, #1
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 ff8d 	bl	8008d72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e60:	2308      	movs	r3, #8
 8006e62:	2203      	movs	r2, #3
 8006e64:	2182      	movs	r1, #130	; 0x82
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 ff83 	bl	8008d72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006e72:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e76:	f002 f8a3 	bl	8008fc0 <USBD_static_malloc>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	73fb      	strb	r3, [r7, #15]
 8006e90:	e026      	b.n	8006ee0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e98:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	7c1b      	ldrb	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d109      	bne.n	8006ed0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f002 f843 	bl	8008f54 <USBD_LL_PrepareReceive>
 8006ece:	e007      	b.n	8006ee0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ed6:	2340      	movs	r3, #64	; 0x40
 8006ed8:	2101      	movs	r1, #1
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f002 f83a 	bl	8008f54 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006efa:	2181      	movs	r1, #129	; 0x81
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 ff5e 	bl	8008dbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f08:	2101      	movs	r1, #1
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 ff57 	bl	8008dbe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f18:	2182      	movs	r1, #130	; 0x82
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 ff4f 	bl	8008dbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00e      	beq.n	8006f4e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f40:	4618      	mov	r0, r3
 8006f42:	f002 f849 	bl	8008fd8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f68:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d039      	beq.n	8006ff6 <USBD_CDC_Setup+0x9e>
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d17f      	bne.n	8007086 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	88db      	ldrh	r3, [r3, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d029      	beq.n	8006fe2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	b25b      	sxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	da11      	bge.n	8006fbc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006fa4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	88d2      	ldrh	r2, [r2, #6]
 8006faa:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fac:	6939      	ldr	r1, [r7, #16]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	88db      	ldrh	r3, [r3, #6]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f994 	bl	80082e2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006fba:	e06b      	b.n	8007094 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	785a      	ldrb	r2, [r3, #1]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	88db      	ldrh	r3, [r3, #6]
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fd2:	6939      	ldr	r1, [r7, #16]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	88db      	ldrh	r3, [r3, #6]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f9af 	bl	800833e <USBD_CtlPrepareRx>
    break;
 8006fe0:	e058      	b.n	8007094 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	7850      	ldrb	r0, [r2, #1]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	4798      	blx	r3
    break;
 8006ff4:	e04e      	b.n	8007094 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b0b      	cmp	r3, #11
 8006ffc:	d02e      	beq.n	800705c <USBD_CDC_Setup+0x104>
 8006ffe:	2b0b      	cmp	r3, #11
 8007000:	dc38      	bgt.n	8007074 <USBD_CDC_Setup+0x11c>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <USBD_CDC_Setup+0xb4>
 8007006:	2b0a      	cmp	r3, #10
 8007008:	d014      	beq.n	8007034 <USBD_CDC_Setup+0xdc>
 800700a:	e033      	b.n	8007074 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007012:	2b03      	cmp	r3, #3
 8007014:	d107      	bne.n	8007026 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007016:	f107 030c 	add.w	r3, r7, #12
 800701a:	2202      	movs	r2, #2
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 f95f 	bl	80082e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007024:	e02e      	b.n	8007084 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 f8f0 	bl	800820e <USBD_CtlError>
			  ret = USBD_FAIL;
 800702e:	2302      	movs	r3, #2
 8007030:	75fb      	strb	r3, [r7, #23]
      break;
 8007032:	e027      	b.n	8007084 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800703a:	2b03      	cmp	r3, #3
 800703c:	d107      	bne.n	800704e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800703e:	f107 030f 	add.w	r3, r7, #15
 8007042:	2201      	movs	r2, #1
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 f94b 	bl	80082e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800704c:	e01a      	b.n	8007084 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 f8dc 	bl	800820e <USBD_CtlError>
			  ret = USBD_FAIL;
 8007056:	2302      	movs	r3, #2
 8007058:	75fb      	strb	r3, [r7, #23]
      break;
 800705a:	e013      	b.n	8007084 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007062:	2b03      	cmp	r3, #3
 8007064:	d00d      	beq.n	8007082 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 f8d0 	bl	800820e <USBD_CtlError>
			  ret = USBD_FAIL;
 800706e:	2302      	movs	r3, #2
 8007070:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007072:	e006      	b.n	8007082 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 f8c9 	bl	800820e <USBD_CtlError>
      ret = USBD_FAIL;
 800707c:	2302      	movs	r3, #2
 800707e:	75fb      	strb	r3, [r7, #23]
      break;
 8007080:	e000      	b.n	8007084 <USBD_CDC_Setup+0x12c>
      break;
 8007082:	bf00      	nop
    }
    break;
 8007084:	e006      	b.n	8007094 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f8c0 	bl	800820e <USBD_CtlError>
    ret = USBD_FAIL;
 800708e:	2302      	movs	r3, #2
 8007090:	75fb      	strb	r3, [r7, #23]
    break;
 8007092:	bf00      	nop
  }

  return ret;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070b0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80070b8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d03a      	beq.n	800713a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070c4:	78fa      	ldrb	r2, [r7, #3]
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	331c      	adds	r3, #28
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d029      	beq.n	800712e <USBD_CDC_DataIn+0x90>
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	331c      	adds	r3, #28
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	78f9      	ldrb	r1, [r7, #3]
 80070ee:	68b8      	ldr	r0, [r7, #8]
 80070f0:	460b      	mov	r3, r1
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4403      	add	r3, r0
 80070fa:	3338      	adds	r3, #56	; 0x38
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8007102:	fb01 f303 	mul.w	r3, r1, r3
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d110      	bne.n	800712e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	331c      	adds	r3, #28
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007120:	78f9      	ldrb	r1, [r7, #3]
 8007122:	2300      	movs	r3, #0
 8007124:	2200      	movs	r2, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fef1 	bl	8008f0e <USBD_LL_Transmit>
 800712c:	e003      	b.n	8007136 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	e000      	b.n	800713c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800713a:	2302      	movs	r3, #2
  }
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007156:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 ff1c 	bl	8008f9a <USBD_LL_GetRxDataSize>
 8007162:	4602      	mov	r2, r0
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007188:	4611      	mov	r1, r2
 800718a:	4798      	blx	r3

    return USBD_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	e000      	b.n	8007192 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007190:	2302      	movs	r3, #2
  }
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071a8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d015      	beq.n	80071e0 <USBD_CDC_EP0_RxReady+0x46>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071ba:	2bff      	cmp	r3, #255	; 0xff
 80071bc:	d010      	beq.n	80071e0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80071cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071d4:	b292      	uxth	r2, r2
 80071d6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	22ff      	movs	r2, #255	; 0xff
 80071dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2243      	movs	r2, #67	; 0x43
 80071f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80071fa:	4b03      	ldr	r3, [pc, #12]	; (8007208 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20000094 	.word	0x20000094

0800720c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2243      	movs	r2, #67	; 0x43
 8007218:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800721a:	4b03      	ldr	r3, [pc, #12]	; (8007228 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	20000050 	.word	0x20000050

0800722c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2243      	movs	r2, #67	; 0x43
 8007238:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800723a:	4b03      	ldr	r3, [pc, #12]	; (8007248 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	200000d8 	.word	0x200000d8

0800724c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	220a      	movs	r2, #10
 8007258:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800725a:	4b03      	ldr	r3, [pc, #12]	; (8007268 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	2000000c 	.word	0x2000000c

0800726c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007276:	2302      	movs	r3, #2
 8007278:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr

08007298 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr

080072f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072fe:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01c      	beq.n	8007344 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007310:	2b00      	cmp	r3, #0
 8007312:	d115      	bne.n	8007340 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007332:	b29b      	uxth	r3, r3
 8007334:	2181      	movs	r1, #129	; 0x81
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fde9 	bl	8008f0e <USBD_LL_Transmit>

      return USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	e002      	b.n	8007346 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007344:	2302      	movs	r3, #2
  }
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800735c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007364:	2b00      	cmp	r3, #0
 8007366:	d017      	beq.n	8007398 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	7c1b      	ldrb	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d109      	bne.n	8007384 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800737a:	2101      	movs	r1, #1
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fde9 	bl	8008f54 <USBD_LL_PrepareReceive>
 8007382:	e007      	b.n	8007394 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	2101      	movs	r1, #1
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fde0 	bl	8008f54 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	4613      	mov	r3, r2
 80073ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073b6:	2302      	movs	r3, #2
 80073b8:	e01a      	b.n	80073f0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	79fa      	ldrb	r2, [r7, #7]
 80073e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f001 fc4d 	bl	8008c88 <USBD_LL_Init>

  return USBD_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d006      	beq.n	800741a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]
 8007418:	e001      	b.n	800741e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800741a:	2302      	movs	r3, #2
 800741c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr

0800742a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fc82 	bl	8008d3c <USBD_LL_Start>

  return USBD_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr

08007456 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007462:	2302      	movs	r3, #2
 8007464:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00c      	beq.n	800748a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	4611      	mov	r1, r2
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	4611      	mov	r1, r2
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4798      	blx	r3
  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fe62 	bl	8008196 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80074e0:	461a      	mov	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d016      	beq.n	8007524 <USBD_LL_SetupStage+0x6a>
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d81c      	bhi.n	8007534 <USBD_LL_SetupStage+0x7a>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <USBD_LL_SetupStage+0x4a>
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d008      	beq.n	8007514 <USBD_LL_SetupStage+0x5a>
 8007502:	e017      	b.n	8007534 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f9c5 	bl	800789c <USBD_StdDevReq>
    break;
 8007512:	e01a      	b.n	800754a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fa27 	bl	8007970 <USBD_StdItfReq>
    break;
 8007522:	e012      	b.n	800754a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa67 	bl	8007a00 <USBD_StdEPReq>
    break;
 8007532:	e00a      	b.n	800754a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800753a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800753e:	b2db      	uxtb	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fc5a 	bl	8008dfc <USBD_LL_StallEP>
    break;
 8007548:	bf00      	nop
  }

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	460b      	mov	r3, r1
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007562:	7afb      	ldrb	r3, [r7, #11]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d14b      	bne.n	8007600 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800756e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007576:	2b03      	cmp	r3, #3
 8007578:	d134      	bne.n	80075e4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d919      	bls.n	80075ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800759c:	429a      	cmp	r2, r3
 800759e:	d203      	bcs.n	80075a8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	e002      	b.n	80075ae <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 fee1 	bl	800837a <USBD_CtlContinueRx>
 80075b8:	e038      	b.n	800762c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d105      	bne.n	80075dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 fede 	bl	800839e <USBD_CtlSendStatus>
 80075e2:	e023      	b.n	800762c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d11e      	bne.n	800762c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80075f6:	2100      	movs	r1, #0
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 fbff 	bl	8008dfc <USBD_LL_StallEP>
 80075fe:	e015      	b.n	800762c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00d      	beq.n	8007628 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007612:	2b03      	cmp	r3, #3
 8007614:	d108      	bne.n	8007628 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	7afa      	ldrb	r2, [r7, #11]
 8007620:	4611      	mov	r1, r2
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	4798      	blx	r3
 8007626:	e001      	b.n	800762c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007628:	2302      	movs	r3, #2
 800762a:	e000      	b.n	800762e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	460b      	mov	r3, r1
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d17f      	bne.n	800774a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3314      	adds	r3, #20
 800764e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007656:	2b02      	cmp	r3, #2
 8007658:	d15c      	bne.n	8007714 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	429a      	cmp	r2, r3
 8007664:	d915      	bls.n	8007692 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	b29b      	uxth	r3, r3
 800767a:	461a      	mov	r2, r3
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fe4b 	bl	800831a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007684:	2300      	movs	r3, #0
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f001 fc62 	bl	8008f54 <USBD_LL_PrepareReceive>
 8007690:	e04e      	b.n	8007730 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	6912      	ldr	r2, [r2, #16]
 800769a:	fbb3 f1f2 	udiv	r1, r3, r2
 800769e:	fb01 f202 	mul.w	r2, r1, r2
 80076a2:	1a9b      	subs	r3, r3, r2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d11c      	bne.n	80076e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d316      	bcc.n	80076e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80076be:	429a      	cmp	r2, r3
 80076c0:	d20f      	bcs.n	80076e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076c2:	2200      	movs	r2, #0
 80076c4:	2100      	movs	r1, #0
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fe27 	bl	800831a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80076d4:	2300      	movs	r3, #0
 80076d6:	2200      	movs	r2, #0
 80076d8:	2100      	movs	r1, #0
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f001 fc3a 	bl	8008f54 <USBD_LL_PrepareReceive>
 80076e0:	e026      	b.n	8007730 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d105      	bne.n	8007704 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007704:	2180      	movs	r1, #128	; 0x80
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f001 fb78 	bl	8008dfc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fe59 	bl	80083c4 <USBD_CtlReceiveStatus>
 8007712:	e00d      	b.n	8007730 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800771a:	2b04      	cmp	r3, #4
 800771c:	d004      	beq.n	8007728 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007728:	2180      	movs	r1, #128	; 0x80
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f001 fb66 	bl	8008dfc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007736:	2b01      	cmp	r3, #1
 8007738:	d11d      	bne.n	8007776 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff fe81 	bl	8007442 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007748:	e015      	b.n	8007776 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00d      	beq.n	8007772 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800775c:	2b03      	cmp	r3, #3
 800775e:	d108      	bne.n	8007772 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	7afa      	ldrb	r2, [r7, #11]
 800776a:	4611      	mov	r1, r2
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	4798      	blx	r3
 8007770:	e001      	b.n	8007776 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007772:	2302      	movs	r3, #2
 8007774:	e000      	b.n	8007778 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007788:	2340      	movs	r3, #64	; 0x40
 800778a:	2200      	movs	r2, #0
 800778c:	2100      	movs	r1, #0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 faef 	bl	8008d72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2240      	movs	r2, #64	; 0x40
 80077a0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	2200      	movs	r2, #0
 80077a8:	2180      	movs	r1, #128	; 0x80
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fae1 	bl	8008d72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2240      	movs	r2, #64	; 0x40
 80077ba:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6852      	ldr	r2, [r2, #4]
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	4611      	mov	r1, r2
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
  }

  return USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	78fa      	ldrb	r2, [r7, #3]
 8007812:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2204      	movs	r2, #4
 8007838:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr

08007848 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007876:	2b03      	cmp	r3, #3
 8007878:	d10b      	bne.n	8007892 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d005      	beq.n	8007892 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d005      	beq.n	80078c2 <USBD_StdDevReq+0x26>
 80078b6:	2b40      	cmp	r3, #64	; 0x40
 80078b8:	d84f      	bhi.n	800795a <USBD_StdDevReq+0xbe>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <USBD_StdDevReq+0x36>
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d14b      	bne.n	800795a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	4798      	blx	r3
    break;
 80078d0:	e048      	b.n	8007964 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b09      	cmp	r3, #9
 80078d8:	d839      	bhi.n	800794e <USBD_StdDevReq+0xb2>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <USBD_StdDevReq+0x44>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	08007931 	.word	0x08007931
 80078e4:	08007945 	.word	0x08007945
 80078e8:	0800794f 	.word	0x0800794f
 80078ec:	0800793b 	.word	0x0800793b
 80078f0:	0800794f 	.word	0x0800794f
 80078f4:	08007913 	.word	0x08007913
 80078f8:	08007909 	.word	0x08007909
 80078fc:	0800794f 	.word	0x0800794f
 8007900:	08007927 	.word	0x08007927
 8007904:	0800791d 	.word	0x0800791d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f9da 	bl	8007cc4 <USBD_GetDescriptor>
      break;
 8007910:	e022      	b.n	8007958 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 facf 	bl	8007eb8 <USBD_SetAddress>
      break;
 800791a:	e01d      	b.n	8007958 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fb0e 	bl	8007f40 <USBD_SetConfig>
      break;
 8007924:	e018      	b.n	8007958 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb97 	bl	800805c <USBD_GetConfig>
      break;
 800792e:	e013      	b.n	8007958 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fbc7 	bl	80080c6 <USBD_GetStatus>
      break;
 8007938:	e00e      	b.n	8007958 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fbf5 	bl	800812c <USBD_SetFeature>
      break;
 8007942:	e009      	b.n	8007958 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fc04 	bl	8008154 <USBD_ClrFeature>
      break;
 800794c:	e004      	b.n	8007958 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc5c 	bl	800820e <USBD_CtlError>
      break;
 8007956:	bf00      	nop
    }
    break;
 8007958:	e004      	b.n	8007964 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc56 	bl	800820e <USBD_CtlError>
    break;
 8007962:	bf00      	nop
  }

  return ret;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop

08007970 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d005      	beq.n	8007996 <USBD_StdItfReq+0x26>
 800798a:	2b40      	cmp	r3, #64	; 0x40
 800798c:	d82e      	bhi.n	80079ec <USBD_StdItfReq+0x7c>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <USBD_StdItfReq+0x26>
 8007992:	2b20      	cmp	r3, #32
 8007994:	d12a      	bne.n	80079ec <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800799c:	3b01      	subs	r3, #1
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d81d      	bhi.n	80079de <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	889b      	ldrh	r3, [r3, #4]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d813      	bhi.n	80079d4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	88db      	ldrh	r3, [r3, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d110      	bne.n	80079e8 <USBD_StdItfReq+0x78>
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10d      	bne.n	80079e8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fce6 	bl	800839e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80079d2:	e009      	b.n	80079e8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fc19 	bl	800820e <USBD_CtlError>
      break;
 80079dc:	e004      	b.n	80079e8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fc14 	bl	800820e <USBD_CtlError>
      break;
 80079e6:	e000      	b.n	80079ea <USBD_StdItfReq+0x7a>
      break;
 80079e8:	bf00      	nop
    }
    break;
 80079ea:	e004      	b.n	80079f6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc0d 	bl	800820e <USBD_CtlError>
    break;
 80079f4:	bf00      	nop
  }

  return USBD_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	889b      	ldrh	r3, [r3, #4]
 8007a12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d007      	beq.n	8007a30 <USBD_StdEPReq+0x30>
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	f200 8144 	bhi.w	8007cae <USBD_StdEPReq+0x2ae>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <USBD_StdEPReq+0x40>
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	f040 813f 	bne.w	8007cae <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
    break;
 8007a3e:	e13b      	b.n	8007cb8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d10a      	bne.n	8007a62 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	e12b      	b.n	8007cba <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d007      	beq.n	8007a7a <USBD_StdEPReq+0x7a>
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	f300 8119 	bgt.w	8007ca2 <USBD_StdEPReq+0x2a2>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d072      	beq.n	8007b5a <USBD_StdEPReq+0x15a>
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d03a      	beq.n	8007aee <USBD_StdEPReq+0xee>
 8007a78:	e113      	b.n	8007ca2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d002      	beq.n	8007a8a <USBD_StdEPReq+0x8a>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d015      	beq.n	8007ab4 <USBD_StdEPReq+0xb4>
 8007a88:	e02b      	b.n	8007ae2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00c      	beq.n	8007aaa <USBD_StdEPReq+0xaa>
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d009      	beq.n	8007aaa <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 f9ae 	bl	8008dfc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007aa0:	2180      	movs	r1, #128	; 0x80
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f9aa 	bl	8008dfc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007aa8:	e020      	b.n	8007aec <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fbae 	bl	800820e <USBD_CtlError>
        break;
 8007ab2:	e01b      	b.n	8007aec <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	885b      	ldrh	r3, [r3, #2]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10e      	bne.n	8007ada <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <USBD_StdEPReq+0xda>
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b80      	cmp	r3, #128	; 0x80
 8007ac6:	d008      	beq.n	8007ada <USBD_StdEPReq+0xda>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	88db      	ldrh	r3, [r3, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 f991 	bl	8008dfc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fc5f 	bl	800839e <USBD_CtlSendStatus>

        break;
 8007ae0:	e004      	b.n	8007aec <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fb92 	bl	800820e <USBD_CtlError>
        break;
 8007aea:	bf00      	nop
      }
      break;
 8007aec:	e0de      	b.n	8007cac <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d002      	beq.n	8007afe <USBD_StdEPReq+0xfe>
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d015      	beq.n	8007b28 <USBD_StdEPReq+0x128>
 8007afc:	e026      	b.n	8007b4c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00c      	beq.n	8007b1e <USBD_StdEPReq+0x11e>
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b80      	cmp	r3, #128	; 0x80
 8007b08:	d009      	beq.n	8007b1e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 f974 	bl	8008dfc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007b14:	2180      	movs	r1, #128	; 0x80
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 f970 	bl	8008dfc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b1c:	e01c      	b.n	8007b58 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fb74 	bl	800820e <USBD_CtlError>
        break;
 8007b26:	e017      	b.n	8007b58 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	885b      	ldrh	r3, [r3, #2]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d112      	bne.n	8007b56 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 f97b 	bl	8008e3a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc2a 	bl	800839e <USBD_CtlSendStatus>
        }
        break;
 8007b4a:	e004      	b.n	8007b56 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fb5d 	bl	800820e <USBD_CtlError>
        break;
 8007b54:	e000      	b.n	8007b58 <USBD_StdEPReq+0x158>
        break;
 8007b56:	bf00      	nop
      }
      break;
 8007b58:	e0a8      	b.n	8007cac <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d002      	beq.n	8007b6a <USBD_StdEPReq+0x16a>
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d031      	beq.n	8007bcc <USBD_StdEPReq+0x1cc>
 8007b68:	e095      	b.n	8007c96 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <USBD_StdEPReq+0x180>
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	2b80      	cmp	r3, #128	; 0x80
 8007b74:	d004      	beq.n	8007b80 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb48 	bl	800820e <USBD_CtlError>
          break;
 8007b7e:	e08f      	b.n	8007ca0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	da0b      	bge.n	8007ba0 <USBD_StdEPReq+0x1a0>
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	3310      	adds	r3, #16
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	e00a      	b.n	8007bb6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fb8c 	bl	80082e2 <USBD_CtlSendData>
          break;
 8007bca:	e069      	b.n	8007ca0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da11      	bge.n	8007bf8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f003 020f 	and.w	r2, r3, #15
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	3318      	adds	r3, #24
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d117      	bne.n	8007c1e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fb0c 	bl	800820e <USBD_CtlError>
            break;
 8007bf6:	e053      	b.n	8007ca0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f003 020f 	and.w	r2, r3, #15
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 faf9 	bl	800820e <USBD_CtlError>
            break;
 8007c1c:	e040      	b.n	8007ca0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da0b      	bge.n	8007c3e <USBD_StdEPReq+0x23e>
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	3310      	adds	r3, #16
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4413      	add	r3, r2
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	e00a      	b.n	8007c54 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <USBD_StdEPReq+0x262>
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	2b80      	cmp	r3, #128	; 0x80
 8007c60:	d103      	bne.n	8007c6a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e00e      	b.n	8007c88 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 f902 	bl	8008e78 <USBD_LL_IsStallEP>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	e002      	b.n	8007c88 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fb27 	bl	80082e2 <USBD_CtlSendData>
          break;
 8007c94:	e004      	b.n	8007ca0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fab8 	bl	800820e <USBD_CtlError>
        break;
 8007c9e:	bf00      	nop
      }
      break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fab2 	bl	800820e <USBD_CtlError>
      break;
 8007caa:	bf00      	nop
    }
    break;
 8007cac:	e004      	b.n	8007cb8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 faac 	bl	800820e <USBD_CtlError>
    break;
 8007cb6:	bf00      	nop
  }

  return ret;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b06      	cmp	r3, #6
 8007cda:	f200 80c9 	bhi.w	8007e70 <USBD_GetDescriptor+0x1ac>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBD_GetDescriptor+0x20>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08007d19 	.word	0x08007d19
 8007cec:	08007d59 	.word	0x08007d59
 8007cf0:	08007e71 	.word	0x08007e71
 8007cf4:	08007e71 	.word	0x08007e71
 8007cf8:	08007e1d 	.word	0x08007e1d
 8007cfc:	08007e43 	.word	0x08007e43
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 010a 	add.w	r1, r7, #10
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
    break;
 8007d16:	e0b0      	b.n	8007e7a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7c1b      	ldrb	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	f107 020a 	add.w	r2, r7, #10
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	2202      	movs	r2, #2
 8007d38:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007d3a:	e09e      	b.n	8007e7a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	f107 020a 	add.w	r2, r7, #10
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	2202      	movs	r2, #2
 8007d54:	701a      	strb	r2, [r3, #0]
    break;
 8007d56:	e090      	b.n	8007e7a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	885b      	ldrh	r3, [r3, #2]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b05      	cmp	r3, #5
 8007d60:	d856      	bhi.n	8007e10 <USBD_GetDescriptor+0x14c>
 8007d62:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <USBD_GetDescriptor+0xa4>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007d81 	.word	0x08007d81
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007db1 	.word	0x08007db1
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007de1 	.word	0x08007de1
 8007d7c:	08007df9 	.word	0x08007df9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 010a 	add.w	r1, r7, #10
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
      break;
 8007d96:	e040      	b.n	8007e1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7c12      	ldrb	r2, [r2, #16]
 8007da4:	f107 010a 	add.w	r1, r7, #10
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	60f8      	str	r0, [r7, #12]
      break;
 8007dae:	e034      	b.n	8007e1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7c12      	ldrb	r2, [r2, #16]
 8007dbc:	f107 010a 	add.w	r1, r7, #10
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
      break;
 8007dc6:	e028      	b.n	8007e1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 010a 	add.w	r1, r7, #10
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
      break;
 8007dde:	e01c      	b.n	8007e1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7c12      	ldrb	r2, [r2, #16]
 8007dec:	f107 010a 	add.w	r1, r7, #10
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	60f8      	str	r0, [r7, #12]
      break;
 8007df6:	e010      	b.n	8007e1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7c12      	ldrb	r2, [r2, #16]
 8007e04:	f107 010a 	add.w	r1, r7, #10
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
      break;
 8007e0e:	e004      	b.n	8007e1a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9fb 	bl	800820e <USBD_CtlError>
      return;
 8007e18:	e04b      	b.n	8007eb2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007e1a:	e02e      	b.n	8007e7a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7c1b      	ldrb	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	f107 020a 	add.w	r2, r7, #10
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
      break;
 8007e36:	e020      	b.n	8007e7a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9e7 	bl	800820e <USBD_CtlError>
      return;
 8007e40:	e037      	b.n	8007eb2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7c1b      	ldrb	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10d      	bne.n	8007e66 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e52:	f107 020a 	add.w	r2, r7, #10
 8007e56:	4610      	mov	r0, r2
 8007e58:	4798      	blx	r3
 8007e5a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	2207      	movs	r2, #7
 8007e62:	701a      	strb	r2, [r3, #0]
      break;
 8007e64:	e009      	b.n	8007e7a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f9d0 	bl	800820e <USBD_CtlError>
      return;
 8007e6e:	e020      	b.n	8007eb2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f9cb 	bl	800820e <USBD_CtlError>
    return;
 8007e78:	e01b      	b.n	8007eb2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007e7a:	897b      	ldrh	r3, [r7, #10]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d011      	beq.n	8007ea4 <USBD_GetDescriptor+0x1e0>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00d      	beq.n	8007ea4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	88da      	ldrh	r2, [r3, #6]
 8007e8c:	897b      	ldrh	r3, [r7, #10]
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	bf28      	it	cs
 8007e92:	4613      	movcs	r3, r2
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007e98:	897b      	ldrh	r3, [r7, #10]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa1f 	bl	80082e2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	88db      	ldrh	r3, [r3, #6]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fa76 	bl	800839e <USBD_CtlSendStatus>
  }
}
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	889b      	ldrh	r3, [r3, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d130      	bne.n	8007f2c <USBD_SetAddress+0x74>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	88db      	ldrh	r3, [r3, #6]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d12c      	bne.n	8007f2c <USBD_SetAddress+0x74>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	885b      	ldrh	r3, [r3, #2]
 8007ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed8:	d828      	bhi.n	8007f2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d104      	bne.n	8007efa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f98b 	bl	800820e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef8:	e01d      	b.n	8007f36 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7bfa      	ldrb	r2, [r7, #15]
 8007efe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 ffe2 	bl	8008ed0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa46 	bl	800839e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f20:	e009      	b.n	8007f36 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	e004      	b.n	8007f36 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f96d 	bl	800820e <USBD_CtlError>
  }
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	885b      	ldrh	r3, [r3, #2]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	4b41      	ldr	r3, [pc, #260]	; (8008058 <USBD_SetConfig+0x118>)
 8007f52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f54:	4b40      	ldr	r3, [pc, #256]	; (8008058 <USBD_SetConfig+0x118>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d904      	bls.n	8007f66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f955 	bl	800820e <USBD_CtlError>
 8007f64:	e075      	b.n	8008052 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d002      	beq.n	8007f76 <USBD_SetConfig+0x36>
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d023      	beq.n	8007fbc <USBD_SetConfig+0x7c>
 8007f74:	e062      	b.n	800803c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007f76:	4b38      	ldr	r3, [pc, #224]	; (8008058 <USBD_SetConfig+0x118>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01a      	beq.n	8007fb4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007f7e:	4b36      	ldr	r3, [pc, #216]	; (8008058 <USBD_SetConfig+0x118>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f90:	4b31      	ldr	r3, [pc, #196]	; (8008058 <USBD_SetConfig+0x118>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fa5d 	bl	8007456 <USBD_SetClassConfig>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d104      	bne.n	8007fac <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f932 	bl	800820e <USBD_CtlError>
          return;
 8007faa:	e052      	b.n	8008052 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f9f6 	bl	800839e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007fb2:	e04e      	b.n	8008052 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f9f2 	bl	800839e <USBD_CtlSendStatus>
      break;
 8007fba:	e04a      	b.n	8008052 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fbc:	4b26      	ldr	r3, [pc, #152]	; (8008058 <USBD_SetConfig+0x118>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d112      	bne.n	8007fea <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007fcc:	4b22      	ldr	r3, [pc, #136]	; (8008058 <USBD_SetConfig+0x118>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007fd6:	4b20      	ldr	r3, [pc, #128]	; (8008058 <USBD_SetConfig+0x118>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff fa59 	bl	8007494 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f9db 	bl	800839e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007fe8:	e033      	b.n	8008052 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007fea:	4b1b      	ldr	r3, [pc, #108]	; (8008058 <USBD_SetConfig+0x118>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d01d      	beq.n	8008034 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fa47 	bl	8007494 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <USBD_SetConfig+0x118>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008010:	4b11      	ldr	r3, [pc, #68]	; (8008058 <USBD_SetConfig+0x118>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fa1d 	bl	8007456 <USBD_SetClassConfig>
 800801c:	4603      	mov	r3, r0
 800801e:	2b02      	cmp	r3, #2
 8008020:	d104      	bne.n	800802c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8f2 	bl	800820e <USBD_CtlError>
          return;
 800802a:	e012      	b.n	8008052 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9b6 	bl	800839e <USBD_CtlSendStatus>
      break;
 8008032:	e00e      	b.n	8008052 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f9b2 	bl	800839e <USBD_CtlSendStatus>
      break;
 800803a:	e00a      	b.n	8008052 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8e5 	bl	800820e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008044:	4b04      	ldr	r3, [pc, #16]	; (8008058 <USBD_SetConfig+0x118>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff fa22 	bl	8007494 <USBD_ClrClassConfig>
      break;
 8008050:	bf00      	nop
    }
  }
}
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	200002b0 	.word	0x200002b0

0800805c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	88db      	ldrh	r3, [r3, #6]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d004      	beq.n	8008078 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f8cc 	bl	800820e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008076:	e022      	b.n	80080be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800807e:	2b02      	cmp	r3, #2
 8008080:	dc02      	bgt.n	8008088 <USBD_GetConfig+0x2c>
 8008082:	2b00      	cmp	r3, #0
 8008084:	dc03      	bgt.n	800808e <USBD_GetConfig+0x32>
 8008086:	e015      	b.n	80080b4 <USBD_GetConfig+0x58>
 8008088:	2b03      	cmp	r3, #3
 800808a:	d00b      	beq.n	80080a4 <USBD_GetConfig+0x48>
 800808c:	e012      	b.n	80080b4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3308      	adds	r3, #8
 8008098:	2201      	movs	r2, #1
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f920 	bl	80082e2 <USBD_CtlSendData>
      break;
 80080a2:	e00c      	b.n	80080be <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3304      	adds	r3, #4
 80080a8:	2201      	movs	r2, #1
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f918 	bl	80082e2 <USBD_CtlSendData>
      break;
 80080b2:	e004      	b.n	80080be <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f8a9 	bl	800820e <USBD_CtlError>
      break;
 80080bc:	bf00      	nop
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80080d6:	3b01      	subs	r3, #1
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d81e      	bhi.n	800811a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d004      	beq.n	80080ee <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f891 	bl	800820e <USBD_CtlError>
      break;
 80080ec:	e01a      	b.n	8008124 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f043 0202 	orr.w	r2, r3, #2
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	330c      	adds	r3, #12
 800810e:	2202      	movs	r2, #2
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f8e5 	bl	80082e2 <USBD_CtlSendData>
    break;
 8008118:	e004      	b.n	8008124 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f876 	bl	800820e <USBD_CtlError>
    break;
 8008122:	bf00      	nop
  }
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	885b      	ldrh	r3, [r3, #2]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d106      	bne.n	800814c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f929 	bl	800839e <USBD_CtlSendStatus>
  }

}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008164:	3b01      	subs	r3, #1
 8008166:	2b02      	cmp	r3, #2
 8008168:	d80b      	bhi.n	8008182 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	885b      	ldrh	r3, [r3, #2]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d10c      	bne.n	800818c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f90f 	bl	800839e <USBD_CtlSendStatus>
    }
    break;
 8008180:	e004      	b.n	800818c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f842 	bl	800820e <USBD_CtlError>
    break;
 800818a:	e000      	b.n	800818e <USBD_ClrFeature+0x3a>
    break;
 800818c:	bf00      	nop
  }
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	785a      	ldrb	r2, [r3, #1]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	3302      	adds	r3, #2
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	3303      	adds	r3, #3
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	4413      	add	r3, r2
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3304      	adds	r3, #4
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	3305      	adds	r3, #5
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	b29b      	uxth	r3, r3
 80081e0:	4413      	add	r3, r2
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	3306      	adds	r3, #6
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	3307      	adds	r3, #7
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4413      	add	r3, r2
 80081fe:	b29a      	uxth	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	80da      	strh	r2, [r3, #6]

}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr

0800820e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008218:	2180      	movs	r1, #128	; 0x80
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fdee 	bl	8008dfc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008220:	2100      	movs	r1, #0
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fdea 	bl	8008dfc <USBD_LL_StallEP>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d032      	beq.n	80082ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 f834 	bl	80082b4 <USBD_GetLen>
 800824c:	4603      	mov	r3, r0
 800824e:	3301      	adds	r3, #1
 8008250:	b29b      	uxth	r3, r3
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	75fa      	strb	r2, [r7, #23]
 8008260:	461a      	mov	r2, r3
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	4413      	add	r3, r2
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	7812      	ldrb	r2, [r2, #0]
 800826a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	75fa      	strb	r2, [r7, #23]
 8008272:	461a      	mov	r2, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4413      	add	r3, r2
 8008278:	2203      	movs	r2, #3
 800827a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800827c:	e012      	b.n	80082a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	60fa      	str	r2, [r7, #12]
 8008284:	7dfa      	ldrb	r2, [r7, #23]
 8008286:	1c51      	adds	r1, r2, #1
 8008288:	75f9      	strb	r1, [r7, #23]
 800828a:	4611      	mov	r1, r2
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	440a      	add	r2, r1
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	75fa      	strb	r2, [r7, #23]
 800829a:	461a      	mov	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4413      	add	r3, r2
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e8      	bne.n	800827e <USBD_GetString+0x4e>
    }
  }
}
 80082ac:	bf00      	nop
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80082c0:	e005      	b.n	80082ce <USBD_GetLen+0x1a>
    {
        len++;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	3301      	adds	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3301      	adds	r3, #1
 80082cc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1f5      	bne.n	80082c2 <USBD_GetLen+0xe>
    }

    return len;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	4613      	mov	r3, r2
 80082ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80082f8:	88fa      	ldrh	r2, [r7, #6]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80082fe:	88fa      	ldrh	r2, [r7, #6]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	2100      	movs	r1, #0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fdff 	bl	8008f0e <USBD_LL_Transmit>

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	4613      	mov	r3, r2
 8008326:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	2100      	movs	r1, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fded 	bl	8008f0e <USBD_LL_Transmit>

  return USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	4613      	mov	r3, r2
 800834a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2203      	movs	r2, #3
 8008350:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008354:	88fa      	ldrh	r2, [r7, #6]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	2100      	movs	r1, #0
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fdf2 	bl	8008f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	4613      	mov	r3, r2
 8008386:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	2100      	movs	r1, #0
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fde0 	bl	8008f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2204      	movs	r2, #4
 80083aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083ae:	2300      	movs	r3, #0
 80083b0:	2200      	movs	r2, #0
 80083b2:	2100      	movs	r1, #0
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fdaa 	bl	8008f0e <USBD_LL_Transmit>

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2205      	movs	r2, #5
 80083d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80083d4:	2300      	movs	r3, #0
 80083d6:	2200      	movs	r2, #0
 80083d8:	2100      	movs	r1, #0
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fdba 	bl	8008f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 80083f6:	f7f8 fb75 	bl	8000ae4 <HAL_GetTick>
 80083fa:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 80083fc:	e009      	b.n	8008412 <WaitWhileBusy+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 80083fe:	f7f8 fb71 	bl	8000ae4 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	429a      	cmp	r2, r3
 800840c:	d901      	bls.n	8008412 <WaitWhileBusy+0x26>
		{
			return(LoRa_TIMEOUT);
 800840e:	2302      	movs	r3, #2
 8008410:	e008      	b.n	8008424 <WaitWhileBusy+0x38>
	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8008412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008416:	4805      	ldr	r0, [pc, #20]	; (800842c <WaitWhileBusy+0x40>)
 8008418:	f7f8 fe1e 	bl	8001058 <HAL_GPIO_ReadPin>
 800841c:	4603      	mov	r3, r0
 800841e:	2b01      	cmp	r3, #1
 8008420:	d0ed      	beq.n	80083fe <WaitWhileBusy+0x12>
		}
	}

	return(LoRa_OK);
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40020000 	.word	0x40020000

08008430 <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	807b      	strh	r3, [r7, #2]
 800843c:	4613      	mov	r3, r2
 800843e:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 8008440:	200a      	movs	r0, #10
 8008442:	f7ff ffd3 	bl	80083ec <WaitWhileBusy>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 800844c:	2301      	movs	r3, #1
 800844e:	e01c      	b.n	800848a <SPI_Send+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8008450:	2200      	movs	r2, #0
 8008452:	2110      	movs	r1, #16
 8008454:	480f      	ldr	r0, [pc, #60]	; (8008494 <SPI_Send+0x64>)
 8008456:	f7f8 fe16 	bl	8001086 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, buffer, numBytes, 100) != HAL_OK)
 800845a:	4b0f      	ldr	r3, [pc, #60]	; (8008498 <SPI_Send+0x68>)
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	887a      	ldrh	r2, [r7, #2]
 8008460:	2364      	movs	r3, #100	; 0x64
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	f7fb fa0c 	bl	8003880 <HAL_SPI_Transmit>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <SPI_Send+0x42>
	{
		return(LoRa_ERROR);
 800846e:	2301      	movs	r3, #1
 8008470:	e00b      	b.n	800848a <SPI_Send+0x5a>
	}

	if(moreToCome != true)
 8008472:	787b      	ldrb	r3, [r7, #1]
 8008474:	f083 0301 	eor.w	r3, r3, #1
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <SPI_Send+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 800847e:	2201      	movs	r2, #1
 8008480:	2110      	movs	r1, #16
 8008482:	4804      	ldr	r0, [pc, #16]	; (8008494 <SPI_Send+0x64>)
 8008484:	f7f8 fdff 	bl	8001086 <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	40020000 	.word	0x40020000
 8008498:	200002b4 	.word	0x200002b4

0800849c <SPI_Receive>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Receive(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	807b      	strh	r3, [r7, #2]
 80084a8:	4613      	mov	r3, r2
 80084aa:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 80084ac:	200a      	movs	r0, #10
 80084ae:	f7ff ff9d 	bl	80083ec <WaitWhileBusy>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <SPI_Receive+0x20>
	{
		return(LoRa_ERROR);
 80084b8:	2301      	movs	r3, #1
 80084ba:	e01c      	b.n	80084f6 <SPI_Receive+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 80084bc:	2200      	movs	r2, #0
 80084be:	2110      	movs	r1, #16
 80084c0:	480f      	ldr	r0, [pc, #60]	; (8008500 <SPI_Receive+0x64>)
 80084c2:	f7f8 fde0 	bl	8001086 <HAL_GPIO_WritePin>

	if(HAL_SPI_Receive(hspi, buffer, numBytes, 100) != HAL_OK)
 80084c6:	4b0f      	ldr	r3, [pc, #60]	; (8008504 <SPI_Receive+0x68>)
 80084c8:	6818      	ldr	r0, [r3, #0]
 80084ca:	887a      	ldrh	r2, [r7, #2]
 80084cc:	2364      	movs	r3, #100	; 0x64
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	f7fb fb12 	bl	8003af8 <HAL_SPI_Receive>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <SPI_Receive+0x42>
	{
		return(LoRa_ERROR);
 80084da:	2301      	movs	r3, #1
 80084dc:	e00b      	b.n	80084f6 <SPI_Receive+0x5a>
	}

	if(moreToCome != true)
 80084de:	787b      	ldrb	r3, [r7, #1]
 80084e0:	f083 0301 	eor.w	r3, r3, #1
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <SPI_Receive+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 80084ea:	2201      	movs	r2, #1
 80084ec:	2110      	movs	r1, #16
 80084ee:	4804      	ldr	r0, [pc, #16]	; (8008500 <SPI_Receive+0x64>)
 80084f0:	f7f8 fdc9 	bl	8001086 <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	40020000 	.word	0x40020000
 8008504:	200002b4 	.word	0x200002b4

08008508 <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SPI_HandleTypeDef *hspiPtr)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[6];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 8008510:	4a4b      	ldr	r2, [pc, #300]	; (8008640 <LoRa_Init+0x138>)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6013      	str	r3, [r2, #0]

  /* Set NSS high */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8008516:	2201      	movs	r2, #1
 8008518:	2110      	movs	r1, #16
 800851a:	484a      	ldr	r0, [pc, #296]	; (8008644 <LoRa_Init+0x13c>)
 800851c:	f7f8 fdb3 	bl	8001086 <HAL_GPIO_WritePin>

  /* Reset SX1262 chip */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET); 	/* Pull NRST low */
 8008520:	2200      	movs	r2, #0
 8008522:	2101      	movs	r1, #1
 8008524:	4847      	ldr	r0, [pc, #284]	; (8008644 <LoRa_Init+0x13c>)
 8008526:	f7f8 fdae 	bl	8001086 <HAL_GPIO_WritePin>
  HAL_Delay(1); 															/* delay 1mS */
 800852a:	2001      	movs	r0, #1
 800852c:	f7f8 fae4 	bl	8000af8 <HAL_Delay>
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);		/* Set NRST high */
 8008530:	2201      	movs	r2, #1
 8008532:	2101      	movs	r1, #1
 8008534:	4843      	ldr	r0, [pc, #268]	; (8008644 <LoRa_Init+0x13c>)
 8008536:	f7f8 fda6 	bl	8001086 <HAL_GPIO_WritePin>

  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 800853a:	2380      	movs	r3, #128	; 0x80
 800853c:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = LORA_STDBY_RC;
 800853e:	2300      	movs	r3, #0
 8008540:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8008542:	f107 0308 	add.w	r3, r7, #8
 8008546:	2200      	movs	r2, #0
 8008548:	2102      	movs	r1, #2
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff ff70 	bl	8008430 <SPI_Send>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <LoRa_Init+0x52>
  {
	  return(LoRa_ERROR);
 8008556:	2301      	movs	r3, #1
 8008558:	e06e      	b.n	8008638 <LoRa_Init+0x130>
  }

  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 800855a:	238a      	movs	r3, #138	; 0x8a
 800855c:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 800855e:	2301      	movs	r3, #1
 8008560:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8008562:	f107 0308 	add.w	r3, r7, #8
 8008566:	2200      	movs	r2, #0
 8008568:	2102      	movs	r1, #2
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff ff60 	bl	8008430 <SPI_Send>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <LoRa_Init+0x72>
  {
	  return(LoRa_ERROR);
 8008576:	2301      	movs	r3, #1
 8008578:	e05e      	b.n	8008638 <LoRa_Init+0x130>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 800857a:	2386      	movs	r3, #134	; 0x86
 800857c:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 0x39;
 800857e:	2339      	movs	r3, #57	; 0x39
 8008580:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x30;
 8008582:	2330      	movs	r3, #48	; 0x30
 8008584:	72bb      	strb	r3, [r7, #10]
  xmitBuffer[3] = 0x00;
 8008586:	2300      	movs	r3, #0
 8008588:	72fb      	strb	r3, [r7, #11]
  xmitBuffer[4] = 0x00;
 800858a:	2300      	movs	r3, #0
 800858c:	733b      	strb	r3, [r7, #12]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 800858e:	f107 0308 	add.w	r3, r7, #8
 8008592:	2200      	movs	r2, #0
 8008594:	2105      	movs	r1, #5
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff ff4a 	bl	8008430 <SPI_Send>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <LoRa_Init+0x9e>
  {
	  return(LoRa_ERROR);
 80085a2:	2301      	movs	r3, #1
 80085a4:	e048      	b.n	8008638 <LoRa_Init+0x130>
  }

  /* Set the power amplifier configuration */
  /* Set output power to +22 dBm           */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 80085a6:	2395      	movs	r3, #149	; 0x95
 80085a8:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 80085aa:	2304      	movs	r3, #4
 80085ac:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x07; /* hpMax */
 80085ae:	2307      	movs	r3, #7
 80085b0:	72bb      	strb	r3, [r7, #10]
  xmitBuffer[3] = 0x00; /* devSel */
 80085b2:	2300      	movs	r3, #0
 80085b4:	72fb      	strb	r3, [r7, #11]
  xmitBuffer[4] = 0x01; /* paLut */
 80085b6:	2301      	movs	r3, #1
 80085b8:	733b      	strb	r3, [r7, #12]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 80085ba:	f107 0308 	add.w	r3, r7, #8
 80085be:	2200      	movs	r2, #0
 80085c0:	2105      	movs	r1, #5
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff ff34 	bl	8008430 <SPI_Send>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <LoRa_Init+0xca>
  {
	  return(LoRa_ERROR);
 80085ce:	2301      	movs	r3, #1
 80085d0:	e032      	b.n	8008638 <LoRa_Init+0x130>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 80085d2:	238e      	movs	r3, #142	; 0x8e
 80085d4:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 80085d6:	2316      	movs	r3, #22
 80085d8:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x04; /* RampTime 200 uS */
 80085da:	2304      	movs	r3, #4
 80085dc:	72bb      	strb	r3, [r7, #10]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	2200      	movs	r2, #0
 80085e4:	2103      	movs	r1, #3
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff ff22 	bl	8008430 <SPI_Send>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <LoRa_Init+0xee>
  {
	  return(LoRa_ERROR);
 80085f2:	2301      	movs	r3, #1
 80085f4:	e020      	b.n	8008638 <LoRa_Init+0x130>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 80085f6:	239d      	movs	r3, #157	; 0x9d
 80085f8:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 1; /* enable */
 80085fa:	2301      	movs	r3, #1
 80085fc:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	2200      	movs	r2, #0
 8008604:	2102      	movs	r1, #2
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff ff12 	bl	8008430 <SPI_Send>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <LoRa_Init+0x10e>
  {
	  return(LoRa_ERROR);
 8008612:	2301      	movs	r3, #1
 8008614:	e010      	b.n	8008638 <LoRa_Init+0x130>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 8008616:	2396      	movs	r3, #150	; 0x96
 8008618:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 800861a:	2301      	movs	r3, #1
 800861c:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 800861e:	f107 0308 	add.w	r3, r7, #8
 8008622:	2200      	movs	r2, #0
 8008624:	2102      	movs	r1, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff ff02 	bl	8008430 <SPI_Send>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <LoRa_Init+0x12e>
   {
 	  return(LoRa_ERROR);
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <LoRa_Init+0x130>
   }

  return(LoRa_OK);
 8008636:	2300      	movs	r3, #0

}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	200002b4 	.word	0x200002b4
 8008644:	40020000 	.word	0x40020000

08008648 <LoRaGetStatus>:
 * Return Value
 *  Status byte or 0xFF for error
 *  Status byte defined in SX1262 datasheet
 */
uint8_t LoRaGetStatus(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
	/* Return the status byte from the SX1262 chip */
	uint8_t status = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	71fb      	strb	r3, [r7, #7]
	uint8_t opcode = LORA_GET_STATUS_OPCODE;
 8008652:	23c0      	movs	r3, #192	; 0xc0
 8008654:	71bb      	strb	r3, [r7, #6]

	if(SPI_Send(&opcode, 1, true) != LoRa_OK)
 8008656:	1dbb      	adds	r3, r7, #6
 8008658:	2201      	movs	r2, #1
 800865a:	2101      	movs	r1, #1
 800865c:	4618      	mov	r0, r3
 800865e:	f7ff fee7 	bl	8008430 <SPI_Send>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <LoRaGetStatus+0x24>
	{
		return(LoRa_ERROR);
 8008668:	2301      	movs	r3, #1
 800866a:	e00b      	b.n	8008684 <LoRaGetStatus+0x3c>
	}

	if(SPI_Receive(&status, 1, false) != LoRa_OK)
 800866c:	1dfb      	adds	r3, r7, #7
 800866e:	2200      	movs	r2, #0
 8008670:	2101      	movs	r1, #1
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff ff12 	bl	800849c <SPI_Receive>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <LoRaGetStatus+0x3a>
	{
		return(LoRa_ERROR);
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <LoRaGetStatus+0x3c>
	}

	return(status);
 8008682:	79fb      	ldrb	r3, [r7, #7]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <LoRaSetTxContinuousWave>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaSetTxContinuousWave(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
	uint8_t opcode = LORA_SET_TX_CONTINUOUS_WAVE_OPCODE;
 8008692:	23d1      	movs	r3, #209	; 0xd1
 8008694:	71fb      	strb	r3, [r7, #7]
	if(SPI_Send(&opcode, 1, false) != LoRa_OK)
 8008696:	1dfb      	adds	r3, r7, #7
 8008698:	2200      	movs	r2, #0
 800869a:	2101      	movs	r1, #1
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fec7 	bl	8008430 <SPI_Send>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <LoRaSetTxContinuousWave+0x20>
	{
		return(LoRa_ERROR);
 80086a8:	2301      	movs	r3, #1
 80086aa:	e000      	b.n	80086ae <LoRaSetTxContinuousWave+0x22>
	}

	return(LoRa_OK);
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <LoRaSetStandbyMode>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaSetStandbyMode(void)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	buffer[0] = LORA_SET_STANDBY_OPCODE;
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	713b      	strb	r3, [r7, #4]
	buffer[1] = LORA_STDBY_RC; /* Use internal RC oscillator to save power */
 80086c0:	2300      	movs	r3, #0
 80086c2:	717b      	strb	r3, [r7, #5]
	if(SPI_Send(buffer, 2, false) != LoRa_OK)
 80086c4:	1d3b      	adds	r3, r7, #4
 80086c6:	2200      	movs	r2, #0
 80086c8:	2102      	movs	r1, #2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff feb0 	bl	8008430 <SPI_Send>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <LoRaSetStandbyMode+0x24>
	{
		return(LoRa_ERROR);
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <LoRaSetStandbyMode+0x26>
	}

	return(LoRa_OK);
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086e8:	2200      	movs	r2, #0
 80086ea:	4912      	ldr	r1, [pc, #72]	; (8008734 <MX_USB_DEVICE_Init+0x50>)
 80086ec:	4812      	ldr	r0, [pc, #72]	; (8008738 <MX_USB_DEVICE_Init+0x54>)
 80086ee:	f7fe fe58 	bl	80073a2 <USBD_Init>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086f8:	f7f8 f840 	bl	800077c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086fc:	490f      	ldr	r1, [pc, #60]	; (800873c <MX_USB_DEVICE_Init+0x58>)
 80086fe:	480e      	ldr	r0, [pc, #56]	; (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008700:	f7fe fe7a 	bl	80073f8 <USBD_RegisterClass>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800870a:	f7f8 f837 	bl	800077c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800870e:	490c      	ldr	r1, [pc, #48]	; (8008740 <MX_USB_DEVICE_Init+0x5c>)
 8008710:	4809      	ldr	r0, [pc, #36]	; (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008712:	f7fe fdab 	bl	800726c <USBD_CDC_RegisterInterface>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800871c:	f7f8 f82e 	bl	800077c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008720:	4805      	ldr	r0, [pc, #20]	; (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008722:	f7fe fe82 	bl	800742a <USBD_Start>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800872c:	f7f8 f826 	bl	800077c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008730:	bf00      	nop
 8008732:	bd80      	pop	{r7, pc}
 8008734:	2000012c 	.word	0x2000012c
 8008738:	200002b8 	.word	0x200002b8
 800873c:	20000018 	.word	0x20000018
 8008740:	2000011c 	.word	0x2000011c

08008744 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008748:	2200      	movs	r2, #0
 800874a:	4905      	ldr	r1, [pc, #20]	; (8008760 <CDC_Init_FS+0x1c>)
 800874c:	4805      	ldr	r0, [pc, #20]	; (8008764 <CDC_Init_FS+0x20>)
 800874e:	f7fe fda3 	bl	8007298 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008752:	4905      	ldr	r1, [pc, #20]	; (8008768 <CDC_Init_FS+0x24>)
 8008754:	4803      	ldr	r0, [pc, #12]	; (8008764 <CDC_Init_FS+0x20>)
 8008756:	f7fe fdb8 	bl	80072ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800875a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800875c:	4618      	mov	r0, r3
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000954 	.word	0x20000954
 8008764:	200002b8 	.word	0x200002b8
 8008768:	20000554 	.word	0x20000554

0800876c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008770:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008772:	4618      	mov	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr
	...

0800877c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
 8008788:	4613      	mov	r3, r2
 800878a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b23      	cmp	r3, #35	; 0x23
 8008790:	d84a      	bhi.n	8008828 <CDC_Control_FS+0xac>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <CDC_Control_FS+0x1c>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	08008829 	.word	0x08008829
 800879c:	08008829 	.word	0x08008829
 80087a0:	08008829 	.word	0x08008829
 80087a4:	08008829 	.word	0x08008829
 80087a8:	08008829 	.word	0x08008829
 80087ac:	08008829 	.word	0x08008829
 80087b0:	08008829 	.word	0x08008829
 80087b4:	08008829 	.word	0x08008829
 80087b8:	08008829 	.word	0x08008829
 80087bc:	08008829 	.word	0x08008829
 80087c0:	08008829 	.word	0x08008829
 80087c4:	08008829 	.word	0x08008829
 80087c8:	08008829 	.word	0x08008829
 80087cc:	08008829 	.word	0x08008829
 80087d0:	08008829 	.word	0x08008829
 80087d4:	08008829 	.word	0x08008829
 80087d8:	08008829 	.word	0x08008829
 80087dc:	08008829 	.word	0x08008829
 80087e0:	08008829 	.word	0x08008829
 80087e4:	08008829 	.word	0x08008829
 80087e8:	08008829 	.word	0x08008829
 80087ec:	08008829 	.word	0x08008829
 80087f0:	08008829 	.word	0x08008829
 80087f4:	08008829 	.word	0x08008829
 80087f8:	08008829 	.word	0x08008829
 80087fc:	08008829 	.word	0x08008829
 8008800:	08008829 	.word	0x08008829
 8008804:	08008829 	.word	0x08008829
 8008808:	08008829 	.word	0x08008829
 800880c:	08008829 	.word	0x08008829
 8008810:	08008829 	.word	0x08008829
 8008814:	08008829 	.word	0x08008829
 8008818:	08008829 	.word	0x08008829
 800881c:	08008829 	.word	0x08008829
 8008820:	08008829 	.word	0x08008829
 8008824:	08008829 	.word	0x08008829
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008828:	bf00      	nop
  }

  return (USBD_OK);
 800882a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop

08008838 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	4805      	ldr	r0, [pc, #20]	; (800885c <CDC_Receive_FS+0x24>)
 8008846:	f7fe fd40 	bl	80072ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800884a:	4804      	ldr	r0, [pc, #16]	; (800885c <CDC_Receive_FS+0x24>)
 800884c:	f7fe fd7f 	bl	800734e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008850:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	200002b8 	.word	0x200002b8

08008860 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008870:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <CDC_Transmit_FS+0x48>)
 8008872:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008876:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008882:	2301      	movs	r3, #1
 8008884:	e00b      	b.n	800889e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008886:	887b      	ldrh	r3, [r7, #2]
 8008888:	461a      	mov	r2, r3
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	4806      	ldr	r0, [pc, #24]	; (80088a8 <CDC_Transmit_FS+0x48>)
 800888e:	f7fe fd03 	bl	8007298 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008892:	4805      	ldr	r0, [pc, #20]	; (80088a8 <CDC_Transmit_FS+0x48>)
 8008894:	f7fe fd2c 	bl	80072f0 <USBD_CDC_TransmitPacket>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	200002b8 	.word	0x200002b8

080088ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	6039      	str	r1, [r7, #0]
 80088b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2212      	movs	r2, #18
 80088bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088be:	4b03      	ldr	r3, [pc, #12]	; (80088cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	20000148 	.word	0x20000148

080088d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	6039      	str	r1, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2204      	movs	r2, #4
 80088e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088e2:	4b03      	ldr	r3, [pc, #12]	; (80088f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	2000015c 	.word	0x2000015c

080088f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	6039      	str	r1, [r7, #0]
 80088fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d105      	bne.n	8008912 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	4907      	ldr	r1, [pc, #28]	; (8008928 <USBD_FS_ProductStrDescriptor+0x34>)
 800890a:	4808      	ldr	r0, [pc, #32]	; (800892c <USBD_FS_ProductStrDescriptor+0x38>)
 800890c:	f7ff fc90 	bl	8008230 <USBD_GetString>
 8008910:	e004      	b.n	800891c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	4904      	ldr	r1, [pc, #16]	; (8008928 <USBD_FS_ProductStrDescriptor+0x34>)
 8008916:	4805      	ldr	r0, [pc, #20]	; (800892c <USBD_FS_ProductStrDescriptor+0x38>)
 8008918:	f7ff fc8a 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000d54 	.word	0x20000d54
 800892c:	080099c4 	.word	0x080099c4

08008930 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	6039      	str	r1, [r7, #0]
 800893a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	4904      	ldr	r1, [pc, #16]	; (8008950 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008940:	4804      	ldr	r0, [pc, #16]	; (8008954 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008942:	f7ff fc75 	bl	8008230 <USBD_GetString>
  return USBD_StrDesc;
 8008946:	4b02      	ldr	r3, [pc, #8]	; (8008950 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20000d54 	.word	0x20000d54
 8008954:	080099dc 	.word	0x080099dc

08008958 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	221a      	movs	r2, #26
 8008968:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800896a:	f000 f843 	bl	80089f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800896e:	4b02      	ldr	r3, [pc, #8]	; (8008978 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000160 	.word	0x20000160

0800897c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	6039      	str	r1, [r7, #0]
 8008986:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d105      	bne.n	800899a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	4907      	ldr	r1, [pc, #28]	; (80089b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008992:	4808      	ldr	r0, [pc, #32]	; (80089b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008994:	f7ff fc4c 	bl	8008230 <USBD_GetString>
 8008998:	e004      	b.n	80089a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	4904      	ldr	r1, [pc, #16]	; (80089b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800899e:	4805      	ldr	r0, [pc, #20]	; (80089b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089a0:	f7ff fc46 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089a4:	4b02      	ldr	r3, [pc, #8]	; (80089b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000d54 	.word	0x20000d54
 80089b4:	080099f0 	.word	0x080099f0

080089b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	6039      	str	r1, [r7, #0]
 80089c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d105      	bne.n	80089d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	4907      	ldr	r1, [pc, #28]	; (80089ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089ce:	4808      	ldr	r0, [pc, #32]	; (80089f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089d0:	f7ff fc2e 	bl	8008230 <USBD_GetString>
 80089d4:	e004      	b.n	80089e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	4904      	ldr	r1, [pc, #16]	; (80089ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089da:	4805      	ldr	r0, [pc, #20]	; (80089f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089dc:	f7ff fc28 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089e0:	4b02      	ldr	r3, [pc, #8]	; (80089ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	20000d54 	.word	0x20000d54
 80089f0:	080099fc 	.word	0x080099fc

080089f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089fa:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <Get_SerialNum+0x44>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a00:	4b0e      	ldr	r3, [pc, #56]	; (8008a3c <Get_SerialNum+0x48>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a06:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <Get_SerialNum+0x4c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4413      	add	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d009      	beq.n	8008a2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a1a:	2208      	movs	r2, #8
 8008a1c:	4909      	ldr	r1, [pc, #36]	; (8008a44 <Get_SerialNum+0x50>)
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 f814 	bl	8008a4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a24:	2204      	movs	r2, #4
 8008a26:	4908      	ldr	r1, [pc, #32]	; (8008a48 <Get_SerialNum+0x54>)
 8008a28:	68b8      	ldr	r0, [r7, #8]
 8008a2a:	f000 f80f 	bl	8008a4c <IntToUnicode>
  }
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	1ff80050 	.word	0x1ff80050
 8008a3c:	1ff80054 	.word	0x1ff80054
 8008a40:	1ff80058 	.word	0x1ff80058
 8008a44:	20000162 	.word	0x20000162
 8008a48:	20000172 	.word	0x20000172

08008a4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a5e:	2300      	movs	r3, #0
 8008a60:	75fb      	strb	r3, [r7, #23]
 8008a62:	e027      	b.n	8008ab4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	0f1b      	lsrs	r3, r3, #28
 8008a68:	2b09      	cmp	r3, #9
 8008a6a:	d80b      	bhi.n	8008a84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	0f1b      	lsrs	r3, r3, #28
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	4619      	mov	r1, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3230      	adds	r2, #48	; 0x30
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]
 8008a82:	e00a      	b.n	8008a9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	0f1b      	lsrs	r3, r3, #28
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	4619      	mov	r1, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	440b      	add	r3, r1
 8008a94:	3237      	adds	r2, #55	; 0x37
 8008a96:	b2d2      	uxtb	r2, r2
 8008a98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	75fb      	strb	r3, [r7, #23]
 8008ab4:	7dfa      	ldrb	r2, [r7, #23]
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d3d3      	bcc.n	8008a64 <IntToUnicode+0x18>
  }
}
 8008abc:	bf00      	nop
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bc80      	pop	{r7}
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d106      	bne.n	8008ae8 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <HAL_PCDEx_SetConnectionState+0x38>)
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	4a08      	ldr	r2, [pc, #32]	; (8008b00 <HAL_PCDEx_SetConnectionState+0x38>)
 8008ae0:	f043 0301 	orr.w	r3, r3, #1
 8008ae4:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008ae6:	e005      	b.n	8008af4 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008ae8:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <HAL_PCDEx_SetConnectionState+0x38>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	4a04      	ldr	r2, [pc, #16]	; (8008b00 <HAL_PCDEx_SetConnectionState+0x38>)
 8008aee:	f023 0301 	bic.w	r3, r3, #1
 8008af2:	6053      	str	r3, [r2, #4]
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	40010000 	.word	0x40010000

08008b04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a0d      	ldr	r2, [pc, #52]	; (8008b48 <HAL_PCD_MspInit+0x44>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d113      	bne.n	8008b3e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <HAL_PCD_MspInit+0x48>)
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	4a0c      	ldr	r2, [pc, #48]	; (8008b4c <HAL_PCD_MspInit+0x48>)
 8008b1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b20:	6253      	str	r3, [r2, #36]	; 0x24
 8008b22:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <HAL_PCD_MspInit+0x48>)
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2100      	movs	r1, #0
 8008b32:	2014      	movs	r0, #20
 8008b34:	f7f8 f8d9 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008b38:	2014      	movs	r0, #20
 8008b3a:	f7f8 f8f2 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	40005c00 	.word	0x40005c00
 8008b4c:	40023800 	.word	0x40023800

08008b50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f7fe fca7 	bl	80074ba <USBD_LL_SetupStage>
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	00db      	lsls	r3, r3, #3
 8008b92:	440b      	add	r3, r1
 8008b94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f7fe fcd9 	bl	8007554 <USBD_LL_DataOutStage>
}
 8008ba2:	bf00      	nop
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	440b      	add	r3, r1
 8008bca:	333c      	adds	r3, #60	; 0x3c
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	78fb      	ldrb	r3, [r7, #3]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f7fe fd30 	bl	8007636 <USBD_LL_DataInStage>
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b082      	sub	sp, #8
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe fe3b 	bl	8007868 <USBD_LL_SOF>
}
 8008bf2:	bf00      	nop
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c02:	2301      	movs	r3, #1
 8008c04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d001      	beq.n	8008c12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c0e:	f7f7 fdb5 	bl	800077c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c18:	7bfa      	ldrb	r2, [r7, #15]
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fdf0 	bl	8007802 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fda9 	bl	8007780 <USBD_LL_Reset>
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fdea 	bl	8007820 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c54:	4b04      	ldr	r3, [pc, #16]	; (8008c68 <HAL_PCD_SuspendCallback+0x30>)
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	4a03      	ldr	r2, [pc, #12]	; (8008c68 <HAL_PCD_SuspendCallback+0x30>)
 8008c5a:	f043 0306 	orr.w	r3, r3, #6
 8008c5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	e000ed00 	.word	0xe000ed00

08008c6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fde4 	bl	8007848 <USBD_LL_Resume>
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008c90:	4a28      	ldr	r2, [pc, #160]	; (8008d34 <USBD_LL_Init+0xac>)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a26      	ldr	r2, [pc, #152]	; (8008d34 <USBD_LL_Init+0xac>)
 8008c9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008ca0:	4b24      	ldr	r3, [pc, #144]	; (8008d34 <USBD_LL_Init+0xac>)
 8008ca2:	4a25      	ldr	r2, [pc, #148]	; (8008d38 <USBD_LL_Init+0xb0>)
 8008ca4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ca6:	4b23      	ldr	r3, [pc, #140]	; (8008d34 <USBD_LL_Init+0xac>)
 8008ca8:	2208      	movs	r2, #8
 8008caa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008cac:	4b21      	ldr	r3, [pc, #132]	; (8008d34 <USBD_LL_Init+0xac>)
 8008cae:	2202      	movs	r2, #2
 8008cb0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cb2:	4b20      	ldr	r3, [pc, #128]	; (8008d34 <USBD_LL_Init+0xac>)
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008cb8:	4b1e      	ldr	r3, [pc, #120]	; (8008d34 <USBD_LL_Init+0xac>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008cbe:	4b1d      	ldr	r3, [pc, #116]	; (8008d34 <USBD_LL_Init+0xac>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008cc4:	481b      	ldr	r0, [pc, #108]	; (8008d34 <USBD_LL_Init+0xac>)
 8008cc6:	f7f8 fb53 	bl	8001370 <HAL_PCD_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008cd0:	f7f7 fd54 	bl	800077c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008cda:	2318      	movs	r3, #24
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2100      	movs	r1, #0
 8008ce0:	f7f9 ff30 	bl	8002b44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008cea:	2358      	movs	r3, #88	; 0x58
 8008cec:	2200      	movs	r2, #0
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	f7f9 ff28 	bl	8002b44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008cfa:	23c0      	movs	r3, #192	; 0xc0
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2181      	movs	r1, #129	; 0x81
 8008d00:	f7f9 ff20 	bl	8002b44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008d0a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2101      	movs	r1, #1
 8008d12:	f7f9 ff17 	bl	8002b44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d20:	2200      	movs	r2, #0
 8008d22:	2182      	movs	r1, #130	; 0x82
 8008d24:	f7f9 ff0e 	bl	8002b44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20000f54 	.word	0x20000f54
 8008d38:	40005c00 	.word	0x40005c00

08008d3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f8 fbea 	bl	800152c <HAL_PCD_Start>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f944 	bl	8008fec <USBD_Get_USB_Status>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	461a      	mov	r2, r3
 8008d80:	4603      	mov	r3, r0
 8008d82:	70fb      	strb	r3, [r7, #3]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70bb      	strb	r3, [r7, #2]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008d9a:	78bb      	ldrb	r3, [r7, #2]
 8008d9c:	883a      	ldrh	r2, [r7, #0]
 8008d9e:	78f9      	ldrb	r1, [r7, #3]
 8008da0:	f7f8 fd06 	bl	80017b0 <HAL_PCD_EP_Open>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 f91e 	bl	8008fec <USBD_Get_USB_Status>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7f8 fd4d 	bl	800187c <HAL_PCD_EP_Close>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f8ff 	bl	8008fec <USBD_Get_USB_Status>
 8008dee:	4603      	mov	r3, r0
 8008df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e16:	78fa      	ldrb	r2, [r7, #3]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f8 fe0d 	bl	8001a3a <HAL_PCD_EP_SetStall>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 f8e0 	bl	8008fec <USBD_Get_USB_Status>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e54:	78fa      	ldrb	r2, [r7, #3]
 8008e56:	4611      	mov	r1, r2
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7f8 fe40 	bl	8001ade <HAL_PCD_EP_ClrStall>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f8c1 	bl	8008fec <USBD_Get_USB_Status>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da0c      	bge.n	8008eae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9a:	68f9      	ldr	r1, [r7, #12]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	440b      	add	r3, r1
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	e00b      	b.n	8008ec6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb4:	68f9      	ldr	r1, [r7, #12]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	440b      	add	r3, r1
 8008ec0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008ec4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bc80      	pop	{r7}
 8008ece:	4770      	bx	lr

08008ed0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f8 fc39 	bl	8001766 <HAL_PCD_SetAddress>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 f876 	bl	8008fec <USBD_Get_USB_Status>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b086      	sub	sp, #24
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	72fb      	strb	r3, [r7, #11]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008f30:	893b      	ldrh	r3, [r7, #8]
 8008f32:	7af9      	ldrb	r1, [r7, #11]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	f7f8 fd3d 	bl	80019b4 <HAL_PCD_EP_Transmit>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 f853 	bl	8008fec <USBD_Get_USB_Status>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	460b      	mov	r3, r1
 8008f62:	72fb      	strb	r3, [r7, #11]
 8008f64:	4613      	mov	r3, r2
 8008f66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008f76:	893b      	ldrh	r3, [r7, #8]
 8008f78:	7af9      	ldrb	r1, [r7, #11]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	f7f8 fcc6 	bl	800190c <HAL_PCD_EP_Receive>
 8008f80:	4603      	mov	r3, r0
 8008f82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f830 	bl	8008fec <USBD_Get_USB_Status>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f90:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008fac:	78fa      	ldrb	r2, [r7, #3]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7f8 fce8 	bl	8001986 <HAL_PCD_EP_GetRxCount>
 8008fb6:	4603      	mov	r3, r0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fc8:	4b02      	ldr	r3, [pc, #8]	; (8008fd4 <USBD_static_malloc+0x14>)
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bc80      	pop	{r7}
 8008fd2:	4770      	bx	lr
 8008fd4:	20001240 	.word	0x20001240

08008fd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]

}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr
	...

08008fec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d817      	bhi.n	8009030 <USBD_Get_USB_Status+0x44>
 8009000:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <USBD_Get_USB_Status+0x1c>)
 8009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009006:	bf00      	nop
 8009008:	08009019 	.word	0x08009019
 800900c:	0800901f 	.word	0x0800901f
 8009010:	08009025 	.word	0x08009025
 8009014:	0800902b 	.word	0x0800902b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]
    break;
 800901c:	e00b      	b.n	8009036 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800901e:	2302      	movs	r3, #2
 8009020:	73fb      	strb	r3, [r7, #15]
    break;
 8009022:	e008      	b.n	8009036 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009024:	2301      	movs	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	e005      	b.n	8009036 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800902a:	2302      	movs	r3, #2
 800902c:	73fb      	strb	r3, [r7, #15]
    break;
 800902e:	e002      	b.n	8009036 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009030:	2302      	movs	r3, #2
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	bf00      	nop
  }
  return usb_status;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop

08009044 <__errno>:
 8009044:	4b01      	ldr	r3, [pc, #4]	; (800904c <__errno+0x8>)
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	2000017c 	.word	0x2000017c

08009050 <__libc_init_array>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	2600      	movs	r6, #0
 8009054:	4d0c      	ldr	r5, [pc, #48]	; (8009088 <__libc_init_array+0x38>)
 8009056:	4c0d      	ldr	r4, [pc, #52]	; (800908c <__libc_init_array+0x3c>)
 8009058:	1b64      	subs	r4, r4, r5
 800905a:	10a4      	asrs	r4, r4, #2
 800905c:	42a6      	cmp	r6, r4
 800905e:	d109      	bne.n	8009074 <__libc_init_array+0x24>
 8009060:	f000 fc9c 	bl	800999c <_init>
 8009064:	2600      	movs	r6, #0
 8009066:	4d0a      	ldr	r5, [pc, #40]	; (8009090 <__libc_init_array+0x40>)
 8009068:	4c0a      	ldr	r4, [pc, #40]	; (8009094 <__libc_init_array+0x44>)
 800906a:	1b64      	subs	r4, r4, r5
 800906c:	10a4      	asrs	r4, r4, #2
 800906e:	42a6      	cmp	r6, r4
 8009070:	d105      	bne.n	800907e <__libc_init_array+0x2e>
 8009072:	bd70      	pop	{r4, r5, r6, pc}
 8009074:	f855 3b04 	ldr.w	r3, [r5], #4
 8009078:	4798      	blx	r3
 800907a:	3601      	adds	r6, #1
 800907c:	e7ee      	b.n	800905c <__libc_init_array+0xc>
 800907e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009082:	4798      	blx	r3
 8009084:	3601      	adds	r6, #1
 8009086:	e7f2      	b.n	800906e <__libc_init_array+0x1e>
 8009088:	08009a6c 	.word	0x08009a6c
 800908c:	08009a6c 	.word	0x08009a6c
 8009090:	08009a6c 	.word	0x08009a6c
 8009094:	08009a70 	.word	0x08009a70

08009098 <memset>:
 8009098:	4603      	mov	r3, r0
 800909a:	4402      	add	r2, r0
 800909c:	4293      	cmp	r3, r2
 800909e:	d100      	bne.n	80090a2 <memset+0xa>
 80090a0:	4770      	bx	lr
 80090a2:	f803 1b01 	strb.w	r1, [r3], #1
 80090a6:	e7f9      	b.n	800909c <memset+0x4>

080090a8 <siprintf>:
 80090a8:	b40e      	push	{r1, r2, r3}
 80090aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090ae:	b500      	push	{lr}
 80090b0:	b09c      	sub	sp, #112	; 0x70
 80090b2:	ab1d      	add	r3, sp, #116	; 0x74
 80090b4:	9002      	str	r0, [sp, #8]
 80090b6:	9006      	str	r0, [sp, #24]
 80090b8:	9107      	str	r1, [sp, #28]
 80090ba:	9104      	str	r1, [sp, #16]
 80090bc:	4808      	ldr	r0, [pc, #32]	; (80090e0 <siprintf+0x38>)
 80090be:	4909      	ldr	r1, [pc, #36]	; (80090e4 <siprintf+0x3c>)
 80090c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c4:	9105      	str	r1, [sp, #20]
 80090c6:	6800      	ldr	r0, [r0, #0]
 80090c8:	a902      	add	r1, sp, #8
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	f000 f868 	bl	80091a0 <_svfiprintf_r>
 80090d0:	2200      	movs	r2, #0
 80090d2:	9b02      	ldr	r3, [sp, #8]
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	b01c      	add	sp, #112	; 0x70
 80090d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090dc:	b003      	add	sp, #12
 80090de:	4770      	bx	lr
 80090e0:	2000017c 	.word	0x2000017c
 80090e4:	ffff0208 	.word	0xffff0208

080090e8 <__ssputs_r>:
 80090e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ec:	688e      	ldr	r6, [r1, #8]
 80090ee:	4682      	mov	sl, r0
 80090f0:	429e      	cmp	r6, r3
 80090f2:	460c      	mov	r4, r1
 80090f4:	4690      	mov	r8, r2
 80090f6:	461f      	mov	r7, r3
 80090f8:	d838      	bhi.n	800916c <__ssputs_r+0x84>
 80090fa:	898a      	ldrh	r2, [r1, #12]
 80090fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009100:	d032      	beq.n	8009168 <__ssputs_r+0x80>
 8009102:	6825      	ldr	r5, [r4, #0]
 8009104:	6909      	ldr	r1, [r1, #16]
 8009106:	3301      	adds	r3, #1
 8009108:	eba5 0901 	sub.w	r9, r5, r1
 800910c:	6965      	ldr	r5, [r4, #20]
 800910e:	444b      	add	r3, r9
 8009110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009118:	106d      	asrs	r5, r5, #1
 800911a:	429d      	cmp	r5, r3
 800911c:	bf38      	it	cc
 800911e:	461d      	movcc	r5, r3
 8009120:	0553      	lsls	r3, r2, #21
 8009122:	d531      	bpl.n	8009188 <__ssputs_r+0xa0>
 8009124:	4629      	mov	r1, r5
 8009126:	f000 fb6f 	bl	8009808 <_malloc_r>
 800912a:	4606      	mov	r6, r0
 800912c:	b950      	cbnz	r0, 8009144 <__ssputs_r+0x5c>
 800912e:	230c      	movs	r3, #12
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	f8ca 3000 	str.w	r3, [sl]
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009144:	464a      	mov	r2, r9
 8009146:	6921      	ldr	r1, [r4, #16]
 8009148:	f000 face 	bl	80096e8 <memcpy>
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	6126      	str	r6, [r4, #16]
 800915a:	444e      	add	r6, r9
 800915c:	6026      	str	r6, [r4, #0]
 800915e:	463e      	mov	r6, r7
 8009160:	6165      	str	r5, [r4, #20]
 8009162:	eba5 0509 	sub.w	r5, r5, r9
 8009166:	60a5      	str	r5, [r4, #8]
 8009168:	42be      	cmp	r6, r7
 800916a:	d900      	bls.n	800916e <__ssputs_r+0x86>
 800916c:	463e      	mov	r6, r7
 800916e:	4632      	mov	r2, r6
 8009170:	4641      	mov	r1, r8
 8009172:	6820      	ldr	r0, [r4, #0]
 8009174:	f000 fac6 	bl	8009704 <memmove>
 8009178:	68a3      	ldr	r3, [r4, #8]
 800917a:	2000      	movs	r0, #0
 800917c:	1b9b      	subs	r3, r3, r6
 800917e:	60a3      	str	r3, [r4, #8]
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	4433      	add	r3, r6
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	e7db      	b.n	8009140 <__ssputs_r+0x58>
 8009188:	462a      	mov	r2, r5
 800918a:	f000 fbb1 	bl	80098f0 <_realloc_r>
 800918e:	4606      	mov	r6, r0
 8009190:	2800      	cmp	r0, #0
 8009192:	d1e1      	bne.n	8009158 <__ssputs_r+0x70>
 8009194:	4650      	mov	r0, sl
 8009196:	6921      	ldr	r1, [r4, #16]
 8009198:	f000 face 	bl	8009738 <_free_r>
 800919c:	e7c7      	b.n	800912e <__ssputs_r+0x46>
	...

080091a0 <_svfiprintf_r>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	4698      	mov	r8, r3
 80091a6:	898b      	ldrh	r3, [r1, #12]
 80091a8:	4607      	mov	r7, r0
 80091aa:	061b      	lsls	r3, r3, #24
 80091ac:	460d      	mov	r5, r1
 80091ae:	4614      	mov	r4, r2
 80091b0:	b09d      	sub	sp, #116	; 0x74
 80091b2:	d50e      	bpl.n	80091d2 <_svfiprintf_r+0x32>
 80091b4:	690b      	ldr	r3, [r1, #16]
 80091b6:	b963      	cbnz	r3, 80091d2 <_svfiprintf_r+0x32>
 80091b8:	2140      	movs	r1, #64	; 0x40
 80091ba:	f000 fb25 	bl	8009808 <_malloc_r>
 80091be:	6028      	str	r0, [r5, #0]
 80091c0:	6128      	str	r0, [r5, #16]
 80091c2:	b920      	cbnz	r0, 80091ce <_svfiprintf_r+0x2e>
 80091c4:	230c      	movs	r3, #12
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295
 80091cc:	e0d1      	b.n	8009372 <_svfiprintf_r+0x1d2>
 80091ce:	2340      	movs	r3, #64	; 0x40
 80091d0:	616b      	str	r3, [r5, #20]
 80091d2:	2300      	movs	r3, #0
 80091d4:	9309      	str	r3, [sp, #36]	; 0x24
 80091d6:	2320      	movs	r3, #32
 80091d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091dc:	2330      	movs	r3, #48	; 0x30
 80091de:	f04f 0901 	mov.w	r9, #1
 80091e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800938c <_svfiprintf_r+0x1ec>
 80091ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091ee:	4623      	mov	r3, r4
 80091f0:	469a      	mov	sl, r3
 80091f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091f6:	b10a      	cbz	r2, 80091fc <_svfiprintf_r+0x5c>
 80091f8:	2a25      	cmp	r2, #37	; 0x25
 80091fa:	d1f9      	bne.n	80091f0 <_svfiprintf_r+0x50>
 80091fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009200:	d00b      	beq.n	800921a <_svfiprintf_r+0x7a>
 8009202:	465b      	mov	r3, fp
 8009204:	4622      	mov	r2, r4
 8009206:	4629      	mov	r1, r5
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff ff6d 	bl	80090e8 <__ssputs_r>
 800920e:	3001      	adds	r0, #1
 8009210:	f000 80aa 	beq.w	8009368 <_svfiprintf_r+0x1c8>
 8009214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009216:	445a      	add	r2, fp
 8009218:	9209      	str	r2, [sp, #36]	; 0x24
 800921a:	f89a 3000 	ldrb.w	r3, [sl]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 80a2 	beq.w	8009368 <_svfiprintf_r+0x1c8>
 8009224:	2300      	movs	r3, #0
 8009226:	f04f 32ff 	mov.w	r2, #4294967295
 800922a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800922e:	f10a 0a01 	add.w	sl, sl, #1
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	9307      	str	r3, [sp, #28]
 8009236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800923a:	931a      	str	r3, [sp, #104]	; 0x68
 800923c:	4654      	mov	r4, sl
 800923e:	2205      	movs	r2, #5
 8009240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009244:	4851      	ldr	r0, [pc, #324]	; (800938c <_svfiprintf_r+0x1ec>)
 8009246:	f000 fa41 	bl	80096cc <memchr>
 800924a:	9a04      	ldr	r2, [sp, #16]
 800924c:	b9d8      	cbnz	r0, 8009286 <_svfiprintf_r+0xe6>
 800924e:	06d0      	lsls	r0, r2, #27
 8009250:	bf44      	itt	mi
 8009252:	2320      	movmi	r3, #32
 8009254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009258:	0711      	lsls	r1, r2, #28
 800925a:	bf44      	itt	mi
 800925c:	232b      	movmi	r3, #43	; 0x2b
 800925e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009262:	f89a 3000 	ldrb.w	r3, [sl]
 8009266:	2b2a      	cmp	r3, #42	; 0x2a
 8009268:	d015      	beq.n	8009296 <_svfiprintf_r+0xf6>
 800926a:	4654      	mov	r4, sl
 800926c:	2000      	movs	r0, #0
 800926e:	f04f 0c0a 	mov.w	ip, #10
 8009272:	9a07      	ldr	r2, [sp, #28]
 8009274:	4621      	mov	r1, r4
 8009276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800927a:	3b30      	subs	r3, #48	; 0x30
 800927c:	2b09      	cmp	r3, #9
 800927e:	d94e      	bls.n	800931e <_svfiprintf_r+0x17e>
 8009280:	b1b0      	cbz	r0, 80092b0 <_svfiprintf_r+0x110>
 8009282:	9207      	str	r2, [sp, #28]
 8009284:	e014      	b.n	80092b0 <_svfiprintf_r+0x110>
 8009286:	eba0 0308 	sub.w	r3, r0, r8
 800928a:	fa09 f303 	lsl.w	r3, r9, r3
 800928e:	4313      	orrs	r3, r2
 8009290:	46a2      	mov	sl, r4
 8009292:	9304      	str	r3, [sp, #16]
 8009294:	e7d2      	b.n	800923c <_svfiprintf_r+0x9c>
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	1d19      	adds	r1, r3, #4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	9103      	str	r1, [sp, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bfbb      	ittet	lt
 80092a2:	425b      	neglt	r3, r3
 80092a4:	f042 0202 	orrlt.w	r2, r2, #2
 80092a8:	9307      	strge	r3, [sp, #28]
 80092aa:	9307      	strlt	r3, [sp, #28]
 80092ac:	bfb8      	it	lt
 80092ae:	9204      	strlt	r2, [sp, #16]
 80092b0:	7823      	ldrb	r3, [r4, #0]
 80092b2:	2b2e      	cmp	r3, #46	; 0x2e
 80092b4:	d10c      	bne.n	80092d0 <_svfiprintf_r+0x130>
 80092b6:	7863      	ldrb	r3, [r4, #1]
 80092b8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ba:	d135      	bne.n	8009328 <_svfiprintf_r+0x188>
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	3402      	adds	r4, #2
 80092c0:	1d1a      	adds	r2, r3, #4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	9203      	str	r2, [sp, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfb8      	it	lt
 80092ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80092ce:	9305      	str	r3, [sp, #20]
 80092d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009390 <_svfiprintf_r+0x1f0>
 80092d4:	2203      	movs	r2, #3
 80092d6:	4650      	mov	r0, sl
 80092d8:	7821      	ldrb	r1, [r4, #0]
 80092da:	f000 f9f7 	bl	80096cc <memchr>
 80092de:	b140      	cbz	r0, 80092f2 <_svfiprintf_r+0x152>
 80092e0:	2340      	movs	r3, #64	; 0x40
 80092e2:	eba0 000a 	sub.w	r0, r0, sl
 80092e6:	fa03 f000 	lsl.w	r0, r3, r0
 80092ea:	9b04      	ldr	r3, [sp, #16]
 80092ec:	3401      	adds	r4, #1
 80092ee:	4303      	orrs	r3, r0
 80092f0:	9304      	str	r3, [sp, #16]
 80092f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f6:	2206      	movs	r2, #6
 80092f8:	4826      	ldr	r0, [pc, #152]	; (8009394 <_svfiprintf_r+0x1f4>)
 80092fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092fe:	f000 f9e5 	bl	80096cc <memchr>
 8009302:	2800      	cmp	r0, #0
 8009304:	d038      	beq.n	8009378 <_svfiprintf_r+0x1d8>
 8009306:	4b24      	ldr	r3, [pc, #144]	; (8009398 <_svfiprintf_r+0x1f8>)
 8009308:	bb1b      	cbnz	r3, 8009352 <_svfiprintf_r+0x1b2>
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	3307      	adds	r3, #7
 800930e:	f023 0307 	bic.w	r3, r3, #7
 8009312:	3308      	adds	r3, #8
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	4433      	add	r3, r6
 800931a:	9309      	str	r3, [sp, #36]	; 0x24
 800931c:	e767      	b.n	80091ee <_svfiprintf_r+0x4e>
 800931e:	460c      	mov	r4, r1
 8009320:	2001      	movs	r0, #1
 8009322:	fb0c 3202 	mla	r2, ip, r2, r3
 8009326:	e7a5      	b.n	8009274 <_svfiprintf_r+0xd4>
 8009328:	2300      	movs	r3, #0
 800932a:	f04f 0c0a 	mov.w	ip, #10
 800932e:	4619      	mov	r1, r3
 8009330:	3401      	adds	r4, #1
 8009332:	9305      	str	r3, [sp, #20]
 8009334:	4620      	mov	r0, r4
 8009336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800933a:	3a30      	subs	r2, #48	; 0x30
 800933c:	2a09      	cmp	r2, #9
 800933e:	d903      	bls.n	8009348 <_svfiprintf_r+0x1a8>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d0c5      	beq.n	80092d0 <_svfiprintf_r+0x130>
 8009344:	9105      	str	r1, [sp, #20]
 8009346:	e7c3      	b.n	80092d0 <_svfiprintf_r+0x130>
 8009348:	4604      	mov	r4, r0
 800934a:	2301      	movs	r3, #1
 800934c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009350:	e7f0      	b.n	8009334 <_svfiprintf_r+0x194>
 8009352:	ab03      	add	r3, sp, #12
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	462a      	mov	r2, r5
 8009358:	4638      	mov	r0, r7
 800935a:	4b10      	ldr	r3, [pc, #64]	; (800939c <_svfiprintf_r+0x1fc>)
 800935c:	a904      	add	r1, sp, #16
 800935e:	f3af 8000 	nop.w
 8009362:	1c42      	adds	r2, r0, #1
 8009364:	4606      	mov	r6, r0
 8009366:	d1d6      	bne.n	8009316 <_svfiprintf_r+0x176>
 8009368:	89ab      	ldrh	r3, [r5, #12]
 800936a:	065b      	lsls	r3, r3, #25
 800936c:	f53f af2c 	bmi.w	80091c8 <_svfiprintf_r+0x28>
 8009370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009372:	b01d      	add	sp, #116	; 0x74
 8009374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009378:	ab03      	add	r3, sp, #12
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	462a      	mov	r2, r5
 800937e:	4638      	mov	r0, r7
 8009380:	4b06      	ldr	r3, [pc, #24]	; (800939c <_svfiprintf_r+0x1fc>)
 8009382:	a904      	add	r1, sp, #16
 8009384:	f000 f87c 	bl	8009480 <_printf_i>
 8009388:	e7eb      	b.n	8009362 <_svfiprintf_r+0x1c2>
 800938a:	bf00      	nop
 800938c:	08009a30 	.word	0x08009a30
 8009390:	08009a36 	.word	0x08009a36
 8009394:	08009a3a 	.word	0x08009a3a
 8009398:	00000000 	.word	0x00000000
 800939c:	080090e9 	.word	0x080090e9

080093a0 <_printf_common>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	4616      	mov	r6, r2
 80093a6:	4699      	mov	r9, r3
 80093a8:	688a      	ldr	r2, [r1, #8]
 80093aa:	690b      	ldr	r3, [r1, #16]
 80093ac:	4607      	mov	r7, r0
 80093ae:	4293      	cmp	r3, r2
 80093b0:	bfb8      	it	lt
 80093b2:	4613      	movlt	r3, r2
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ba:	460c      	mov	r4, r1
 80093bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093c0:	b10a      	cbz	r2, 80093c6 <_printf_common+0x26>
 80093c2:	3301      	adds	r3, #1
 80093c4:	6033      	str	r3, [r6, #0]
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	0699      	lsls	r1, r3, #26
 80093ca:	bf42      	ittt	mi
 80093cc:	6833      	ldrmi	r3, [r6, #0]
 80093ce:	3302      	addmi	r3, #2
 80093d0:	6033      	strmi	r3, [r6, #0]
 80093d2:	6825      	ldr	r5, [r4, #0]
 80093d4:	f015 0506 	ands.w	r5, r5, #6
 80093d8:	d106      	bne.n	80093e8 <_printf_common+0x48>
 80093da:	f104 0a19 	add.w	sl, r4, #25
 80093de:	68e3      	ldr	r3, [r4, #12]
 80093e0:	6832      	ldr	r2, [r6, #0]
 80093e2:	1a9b      	subs	r3, r3, r2
 80093e4:	42ab      	cmp	r3, r5
 80093e6:	dc28      	bgt.n	800943a <_printf_common+0x9a>
 80093e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093ec:	1e13      	subs	r3, r2, #0
 80093ee:	6822      	ldr	r2, [r4, #0]
 80093f0:	bf18      	it	ne
 80093f2:	2301      	movne	r3, #1
 80093f4:	0692      	lsls	r2, r2, #26
 80093f6:	d42d      	bmi.n	8009454 <_printf_common+0xb4>
 80093f8:	4649      	mov	r1, r9
 80093fa:	4638      	mov	r0, r7
 80093fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009400:	47c0      	blx	r8
 8009402:	3001      	adds	r0, #1
 8009404:	d020      	beq.n	8009448 <_printf_common+0xa8>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	68e5      	ldr	r5, [r4, #12]
 800940a:	f003 0306 	and.w	r3, r3, #6
 800940e:	2b04      	cmp	r3, #4
 8009410:	bf18      	it	ne
 8009412:	2500      	movne	r5, #0
 8009414:	6832      	ldr	r2, [r6, #0]
 8009416:	f04f 0600 	mov.w	r6, #0
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	bf08      	it	eq
 800941e:	1aad      	subeq	r5, r5, r2
 8009420:	6922      	ldr	r2, [r4, #16]
 8009422:	bf08      	it	eq
 8009424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009428:	4293      	cmp	r3, r2
 800942a:	bfc4      	itt	gt
 800942c:	1a9b      	subgt	r3, r3, r2
 800942e:	18ed      	addgt	r5, r5, r3
 8009430:	341a      	adds	r4, #26
 8009432:	42b5      	cmp	r5, r6
 8009434:	d11a      	bne.n	800946c <_printf_common+0xcc>
 8009436:	2000      	movs	r0, #0
 8009438:	e008      	b.n	800944c <_printf_common+0xac>
 800943a:	2301      	movs	r3, #1
 800943c:	4652      	mov	r2, sl
 800943e:	4649      	mov	r1, r9
 8009440:	4638      	mov	r0, r7
 8009442:	47c0      	blx	r8
 8009444:	3001      	adds	r0, #1
 8009446:	d103      	bne.n	8009450 <_printf_common+0xb0>
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009450:	3501      	adds	r5, #1
 8009452:	e7c4      	b.n	80093de <_printf_common+0x3e>
 8009454:	2030      	movs	r0, #48	; 0x30
 8009456:	18e1      	adds	r1, r4, r3
 8009458:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009462:	4422      	add	r2, r4
 8009464:	3302      	adds	r3, #2
 8009466:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800946a:	e7c5      	b.n	80093f8 <_printf_common+0x58>
 800946c:	2301      	movs	r3, #1
 800946e:	4622      	mov	r2, r4
 8009470:	4649      	mov	r1, r9
 8009472:	4638      	mov	r0, r7
 8009474:	47c0      	blx	r8
 8009476:	3001      	adds	r0, #1
 8009478:	d0e6      	beq.n	8009448 <_printf_common+0xa8>
 800947a:	3601      	adds	r6, #1
 800947c:	e7d9      	b.n	8009432 <_printf_common+0x92>
	...

08009480 <_printf_i>:
 8009480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	7e0f      	ldrb	r7, [r1, #24]
 8009486:	4691      	mov	r9, r2
 8009488:	2f78      	cmp	r7, #120	; 0x78
 800948a:	4680      	mov	r8, r0
 800948c:	460c      	mov	r4, r1
 800948e:	469a      	mov	sl, r3
 8009490:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009496:	d807      	bhi.n	80094a8 <_printf_i+0x28>
 8009498:	2f62      	cmp	r7, #98	; 0x62
 800949a:	d80a      	bhi.n	80094b2 <_printf_i+0x32>
 800949c:	2f00      	cmp	r7, #0
 800949e:	f000 80d9 	beq.w	8009654 <_printf_i+0x1d4>
 80094a2:	2f58      	cmp	r7, #88	; 0x58
 80094a4:	f000 80a4 	beq.w	80095f0 <_printf_i+0x170>
 80094a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094b0:	e03a      	b.n	8009528 <_printf_i+0xa8>
 80094b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094b6:	2b15      	cmp	r3, #21
 80094b8:	d8f6      	bhi.n	80094a8 <_printf_i+0x28>
 80094ba:	a101      	add	r1, pc, #4	; (adr r1, 80094c0 <_printf_i+0x40>)
 80094bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094c0:	08009519 	.word	0x08009519
 80094c4:	0800952d 	.word	0x0800952d
 80094c8:	080094a9 	.word	0x080094a9
 80094cc:	080094a9 	.word	0x080094a9
 80094d0:	080094a9 	.word	0x080094a9
 80094d4:	080094a9 	.word	0x080094a9
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	080094a9 	.word	0x080094a9
 80094e0:	080094a9 	.word	0x080094a9
 80094e4:	080094a9 	.word	0x080094a9
 80094e8:	080094a9 	.word	0x080094a9
 80094ec:	0800963b 	.word	0x0800963b
 80094f0:	0800955d 	.word	0x0800955d
 80094f4:	0800961d 	.word	0x0800961d
 80094f8:	080094a9 	.word	0x080094a9
 80094fc:	080094a9 	.word	0x080094a9
 8009500:	0800965d 	.word	0x0800965d
 8009504:	080094a9 	.word	0x080094a9
 8009508:	0800955d 	.word	0x0800955d
 800950c:	080094a9 	.word	0x080094a9
 8009510:	080094a9 	.word	0x080094a9
 8009514:	08009625 	.word	0x08009625
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	602a      	str	r2, [r5, #0]
 8009520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009528:	2301      	movs	r3, #1
 800952a:	e0a4      	b.n	8009676 <_printf_i+0x1f6>
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	6829      	ldr	r1, [r5, #0]
 8009530:	0606      	lsls	r6, r0, #24
 8009532:	f101 0304 	add.w	r3, r1, #4
 8009536:	d50a      	bpl.n	800954e <_printf_i+0xce>
 8009538:	680e      	ldr	r6, [r1, #0]
 800953a:	602b      	str	r3, [r5, #0]
 800953c:	2e00      	cmp	r6, #0
 800953e:	da03      	bge.n	8009548 <_printf_i+0xc8>
 8009540:	232d      	movs	r3, #45	; 0x2d
 8009542:	4276      	negs	r6, r6
 8009544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009548:	230a      	movs	r3, #10
 800954a:	485e      	ldr	r0, [pc, #376]	; (80096c4 <_printf_i+0x244>)
 800954c:	e019      	b.n	8009582 <_printf_i+0x102>
 800954e:	680e      	ldr	r6, [r1, #0]
 8009550:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	bf18      	it	ne
 8009558:	b236      	sxthne	r6, r6
 800955a:	e7ef      	b.n	800953c <_printf_i+0xbc>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	6820      	ldr	r0, [r4, #0]
 8009560:	1d19      	adds	r1, r3, #4
 8009562:	6029      	str	r1, [r5, #0]
 8009564:	0601      	lsls	r1, r0, #24
 8009566:	d501      	bpl.n	800956c <_printf_i+0xec>
 8009568:	681e      	ldr	r6, [r3, #0]
 800956a:	e002      	b.n	8009572 <_printf_i+0xf2>
 800956c:	0646      	lsls	r6, r0, #25
 800956e:	d5fb      	bpl.n	8009568 <_printf_i+0xe8>
 8009570:	881e      	ldrh	r6, [r3, #0]
 8009572:	2f6f      	cmp	r7, #111	; 0x6f
 8009574:	bf0c      	ite	eq
 8009576:	2308      	moveq	r3, #8
 8009578:	230a      	movne	r3, #10
 800957a:	4852      	ldr	r0, [pc, #328]	; (80096c4 <_printf_i+0x244>)
 800957c:	2100      	movs	r1, #0
 800957e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009582:	6865      	ldr	r5, [r4, #4]
 8009584:	2d00      	cmp	r5, #0
 8009586:	bfa8      	it	ge
 8009588:	6821      	ldrge	r1, [r4, #0]
 800958a:	60a5      	str	r5, [r4, #8]
 800958c:	bfa4      	itt	ge
 800958e:	f021 0104 	bicge.w	r1, r1, #4
 8009592:	6021      	strge	r1, [r4, #0]
 8009594:	b90e      	cbnz	r6, 800959a <_printf_i+0x11a>
 8009596:	2d00      	cmp	r5, #0
 8009598:	d04d      	beq.n	8009636 <_printf_i+0x1b6>
 800959a:	4615      	mov	r5, r2
 800959c:	fbb6 f1f3 	udiv	r1, r6, r3
 80095a0:	fb03 6711 	mls	r7, r3, r1, r6
 80095a4:	5dc7      	ldrb	r7, [r0, r7]
 80095a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095aa:	4637      	mov	r7, r6
 80095ac:	42bb      	cmp	r3, r7
 80095ae:	460e      	mov	r6, r1
 80095b0:	d9f4      	bls.n	800959c <_printf_i+0x11c>
 80095b2:	2b08      	cmp	r3, #8
 80095b4:	d10b      	bne.n	80095ce <_printf_i+0x14e>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	07de      	lsls	r6, r3, #31
 80095ba:	d508      	bpl.n	80095ce <_printf_i+0x14e>
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	6861      	ldr	r1, [r4, #4]
 80095c0:	4299      	cmp	r1, r3
 80095c2:	bfde      	ittt	le
 80095c4:	2330      	movle	r3, #48	; 0x30
 80095c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095ce:	1b52      	subs	r2, r2, r5
 80095d0:	6122      	str	r2, [r4, #16]
 80095d2:	464b      	mov	r3, r9
 80095d4:	4621      	mov	r1, r4
 80095d6:	4640      	mov	r0, r8
 80095d8:	f8cd a000 	str.w	sl, [sp]
 80095dc:	aa03      	add	r2, sp, #12
 80095de:	f7ff fedf 	bl	80093a0 <_printf_common>
 80095e2:	3001      	adds	r0, #1
 80095e4:	d14c      	bne.n	8009680 <_printf_i+0x200>
 80095e6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ea:	b004      	add	sp, #16
 80095ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f0:	4834      	ldr	r0, [pc, #208]	; (80096c4 <_printf_i+0x244>)
 80095f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095f6:	6829      	ldr	r1, [r5, #0]
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80095fe:	6029      	str	r1, [r5, #0]
 8009600:	061d      	lsls	r5, r3, #24
 8009602:	d514      	bpl.n	800962e <_printf_i+0x1ae>
 8009604:	07df      	lsls	r7, r3, #31
 8009606:	bf44      	itt	mi
 8009608:	f043 0320 	orrmi.w	r3, r3, #32
 800960c:	6023      	strmi	r3, [r4, #0]
 800960e:	b91e      	cbnz	r6, 8009618 <_printf_i+0x198>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	f023 0320 	bic.w	r3, r3, #32
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	2310      	movs	r3, #16
 800961a:	e7af      	b.n	800957c <_printf_i+0xfc>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	f043 0320 	orr.w	r3, r3, #32
 8009622:	6023      	str	r3, [r4, #0]
 8009624:	2378      	movs	r3, #120	; 0x78
 8009626:	4828      	ldr	r0, [pc, #160]	; (80096c8 <_printf_i+0x248>)
 8009628:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800962c:	e7e3      	b.n	80095f6 <_printf_i+0x176>
 800962e:	0659      	lsls	r1, r3, #25
 8009630:	bf48      	it	mi
 8009632:	b2b6      	uxthmi	r6, r6
 8009634:	e7e6      	b.n	8009604 <_printf_i+0x184>
 8009636:	4615      	mov	r5, r2
 8009638:	e7bb      	b.n	80095b2 <_printf_i+0x132>
 800963a:	682b      	ldr	r3, [r5, #0]
 800963c:	6826      	ldr	r6, [r4, #0]
 800963e:	1d18      	adds	r0, r3, #4
 8009640:	6961      	ldr	r1, [r4, #20]
 8009642:	6028      	str	r0, [r5, #0]
 8009644:	0635      	lsls	r5, r6, #24
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	d501      	bpl.n	800964e <_printf_i+0x1ce>
 800964a:	6019      	str	r1, [r3, #0]
 800964c:	e002      	b.n	8009654 <_printf_i+0x1d4>
 800964e:	0670      	lsls	r0, r6, #25
 8009650:	d5fb      	bpl.n	800964a <_printf_i+0x1ca>
 8009652:	8019      	strh	r1, [r3, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	4615      	mov	r5, r2
 8009658:	6123      	str	r3, [r4, #16]
 800965a:	e7ba      	b.n	80095d2 <_printf_i+0x152>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	2100      	movs	r1, #0
 8009660:	1d1a      	adds	r2, r3, #4
 8009662:	602a      	str	r2, [r5, #0]
 8009664:	681d      	ldr	r5, [r3, #0]
 8009666:	6862      	ldr	r2, [r4, #4]
 8009668:	4628      	mov	r0, r5
 800966a:	f000 f82f 	bl	80096cc <memchr>
 800966e:	b108      	cbz	r0, 8009674 <_printf_i+0x1f4>
 8009670:	1b40      	subs	r0, r0, r5
 8009672:	6060      	str	r0, [r4, #4]
 8009674:	6863      	ldr	r3, [r4, #4]
 8009676:	6123      	str	r3, [r4, #16]
 8009678:	2300      	movs	r3, #0
 800967a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800967e:	e7a8      	b.n	80095d2 <_printf_i+0x152>
 8009680:	462a      	mov	r2, r5
 8009682:	4649      	mov	r1, r9
 8009684:	4640      	mov	r0, r8
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	47d0      	blx	sl
 800968a:	3001      	adds	r0, #1
 800968c:	d0ab      	beq.n	80095e6 <_printf_i+0x166>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	079b      	lsls	r3, r3, #30
 8009692:	d413      	bmi.n	80096bc <_printf_i+0x23c>
 8009694:	68e0      	ldr	r0, [r4, #12]
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	4298      	cmp	r0, r3
 800969a:	bfb8      	it	lt
 800969c:	4618      	movlt	r0, r3
 800969e:	e7a4      	b.n	80095ea <_printf_i+0x16a>
 80096a0:	2301      	movs	r3, #1
 80096a2:	4632      	mov	r2, r6
 80096a4:	4649      	mov	r1, r9
 80096a6:	4640      	mov	r0, r8
 80096a8:	47d0      	blx	sl
 80096aa:	3001      	adds	r0, #1
 80096ac:	d09b      	beq.n	80095e6 <_printf_i+0x166>
 80096ae:	3501      	adds	r5, #1
 80096b0:	68e3      	ldr	r3, [r4, #12]
 80096b2:	9903      	ldr	r1, [sp, #12]
 80096b4:	1a5b      	subs	r3, r3, r1
 80096b6:	42ab      	cmp	r3, r5
 80096b8:	dcf2      	bgt.n	80096a0 <_printf_i+0x220>
 80096ba:	e7eb      	b.n	8009694 <_printf_i+0x214>
 80096bc:	2500      	movs	r5, #0
 80096be:	f104 0619 	add.w	r6, r4, #25
 80096c2:	e7f5      	b.n	80096b0 <_printf_i+0x230>
 80096c4:	08009a41 	.word	0x08009a41
 80096c8:	08009a52 	.word	0x08009a52

080096cc <memchr>:
 80096cc:	4603      	mov	r3, r0
 80096ce:	b510      	push	{r4, lr}
 80096d0:	b2c9      	uxtb	r1, r1
 80096d2:	4402      	add	r2, r0
 80096d4:	4293      	cmp	r3, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	d101      	bne.n	80096de <memchr+0x12>
 80096da:	2000      	movs	r0, #0
 80096dc:	e003      	b.n	80096e6 <memchr+0x1a>
 80096de:	7804      	ldrb	r4, [r0, #0]
 80096e0:	3301      	adds	r3, #1
 80096e2:	428c      	cmp	r4, r1
 80096e4:	d1f6      	bne.n	80096d4 <memchr+0x8>
 80096e6:	bd10      	pop	{r4, pc}

080096e8 <memcpy>:
 80096e8:	440a      	add	r2, r1
 80096ea:	4291      	cmp	r1, r2
 80096ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f0:	d100      	bne.n	80096f4 <memcpy+0xc>
 80096f2:	4770      	bx	lr
 80096f4:	b510      	push	{r4, lr}
 80096f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fa:	4291      	cmp	r1, r2
 80096fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009700:	d1f9      	bne.n	80096f6 <memcpy+0xe>
 8009702:	bd10      	pop	{r4, pc}

08009704 <memmove>:
 8009704:	4288      	cmp	r0, r1
 8009706:	b510      	push	{r4, lr}
 8009708:	eb01 0402 	add.w	r4, r1, r2
 800970c:	d902      	bls.n	8009714 <memmove+0x10>
 800970e:	4284      	cmp	r4, r0
 8009710:	4623      	mov	r3, r4
 8009712:	d807      	bhi.n	8009724 <memmove+0x20>
 8009714:	1e43      	subs	r3, r0, #1
 8009716:	42a1      	cmp	r1, r4
 8009718:	d008      	beq.n	800972c <memmove+0x28>
 800971a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800971e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009722:	e7f8      	b.n	8009716 <memmove+0x12>
 8009724:	4601      	mov	r1, r0
 8009726:	4402      	add	r2, r0
 8009728:	428a      	cmp	r2, r1
 800972a:	d100      	bne.n	800972e <memmove+0x2a>
 800972c:	bd10      	pop	{r4, pc}
 800972e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009736:	e7f7      	b.n	8009728 <memmove+0x24>

08009738 <_free_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4605      	mov	r5, r0
 800973c:	2900      	cmp	r1, #0
 800973e:	d040      	beq.n	80097c2 <_free_r+0x8a>
 8009740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009744:	1f0c      	subs	r4, r1, #4
 8009746:	2b00      	cmp	r3, #0
 8009748:	bfb8      	it	lt
 800974a:	18e4      	addlt	r4, r4, r3
 800974c:	f000 f910 	bl	8009970 <__malloc_lock>
 8009750:	4a1c      	ldr	r2, [pc, #112]	; (80097c4 <_free_r+0x8c>)
 8009752:	6813      	ldr	r3, [r2, #0]
 8009754:	b933      	cbnz	r3, 8009764 <_free_r+0x2c>
 8009756:	6063      	str	r3, [r4, #4]
 8009758:	6014      	str	r4, [r2, #0]
 800975a:	4628      	mov	r0, r5
 800975c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009760:	f000 b90c 	b.w	800997c <__malloc_unlock>
 8009764:	42a3      	cmp	r3, r4
 8009766:	d908      	bls.n	800977a <_free_r+0x42>
 8009768:	6820      	ldr	r0, [r4, #0]
 800976a:	1821      	adds	r1, r4, r0
 800976c:	428b      	cmp	r3, r1
 800976e:	bf01      	itttt	eq
 8009770:	6819      	ldreq	r1, [r3, #0]
 8009772:	685b      	ldreq	r3, [r3, #4]
 8009774:	1809      	addeq	r1, r1, r0
 8009776:	6021      	streq	r1, [r4, #0]
 8009778:	e7ed      	b.n	8009756 <_free_r+0x1e>
 800977a:	461a      	mov	r2, r3
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	b10b      	cbz	r3, 8009784 <_free_r+0x4c>
 8009780:	42a3      	cmp	r3, r4
 8009782:	d9fa      	bls.n	800977a <_free_r+0x42>
 8009784:	6811      	ldr	r1, [r2, #0]
 8009786:	1850      	adds	r0, r2, r1
 8009788:	42a0      	cmp	r0, r4
 800978a:	d10b      	bne.n	80097a4 <_free_r+0x6c>
 800978c:	6820      	ldr	r0, [r4, #0]
 800978e:	4401      	add	r1, r0
 8009790:	1850      	adds	r0, r2, r1
 8009792:	4283      	cmp	r3, r0
 8009794:	6011      	str	r1, [r2, #0]
 8009796:	d1e0      	bne.n	800975a <_free_r+0x22>
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	4401      	add	r1, r0
 800979e:	6011      	str	r1, [r2, #0]
 80097a0:	6053      	str	r3, [r2, #4]
 80097a2:	e7da      	b.n	800975a <_free_r+0x22>
 80097a4:	d902      	bls.n	80097ac <_free_r+0x74>
 80097a6:	230c      	movs	r3, #12
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	e7d6      	b.n	800975a <_free_r+0x22>
 80097ac:	6820      	ldr	r0, [r4, #0]
 80097ae:	1821      	adds	r1, r4, r0
 80097b0:	428b      	cmp	r3, r1
 80097b2:	bf01      	itttt	eq
 80097b4:	6819      	ldreq	r1, [r3, #0]
 80097b6:	685b      	ldreq	r3, [r3, #4]
 80097b8:	1809      	addeq	r1, r1, r0
 80097ba:	6021      	streq	r1, [r4, #0]
 80097bc:	6063      	str	r3, [r4, #4]
 80097be:	6054      	str	r4, [r2, #4]
 80097c0:	e7cb      	b.n	800975a <_free_r+0x22>
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	20001460 	.word	0x20001460

080097c8 <sbrk_aligned>:
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	4e0e      	ldr	r6, [pc, #56]	; (8009804 <sbrk_aligned+0x3c>)
 80097cc:	460c      	mov	r4, r1
 80097ce:	6831      	ldr	r1, [r6, #0]
 80097d0:	4605      	mov	r5, r0
 80097d2:	b911      	cbnz	r1, 80097da <sbrk_aligned+0x12>
 80097d4:	f000 f8bc 	bl	8009950 <_sbrk_r>
 80097d8:	6030      	str	r0, [r6, #0]
 80097da:	4621      	mov	r1, r4
 80097dc:	4628      	mov	r0, r5
 80097de:	f000 f8b7 	bl	8009950 <_sbrk_r>
 80097e2:	1c43      	adds	r3, r0, #1
 80097e4:	d00a      	beq.n	80097fc <sbrk_aligned+0x34>
 80097e6:	1cc4      	adds	r4, r0, #3
 80097e8:	f024 0403 	bic.w	r4, r4, #3
 80097ec:	42a0      	cmp	r0, r4
 80097ee:	d007      	beq.n	8009800 <sbrk_aligned+0x38>
 80097f0:	1a21      	subs	r1, r4, r0
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f8ac 	bl	8009950 <_sbrk_r>
 80097f8:	3001      	adds	r0, #1
 80097fa:	d101      	bne.n	8009800 <sbrk_aligned+0x38>
 80097fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009800:	4620      	mov	r0, r4
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	20001464 	.word	0x20001464

08009808 <_malloc_r>:
 8009808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980c:	1ccd      	adds	r5, r1, #3
 800980e:	f025 0503 	bic.w	r5, r5, #3
 8009812:	3508      	adds	r5, #8
 8009814:	2d0c      	cmp	r5, #12
 8009816:	bf38      	it	cc
 8009818:	250c      	movcc	r5, #12
 800981a:	2d00      	cmp	r5, #0
 800981c:	4607      	mov	r7, r0
 800981e:	db01      	blt.n	8009824 <_malloc_r+0x1c>
 8009820:	42a9      	cmp	r1, r5
 8009822:	d905      	bls.n	8009830 <_malloc_r+0x28>
 8009824:	230c      	movs	r3, #12
 8009826:	2600      	movs	r6, #0
 8009828:	603b      	str	r3, [r7, #0]
 800982a:	4630      	mov	r0, r6
 800982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009830:	4e2e      	ldr	r6, [pc, #184]	; (80098ec <_malloc_r+0xe4>)
 8009832:	f000 f89d 	bl	8009970 <__malloc_lock>
 8009836:	6833      	ldr	r3, [r6, #0]
 8009838:	461c      	mov	r4, r3
 800983a:	bb34      	cbnz	r4, 800988a <_malloc_r+0x82>
 800983c:	4629      	mov	r1, r5
 800983e:	4638      	mov	r0, r7
 8009840:	f7ff ffc2 	bl	80097c8 <sbrk_aligned>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	4604      	mov	r4, r0
 8009848:	d14d      	bne.n	80098e6 <_malloc_r+0xde>
 800984a:	6834      	ldr	r4, [r6, #0]
 800984c:	4626      	mov	r6, r4
 800984e:	2e00      	cmp	r6, #0
 8009850:	d140      	bne.n	80098d4 <_malloc_r+0xcc>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	4631      	mov	r1, r6
 8009856:	4638      	mov	r0, r7
 8009858:	eb04 0803 	add.w	r8, r4, r3
 800985c:	f000 f878 	bl	8009950 <_sbrk_r>
 8009860:	4580      	cmp	r8, r0
 8009862:	d13a      	bne.n	80098da <_malloc_r+0xd2>
 8009864:	6821      	ldr	r1, [r4, #0]
 8009866:	3503      	adds	r5, #3
 8009868:	1a6d      	subs	r5, r5, r1
 800986a:	f025 0503 	bic.w	r5, r5, #3
 800986e:	3508      	adds	r5, #8
 8009870:	2d0c      	cmp	r5, #12
 8009872:	bf38      	it	cc
 8009874:	250c      	movcc	r5, #12
 8009876:	4638      	mov	r0, r7
 8009878:	4629      	mov	r1, r5
 800987a:	f7ff ffa5 	bl	80097c8 <sbrk_aligned>
 800987e:	3001      	adds	r0, #1
 8009880:	d02b      	beq.n	80098da <_malloc_r+0xd2>
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	442b      	add	r3, r5
 8009886:	6023      	str	r3, [r4, #0]
 8009888:	e00e      	b.n	80098a8 <_malloc_r+0xa0>
 800988a:	6822      	ldr	r2, [r4, #0]
 800988c:	1b52      	subs	r2, r2, r5
 800988e:	d41e      	bmi.n	80098ce <_malloc_r+0xc6>
 8009890:	2a0b      	cmp	r2, #11
 8009892:	d916      	bls.n	80098c2 <_malloc_r+0xba>
 8009894:	1961      	adds	r1, r4, r5
 8009896:	42a3      	cmp	r3, r4
 8009898:	6025      	str	r5, [r4, #0]
 800989a:	bf18      	it	ne
 800989c:	6059      	strne	r1, [r3, #4]
 800989e:	6863      	ldr	r3, [r4, #4]
 80098a0:	bf08      	it	eq
 80098a2:	6031      	streq	r1, [r6, #0]
 80098a4:	5162      	str	r2, [r4, r5]
 80098a6:	604b      	str	r3, [r1, #4]
 80098a8:	4638      	mov	r0, r7
 80098aa:	f104 060b 	add.w	r6, r4, #11
 80098ae:	f000 f865 	bl	800997c <__malloc_unlock>
 80098b2:	f026 0607 	bic.w	r6, r6, #7
 80098b6:	1d23      	adds	r3, r4, #4
 80098b8:	1af2      	subs	r2, r6, r3
 80098ba:	d0b6      	beq.n	800982a <_malloc_r+0x22>
 80098bc:	1b9b      	subs	r3, r3, r6
 80098be:	50a3      	str	r3, [r4, r2]
 80098c0:	e7b3      	b.n	800982a <_malloc_r+0x22>
 80098c2:	6862      	ldr	r2, [r4, #4]
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	bf0c      	ite	eq
 80098c8:	6032      	streq	r2, [r6, #0]
 80098ca:	605a      	strne	r2, [r3, #4]
 80098cc:	e7ec      	b.n	80098a8 <_malloc_r+0xa0>
 80098ce:	4623      	mov	r3, r4
 80098d0:	6864      	ldr	r4, [r4, #4]
 80098d2:	e7b2      	b.n	800983a <_malloc_r+0x32>
 80098d4:	4634      	mov	r4, r6
 80098d6:	6876      	ldr	r6, [r6, #4]
 80098d8:	e7b9      	b.n	800984e <_malloc_r+0x46>
 80098da:	230c      	movs	r3, #12
 80098dc:	4638      	mov	r0, r7
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	f000 f84c 	bl	800997c <__malloc_unlock>
 80098e4:	e7a1      	b.n	800982a <_malloc_r+0x22>
 80098e6:	6025      	str	r5, [r4, #0]
 80098e8:	e7de      	b.n	80098a8 <_malloc_r+0xa0>
 80098ea:	bf00      	nop
 80098ec:	20001460 	.word	0x20001460

080098f0 <_realloc_r>:
 80098f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f4:	4680      	mov	r8, r0
 80098f6:	4614      	mov	r4, r2
 80098f8:	460e      	mov	r6, r1
 80098fa:	b921      	cbnz	r1, 8009906 <_realloc_r+0x16>
 80098fc:	4611      	mov	r1, r2
 80098fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009902:	f7ff bf81 	b.w	8009808 <_malloc_r>
 8009906:	b92a      	cbnz	r2, 8009914 <_realloc_r+0x24>
 8009908:	f7ff ff16 	bl	8009738 <_free_r>
 800990c:	4625      	mov	r5, r4
 800990e:	4628      	mov	r0, r5
 8009910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009914:	f000 f838 	bl	8009988 <_malloc_usable_size_r>
 8009918:	4284      	cmp	r4, r0
 800991a:	4607      	mov	r7, r0
 800991c:	d802      	bhi.n	8009924 <_realloc_r+0x34>
 800991e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009922:	d812      	bhi.n	800994a <_realloc_r+0x5a>
 8009924:	4621      	mov	r1, r4
 8009926:	4640      	mov	r0, r8
 8009928:	f7ff ff6e 	bl	8009808 <_malloc_r>
 800992c:	4605      	mov	r5, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	d0ed      	beq.n	800990e <_realloc_r+0x1e>
 8009932:	42bc      	cmp	r4, r7
 8009934:	4622      	mov	r2, r4
 8009936:	4631      	mov	r1, r6
 8009938:	bf28      	it	cs
 800993a:	463a      	movcs	r2, r7
 800993c:	f7ff fed4 	bl	80096e8 <memcpy>
 8009940:	4631      	mov	r1, r6
 8009942:	4640      	mov	r0, r8
 8009944:	f7ff fef8 	bl	8009738 <_free_r>
 8009948:	e7e1      	b.n	800990e <_realloc_r+0x1e>
 800994a:	4635      	mov	r5, r6
 800994c:	e7df      	b.n	800990e <_realloc_r+0x1e>
	...

08009950 <_sbrk_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	2300      	movs	r3, #0
 8009954:	4d05      	ldr	r5, [pc, #20]	; (800996c <_sbrk_r+0x1c>)
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	f7f6 fffc 	bl	8000958 <_sbrk>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_sbrk_r+0x1a>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_sbrk_r+0x1a>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20001468 	.word	0x20001468

08009970 <__malloc_lock>:
 8009970:	4801      	ldr	r0, [pc, #4]	; (8009978 <__malloc_lock+0x8>)
 8009972:	f000 b811 	b.w	8009998 <__retarget_lock_acquire_recursive>
 8009976:	bf00      	nop
 8009978:	2000146c 	.word	0x2000146c

0800997c <__malloc_unlock>:
 800997c:	4801      	ldr	r0, [pc, #4]	; (8009984 <__malloc_unlock+0x8>)
 800997e:	f000 b80c 	b.w	800999a <__retarget_lock_release_recursive>
 8009982:	bf00      	nop
 8009984:	2000146c 	.word	0x2000146c

08009988 <_malloc_usable_size_r>:
 8009988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800998c:	1f18      	subs	r0, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	bfbc      	itt	lt
 8009992:	580b      	ldrlt	r3, [r1, r0]
 8009994:	18c0      	addlt	r0, r0, r3
 8009996:	4770      	bx	lr

08009998 <__retarget_lock_acquire_recursive>:
 8009998:	4770      	bx	lr

0800999a <__retarget_lock_release_recursive>:
 800999a:	4770      	bx	lr

0800999c <_init>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr

080099a8 <_fini>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr
