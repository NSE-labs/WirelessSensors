
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009518  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800971c  0800971c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800971c  0800971c  0001971c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009724  08009724  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009724  08009724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009728  08009728  00019728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800972c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d4  200001e0  0800990c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  0800990c  000214b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001381d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337f  00000000  00000000  00033a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00036da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00037f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017017  00000000  00000000  00038f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160ff  00000000  00000000  0004ff3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e952  00000000  00000000  0006603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  000e49e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800963c 	.word	0x0800963c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	0800963c 	.word	0x0800963c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0c2      	sub	sp, #264	; 0x108
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fb42 	bl	8000b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f855 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f931 	bl	8000708 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f8a3 	bl	80005f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8cf 	bl	800064c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f007 ff69 	bl	8008384 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80004b2:	f000 f8ff 	bl	80006b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* initialize the LoRa chip */
  LoRa_Init(&hspi1);
 80004b6:	4821      	ldr	r0, [pc, #132]	; (800053c <main+0xa8>)
 80004b8:	f007 fe90 	bl	80081dc <LoRa_Init>

  /* Send a status message to USB port */
  uint8_t buffer[256];
  sprintf((char *)buffer, "Entering transmit loop\r\n");
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	4920      	ldr	r1, [pc, #128]	; (8000540 <main+0xac>)
 80004c0:	4618      	mov	r0, r3
 80004c2:	f008 fc41 	bl	8008d48 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe57 	bl	800017c <strlen>
 80004ce:	4603      	mov	r3, r0
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4611      	mov	r1, r2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f008 f812 	bl	8008500 <CDC_Transmit_FS>

  int count = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 80004e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80004e6:	3301      	adds	r3, #1
 80004e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  sprintf((char *)buffer, "Count = %d", count);
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80004f2:	4914      	ldr	r1, [pc, #80]	; (8000544 <main+0xb0>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f008 fc27 	bl	8008d48 <siprintf>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); /* Turn on the LED */
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000500:	4811      	ldr	r0, [pc, #68]	; (8000548 <main+0xb4>)
 8000502:	f000 fe44 	bl	800118e <HAL_GPIO_WritePin>
//	  LoRaTransmit(buffer, strlen((char *)buffer));
	  HAL_Delay(500);
 8000506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050a:	f000 fb79 	bl	8000c00 <HAL_Delay>
	  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off the LED */
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <main+0xb4>)
 8000516:	f000 fe3a 	bl	800118e <HAL_GPIO_WritePin>
//	  LoRaReceive(buffer, 0); /* go to receive mode with timeout = 0 (wait forever for one message) */
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fe2d 	bl	800017c <strlen>
 8000522:	4603      	mov	r3, r0
 8000524:	b29a      	uxth	r2, r3
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f007 ffe8 	bl	8008500 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000534:	f000 fb64 	bl	8000c00 <HAL_Delay>
	  count++;
 8000538:	e7d3      	b.n	80004e2 <main+0x4e>
 800053a:	bf00      	nop
 800053c:	20000250 	.word	0x20000250
 8000540:	08009654 	.word	0x08009654
 8000544:	08009670 	.word	0x08009670
 8000548:	40020800 	.word	0x40020800

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b092      	sub	sp, #72	; 0x48
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f008 fbec 	bl	8008d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xa0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000576:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <SystemClock_Config+0xa0>)
 8000578:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800057c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800057e:	2303      	movs	r3, #3
 8000580:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000598:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800059c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fb79 	bl	8002ca0 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005b4:	f000 f922 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2301      	movs	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fe94 	bl	8003300 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005de:	f000 f90d 	bl	80007fc <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3748      	adds	r7, #72	; 0x48
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f000 fdc7 	bl	80011c0 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f8e0 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200001fc 	.word	0x200001fc
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_SPI1_Init+0x60>)
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_SPI1_Init+0x60>)
 8000658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800065c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_SPI1_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_SPI1_Init+0x60>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_SPI1_Init+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_SPI1_Init+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_SPI1_Init+0x60>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_SPI1_Init+0x60>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_SPI1_Init+0x60>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_SPI1_Init+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_SPI1_Init+0x60>)
 8000692:	220a      	movs	r2, #10
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_SPI1_Init+0x60>)
 8000698:	f003 f8f6 	bl	8003888 <HAL_SPI_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80006a2:	f000 f8ab 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000250 	.word	0x20000250
 80006b0:	40013000 	.word	0x40013000

080006b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART3_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ec:	f003 fb4e 	bl	8003d8c <HAL_HalfDuplex_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f881 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200002a8 	.word	0x200002a8
 8000704:	40004800 	.word	0x40004800

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a33      	ldr	r2, [pc, #204]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	481b      	ldr	r0, [pc, #108]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000786:	f000 fd02 	bl	800118e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2111      	movs	r1, #17
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <MX_GPIO_Init+0xf0>)
 8000790:	f000 fcfd 	bl	800118e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <MX_GPIO_Init+0xec>)
 80007ae:	f000 fb57 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin;
 80007b2:	2311      	movs	r3, #17
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_GPIO_Init+0xf0>)
 80007ca:	f000 fb49 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 80007ce:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_GPIO_Init+0xf0>)
 80007e4:	f000 fb3c 	bl	8000e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020000 	.word	0x40020000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_MspInit+0x58>)
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <HAL_MspInit+0x58>)
 8000814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000818:	6253      	str	r3, [r2, #36]	; 0x24
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_MspInit+0x58>)
 800081c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_MspInit+0x58>)
 8000828:	6a1b      	ldr	r3, [r3, #32]
 800082a:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <HAL_MspInit+0x58>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6213      	str	r3, [r2, #32]
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_MspInit+0x58>)
 8000834:	6a1b      	ldr	r3, [r3, #32]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_MspInit+0x58>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_MspInit+0x58>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6253      	str	r3, [r2, #36]	; 0x24
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_MspInit+0x58>)
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_I2C_MspInit+0x7c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d127      	bne.n	80008d6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800089e:	23c0      	movs	r3, #192	; 0xc0
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a2:	2312      	movs	r3, #18
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ae:	2304      	movs	r3, #4
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <HAL_I2C_MspInit+0x84>)
 80008ba:	f000 fad1 	bl	8000e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 80008c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 80008c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c8:	6253      	str	r3, [r2, #36]	; 0x24
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40005400 	.word	0x40005400
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400

080008ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_SPI_MspInit+0x7c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d127      	bne.n	800095e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000918:	6213      	str	r3, [r2, #32]
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_SPI_MspInit+0x80>)
 800091c:	6a1b      	ldr	r3, [r3, #32]
 800091e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_SPI_MspInit+0x80>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800093e:	23e0      	movs	r3, #224	; 0xe0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094e:	2305      	movs	r3, #5
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_SPI_MspInit+0x84>)
 800095a:	f000 fa81 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40013000 	.word	0x40013000
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_UART_MspInit+0x7c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d128      	bne.n	80009e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x80>)
 8000998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099a:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <HAL_UART_MspInit+0x80>)
 800099c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a0:	6253      	str	r3, [r2, #36]	; 0x24
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_UART_MspInit+0x80>)
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x80>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x80>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x80>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x84>)
 80009e4:	f000 fa3c 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004800 	.word	0x40004800
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 f8c1 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <USB_LP_IRQHandler+0x10>)
 8000a52:	f000 fdfd 	bl	8001650 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000f98 	.word	0x20000f98

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f008 f928 	bl	8008ce4 <__errno>
 8000a94:	4603      	mov	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20002800 	.word	0x20002800
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	200002ec 	.word	0x200002ec
 8000ac8:	200014b8 	.word	0x200014b8

08000acc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	; (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	; (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000afe:	f7ff ffe5 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f008 f8f5 	bl	8008cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b06:	f7ff fcc5 	bl	8000494 <main>
  bx lr
 8000b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000b14:	0800972c 	.word	0x0800972c
  ldr r2, =_sbss
 8000b18:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000b1c:	200014b4 	.word	0x200014b4

08000b20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_IRQHandler>

08000b22 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f955 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f80e 	bl	8000b54 <HAL_InitTick>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e001      	b.n	8000b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b44:	f7ff fe60 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_InitTick+0x68>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d022      	beq.n	8000bae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_InitTick+0x6c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_InitTick+0x68>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f962 	bl	8000e46 <HAL_SYSTICK_Config>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10f      	bne.n	8000ba8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	d809      	bhi.n	8000ba2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	f04f 30ff 	mov.w	r0, #4294967295
 8000b96:	f000 f92c 	bl	8000df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_InitTick+0x70>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e007      	b.n	8000bb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e004      	b.n	8000bb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e001      	b.n	8000bb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a03      	ldr	r2, [pc, #12]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bd8:	6013      	str	r3, [r2, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200002f0 	.word	0x200002f0
 8000be8:	20000008 	.word	0x20000008

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	200002f0 	.word	0x200002f0

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d004      	beq.n	8000c24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_Delay+0x40>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c24:	bf00      	nop
 8000c26:	f7ff ffe1 	bl	8000bec <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d8f7      	bhi.n	8000c26 <HAL_Delay+0x26>
  {
  }
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4906      	ldr	r1, [pc, #24]	; (8000cdc <__NVIC_EnableIRQ+0x34>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff90 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff2d 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff42 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff90 	bl	8000d34 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5f 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff35 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffa2 	bl	8000d98 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e76:	e154      	b.n	8001122 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8146 	beq.w	800111c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d005      	beq.n	8000ea8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d130      	bne.n	8000f0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	f003 0201 	and.w	r2, r3, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d017      	beq.n	8000f46 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d123      	bne.n	8000f9a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	6939      	ldr	r1, [r7, #16]
 8000f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0203 	and.w	r2, r3, #3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80a0 	beq.w	800111c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fdc:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a57      	ldr	r2, [pc, #348]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	4b55      	ldr	r3, [pc, #340]	; (8001140 <HAL_GPIO_Init+0x2e0>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ff4:	4a53      	ldr	r2, [pc, #332]	; (8001144 <HAL_GPIO_Init+0x2e4>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d019      	beq.n	8001054 <HAL_GPIO_Init+0x1f4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x2ec>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d013      	beq.n	8001050 <HAL_GPIO_Init+0x1f0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x2f0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d00d      	beq.n	800104c <HAL_GPIO_Init+0x1ec>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_GPIO_Init+0x2f4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x1e8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a47      	ldr	r2, [pc, #284]	; (8001158 <HAL_GPIO_Init+0x2f8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <HAL_GPIO_Init+0x1e4>
 8001040:	2304      	movs	r3, #4
 8001042:	e008      	b.n	8001056 <HAL_GPIO_Init+0x1f6>
 8001044:	2305      	movs	r3, #5
 8001046:	e006      	b.n	8001056 <HAL_GPIO_Init+0x1f6>
 8001048:	2303      	movs	r3, #3
 800104a:	e004      	b.n	8001056 <HAL_GPIO_Init+0x1f6>
 800104c:	2302      	movs	r3, #2
 800104e:	e002      	b.n	8001056 <HAL_GPIO_Init+0x1f6>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_GPIO_Init+0x1f6>
 8001054:	2300      	movs	r3, #0
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	f002 0203 	and.w	r2, r2, #3
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	4093      	lsls	r3, r2
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001066:	4937      	ldr	r1, [pc, #220]	; (8001144 <HAL_GPIO_Init+0x2e4>)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <HAL_GPIO_Init+0x2fc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001098:	4a30      	ldr	r2, [pc, #192]	; (800115c <HAL_GPIO_Init+0x2fc>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_GPIO_Init+0x2fc>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <HAL_GPIO_Init+0x2fc>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_GPIO_Init+0x2fc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <HAL_GPIO_Init+0x2fc>)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <HAL_GPIO_Init+0x2fc>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <HAL_GPIO_Init+0x2fc>)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa22 f303 	lsr.w	r3, r2, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	f47f aea3 	bne.w	8000e78 <HAL_GPIO_Init+0x18>
  }
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40010000 	.word	0x40010000
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021000 	.word	0x40021000
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e001      	b.n	8001182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	807b      	strh	r3, [r7, #2]
 800119a:	4613      	mov	r3, r2
 800119c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800119e:	787b      	ldrb	r3, [r7, #1]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80011aa:	e003      	b.n	80011b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	041a      	lsls	r2, r3, #16
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e12b      	b.n	800142a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fb3c 	bl	8000864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2224      	movs	r2, #36	; 0x24
 80011f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001212:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001222:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001224:	f002 faa8 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8001228:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a81      	ldr	r2, [pc, #516]	; (8001434 <HAL_I2C_Init+0x274>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d807      	bhi.n	8001244 <HAL_I2C_Init+0x84>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a80      	ldr	r2, [pc, #512]	; (8001438 <HAL_I2C_Init+0x278>)
 8001238:	4293      	cmp	r3, r2
 800123a:	bf94      	ite	ls
 800123c:	2301      	movls	r3, #1
 800123e:	2300      	movhi	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	e006      	b.n	8001252 <HAL_I2C_Init+0x92>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4a7d      	ldr	r2, [pc, #500]	; (800143c <HAL_I2C_Init+0x27c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	bf94      	ite	ls
 800124c:	2301      	movls	r3, #1
 800124e:	2300      	movhi	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0e7      	b.n	800142a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4a78      	ldr	r2, [pc, #480]	; (8001440 <HAL_I2C_Init+0x280>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9b      	lsrs	r3, r3, #18
 8001264:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	430a      	orrs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a6a      	ldr	r2, [pc, #424]	; (8001434 <HAL_I2C_Init+0x274>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d802      	bhi.n	8001294 <HAL_I2C_Init+0xd4>
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3301      	adds	r3, #1
 8001292:	e009      	b.n	80012a8 <HAL_I2C_Init+0xe8>
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	4a69      	ldr	r2, [pc, #420]	; (8001444 <HAL_I2C_Init+0x284>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	3301      	adds	r3, #1
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	495c      	ldr	r1, [pc, #368]	; (8001434 <HAL_I2C_Init+0x274>)
 80012c4:	428b      	cmp	r3, r1
 80012c6:	d819      	bhi.n	80012fc <HAL_I2C_Init+0x13c>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1e59      	subs	r1, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d6:	1c59      	adds	r1, r3, #1
 80012d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012dc:	400b      	ands	r3, r1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00a      	beq.n	80012f8 <HAL_I2C_Init+0x138>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1e59      	subs	r1, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f6:	e051      	b.n	800139c <HAL_I2C_Init+0x1dc>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e04f      	b.n	800139c <HAL_I2C_Init+0x1dc>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d111      	bne.n	8001328 <HAL_I2C_Init+0x168>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1e58      	subs	r0, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	440b      	add	r3, r1
 8001312:	fbb0 f3f3 	udiv	r3, r0, r3
 8001316:	3301      	adds	r3, #1
 8001318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	e012      	b.n	800134e <HAL_I2C_Init+0x18e>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1e58      	subs	r0, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	0099      	lsls	r1, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	fbb0 f3f3 	udiv	r3, r0, r3
 800133e:	3301      	adds	r3, #1
 8001340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Init+0x196>
 8001352:	2301      	movs	r3, #1
 8001354:	e022      	b.n	800139c <HAL_I2C_Init+0x1dc>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <HAL_I2C_Init+0x1bc>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1e58      	subs	r0, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6859      	ldr	r1, [r3, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	440b      	add	r3, r1
 800136c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001370:	3301      	adds	r3, #1
 8001372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137a:	e00f      	b.n	800139c <HAL_I2C_Init+0x1dc>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1e58      	subs	r0, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	0099      	lsls	r1, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001392:	3301      	adds	r3, #1
 8001394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	6809      	ldr	r1, [r1, #0]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69da      	ldr	r2, [r3, #28]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6911      	ldr	r1, [r2, #16]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68d2      	ldr	r2, [r2, #12]
 80013d6:	4311      	orrs	r1, r2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	430b      	orrs	r3, r1
 80013de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2220      	movs	r2, #32
 8001416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	000186a0 	.word	0x000186a0
 8001438:	001e847f 	.word	0x001e847f
 800143c:	003d08ff 	.word	0x003d08ff
 8001440:	431bde83 	.word	0x431bde83
 8001444:	10624dd3 	.word	0x10624dd3

08001448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	b08b      	sub	sp, #44	; 0x2c
 800144c:	af06      	add	r7, sp, #24
 800144e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0d0      	b.n	80015fc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f007 f998 	bl	80087a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fdd3 	bl	800402c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e04c      	b.n	8001526 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	3301      	adds	r3, #1
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	b298      	uxth	r0, r3
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	3336      	adds	r3, #54	; 0x36
 80014ca:	4602      	mov	r2, r0
 80014cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	3303      	adds	r3, #3
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3338      	adds	r3, #56	; 0x38
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	333c      	adds	r3, #60	; 0x3c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	3340      	adds	r3, #64	; 0x40
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3ad      	bcc.n	800148c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e044      	b.n	80015c0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3b5      	bcc.n	8001536 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	687e      	ldr	r6, [r7, #4]
 80015d2:	466d      	mov	r5, sp
 80015d4:	f106 0410 	add.w	r4, r6, #16
 80015d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	602b      	str	r3, [r5, #0]
 80015e0:	1d33      	adds	r3, r6, #4
 80015e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f002 fd3b 	bl	8004060 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001604 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_PCD_Start+0x16>
 8001616:	2302      	movs	r3, #2
 8001618:	e016      	b.n	8001648 <HAL_PCD_Start+0x44>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fcea 	bl	8004000 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800162c:	2101      	movs	r1, #1
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f007 f89a 	bl	8008768 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f005 f9cf 	bl	80069dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f005 f9c7 	bl	80069f0 <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800166c:	d102      	bne.n	8001674 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 faf5 	bl	8001c5e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f005 f9b9 	bl	80069f0 <USB_ReadInterrupts>
 800167e:	4603      	mov	r3, r0
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001688:	d112      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169c:	b292      	uxth	r2, r2
 800169e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f007 f8f9 	bl	800889a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f8c7 	bl	800183e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 f99b 	bl	80069f0 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016c4:	d10b      	bne.n	80016de <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 f984 	bl	80069f0 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f2:	d10b      	bne.n	800170c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001706:	b292      	uxth	r2, r2
 8001708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f005 f96d 	bl	80069f0 <USB_ReadInterrupts>
 8001716:	4603      	mov	r3, r0
 8001718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001720:	d126      	bne.n	8001770 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0204 	bic.w	r2, r2, #4
 8001734:	b292      	uxth	r2, r2
 8001736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f007 f8da 	bl	800890c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001760:	b29a      	uxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800176a:	b292      	uxth	r2, r2
 800176c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f005 f93b 	bl	80069f0 <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001784:	d126      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0208 	orr.w	r2, r2, #8
 8001798:	b292      	uxth	r2, r2
 800179a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b0:	b292      	uxth	r2, r2
 80017b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0204 	orr.w	r2, r2, #4
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f007 f882 	bl	80088d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f005 f909 	bl	80069f0 <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e8:	d10e      	bne.n	8001808 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017fc:	b292      	uxth	r2, r2
 80017fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f007 f83b 	bl	800887e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f005 f8ef 	bl	80069f0 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800181c:	d10b      	bne.n	8001836 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001826:	b29a      	uxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001830:	b292      	uxth	r2, r2
 8001832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_PCD_SetAddress+0x1a>
 8001854:	2302      	movs	r3, #2
 8001856:	e013      	b.n	8001880 <HAL_PCD_SetAddress+0x42>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f005 f8a0 	bl	80069b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	70fb      	strb	r3, [r7, #3]
 800189a:	460b      	mov	r3, r1
 800189c:	803b      	strh	r3, [r7, #0]
 800189e:	4613      	mov	r3, r2
 80018a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da0e      	bge.n	80018cc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	705a      	strb	r2, [r3, #1]
 80018ca:	e00e      	b.n	80018ea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	f003 0207 	and.w	r2, r3, #7
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018f6:	883a      	ldrh	r2, [r7, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	78ba      	ldrb	r2, [r7, #2]
 8001900:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001914:	78bb      	ldrb	r3, [r7, #2]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d102      	bne.n	8001920 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_PCD_EP_Open+0xa6>
 800192a:	2302      	movs	r3, #2
 800192c:	e00e      	b.n	800194c <HAL_PCD_EP_Open+0xc4>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fbaf 	bl	80040a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800194a:	7afb      	ldrb	r3, [r7, #11]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001964:	2b00      	cmp	r3, #0
 8001966:	da0e      	bge.n	8001986 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	705a      	strb	r2, [r3, #1]
 8001984:	e00e      	b.n	80019a4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f003 0207 	and.w	r2, r3, #7
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_PCD_EP_Close+0x6a>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e00e      	b.n	80019dc <HAL_PCD_EP_Close+0x88>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68f9      	ldr	r1, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fed1 	bl	8004774 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	460b      	mov	r3, r1
 80019f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	f003 0207 	and.w	r2, r3, #7
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6979      	ldr	r1, [r7, #20]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 f883 	bl	8004b4c <USB_EPStartXfer>
 8001a46:	e005      	b.n	8001a54 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6979      	ldr	r1, [r7, #20]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 f87c 	bl	8004b4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 0207 	and.w	r2, r3, #7
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a80:	681b      	ldr	r3, [r3, #0]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6979      	ldr	r1, [r7, #20]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 f829 	bl	8004b4c <USB_EPStartXfer>
 8001afa:	e005      	b.n	8001b08 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6979      	ldr	r1, [r7, #20]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 f822 	bl	8004b4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 0207 	and.w	r2, r3, #7
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d901      	bls.n	8001b30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e03e      	b.n	8001bae <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	da0e      	bge.n	8001b56 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	705a      	strb	r2, [r3, #1]
 8001b54:	e00c      	b.n	8001b70 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_PCD_EP_SetStall+0x7e>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e00e      	b.n	8001bae <HAL_PCD_EP_SetStall+0x9c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f004 fe0c 	bl	80067bc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d901      	bls.n	8001bd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e040      	b.n	8001c56 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da0e      	bge.n	8001bfa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
 8001bf8:	e00e      	b.n	8001c18 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 0207 	and.w	r2, r3, #7
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_PCD_EP_ClrStall+0x82>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e00e      	b.n	8001c56 <HAL_PCD_EP_ClrStall+0xa0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fe08 	bl	800685c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b08e      	sub	sp, #56	; 0x38
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c66:	e2ec      	b.n	8002242 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c70:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 8161 	bne.w	8001f4a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d152      	bne.n	8001d38 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca2:	81fb      	strh	r3, [r7, #14]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	89fb      	ldrh	r3, [r7, #14]
 8001caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3328      	adds	r3, #40	; 0x28
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	441a      	add	r2, r3
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f006 fda6 	bl	800884a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 829b 	beq.w	8002242 <PCD_EP_ISR_Handler+0x5e4>
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f040 8296 	bne.w	8002242 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d36:	e284      	b.n	8002242 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d034      	beq.n	8001dbc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	3306      	adds	r3, #6
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f004 fe81 	bl	8006a98 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001da2:	4013      	ands	r3, r2
 8001da4:	823b      	strh	r3, [r7, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	8a3a      	ldrh	r2, [r7, #16]
 8001dac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001db0:	b292      	uxth	r2, r2
 8001db2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f006 fd1b 	bl	80087f0 <HAL_PCD_SetupStageCallback>
 8001dba:	e242      	b.n	8002242 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dbc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f280 823e 	bge.w	8002242 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	83bb      	strh	r3, [r7, #28]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	8bba      	ldrh	r2, [r7, #28]
 8001ddc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001de0:	b292      	uxth	r2, r2
 8001de2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	3306      	adds	r3, #6
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <PCD_EP_ISR_Handler+0x1ee>
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d015      	beq.n	8001e4c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	6959      	ldr	r1, [r3, #20]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f004 fe31 	bl	8006a98 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	441a      	add	r2, r3
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e44:	2100      	movs	r1, #0
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f006 fce4 	bl	8008814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 81f2 	bne.w	8002242 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	4413      	add	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d112      	bne.n	8001eac <PCD_EP_ISR_Handler+0x24e>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	801a      	strh	r2, [r3, #0]
 8001eaa:	e02f      	b.n	8001f0c <PCD_EP_ISR_Handler+0x2ae>
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8001eb2:	d813      	bhi.n	8001edc <PCD_EP_ISR_Handler+0x27e>
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <PCD_EP_ISR_Handler+0x270>
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eca:	3301      	adds	r3, #1
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	e017      	b.n	8001f0c <PCD_EP_ISR_Handler+0x2ae>
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <PCD_EP_ISR_Handler+0x298>
 8001ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	029b      	lsls	r3, r3, #10
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1c:	827b      	strh	r3, [r7, #18]
 8001f1e:	8a7b      	ldrh	r3, [r7, #18]
 8001f20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f24:	827b      	strh	r3, [r7, #18]
 8001f26:	8a7b      	ldrh	r3, [r7, #18]
 8001f28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f2c:	827b      	strh	r3, [r7, #18]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	8a7b      	ldrh	r3, [r7, #18]
 8001f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	8013      	strh	r3, [r2, #0]
 8001f48:	e17b      	b.n	8002242 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f280 80ea 	bge.w	800213a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f94:	b292      	uxth	r2, r2
 8001f96:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f98:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	7b1b      	ldrb	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d122      	bne.n	8001ffc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3306      	adds	r3, #6
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fde:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001fe0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	6959      	ldr	r1, [r3, #20]
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	88da      	ldrh	r2, [r3, #6]
 8001ff4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ff6:	f004 fd4f 	bl	8006a98 <USB_ReadPMA>
 8001ffa:	e07c      	b.n	80020f6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	78db      	ldrb	r3, [r3, #3]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d108      	bne.n	8002016 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002004:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002006:	461a      	mov	r2, r3
 8002008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f927 	bl	800225e <HAL_PCD_EP_DB_Receive>
 8002010:	4603      	mov	r3, r0
 8002012:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002014:	e06f      	b.n	80020f6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800202c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002030:	847b      	strh	r3, [r7, #34]	; 0x22
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	441a      	add	r2, r3
 8002040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800204a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002052:	b29b      	uxth	r3, r3
 8002054:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d021      	beq.n	80020b4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	3302      	adds	r3, #2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002098:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800209a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800209c:	2b00      	cmp	r3, #0
 800209e:	d02a      	beq.n	80020f6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	6959      	ldr	r1, [r3, #20]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	891a      	ldrh	r2, [r3, #8]
 80020ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ae:	f004 fcf3 	bl	8006a98 <USB_ReadPMA>
 80020b2:	e020      	b.n	80020f6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020bc:	b29b      	uxth	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	3306      	adds	r3, #6
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020dc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	6959      	ldr	r1, [r3, #20]
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	895a      	ldrh	r2, [r3, #10]
 80020f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f2:	f004 fcd1 	bl	8006a98 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020fc:	441a      	add	r2, r3
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002108:	441a      	add	r2, r3
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <PCD_EP_ISR_Handler+0x4c2>
 8002116:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d206      	bcs.n	800212e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f006 fb74 	bl	8008814 <HAL_PCD_DataOutStageCallback>
 800212c:	e005      	b.n	800213a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fd09 	bl	8004b4c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800213a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b00      	cmp	r3, #0
 8002142:	d07e      	beq.n	8002242 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002144:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	b29b      	uxth	r3, r3
 800216a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002172:	843b      	strh	r3, [r7, #32]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	441a      	add	r2, r3
 8002182:	8c3b      	ldrh	r3, [r7, #32]
 8002184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218c:	b29b      	uxth	r3, r3
 800218e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	78db      	ldrb	r3, [r3, #3]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d00c      	beq.n	80021b2 <PCD_EP_ISR_Handler+0x554>
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	78db      	ldrb	r3, [r3, #3]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d146      	bne.n	8002236 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d141      	bne.n	8002236 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	3302      	adds	r3, #2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021da:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	8bfb      	ldrh	r3, [r7, #30]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d906      	bls.n	80021f4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	8bfb      	ldrh	r3, [r7, #30]
 80021ec:	1ad2      	subs	r2, r2, r3
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	619a      	str	r2, [r3, #24]
 80021f2:	e002      	b.n	80021fa <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f006 fb1e 	bl	800884a <HAL_PCD_DataInStageCallback>
 800220e:	e018      	b.n	8002242 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	8bfb      	ldrh	r3, [r7, #30]
 8002216:	441a      	add	r2, r3
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	8bfb      	ldrh	r3, [r7, #30]
 8002222:	441a      	add	r2, r3
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fc8c 	bl	8004b4c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002234:	e005      	b.n	8002242 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002236:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002238:	461a      	mov	r2, r3
 800223a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f91b 	bl	8002478 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800224a:	b29b      	uxth	r3, r3
 800224c:	b21b      	sxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	f6ff ad0a 	blt.w	8001c68 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3738      	adds	r7, #56	; 0x38
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b088      	sub	sp, #32
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	4613      	mov	r3, r2
 800226a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d07e      	beq.n	8002374 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	3302      	adds	r3, #2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	8b7b      	ldrh	r3, [r7, #26]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d306      	bcc.n	80022b8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	8b7b      	ldrh	r3, [r7, #26]
 80022b0:	1ad2      	subs	r2, r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	619a      	str	r2, [r3, #24]
 80022b6:	e002      	b.n	80022be <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d123      	bne.n	800230e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e0:	833b      	strh	r3, [r7, #24]
 80022e2:	8b3b      	ldrh	r3, [r7, #24]
 80022e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022e8:	833b      	strh	r3, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	441a      	add	r2, r3
 80022f8:	8b3b      	ldrh	r3, [r7, #24]
 80022fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230a:	b29b      	uxth	r3, r3
 800230c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01f      	beq.n	8002358 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	82fb      	strh	r3, [r7, #22]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	441a      	add	r2, r3
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002354:	b29b      	uxth	r3, r3
 8002356:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002358:	8b7b      	ldrh	r3, [r7, #26]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8087 	beq.w	800246e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6959      	ldr	r1, [r3, #20]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	891a      	ldrh	r2, [r3, #8]
 800236c:	8b7b      	ldrh	r3, [r7, #26]
 800236e:	f004 fb93 	bl	8006a98 <USB_ReadPMA>
 8002372:	e07c      	b.n	800246e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	3306      	adds	r3, #6
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	8b7b      	ldrh	r3, [r7, #26]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d306      	bcc.n	80023b6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	8b7b      	ldrh	r3, [r7, #26]
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	619a      	str	r2, [r3, #24]
 80023b4:	e002      	b.n	80023bc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d123      	bne.n	800240c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023de:	83fb      	strh	r3, [r7, #30]
 80023e0:	8bfb      	ldrh	r3, [r7, #30]
 80023e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023e6:	83fb      	strh	r3, [r7, #30]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	8bfb      	ldrh	r3, [r7, #30]
 80023f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002408:	b29b      	uxth	r3, r3
 800240a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11f      	bne.n	8002456 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800242c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002430:	83bb      	strh	r3, [r7, #28]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	441a      	add	r2, r3
 8002440:	8bbb      	ldrh	r3, [r7, #28]
 8002442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800244a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002452:	b29b      	uxth	r3, r3
 8002454:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002456:	8b7b      	ldrh	r3, [r7, #26]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6959      	ldr	r1, [r3, #20]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	895a      	ldrh	r2, [r3, #10]
 8002468:	8b7b      	ldrh	r3, [r7, #26]
 800246a:	f004 fb15 	bl	8006a98 <USB_ReadPMA>
    }
  }

  return count;
 800246e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0a2      	sub	sp, #136	; 0x88
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 81c7 	beq.w	8002820 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	3302      	adds	r3, #2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d907      	bls.n	80024da <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d2:	1ad2      	subs	r2, r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	619a      	str	r2, [r3, #24]
 80024d8:	e002      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 80b9 	bne.w	800265c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d126      	bne.n	8002540 <HAL_PCD_EP_DB_Transmit+0xc8>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002500:	b29b      	uxth	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	4413      	add	r3, r2
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	011a      	lsls	r2, r3, #4
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	4413      	add	r3, r2
 8002514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002524:	b29a      	uxth	r2, r3
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	801a      	strh	r2, [r3, #0]
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002538:	b29a      	uxth	r2, r3
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	801a      	strh	r2, [r3, #0]
 800253e:	e01a      	b.n	8002576 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	785b      	ldrb	r3, [r3, #1]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d116      	bne.n	8002576 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	4413      	add	r3, r2
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	011a      	lsls	r2, r3, #4
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	4413      	add	r3, r2
 800256a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d126      	bne.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4413      	add	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	011a      	lsls	r2, r3, #4
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4413      	add	r3, r2
 80025a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	e017      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d113      	bne.n	8002602 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	4413      	add	r3, r2
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	011a      	lsls	r2, r3, #4
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	4413      	add	r3, r2
 80025f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2200      	movs	r2, #0
 8002600:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	4619      	mov	r1, r3
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f006 f91e 	bl	800884a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 82d4 	beq.w	8002bc2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002634:	827b      	strh	r3, [r7, #18]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	441a      	add	r2, r3
 8002644:	8a7b      	ldrh	r3, [r7, #18]
 8002646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800264a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002656:	b29b      	uxth	r3, r3
 8002658:	8013      	strh	r3, [r2, #0]
 800265a:	e2b2      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d021      	beq.n	80026aa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002680:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	441a      	add	r2, r3
 8002692:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800269a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800269e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	f040 8286 	bne.w	8002bc2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026be:	441a      	add	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026cc:	441a      	add	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d309      	bcc.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ea:	1ad2      	subs	r2, r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	621a      	str	r2, [r3, #32]
 80026f0:	e015      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d107      	bne.n	800270a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80026fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002708:	e009      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d155      	bne.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002734:	b29b      	uxth	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	4413      	add	r3, r2
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	011a      	lsls	r2, r3, #4
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	4413      	add	r3, r2
 8002748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
 800274e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002750:	2b00      	cmp	r3, #0
 8002752:	d112      	bne.n	800277a <HAL_PCD_EP_DB_Transmit+0x302>
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800275e:	b29a      	uxth	r2, r3
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	801a      	strh	r2, [r3, #0]
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002772:	b29a      	uxth	r2, r3
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	e047      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x392>
 800277a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800277c:	2b3e      	cmp	r3, #62	; 0x3e
 800277e:	d811      	bhi.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
 8002786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002792:	3301      	adds	r3, #1
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
 8002796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002798:	b29b      	uxth	r3, r3
 800279a:	029b      	lsls	r3, r3, #10
 800279c:	b29a      	uxth	r2, r3
 800279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a0:	801a      	strh	r2, [r3, #0]
 80027a2:	e032      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x392>
 80027a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <HAL_PCD_EP_DB_Transmit+0x342>
 80027b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b6:	3b01      	subs	r3, #1
 80027b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027bc:	b29b      	uxth	r3, r3
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	801a      	strh	r2, [r3, #0]
 80027d0:	e01b      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x392>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d117      	bne.n	800280a <HAL_PCD_EP_DB_Transmit+0x392>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	643b      	str	r3, [r7, #64]	; 0x40
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ee:	4413      	add	r3, r2
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	011a      	lsls	r2, r3, #4
 80027f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fa:	4413      	add	r3, r2
 80027fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002804:	b29a      	uxth	r2, r3
 8002806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002808:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6959      	ldr	r1, [r3, #20]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	891a      	ldrh	r2, [r3, #8]
 8002816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002818:	b29b      	uxth	r3, r3
 800281a:	f004 f8f8 	bl	8006a0e <USB_WritePMA>
 800281e:	e1d0      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	3306      	adds	r3, #6
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002854:	429a      	cmp	r2, r3
 8002856:	d307      	bcc.n	8002868 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002860:	1ad2      	subs	r2, r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	619a      	str	r2, [r3, #24]
 8002866:	e002      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80c4 	bne.w	8002a00 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d126      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x456>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002894:	4413      	add	r3, r2
 8002896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80028a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	e01a      	b.n	8002904 <HAL_PCD_EP_DB_Transmit+0x48c>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d116      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0x48c>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	677b      	str	r3, [r7, #116]	; 0x74
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ea:	4413      	add	r3, r2
 80028ec:	677b      	str	r3, [r7, #116]	; 0x74
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	011a      	lsls	r2, r3, #4
 80028f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028fc:	673b      	str	r3, [r7, #112]	; 0x70
 80028fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002900:	2200      	movs	r2, #0
 8002902:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	67bb      	str	r3, [r7, #120]	; 0x78
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d12f      	bne.n	8002972 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800292a:	4413      	add	r3, r2
 800292c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	011a      	lsls	r2, r3, #4
 8002936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800293a:	4413      	add	r3, r2
 800293c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002950:	b29a      	uxth	r2, r3
 8002952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002956:	801a      	strh	r2, [r3, #0]
 8002958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002968:	b29a      	uxth	r2, r3
 800296a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	e017      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d113      	bne.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x52a>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002988:	4413      	add	r3, r2
 800298a:	67bb      	str	r3, [r7, #120]	; 0x78
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	011a      	lsls	r2, r3, #4
 8002992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002994:	4413      	add	r3, r2
 8002996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800299a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800299c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800299e:	2200      	movs	r2, #0
 80029a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	4619      	mov	r1, r3
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f005 ff4e 	bl	800884a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 8104 	bne.w	8002bc2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	8013      	strh	r3, [r2, #0]
 80029fe:	e0e0      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d121      	bne.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	f040 80b4 	bne.w	8002bc2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a62:	441a      	add	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a70:	441a      	add	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	6a1a      	ldr	r2, [r3, #32]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d309      	bcc.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a8e:	1ad2      	subs	r2, r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	621a      	str	r2, [r3, #32]
 8002a94:	e015      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aa2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aac:	e009      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	785b      	ldrb	r3, [r3, #1]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d155      	bne.n	8002b7c <HAL_PCD_EP_DB_Transmit+0x704>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae4:	4413      	add	r3, r2
 8002ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	011a      	lsls	r2, r3, #4
 8002aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af0:	4413      	add	r3, r2
 8002af2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d112      	bne.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b0c:	801a      	strh	r2, [r3, #0]
 8002b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	e044      	b.n	8002bae <HAL_PCD_EP_DB_Transmit+0x736>
 8002b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b26:	2b3e      	cmp	r3, #62	; 0x3e
 8002b28:	d811      	bhi.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4a:	801a      	strh	r2, [r3, #0]
 8002b4c:	e02f      	b.n	8002bae <HAL_PCD_EP_DB_Transmit+0x736>
 8002b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	657b      	str	r3, [r7, #84]	; 0x54
 8002b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b60:	3b01      	subs	r3, #1
 8002b62:	657b      	str	r3, [r7, #84]	; 0x54
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	029b      	lsls	r3, r3, #10
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	e018      	b.n	8002bae <HAL_PCD_EP_DB_Transmit+0x736>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d114      	bne.n	8002bae <HAL_PCD_EP_DB_Transmit+0x736>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b92:	4413      	add	r3, r2
 8002b94:	667b      	str	r3, [r7, #100]	; 0x64
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	011a      	lsls	r2, r3, #4
 8002b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6959      	ldr	r1, [r3, #20]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	895a      	ldrh	r2, [r3, #10]
 8002bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f003 ff26 	bl	8006a0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bdc:	823b      	strh	r3, [r7, #16]
 8002bde:	8a3b      	ldrh	r3, [r7, #16]
 8002be0:	f083 0310 	eor.w	r3, r3, #16
 8002be4:	823b      	strh	r3, [r7, #16]
 8002be6:	8a3b      	ldrh	r3, [r7, #16]
 8002be8:	f083 0320 	eor.w	r3, r3, #32
 8002bec:	823b      	strh	r3, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	8a3b      	ldrh	r3, [r7, #16]
 8002bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3788      	adds	r7, #136	; 0x88
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c2e:	897b      	ldrh	r3, [r7, #10]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e009      	b.n	8002c66 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c52:	897a      	ldrh	r2, [r7, #10]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c66:	893b      	ldrh	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	80da      	strh	r2, [r3, #6]
 8002c7a:	e00b      	b.n	8002c94 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e31d      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbc:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d07b      	beq.n	8002dca <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d006      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d10f      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5e>
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d10b      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce6:	4b87      	ldr	r3, [pc, #540]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d06a      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x128>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d166      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e2f7      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x74>
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7e      	ldr	r2, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e02d      	b.n	8002d70 <HAL_RCC_OscConfig+0xd0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCC_OscConfig+0x96>
 8002d1c:	4b79      	ldr	r3, [pc, #484]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a78      	ldr	r2, [pc, #480]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a75      	ldr	r2, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e01c      	b.n	8002d70 <HAL_RCC_OscConfig+0xd0>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b05      	cmp	r3, #5
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0xb8>
 8002d3e:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a70      	ldr	r2, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6d      	ldr	r2, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0xd0>
 8002d58:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a69      	ldr	r2, [pc, #420]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b67      	ldr	r3, [pc, #412]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a66      	ldr	r2, [pc, #408]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fd ff38 	bl	8000bec <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fd ff34 	bl	8000bec <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e2ad      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0xe0>
 8002d9e:	e014      	b.n	8002dca <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fd ff24 	bl	8000bec <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fd ff20 	bl	8000bec <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e299      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dba:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x108>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d05a      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_OscConfig+0x176>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x160>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e276      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	493d      	ldr	r1, [pc, #244]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e14:	e03a      	b.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d020      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x268>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fd fee2 	bl	8000bec <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fd fede 	bl	8000bec <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e257      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	492a      	ldr	r1, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 8002e5e:	e015      	b.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_RCC_OscConfig+0x268>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fd fec1 	bl	8000bec <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fd febd 	bl	8000bec <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e236      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e80:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80b8 	beq.w	800300a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d170      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea0:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x218>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e21a      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d921      	bls.n	8002f0c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fc7b 	bl	80037c8 <RCC_SetFlashLatencyFromMSIRange>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e208      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4906      	ldr	r1, [pc, #24]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	4901      	ldr	r1, [pc, #4]	; (8002f04 <HAL_RCC_OscConfig+0x264>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
 8002f02:	e020      	b.n	8002f46 <HAL_RCC_OscConfig+0x2a6>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f0c:	4b99      	ldr	r3, [pc, #612]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4996      	ldr	r1, [pc, #600]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1e:	4b95      	ldr	r3, [pc, #596]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	4991      	ldr	r1, [pc, #580]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fc46 	bl	80037c8 <RCC_SetFlashLatencyFromMSIRange>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1d3      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	0b5b      	lsrs	r3, r3, #13
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f56:	4a87      	ldr	r2, [pc, #540]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002f58:	6892      	ldr	r2, [r2, #8]
 8002f5a:	0912      	lsrs	r2, r2, #4
 8002f5c:	f002 020f 	and.w	r2, r2, #15
 8002f60:	4985      	ldr	r1, [pc, #532]	; (8003178 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	5c8a      	ldrb	r2, [r1, r2]
 8002f64:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <HAL_RCC_OscConfig+0x4dc>)
 8002f68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f6a:	4b85      	ldr	r3, [pc, #532]	; (8003180 <HAL_RCC_OscConfig+0x4e0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fdf0 	bl	8000b54 <HAL_InitTick>
 8002f74:	4603      	mov	r3, r0
 8002f76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d045      	beq.n	800300a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	e1b5      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d029      	beq.n	8002fde <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f8a:	4b7e      	ldr	r3, [pc, #504]	; (8003184 <HAL_RCC_OscConfig+0x4e4>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fd fe2c 	bl	8000bec <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f98:	f7fd fe28 	bl	8000bec <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e1a1      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002faa:	4b72      	ldr	r3, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb6:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	496c      	ldr	r1, [pc, #432]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	4967      	ldr	r1, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
 8002fdc:	e015      	b.n	800300a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fde:	4b69      	ldr	r3, [pc, #420]	; (8003184 <HAL_RCC_OscConfig+0x4e4>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fd fe02 	bl	8000bec <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fec:	f7fd fdfe 	bl	8000bec <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e177      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d030      	beq.n	8003078 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b5a      	ldr	r3, [pc, #360]	; (8003188 <HAL_RCC_OscConfig+0x4e8>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7fd fde2 	bl	8000bec <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302c:	f7fd fdde 	bl	8000bec <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e157      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800303e:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x38c>
 800304a:	e015      	b.n	8003078 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304c:	4b4e      	ldr	r3, [pc, #312]	; (8003188 <HAL_RCC_OscConfig+0x4e8>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7fd fdcb 	bl	8000bec <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305a:	f7fd fdc7 	bl	8000bec <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e140      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800306c:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80b5 	beq.w	80031f0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6253      	str	r3, [r2, #36]	; 0x24
 80030a2:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x4ec>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b33      	ldr	r3, [pc, #204]	; (800318c <HAL_RCC_OscConfig+0x4ec>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a32      	ldr	r2, [pc, #200]	; (800318c <HAL_RCC_OscConfig+0x4ec>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fd fd8f 	bl	8000bec <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fd fd8b 	bl	8000bec <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e104      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b29      	ldr	r3, [pc, #164]	; (800318c <HAL_RCC_OscConfig+0x4ec>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x466>
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 80030fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	6353      	str	r3, [r2, #52]	; 0x34
 8003104:	e02d      	b.n	8003162 <HAL_RCC_OscConfig+0x4c2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x488>
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003118:	6353      	str	r3, [r2, #52]	; 0x34
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	4a15      	ldr	r2, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003124:	6353      	str	r3, [r2, #52]	; 0x34
 8003126:	e01c      	b.n	8003162 <HAL_RCC_OscConfig+0x4c2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d10c      	bne.n	800314a <HAL_RCC_OscConfig+0x4aa>
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	4a0f      	ldr	r2, [pc, #60]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313a:	6353      	str	r3, [r2, #52]	; 0x34
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003146:	6353      	str	r3, [r2, #52]	; 0x34
 8003148:	e00b      	b.n	8003162 <HAL_RCC_OscConfig+0x4c2>
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003154:	6353      	str	r3, [r2, #52]	; 0x34
 8003156:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	4a06      	ldr	r2, [pc, #24]	; (8003174 <HAL_RCC_OscConfig+0x4d4>)
 800315c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003160:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d024      	beq.n	80031b4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fd fd3f 	bl	8000bec <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003170:	e019      	b.n	80031a6 <HAL_RCC_OscConfig+0x506>
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	080096d0 	.word	0x080096d0
 800317c:	20000000 	.word	0x20000000
 8003180:	20000004 	.word	0x20000004
 8003184:	42470020 	.word	0x42470020
 8003188:	42470680 	.word	0x42470680
 800318c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fd fd2c 	bl	8000bec <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0a3      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a6:	4b54      	ldr	r3, [pc, #336]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ee      	beq.n	8003190 <HAL_RCC_OscConfig+0x4f0>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fd fd1a 	bl	8000bec <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fd fd16 	bl	8000bec <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e08d      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ee      	bne.n	80031bc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e4:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	4a43      	ldr	r2, [pc, #268]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ee:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d079      	beq.n	80032ec <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d056      	beq.n	80032ac <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2b02      	cmp	r3, #2
 8003204:	d13b      	bne.n	800327e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_RCC_OscConfig+0x65c>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd fcee 	bl	8000bec <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fd fcea 	bl	8000bec <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e063      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003226:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003232:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	4319      	orrs	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	430b      	orrs	r3, r1
 800324a:	492b      	ldr	r1, [pc, #172]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <HAL_RCC_OscConfig+0x65c>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fd fcc9 	bl	8000bec <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325e:	f7fd fcc5 	bl	8000bec <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e03e      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003270:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x5be>
 800327c:	e036      	b.n	80032ec <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <HAL_RCC_OscConfig+0x65c>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fd fcb2 	bl	8000bec <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd fcae 	bl	8000bec <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e027      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x5ec>
 80032aa:	e01f      	b.n	80032ec <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e01a      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_RCC_OscConfig+0x658>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d10d      	bne.n	80032e8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	42470060 	.word	0x42470060

08003300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e11a      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003314:	4b8f      	ldr	r3, [pc, #572]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d919      	bls.n	8003356 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <HAL_RCC_ClockConfig+0x34>
 8003328:	4b8a      	ldr	r3, [pc, #552]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a89      	ldr	r2, [pc, #548]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b87      	ldr	r3, [pc, #540]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 0201 	bic.w	r2, r3, #1
 800333c:	4985      	ldr	r1, [pc, #532]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003344:	4b83      	ldr	r3, [pc, #524]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0f9      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003362:	4b7d      	ldr	r3, [pc, #500]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	497a      	ldr	r1, [pc, #488]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 808e 	beq.w	800349e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800338a:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d121      	bne.n	80033da <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0d7      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d115      	bne.n	80033da <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0cb      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ba:	4b67      	ldr	r3, [pc, #412]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0bf      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033ca:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0b7      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b5f      	ldr	r3, [pc, #380]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	495c      	ldr	r1, [pc, #368]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ec:	f7fd fbfe 	bl	8000bec <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d112      	bne.n	8003420 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7fd fbf6 	bl	8000bec <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e09b      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b08      	cmp	r3, #8
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_ClockConfig+0xfc>
 800341e:	e03e      	b.n	800349e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d112      	bne.n	800344e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342a:	f7fd fbdf 	bl	8000bec <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e084      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	4b45      	ldr	r3, [pc, #276]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_ClockConfig+0x12a>
 800344c:	e027      	b.n	800349e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d11d      	bne.n	8003492 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fd fbc8 	bl	8000bec <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e06d      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800346e:	4b3a      	ldr	r3, [pc, #232]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b04      	cmp	r3, #4
 8003478:	d1ee      	bne.n	8003458 <HAL_RCC_ClockConfig+0x158>
 800347a:	e010      	b.n	800349e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fd fbb6 	bl	8000bec <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e05b      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003492:	4b31      	ldr	r3, [pc, #196]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ee      	bne.n	800347c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d219      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d105      	bne.n	80034be <HAL_RCC_ClockConfig+0x1be>
 80034b2:	4b28      	ldr	r3, [pc, #160]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a27      	ldr	r2, [pc, #156]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0201 	bic.w	r2, r3, #1
 80034c6:	4923      	ldr	r1, [pc, #140]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_RCC_ClockConfig+0x254>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e034      	b.n	800354a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4917      	ldr	r1, [pc, #92]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490f      	ldr	r1, [pc, #60]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f823 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_RCC_ClockConfig+0x258>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490b      	ldr	r1, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x25c>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fb08 	bl	8000b54 <HAL_InitTick>
 8003544:	4603      	mov	r3, r0
 8003546:	72fb      	strb	r3, [r7, #11]

  return status;
 8003548:	7afb      	ldrb	r3, [r7, #11]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023c00 	.word	0x40023c00
 8003558:	40023800 	.word	0x40023800
 800355c:	080096d0 	.word	0x080096d0
 8003560:	20000000 	.word	0x20000000
 8003564:	20000004 	.word	0x20000004

08003568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800356c:	b092      	sub	sp, #72	; 0x48
 800356e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003570:	4b79      	ldr	r3, [pc, #484]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d00d      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x34>
 8003580:	2b0c      	cmp	r3, #12
 8003582:	f200 80d5 	bhi.w	8003730 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003586:	2b04      	cmp	r3, #4
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x28>
 800358a:	2b08      	cmp	r3, #8
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x2e>
 800358e:	e0cf      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003590:	4b72      	ldr	r3, [pc, #456]	; (800375c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003594:	e0da      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003596:	4b71      	ldr	r3, [pc, #452]	; (800375c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003598:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800359a:	e0d7      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359e:	0c9b      	lsrs	r3, r3, #18
 80035a0:	f003 020f 	and.w	r2, r3, #15
 80035a4:	4b6e      	ldr	r3, [pc, #440]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80035a6:	5c9b      	ldrb	r3, [r3, r2]
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ac:	0d9b      	lsrs	r3, r3, #22
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	3301      	adds	r3, #1
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b6:	4b68      	ldr	r3, [pc, #416]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d05d      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2200      	movs	r2, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	4611      	mov	r1, r2
 80035ca:	4604      	mov	r4, r0
 80035cc:	460d      	mov	r5, r1
 80035ce:	4622      	mov	r2, r4
 80035d0:	462b      	mov	r3, r5
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	0159      	lsls	r1, r3, #5
 80035dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e0:	0150      	lsls	r0, r2, #5
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4621      	mov	r1, r4
 80035e8:	1a51      	subs	r1, r2, r1
 80035ea:	6139      	str	r1, [r7, #16]
 80035ec:	4629      	mov	r1, r5
 80035ee:	eb63 0301 	sbc.w	r3, r3, r1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003600:	4659      	mov	r1, fp
 8003602:	018b      	lsls	r3, r1, #6
 8003604:	4651      	mov	r1, sl
 8003606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800360a:	4651      	mov	r1, sl
 800360c:	018a      	lsls	r2, r1, #6
 800360e:	46d4      	mov	ip, sl
 8003610:	ebb2 080c 	subs.w	r8, r2, ip
 8003614:	4659      	mov	r1, fp
 8003616:	eb63 0901 	sbc.w	r9, r3, r1
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	4623      	mov	r3, r4
 8003634:	eb18 0303 	adds.w	r3, r8, r3
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	462b      	mov	r3, r5
 800363c:	eb49 0303 	adc.w	r3, r9, r3
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800364e:	4629      	mov	r1, r5
 8003650:	028b      	lsls	r3, r1, #10
 8003652:	4620      	mov	r0, r4
 8003654:	4629      	mov	r1, r5
 8003656:	4604      	mov	r4, r0
 8003658:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800365c:	4601      	mov	r1, r0
 800365e:	028a      	lsls	r2, r1, #10
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	2200      	movs	r2, #0
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
 800366a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800366c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003670:	f7fc fd8c 	bl	800018c <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4613      	mov	r3, r2
 800367a:	647b      	str	r3, [r7, #68]	; 0x44
 800367c:	e055      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	2200      	movs	r2, #0
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	627a      	str	r2, [r7, #36]	; 0x24
 8003686:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800368a:	4642      	mov	r2, r8
 800368c:	464b      	mov	r3, r9
 800368e:	f04f 0000 	mov.w	r0, #0
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	0159      	lsls	r1, r3, #5
 8003698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369c:	0150      	lsls	r0, r2, #5
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	46c4      	mov	ip, r8
 80036a4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80036a8:	4640      	mov	r0, r8
 80036aa:	4649      	mov	r1, r9
 80036ac:	468c      	mov	ip, r1
 80036ae:	eb63 0b0c 	sbc.w	fp, r3, ip
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036be:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036c2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036c6:	ebb2 040a 	subs.w	r4, r2, sl
 80036ca:	eb63 050b 	sbc.w	r5, r3, fp
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	00eb      	lsls	r3, r5, #3
 80036d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036dc:	00e2      	lsls	r2, r4, #3
 80036de:	4614      	mov	r4, r2
 80036e0:	461d      	mov	r5, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	18e3      	adds	r3, r4, r3
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	460b      	mov	r3, r1
 80036ea:	eb45 0303 	adc.w	r3, r5, r3
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036fc:	4629      	mov	r1, r5
 80036fe:	028b      	lsls	r3, r1, #10
 8003700:	4620      	mov	r0, r4
 8003702:	4629      	mov	r1, r5
 8003704:	4604      	mov	r4, r0
 8003706:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800370a:	4601      	mov	r1, r0
 800370c:	028a      	lsls	r2, r1, #10
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	2200      	movs	r2, #0
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	61fa      	str	r2, [r7, #28]
 800371a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800371e:	f7fc fd35 	bl	800018c <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4613      	mov	r3, r2
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800372a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800372e:	e00d      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0b5b      	lsrs	r3, r3, #13
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	3301      	adds	r3, #1
 8003740:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800374a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800374e:	4618      	mov	r0, r3
 8003750:	3748      	adds	r7, #72	; 0x48
 8003752:	46bd      	mov	sp, r7
 8003754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	00f42400 	.word	0x00f42400
 8003760:	080096c4 	.word	0x080096c4

08003764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <HAL_RCC_GetHCLKFreq+0x10>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000000 	.word	0x20000000

08003778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800377c:	f7ff fff2 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <HAL_RCC_GetPCLK1Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	080096e0 	.word	0x080096e0

080037a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a4:	f7ff ffde 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	0adb      	lsrs	r3, r3, #11
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	080096e0 	.word	0x080096e0

080037c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037d4:	4b29      	ldr	r3, [pc, #164]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d12c      	bne.n	800383a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e016      	b.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6253      	str	r3, [r2, #36]	; 0x24
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003810:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003818:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	4a17      	ldr	r2, [pc, #92]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003824:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800382c:	d105      	bne.n	800383a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003834:	d101      	bne.n	800383a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003836:	2301      	movs	r3, #1
 8003838:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003840:	4b10      	ldr	r3, [pc, #64]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003846:	f043 0304 	orr.w	r3, r3, #4
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 0201 	bic.w	r2, r3, #1
 8003854:	490b      	ldr	r1, [pc, #44]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	40007000 	.word	0x40007000
 8003884:	40023c00 	.word	0x40023c00

08003888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06e      	b.n	8003978 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d108      	bne.n	80038b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038aa:	d009      	beq.n	80038c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
 80038b2:	e005      	b.n	80038c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd f806 	bl	80008ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	ea42 0103 	orr.w	r1, r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	0c1a      	lsrs	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f002 0204 	and.w	r2, r2, #4
 8003966:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_SPI_Transmit+0x22>
 800399e:	2302      	movs	r3, #2
 80039a0:	e126      	b.n	8003bf0 <HAL_SPI_Transmit+0x270>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039aa:	f7fd f91f 	bl	8000bec <HAL_GetTick>
 80039ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d002      	beq.n	80039c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
 80039c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039c4:	e10b      	b.n	8003bde <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_SPI_Transmit+0x52>
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039d6:	e102      	b.n	8003bde <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2203      	movs	r2, #3
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	88fa      	ldrh	r2, [r7, #6]
 80039f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1e:	d10f      	bne.n	8003a40 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d007      	beq.n	8003a5e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a66:	d14b      	bne.n	8003b00 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_SPI_Transmit+0xf6>
 8003a70:	8afb      	ldrh	r3, [r7, #22]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d13e      	bne.n	8003af4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a9a:	e02b      	b.n	8003af4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d112      	bne.n	8003ad0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	1c9a      	adds	r2, r3, #2
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ace:	e011      	b.n	8003af4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad0:	f7fd f88c 	bl	8000bec <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d803      	bhi.n	8003ae8 <HAL_SPI_Transmit+0x168>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d102      	bne.n	8003aee <HAL_SPI_Transmit+0x16e>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d102      	bne.n	8003af4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003af2:	e074      	b.n	8003bde <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ce      	bne.n	8003a9c <HAL_SPI_Transmit+0x11c>
 8003afe:	e04c      	b.n	8003b9a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_SPI_Transmit+0x18e>
 8003b08:	8afb      	ldrh	r3, [r7, #22]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d140      	bne.n	8003b90 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	7812      	ldrb	r2, [r2, #0]
 8003b1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b34:	e02c      	b.n	8003b90 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d113      	bne.n	8003b6c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	7812      	ldrb	r2, [r2, #0]
 8003b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b6a:	e011      	b.n	8003b90 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b6c:	f7fd f83e 	bl	8000bec <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d803      	bhi.n	8003b84 <HAL_SPI_Transmit+0x204>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d102      	bne.n	8003b8a <HAL_SPI_Transmit+0x20a>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b8e:	e026      	b.n	8003bde <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1cd      	bne.n	8003b36 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f8b2 	bl	8003d08 <SPI_EndRxTxTransaction>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e000      	b.n	8003bde <HAL_SPI_Transmit+0x25e>
  }

error:
 8003bdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bee:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c08:	f7fc fff0 	bl	8000bec <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	4413      	add	r3, r2
 8003c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c18:	f7fc ffe8 	bl	8000bec <HAL_GetTick>
 8003c1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c1e:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	015b      	lsls	r3, r3, #5
 8003c24:	0d1b      	lsrs	r3, r3, #20
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c2e:	e054      	b.n	8003cda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d050      	beq.n	8003cda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c38:	f7fc ffd8 	bl	8000bec <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d902      	bls.n	8003c4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d13d      	bne.n	8003cca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c66:	d111      	bne.n	8003c8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c70:	d004      	beq.n	8003c7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7a:	d107      	bne.n	8003c8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c94:	d10f      	bne.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e017      	b.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d19b      	bne.n	8003c30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000000 	.word	0x20000000

08003d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <SPI_EndRxTxTransaction+0x7c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <SPI_EndRxTxTransaction+0x80>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	0d5b      	lsrs	r3, r3, #21
 8003d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d32:	d112      	bne.n	8003d5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2180      	movs	r1, #128	; 0x80
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff ff5a 	bl	8003bf8 <SPI_WaitFlagStateUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e00f      	b.n	8003d7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d0f2      	beq.n	8003d5a <SPI_EndRxTxTransaction+0x52>
 8003d74:	e000      	b.n	8003d78 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d76:	bf00      	nop
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000000 	.word	0x20000000
 8003d88:	165e9f81 	.word	0x165e9f81

08003d8c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e047      	b.n	8003e2e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fc fdde 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2224      	movs	r2, #36	; 0x24
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f831 	bl	8003e38 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003df4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0208 	orr.w	r2, r2, #8
 8003e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e78:	f023 030c 	bic.w	r3, r3, #12
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	430b      	orrs	r3, r1
 8003e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a55      	ldr	r2, [pc, #340]	; (8003ff8 <UART_SetConfig+0x1c0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d103      	bne.n	8003eae <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ea6:	f7ff fc7b 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	e002      	b.n	8003eb4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eae:	f7ff fc63 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8003eb2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebc:	d14c      	bne.n	8003f58 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	4a49      	ldr	r2, [pc, #292]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	0119      	lsls	r1, r3, #4
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef4:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2064      	movs	r0, #100	; 0x64
 8003efe:	fb00 f303 	mul.w	r3, r0, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	3332      	adds	r3, #50	; 0x32
 8003f08:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f16:	4419      	add	r1, r3
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009a      	lsls	r2, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2e:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003f30:	fba3 0302 	umull	r0, r3, r3, r2
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	2064      	movs	r0, #100	; 0x64
 8003f38:	fb00 f303 	mul.w	r3, r0, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	3332      	adds	r3, #50	; 0x32
 8003f42:	4a2e      	ldr	r2, [pc, #184]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	f003 0207 	and.w	r2, r3, #7
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	440a      	add	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f56:	e04a      	b.n	8003fee <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009a      	lsls	r2, r3, #2
 8003f62:	441a      	add	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	0119      	lsls	r1, r3, #4
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009a      	lsls	r2, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003f90:	fba3 0302 	umull	r0, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2064      	movs	r0, #100	; 0x64
 8003f98:	fb00 f303 	mul.w	r3, r0, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fae:	4419      	add	r1, r3
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009a      	lsls	r2, r3, #2
 8003fba:	441a      	add	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003fc8:	fba3 0302 	umull	r0, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	2064      	movs	r0, #100	; 0x64
 8003fd0:	fb00 f303 	mul.w	r3, r0, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	3332      	adds	r3, #50	; 0x32
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <UART_SetConfig+0x1c4>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	440a      	add	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40013800 	.word	0x40013800
 8003ffc:	51eb851f 	.word	0x51eb851f

08004000 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004010:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004014:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004034:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004038:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	b29b      	uxth	r3, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	b29b      	uxth	r3, r3
 800404a:	4013      	ands	r3, r2
 800404c:	b29a      	uxth	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004060:	b084      	sub	sp, #16
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	f107 0014 	add.w	r0, r7, #20
 800406e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	b004      	add	sp, #16
 800409e:	4770      	bx	lr

080040a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b09b      	sub	sp, #108	; 0x6c
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	78db      	ldrb	r3, [r3, #3]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d81f      	bhi.n	8004112 <USB_ActivateEndpoint+0x72>
 80040d2:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <USB_ActivateEndpoint+0x38>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	08004105 	.word	0x08004105
 80040e0:	0800411b 	.word	0x0800411b
 80040e4:	080040f7 	.word	0x080040f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80040f4:	e012      	b.n	800411c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004102:	e00b      	b.n	800411c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004104:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004110:	e004      	b.n	800411c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004118:	e000      	b.n	800411c <USB_ActivateEndpoint+0x7c>
      break;
 800411a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800412a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413a:	b29b      	uxth	r3, r3
 800413c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	b29a      	uxth	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	4313      	orrs	r3, r2
 800415e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004180:	b29b      	uxth	r3, r3
 8004182:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	7b1b      	ldrb	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f040 8149 	bne.w	8004420 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8084 	beq.w	80042a0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4413      	add	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	011a      	lsls	r2, r3, #4
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	88db      	ldrh	r3, [r3, #6]
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	81fb      	strh	r3, [r7, #14]
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <USB_ActivateEndpoint+0x17c>
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	81bb      	strh	r3, [r7, #12]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	89bb      	ldrh	r3, [r7, #12]
 8004208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004218:	b29b      	uxth	r3, r3
 800421a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	78db      	ldrb	r3, [r3, #3]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d020      	beq.n	8004266 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423a:	813b      	strh	r3, [r7, #8]
 800423c:	893b      	ldrh	r3, [r7, #8]
 800423e:	f083 0320 	eor.w	r3, r3, #32
 8004242:	813b      	strh	r3, [r7, #8]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	893b      	ldrh	r3, [r7, #8]
 8004250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004260:	b29b      	uxth	r3, r3
 8004262:	8013      	strh	r3, [r2, #0]
 8004264:	e27f      	b.n	8004766 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	441a      	add	r2, r3
 8004288:	897b      	ldrh	r3, [r7, #10]
 800428a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	b29b      	uxth	r3, r3
 800429c:	8013      	strh	r3, [r2, #0]
 800429e:	e262      	b.n	8004766 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	4413      	add	r3, r2
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	011a      	lsls	r2, r3, #4
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	88db      	ldrh	r3, [r3, #6]
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042de:	b29b      	uxth	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	4413      	add	r3, r2
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	011a      	lsls	r2, r3, #4
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	4413      	add	r3, r2
 80042f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d112      	bne.n	8004326 <USB_ActivateEndpoint+0x286>
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800430a:	b29a      	uxth	r2, r3
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	801a      	strh	r2, [r3, #0]
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800431a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800431e:	b29a      	uxth	r2, r3
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	801a      	strh	r2, [r3, #0]
 8004324:	e02f      	b.n	8004386 <USB_ActivateEndpoint+0x2e6>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b3e      	cmp	r3, #62	; 0x3e
 800432c:	d813      	bhi.n	8004356 <USB_ActivateEndpoint+0x2b6>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	663b      	str	r3, [r7, #96]	; 0x60
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <USB_ActivateEndpoint+0x2a8>
 8004342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004344:	3301      	adds	r3, #1
 8004346:	663b      	str	r3, [r7, #96]	; 0x60
 8004348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800434a:	b29b      	uxth	r3, r3
 800434c:	029b      	lsls	r3, r3, #10
 800434e:	b29a      	uxth	r2, r3
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	e017      	b.n	8004386 <USB_ActivateEndpoint+0x2e6>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	663b      	str	r3, [r7, #96]	; 0x60
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <USB_ActivateEndpoint+0x2d0>
 800436a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436c:	3b01      	subs	r3, #1
 800436e:	663b      	str	r3, [r7, #96]	; 0x60
 8004370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004372:	b29b      	uxth	r3, r3
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	b29b      	uxth	r3, r3
 8004378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004380:	b29a      	uxth	r2, r3
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	83fb      	strh	r3, [r7, #30]
 8004394:	8bfb      	ldrh	r3, [r7, #30]
 8004396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01b      	beq.n	80043d6 <USB_ActivateEndpoint+0x336>
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	83bb      	strh	r3, [r7, #28]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	8bbb      	ldrh	r3, [r7, #28]
 80043c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	837b      	strh	r3, [r7, #26]
 80043ee:	8b7b      	ldrh	r3, [r7, #26]
 80043f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043f4:	837b      	strh	r3, [r7, #26]
 80043f6:	8b7b      	ldrh	r3, [r7, #26]
 80043f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043fc:	837b      	strh	r3, [r7, #26]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	8b7b      	ldrh	r3, [r7, #26]
 800440a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]
 800441e:	e1a2      	b.n	8004766 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	441a      	add	r2, r3
 8004444:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004450:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004458:	b29b      	uxth	r3, r3
 800445a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004466:	b29b      	uxth	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800446c:	4413      	add	r3, r2
 800446e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	011a      	lsls	r2, r3, #4
 8004476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004478:	4413      	add	r3, r2
 800447a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800447e:	657b      	str	r3, [r7, #84]	; 0x54
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	891b      	ldrh	r3, [r3, #8]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	653b      	str	r3, [r7, #80]	; 0x50
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449a:	b29b      	uxth	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a0:	4413      	add	r3, r2
 80044a2:	653b      	str	r3, [r7, #80]	; 0x50
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	011a      	lsls	r2, r3, #4
 80044aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	895b      	ldrh	r3, [r3, #10]
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	785b      	ldrb	r3, [r3, #1]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 8091 	bne.w	80045f0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80044dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80044de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01b      	beq.n	800451e <USB_ActivateEndpoint+0x47e>
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	873b      	strh	r3, [r7, #56]	; 0x38
 800452c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01b      	beq.n	800456e <USB_ActivateEndpoint+0x4ce>
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	441a      	add	r2, r3
 8004558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800455a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004566:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800456a:	b29b      	uxth	r3, r3
 800456c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004584:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004586:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004588:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800458c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800458e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004590:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004594:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]
 80045ee:	e0ba      	b.n	8004766 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004600:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01d      	beq.n	8004648 <USB_ActivateEndpoint+0x5a8>
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	441a      	add	r2, r3
 8004630:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004658:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01d      	beq.n	80046a0 <USB_ActivateEndpoint+0x600>
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800468c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004698:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800469c:	b29b      	uxth	r3, r3
 800469e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	78db      	ldrb	r3, [r3, #3]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d024      	beq.n	80046f2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80046c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046c6:	f083 0320 	eor.w	r3, r3, #32
 80046ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]
 80046f0:	e01d      	b.n	800472e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004708:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	b29b      	uxth	r3, r3
 8004764:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004766:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800476a:	4618      	mov	r0, r3
 800476c:	376c      	adds	r7, #108	; 0x6c
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004774:	b480      	push	{r7}
 8004776:	b08d      	sub	sp, #52	; 0x34
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	7b1b      	ldrb	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 808e 	bne.w	80048a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d044      	beq.n	800481a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	81bb      	strh	r3, [r7, #12]
 800479e:	89bb      	ldrh	r3, [r7, #12]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01b      	beq.n	80047e0 <USB_DeactivateEndpoint+0x6c>
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	817b      	strh	r3, [r7, #10]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	897b      	ldrh	r3, [r7, #10]
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f6:	813b      	strh	r3, [r7, #8]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	441a      	add	r2, r3
 8004802:	893b      	ldrh	r3, [r7, #8]
 8004804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004814:	b29b      	uxth	r3, r3
 8004816:	8013      	strh	r3, [r2, #0]
 8004818:	e192      	b.n	8004b40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	827b      	strh	r3, [r7, #18]
 8004828:	8a7b      	ldrh	r3, [r7, #18]
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01b      	beq.n	800486a <USB_DeactivateEndpoint+0xf6>
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004848:	823b      	strh	r3, [r7, #16]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	8a3b      	ldrh	r3, [r7, #16]
 8004856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	81fb      	strh	r3, [r7, #14]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	89fb      	ldrh	r3, [r7, #14]
 800488e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489e:	b29b      	uxth	r3, r3
 80048a0:	8013      	strh	r3, [r2, #0]
 80048a2:	e14d      	b.n	8004b40 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f040 80a5 	bne.w	80049f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	843b      	strh	r3, [r7, #32]
 80048bc:	8c3b      	ldrh	r3, [r7, #32]
 80048be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01b      	beq.n	80048fe <USB_DeactivateEndpoint+0x18a>
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	83fb      	strh	r3, [r7, #30]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	8bfb      	ldrh	r3, [r7, #30]
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	83bb      	strh	r3, [r7, #28]
 800490c:	8bbb      	ldrh	r3, [r7, #28]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01b      	beq.n	800494e <USB_DeactivateEndpoint+0x1da>
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492c:	837b      	strh	r3, [r7, #26]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	8b7b      	ldrh	r3, [r7, #26]
 800493a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800493e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004946:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800494a:	b29b      	uxth	r3, r3
 800494c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004964:	833b      	strh	r3, [r7, #24]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	8b3b      	ldrh	r3, [r7, #24]
 8004972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004982:	b29b      	uxth	r3, r3
 8004984:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	82fb      	strh	r3, [r7, #22]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8afb      	ldrh	r3, [r7, #22]
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d4:	82bb      	strh	r3, [r7, #20]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	8abb      	ldrh	r3, [r7, #20]
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
 80049f6:	e0a3      	b.n	8004b40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <USB_DeactivateEndpoint+0x2d4>
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004a56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <USB_DeactivateEndpoint+0x324>
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3734      	adds	r7, #52	; 0x34
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b0cc      	sub	sp, #304	; 0x130
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b5a:	6018      	str	r0, [r3, #0]
 8004b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b64:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	f041 817d 	bne.w	8005e72 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d908      	bls.n	8004ba6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ba4:	e007      	b.n	8004bb6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	7b1b      	ldrb	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d152      	bne.n	8004c6c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6959      	ldr	r1, [r3, #20]
 8004bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	88da      	ldrh	r2, [r3, #6]
 8004bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004be8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f001 ff0e 	bl	8006a0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bfe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004c20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c24:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	011a      	lsls	r2, r3, #4
 8004c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c40:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4413      	add	r3, r2
 8004c48:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	f001 b8b5 	b.w	8005dd6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	78db      	ldrb	r3, [r3, #3]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	f040 84c6 	bne.w	800560a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	f240 8443 	bls.w	8005522 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	441a      	add	r2, r3
 8004ce0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a1a      	ldr	r2, [r3, #32]
 8004d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d08:	1ad2      	subs	r2, r2, r3
 8004d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 823e 	beq.w	80051ba <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d4a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 809a 	bne.w	8004e98 <USB_EPStartXfer+0x34c>
 8004d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d96:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	011a      	lsls	r2, r3, #4
 8004dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d122      	bne.n	8004e16 <USB_EPStartXfer+0x2ca>
 8004dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	801a      	strh	r2, [r3, #0]
 8004e14:	e079      	b.n	8004f0a <USB_EPStartXfer+0x3be>
 8004e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e1c:	d81b      	bhi.n	8004e56 <USB_EPStartXfer+0x30a>
 8004e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <USB_EPStartXfer+0x2f2>
 8004e34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	029b      	lsls	r3, r3, #10
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e059      	b.n	8004f0a <USB_EPStartXfer+0x3be>
 8004e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <USB_EPStartXfer+0x32a>
 8004e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e70:	3b01      	subs	r3, #1
 8004e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	801a      	strh	r2, [r3, #0]
 8004e96:	e038      	b.n	8004f0a <USB_EPStartXfer+0x3be>
 8004e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	785b      	ldrb	r3, [r3, #1]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d130      	bne.n	8004f0a <USB_EPStartXfer+0x3be>
 8004ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ec2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ec6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	440a      	add	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	011a      	lsls	r2, r3, #4
 8004ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	895b      	ldrh	r3, [r3, #10]
 8004f16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6959      	ldr	r1, [r3, #20]
 8004f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f30:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f34:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f38:	6800      	ldr	r0, [r0, #0]
 8004f3a:	f001 fd68 	bl	8006a0e <USB_WritePMA>
            ep->xfer_buff += len;
 8004f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4e:	441a      	add	r2, r3
 8004f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a1a      	ldr	r2, [r3, #32]
 8004f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d90f      	bls.n	8004f98 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f88:	1ad2      	subs	r2, r2, r3
 8004f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	621a      	str	r2, [r3, #32]
 8004f96:	e00e      	b.n	8004fb6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 809a 	bne.w	80050fc <USB_EPStartXfer+0x5b0>
 8004fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fcc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fd4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ff6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ffa:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	440a      	add	r2, r1
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	011a      	lsls	r2, r3, #4
 8005012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005016:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4413      	add	r3, r2
 800501e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005026:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d122      	bne.n	800507a <USB_EPStartXfer+0x52e>
 8005034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005038:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005046:	b29a      	uxth	r2, r3
 8005048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506a:	b29a      	uxth	r2, r3
 800506c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005070:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	e083      	b.n	8005182 <USB_EPStartXfer+0x636>
 800507a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507e:	2b3e      	cmp	r3, #62	; 0x3e
 8005080:	d81b      	bhi.n	80050ba <USB_EPStartXfer+0x56e>
 8005082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800508c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <USB_EPStartXfer+0x556>
 8005098:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800509c:	3301      	adds	r3, #1
 800509e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	029b      	lsls	r3, r3, #10
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e063      	b.n	8005182 <USB_EPStartXfer+0x636>
 80050ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <USB_EPStartXfer+0x58e>
 80050d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050d4:	3b01      	subs	r3, #1
 80050d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050de:	b29b      	uxth	r3, r3
 80050e0:	029b      	lsls	r3, r3, #10
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	e042      	b.n	8005182 <USB_EPStartXfer+0x636>
 80050fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	785b      	ldrb	r3, [r3, #1]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d13a      	bne.n	8005182 <USB_EPStartXfer+0x636>
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005114:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005118:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800513a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800513e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	440a      	add	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	011a      	lsls	r2, r3, #4
 8005156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4413      	add	r3, r2
 8005162:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005174:	b29a      	uxth	r2, r3
 8005176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	891b      	ldrh	r3, [r3, #8]
 800518e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6959      	ldr	r1, [r3, #20]
 800519e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	f001 fc2c 	bl	8006a0e <USB_WritePMA>
 80051b6:	f000 be0e 	b.w	8005dd6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d16d      	bne.n	80052a6 <USB_EPStartXfer+0x75a>
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ea:	4413      	add	r3, r2
 80051ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	011a      	lsls	r2, r3, #4
 80051fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fe:	4413      	add	r3, r2
 8005200:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005204:	647b      	str	r3, [r7, #68]	; 0x44
 8005206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d112      	bne.n	8005234 <USB_EPStartXfer+0x6e8>
 800520e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005218:	b29a      	uxth	r2, r3
 800521a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522c:	b29a      	uxth	r2, r3
 800522e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e063      	b.n	80052fc <USB_EPStartXfer+0x7b0>
 8005234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005238:	2b3e      	cmp	r3, #62	; 0x3e
 800523a:	d817      	bhi.n	800526c <USB_EPStartXfer+0x720>
 800523c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <USB_EPStartXfer+0x710>
 8005252:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005256:	3301      	adds	r3, #1
 8005258:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800525c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005260:	b29b      	uxth	r3, r3
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	b29a      	uxth	r2, r3
 8005266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e047      	b.n	80052fc <USB_EPStartXfer+0x7b0>
 800526c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <USB_EPStartXfer+0x740>
 8005282:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005286:	3b01      	subs	r3, #1
 8005288:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800528c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005290:	b29b      	uxth	r3, r3
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	b29b      	uxth	r3, r3
 8005296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e02a      	b.n	80052fc <USB_EPStartXfer+0x7b0>
 80052a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	785b      	ldrb	r3, [r3, #1]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d122      	bne.n	80052fc <USB_EPStartXfer+0x7b0>
 80052b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	653b      	str	r3, [r7, #80]	; 0x50
 80052c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d6:	4413      	add	r3, r2
 80052d8:	653b      	str	r3, [r7, #80]	; 0x50
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	011a      	lsls	r2, r3, #4
 80052e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ea:	4413      	add	r3, r2
 80052ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	891b      	ldrh	r3, [r3, #8]
 8005308:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800530c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6959      	ldr	r1, [r3, #20]
 8005318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531c:	b29b      	uxth	r3, r3
 800531e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005322:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005326:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800532a:	6800      	ldr	r0, [r0, #0]
 800532c:	f001 fb6f 	bl	8006a0e <USB_WritePMA>
            ep->xfer_buff += len;
 8005330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005340:	441a      	add	r2, r3
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800534e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a1a      	ldr	r2, [r3, #32]
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	429a      	cmp	r2, r3
 8005368:	d90f      	bls.n	800538a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6a1a      	ldr	r2, [r3, #32]
 8005376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537a:	1ad2      	subs	r2, r2, r3
 800537c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	621a      	str	r2, [r3, #32]
 8005388:	e00e      	b.n	80053a8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800539a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2200      	movs	r2, #0
 80053a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	643b      	str	r3, [r7, #64]	; 0x40
 80053b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d16d      	bne.n	80054a0 <USB_EPStartXfer+0x954>
 80053c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053de:	b29b      	uxth	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	4413      	add	r3, r2
 80053e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	011a      	lsls	r2, r3, #4
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	4413      	add	r3, r2
 80053fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d112      	bne.n	800542e <USB_EPStartXfer+0x8e2>
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005412:	b29a      	uxth	r2, r3
 8005414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005416:	801a      	strh	r2, [r3, #0]
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005426:	b29a      	uxth	r2, r3
 8005428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e05d      	b.n	80054ea <USB_EPStartXfer+0x99e>
 800542e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005432:	2b3e      	cmp	r3, #62	; 0x3e
 8005434:	d817      	bhi.n	8005466 <USB_EPStartXfer+0x91a>
 8005436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d004      	beq.n	8005456 <USB_EPStartXfer+0x90a>
 800544c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005450:	3301      	adds	r3, #1
 8005452:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005456:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800545a:	b29b      	uxth	r3, r3
 800545c:	029b      	lsls	r3, r3, #10
 800545e:	b29a      	uxth	r2, r3
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	e041      	b.n	80054ea <USB_EPStartXfer+0x99e>
 8005466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	2b00      	cmp	r3, #0
 800547a:	d104      	bne.n	8005486 <USB_EPStartXfer+0x93a>
 800547c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005480:	3b01      	subs	r3, #1
 8005482:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005486:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800548a:	b29b      	uxth	r3, r3
 800548c:	029b      	lsls	r3, r3, #10
 800548e:	b29b      	uxth	r3, r3
 8005490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005498:	b29a      	uxth	r2, r3
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	e024      	b.n	80054ea <USB_EPStartXfer+0x99e>
 80054a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d11c      	bne.n	80054ea <USB_EPStartXfer+0x99e>
 80054b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	4413      	add	r3, r2
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
 80054c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	011a      	lsls	r2, r3, #4
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	4413      	add	r3, r2
 80054da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	895b      	ldrh	r3, [r3, #10]
 80054f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6959      	ldr	r1, [r3, #20]
 8005506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550a:	b29b      	uxth	r3, r3
 800550c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005510:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005514:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005518:	6800      	ldr	r0, [r0, #0]
 800551a:	f001 fa78 	bl	8006a0e <USB_WritePMA>
 800551e:	f000 bc5a 	b.w	8005dd6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800555c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800557a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558a:	b29b      	uxth	r3, r3
 800558c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800559a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ae:	4413      	add	r3, r2
 80055b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	011a      	lsls	r2, r3, #4
 80055c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055c2:	4413      	add	r3, r2
 80055c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	891b      	ldrh	r3, [r3, #8]
 80055e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6959      	ldr	r1, [r3, #20]
 80055f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055fa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055fe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005602:	6800      	ldr	r0, [r0, #0]
 8005604:	f001 fa03 	bl	8006a0e <USB_WritePMA>
 8005608:	e3e5      	b.n	8005dd6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800565e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005662:	b29b      	uxth	r3, r3
 8005664:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005676:	1ad2      	subs	r2, r2, r3
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 81bc 	beq.w	8005a24 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d16d      	bne.n	80057a6 <USB_EPStartXfer+0xc5a>
 80056ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ea:	4413      	add	r3, r2
 80056ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	011a      	lsls	r2, r3, #4
 80056fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056fe:	4413      	add	r3, r2
 8005700:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005704:	677b      	str	r3, [r7, #116]	; 0x74
 8005706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d112      	bne.n	8005734 <USB_EPStartXfer+0xbe8>
 800570e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005718:	b29a      	uxth	r2, r3
 800571a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572c:	b29a      	uxth	r2, r3
 800572e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e060      	b.n	80057f6 <USB_EPStartXfer+0xcaa>
 8005734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005738:	2b3e      	cmp	r3, #62	; 0x3e
 800573a:	d817      	bhi.n	800576c <USB_EPStartXfer+0xc20>
 800573c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <USB_EPStartXfer+0xc10>
 8005752:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005756:	3301      	adds	r3, #1
 8005758:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800575c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29a      	uxth	r2, r3
 8005766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005768:	801a      	strh	r2, [r3, #0]
 800576a:	e044      	b.n	80057f6 <USB_EPStartXfer+0xcaa>
 800576c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <USB_EPStartXfer+0xc40>
 8005782:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005786:	3b01      	subs	r3, #1
 8005788:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800578c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005790:	b29b      	uxth	r3, r3
 8005792:	029b      	lsls	r3, r3, #10
 8005794:	b29b      	uxth	r3, r3
 8005796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a2:	801a      	strh	r2, [r3, #0]
 80057a4:	e027      	b.n	80057f6 <USB_EPStartXfer+0xcaa>
 80057a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d11f      	bne.n	80057f6 <USB_EPStartXfer+0xcaa>
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057cc:	4413      	add	r3, r2
 80057ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	011a      	lsls	r2, r3, #4
 80057e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057e4:	4413      	add	r3, r2
 80057e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80057f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	895b      	ldrh	r3, [r3, #10]
 8005802:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6959      	ldr	r1, [r3, #20]
 8005812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005816:	b29b      	uxth	r3, r3
 8005818:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800581c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005820:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005824:	6800      	ldr	r0, [r0, #0]
 8005826:	f001 f8f2 	bl	8006a0e <USB_WritePMA>
          ep->xfer_buff += len;
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695a      	ldr	r2, [r3, #20]
 8005836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583a:	441a      	add	r2, r3
 800583c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d90f      	bls.n	8005884 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005874:	1ad2      	subs	r2, r2, r3
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	621a      	str	r2, [r3, #32]
 8005882:	e00e      	b.n	80058a2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80058a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8295 	beq.w	8005dd6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d16d      	bne.n	8005998 <USB_EPStartXfer+0xe4c>
 80058bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058dc:	4413      	add	r3, r2
 80058de:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	011a      	lsls	r2, r3, #4
 80058ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058f0:	4413      	add	r3, r2
 80058f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058f6:	667b      	str	r3, [r7, #100]	; 0x64
 80058f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d112      	bne.n	8005926 <USB_EPStartXfer+0xdda>
 8005900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800590a:	b29a      	uxth	r2, r3
 800590c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591e:	b29a      	uxth	r2, r3
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e063      	b.n	80059ee <USB_EPStartXfer+0xea2>
 8005926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592a:	2b3e      	cmp	r3, #62	; 0x3e
 800592c:	d817      	bhi.n	800595e <USB_EPStartXfer+0xe12>
 800592e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <USB_EPStartXfer+0xe02>
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005948:	3301      	adds	r3, #1
 800594a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005952:	b29b      	uxth	r3, r3
 8005954:	029b      	lsls	r3, r3, #10
 8005956:	b29a      	uxth	r2, r3
 8005958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	e047      	b.n	80059ee <USB_EPStartXfer+0xea2>
 800595e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <USB_EPStartXfer+0xe32>
 8005974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005978:	3b01      	subs	r3, #1
 800597a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005982:	b29b      	uxth	r3, r3
 8005984:	029b      	lsls	r3, r3, #10
 8005986:	b29b      	uxth	r3, r3
 8005988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005990:	b29a      	uxth	r2, r3
 8005992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	e02a      	b.n	80059ee <USB_EPStartXfer+0xea2>
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d122      	bne.n	80059ee <USB_EPStartXfer+0xea2>
 80059a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	673b      	str	r3, [r7, #112]	; 0x70
 80059b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059c8:	4413      	add	r3, r2
 80059ca:	673b      	str	r3, [r7, #112]	; 0x70
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	011a      	lsls	r2, r3, #4
 80059da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059dc:	4413      	add	r3, r2
 80059de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	891b      	ldrh	r3, [r3, #8]
 80059fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6959      	ldr	r1, [r3, #20]
 8005a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a1c:	6800      	ldr	r0, [r0, #0]
 8005a1e:	f000 fff6 	bl	8006a0e <USB_WritePMA>
 8005a22:	e1d8      	b.n	8005dd6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d178      	bne.n	8005b26 <USB_EPStartXfer+0xfda>
 8005a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a58:	4413      	add	r3, r2
 8005a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	011a      	lsls	r2, r3, #4
 8005a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d116      	bne.n	8005ab0 <USB_EPStartXfer+0xf64>
 8005a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e06b      	b.n	8005b88 <USB_EPStartXfer+0x103c>
 8005ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab6:	d818      	bhi.n	8005aea <USB_EPStartXfer+0xf9e>
 8005ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <USB_EPStartXfer+0xf8c>
 8005ace:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ad8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	029b      	lsls	r3, r3, #10
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	e04e      	b.n	8005b88 <USB_EPStartXfer+0x103c>
 8005aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d104      	bne.n	8005b0a <USB_EPStartXfer+0xfbe>
 8005b00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b04:	3b01      	subs	r3, #1
 8005b06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e030      	b.n	8005b88 <USB_EPStartXfer+0x103c>
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d128      	bne.n	8005b88 <USB_EPStartXfer+0x103c>
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	011a      	lsls	r2, r3, #4
 8005b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b72:	4413      	add	r3, r2
 8005b74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	891b      	ldrh	r3, [r3, #8]
 8005b94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6959      	ldr	r1, [r3, #20]
 8005ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005bb2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bb6:	6800      	ldr	r0, [r0, #0]
 8005bb8:	f000 ff29 	bl	8006a0e <USB_WritePMA>
          ep->xfer_buff += len;
 8005bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bcc:	441a      	add	r2, r3
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d90f      	bls.n	8005c16 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a1a      	ldr	r2, [r3, #32]
 8005c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c06:	1ad2      	subs	r2, r2, r3
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	621a      	str	r2, [r3, #32]
 8005c14:	e00e      	b.n	8005c34 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2200      	movs	r2, #0
 8005c32:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80cc 	beq.w	8005dd6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d178      	bne.n	8005d4e <USB_EPStartXfer+0x1202>
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c80:	4413      	add	r3, r2
 8005c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	011a      	lsls	r2, r3, #4
 8005c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d116      	bne.n	8005cd8 <USB_EPStartXfer+0x118c>
 8005caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e064      	b.n	8005da2 <USB_EPStartXfer+0x1256>
 8005cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cde:	d818      	bhi.n	8005d12 <USB_EPStartXfer+0x11c6>
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <USB_EPStartXfer+0x11b4>
 8005cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e047      	b.n	8005da2 <USB_EPStartXfer+0x1256>
 8005d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <USB_EPStartXfer+0x11e6>
 8005d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e029      	b.n	8005da2 <USB_EPStartXfer+0x1256>
 8005d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d121      	bne.n	8005da2 <USB_EPStartXfer+0x1256>
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d74:	4413      	add	r3, r2
 8005d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	011a      	lsls	r2, r3, #4
 8005d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005da0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	895b      	ldrh	r3, [r3, #10]
 8005dae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6959      	ldr	r1, [r3, #20]
 8005dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dc8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005dcc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005dd0:	6800      	ldr	r0, [r0, #0]
 8005dd2:	f000 fe1c 	bl	8006a0e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005df8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e04:	8013      	strh	r3, [r2, #0]
 8005e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005e0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e12:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005e16:	8812      	ldrh	r2, [r2, #0]
 8005e18:	f082 0210 	eor.w	r2, r2, #16
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e22:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005e26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e2a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005e2e:	8812      	ldrh	r2, [r2, #0]
 8005e30:	f082 0220 	eor.w	r2, r2, #32
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e54:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]
 8005e6e:	f000 bc9f 	b.w	80067b0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	7b1b      	ldrb	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f040 80ae 	bne.w	8005fe0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d917      	bls.n	8005ed0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec0:	1ad2      	subs	r2, r2, r3
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	619a      	str	r2, [r3, #24]
 8005ece:	e00e      	b.n	8005eee <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f12:	4413      	add	r3, r2
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	011a      	lsls	r2, r3, #4
 8005f26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d116      	bne.n	8005f6a <USB_EPStartXfer+0x141e>
 8005f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e3e8      	b.n	800673c <USB_EPStartXfer+0x1bf0>
 8005f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f70:	d818      	bhi.n	8005fa4 <USB_EPStartXfer+0x1458>
 8005f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <USB_EPStartXfer+0x1446>
 8005f88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	e3cb      	b.n	800673c <USB_EPStartXfer+0x1bf0>
 8005fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <USB_EPStartXfer+0x1478>
 8005fba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005fc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	029b      	lsls	r3, r3, #10
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	e3ad      	b.n	800673c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	78db      	ldrb	r3, [r3, #3]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	f040 8200 	bne.w	80063f2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f040 8091 	bne.w	8006126 <USB_EPStartXfer+0x15da>
 8006004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006028:	4413      	add	r3, r2
 800602a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	011a      	lsls	r2, r3, #4
 800603c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006040:	4413      	add	r3, r2
 8006042:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800604a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d116      	bne.n	8006088 <USB_EPStartXfer+0x153c>
 800605a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006066:	b29a      	uxth	r2, r3
 8006068:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607e:	b29a      	uxth	r2, r3
 8006080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e083      	b.n	8006190 <USB_EPStartXfer+0x1644>
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b3e      	cmp	r3, #62	; 0x3e
 8006096:	d820      	bhi.n	80060da <USB_EPStartXfer+0x158e>
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <USB_EPStartXfer+0x157c>
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	3301      	adds	r3, #1
 80060c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	029b      	lsls	r3, r3, #10
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e05a      	b.n	8006190 <USB_EPStartXfer+0x1644>
 80060da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 031f 	and.w	r3, r3, #31
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <USB_EPStartXfer+0x15be>
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006104:	3b01      	subs	r3, #1
 8006106:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800610a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610e:	b29b      	uxth	r3, r3
 8006110:	029b      	lsls	r3, r3, #10
 8006112:	b29b      	uxth	r3, r3
 8006114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e034      	b.n	8006190 <USB_EPStartXfer+0x1644>
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d12c      	bne.n	8006190 <USB_EPStartXfer+0x1644>
 8006136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006152:	b29b      	uxth	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800615a:	4413      	add	r3, r2
 800615c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	011a      	lsls	r2, r3, #4
 800616e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006172:	4413      	add	r3, r2
 8006174:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 8091 	bne.w	80062d2 <USB_EPStartXfer+0x1786>
 80061b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061d4:	4413      	add	r3, r2
 80061d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	011a      	lsls	r2, r3, #4
 80061e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d116      	bne.n	8006234 <USB_EPStartXfer+0x16e8>
 8006206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e07c      	b.n	800632e <USB_EPStartXfer+0x17e2>
 8006234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b3e      	cmp	r3, #62	; 0x3e
 8006242:	d820      	bhi.n	8006286 <USB_EPStartXfer+0x173a>
 8006244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <USB_EPStartXfer+0x1728>
 800626a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800626e:	3301      	adds	r3, #1
 8006270:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006274:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006278:	b29b      	uxth	r3, r3
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	e053      	b.n	800632e <USB_EPStartXfer+0x17e2>
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <USB_EPStartXfer+0x176a>
 80062ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062b0:	3b01      	subs	r3, #1
 80062b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	029b      	lsls	r3, r3, #10
 80062be:	b29b      	uxth	r3, r3
 80062c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e02d      	b.n	800632e <USB_EPStartXfer+0x17e2>
 80062d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d125      	bne.n	800632e <USB_EPStartXfer+0x17e2>
 80062e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062f8:	4413      	add	r3, r2
 80062fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	011a      	lsls	r2, r3, #4
 800630c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006310:	4413      	add	r3, r2
 8006312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800631a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	b29a      	uxth	r2, r3
 8006328:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800632c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800632e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 81fe 	beq.w	800673c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006344:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006360:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <USB_EPStartXfer+0x182c>
 800636c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10d      	bne.n	8006394 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006378:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800637c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 81db 	bne.w	800673c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006386:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	f040 81d4 	bne.w	800673c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80063be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80063dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	8013      	strh	r3, [r2, #0]
 80063f0:	e1a4      	b.n	800673c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	78db      	ldrb	r3, [r3, #3]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	f040 819a 	bne.w	8006738 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	429a      	cmp	r2, r3
 800641e:	d917      	bls.n	8006450 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006440:	1ad2      	subs	r2, r2, r3
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	619a      	str	r2, [r3, #24]
 800644e:	e00e      	b.n	800646e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2200      	movs	r2, #0
 800646c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	785b      	ldrb	r3, [r3, #1]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d178      	bne.n	8006570 <USB_EPStartXfer+0x1a24>
 800647e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800648c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800649a:	b29b      	uxth	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064a2:	4413      	add	r3, r2
 80064a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064ba:	4413      	add	r3, r2
 80064bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d116      	bne.n	80064fa <USB_EPStartXfer+0x19ae>
 80064cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064d8:	b29a      	uxth	r2, r3
 80064da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064f6:	801a      	strh	r2, [r3, #0]
 80064f8:	e06b      	b.n	80065d2 <USB_EPStartXfer+0x1a86>
 80064fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006500:	d818      	bhi.n	8006534 <USB_EPStartXfer+0x19e8>
 8006502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800650c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <USB_EPStartXfer+0x19d6>
 8006518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800651c:	3301      	adds	r3, #1
 800651e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006526:	b29b      	uxth	r3, r3
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	b29a      	uxth	r2, r3
 800652c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	e04e      	b.n	80065d2 <USB_EPStartXfer+0x1a86>
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800653e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <USB_EPStartXfer+0x1a08>
 800654a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654e:	3b01      	subs	r3, #1
 8006550:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006558:	b29b      	uxth	r3, r3
 800655a:	029b      	lsls	r3, r3, #10
 800655c:	b29b      	uxth	r3, r3
 800655e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006566:	b29a      	uxth	r2, r3
 8006568:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800656c:	801a      	strh	r2, [r3, #0]
 800656e:	e030      	b.n	80065d2 <USB_EPStartXfer+0x1a86>
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d128      	bne.n	80065d2 <USB_EPStartXfer+0x1a86>
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800658e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659c:	b29b      	uxth	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a4:	4413      	add	r3, r2
 80065a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	011a      	lsls	r2, r3, #4
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	4413      	add	r3, r2
 80065be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d178      	bne.n	80066e2 <USB_EPStartXfer+0x1b96>
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660c:	b29b      	uxth	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006614:	4413      	add	r3, r2
 8006616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800661a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	011a      	lsls	r2, r3, #4
 8006628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662c:	4413      	add	r3, r2
 800662e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d116      	bne.n	800666c <USB_EPStartXfer+0x1b20>
 800663e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800664a:	b29a      	uxth	r2, r3
 800664c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006662:	b29a      	uxth	r2, r3
 8006664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e067      	b.n	800673c <USB_EPStartXfer+0x1bf0>
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	2b3e      	cmp	r3, #62	; 0x3e
 8006672:	d818      	bhi.n	80066a6 <USB_EPStartXfer+0x1b5a>
 8006674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800667e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <USB_EPStartXfer+0x1b48>
 800668a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800668e:	3301      	adds	r3, #1
 8006690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006694:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006698:	b29b      	uxth	r3, r3
 800669a:	029b      	lsls	r3, r3, #10
 800669c:	b29a      	uxth	r2, r3
 800669e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	e04a      	b.n	800673c <USB_EPStartXfer+0x1bf0>
 80066a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <USB_EPStartXfer+0x1b7a>
 80066bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066c0:	3b01      	subs	r3, #1
 80066c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e02c      	b.n	800673c <USB_EPStartXfer+0x1bf0>
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d124      	bne.n	800673c <USB_EPStartXfer+0x1bf0>
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006708:	4413      	add	r3, r2
 800670a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	011a      	lsls	r2, r3, #4
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006720:	4413      	add	r3, r2
 8006722:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006726:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800672a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672e:	b29a      	uxth	r2, r3
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	e001      	b.n	800673c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e03a      	b.n	80067b2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800673c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006740:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006766:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800676a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800676e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006772:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006776:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800677a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d020      	beq.n	8006810 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e4:	81bb      	strh	r3, [r7, #12]
 80067e6:	89bb      	ldrh	r3, [r7, #12]
 80067e8:	f083 0310 	eor.w	r3, r3, #16
 80067ec:	81bb      	strh	r3, [r7, #12]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	89bb      	ldrh	r3, [r7, #12]
 80067fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	b29b      	uxth	r3, r3
 800680c:	8013      	strh	r3, [r2, #0]
 800680e:	e01f      	b.n	8006850 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	81fb      	strh	r3, [r7, #14]
 8006828:	89fb      	ldrh	r3, [r7, #14]
 800682a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800682e:	81fb      	strh	r3, [r7, #14]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr

0800685c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	7b1b      	ldrb	r3, [r3, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f040 809d 	bne.w	80069aa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	785b      	ldrb	r3, [r3, #1]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d04c      	beq.n	8006912 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	823b      	strh	r3, [r7, #16]
 8006886:	8a3b      	ldrh	r3, [r7, #16]
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01b      	beq.n	80068c8 <USB_EPClearStall+0x6c>
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a6:	81fb      	strh	r3, [r7, #14]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	89fb      	ldrh	r3, [r7, #14]
 80068b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	78db      	ldrb	r3, [r3, #3]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d06c      	beq.n	80069aa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e6:	81bb      	strh	r3, [r7, #12]
 80068e8:	89bb      	ldrh	r3, [r7, #12]
 80068ea:	f083 0320 	eor.w	r3, r3, #32
 80068ee:	81bb      	strh	r3, [r7, #12]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	89bb      	ldrh	r3, [r7, #12]
 80068fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]
 8006910:	e04b      	b.n	80069aa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	82fb      	strh	r3, [r7, #22]
 8006920:	8afb      	ldrh	r3, [r7, #22]
 8006922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d01b      	beq.n	8006962 <USB_EPClearStall+0x106>
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006940:	82bb      	strh	r3, [r7, #20]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	441a      	add	r2, r3
 800694c:	8abb      	ldrh	r3, [r7, #20]
 800694e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800695a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695e:	b29b      	uxth	r3, r3
 8006960:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006978:	827b      	strh	r3, [r7, #18]
 800697a:	8a7b      	ldrh	r3, [r7, #18]
 800697c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006980:	827b      	strh	r3, [r7, #18]
 8006982:	8a7b      	ldrh	r3, [r7, #18]
 8006984:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006988:	827b      	strh	r3, [r7, #18]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	8a7b      	ldrh	r3, [r7, #18]
 8006996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d103      	bne.n	80069d0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2280      	movs	r2, #128	; 0x80
 80069cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a02:	68fb      	ldr	r3, [r7, #12]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr

08006a0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b08d      	sub	sp, #52	; 0x34
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	4611      	mov	r1, r2
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	80fb      	strh	r3, [r7, #6]
 8006a20:	4613      	mov	r3, r2
 8006a22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a24:	88bb      	ldrh	r3, [r7, #4]
 8006a26:	3301      	adds	r3, #1
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	005a      	lsls	r2, r3, #1
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a46:	e01e      	b.n	8006a86 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	3301      	adds	r3, #1
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	021b      	lsls	r3, r3, #8
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	3302      	adds	r3, #2
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	3302      	adds	r3, #2
 8006a78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	3b01      	subs	r3, #1
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1dd      	bne.n	8006a48 <USB_WritePMA+0x3a>
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3734      	adds	r7, #52	; 0x34
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b08b      	sub	sp, #44	; 0x2c
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	80fb      	strh	r3, [r7, #6]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006aae:	88bb      	ldrh	r3, [r7, #4]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	005a      	lsls	r2, r3, #1
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	e01b      	b.n	8006b0a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	3302      	adds	r3, #2
 8006ade:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	3301      	adds	r3, #1
 8006aec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	3301      	adds	r3, #1
 8006afc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	3302      	adds	r3, #2
 8006b02:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	3b01      	subs	r3, #1
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e0      	bne.n	8006ad2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b10:	88bb      	ldrh	r3, [r7, #4]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d007      	beq.n	8006b2c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	701a      	strb	r2, [r3, #0]
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	372c      	adds	r7, #44	; 0x2c
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7c1b      	ldrb	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d115      	bne.n	8006b7a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b52:	2202      	movs	r2, #2
 8006b54:	2181      	movs	r1, #129	; 0x81
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 ff5b 	bl	8008a12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b66:	2202      	movs	r2, #2
 8006b68:	2101      	movs	r1, #1
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 ff51 	bl	8008a12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006b78:	e012      	b.n	8006ba0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b7a:	2340      	movs	r3, #64	; 0x40
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	2181      	movs	r1, #129	; 0x81
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 ff46 	bl	8008a12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	2202      	movs	r2, #2
 8006b90:	2101      	movs	r1, #1
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 ff3d 	bl	8008a12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	2182      	movs	r1, #130	; 0x82
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 ff33 	bl	8008a12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006bb2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bb6:	f002 f853 	bl	8008c60 <USBD_static_malloc>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	73fb      	strb	r3, [r7, #15]
 8006bd0:	e026      	b.n	8006c20 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006bd8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7c1b      	ldrb	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c06:	2101      	movs	r1, #1
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 fff3 	bl	8008bf4 <USBD_LL_PrepareReceive>
 8006c0e:	e007      	b.n	8006c20 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c16:	2340      	movs	r3, #64	; 0x40
 8006c18:	2101      	movs	r1, #1
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 ffea 	bl	8008bf4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c3a:	2181      	movs	r1, #129	; 0x81
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 ff0e 	bl	8008a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c48:	2101      	movs	r1, #1
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 ff07 	bl	8008a5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c58:	2182      	movs	r1, #130	; 0x82
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 feff 	bl	8008a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00e      	beq.n	8006c8e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c80:	4618      	mov	r0, r3
 8006c82:	f001 fff9 	bl	8008c78 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ca8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d039      	beq.n	8006d36 <USBD_CDC_Setup+0x9e>
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d17f      	bne.n	8006dc6 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	88db      	ldrh	r3, [r3, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d029      	beq.n	8006d22 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da11      	bge.n	8006cfc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006ce4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	88d2      	ldrh	r2, [r2, #6]
 8006cea:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cec:	6939      	ldr	r1, [r7, #16]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	88db      	ldrh	r3, [r3, #6]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 f994 	bl	8008022 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006cfa:	e06b      	b.n	8006dd4 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	785a      	ldrb	r2, [r3, #1]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	88db      	ldrh	r3, [r3, #6]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d12:	6939      	ldr	r1, [r7, #16]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	88db      	ldrh	r3, [r3, #6]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f9af 	bl	800807e <USBD_CtlPrepareRx>
    break;
 8006d20:	e058      	b.n	8006dd4 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	7850      	ldrb	r0, [r2, #1]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	4798      	blx	r3
    break;
 8006d34:	e04e      	b.n	8006dd4 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b0b      	cmp	r3, #11
 8006d3c:	d02e      	beq.n	8006d9c <USBD_CDC_Setup+0x104>
 8006d3e:	2b0b      	cmp	r3, #11
 8006d40:	dc38      	bgt.n	8006db4 <USBD_CDC_Setup+0x11c>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <USBD_CDC_Setup+0xb4>
 8006d46:	2b0a      	cmp	r3, #10
 8006d48:	d014      	beq.n	8006d74 <USBD_CDC_Setup+0xdc>
 8006d4a:	e033      	b.n	8006db4 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d107      	bne.n	8006d66 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d56:	f107 030c 	add.w	r3, r7, #12
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 f95f 	bl	8008022 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006d64:	e02e      	b.n	8006dc4 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f8f0 	bl	8007f4e <USBD_CtlError>
			  ret = USBD_FAIL;
 8006d6e:	2302      	movs	r3, #2
 8006d70:	75fb      	strb	r3, [r7, #23]
      break;
 8006d72:	e027      	b.n	8006dc4 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d107      	bne.n	8006d8e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006d7e:	f107 030f 	add.w	r3, r7, #15
 8006d82:	2201      	movs	r2, #1
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f94b 	bl	8008022 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006d8c:	e01a      	b.n	8006dc4 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f8dc 	bl	8007f4e <USBD_CtlError>
			  ret = USBD_FAIL;
 8006d96:	2302      	movs	r3, #2
 8006d98:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9a:	e013      	b.n	8006dc4 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d00d      	beq.n	8006dc2 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 f8d0 	bl	8007f4e <USBD_CtlError>
			  ret = USBD_FAIL;
 8006dae:	2302      	movs	r3, #2
 8006db0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006db2:	e006      	b.n	8006dc2 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 f8c9 	bl	8007f4e <USBD_CtlError>
      ret = USBD_FAIL;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc0:	e000      	b.n	8006dc4 <USBD_CDC_Setup+0x12c>
      break;
 8006dc2:	bf00      	nop
    }
    break;
 8006dc4:	e006      	b.n	8006dd4 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f8c0 	bl	8007f4e <USBD_CtlError>
    ret = USBD_FAIL;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	75fb      	strb	r3, [r7, #23]
    break;
 8006dd2:	bf00      	nop
  }

  return ret;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006df0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006df8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d03a      	beq.n	8006e7a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	331c      	adds	r3, #28
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d029      	beq.n	8006e6e <USBD_CDC_DataIn+0x90>
 8006e1a:	78fa      	ldrb	r2, [r7, #3]
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	331c      	adds	r3, #28
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	78f9      	ldrb	r1, [r7, #3]
 8006e2e:	68b8      	ldr	r0, [r7, #8]
 8006e30:	460b      	mov	r3, r1
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	4403      	add	r3, r0
 8006e3a:	3338      	adds	r3, #56	; 0x38
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d110      	bne.n	8006e6e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	331c      	adds	r3, #28
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006e60:	78f9      	ldrb	r1, [r7, #3]
 8006e62:	2300      	movs	r3, #0
 8006e64:	2200      	movs	r2, #0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 fea1 	bl	8008bae <USBD_LL_Transmit>
 8006e6c:	e003      	b.n	8006e76 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e7a:	2302      	movs	r3, #2
  }
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fecc 	bl	8008c3a <USBD_LL_GetRxDataSize>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00d      	beq.n	8006ed0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ec8:	4611      	mov	r1, r2
 8006eca:	4798      	blx	r3

    return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e000      	b.n	8006ed2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ed0:	2302      	movs	r3, #2
  }
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ee8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d015      	beq.n	8006f20 <USBD_CDC_EP0_RxReady+0x46>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006efa:	2bff      	cmp	r3, #255	; 0xff
 8006efc:	d010      	beq.n	8006f20 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f0c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f14:	b292      	uxth	r2, r2
 8006f16:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	22ff      	movs	r2, #255	; 0xff
 8006f1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2243      	movs	r2, #67	; 0x43
 8006f38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f3a:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20000094 	.word	0x20000094

08006f4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2243      	movs	r2, #67	; 0x43
 8006f58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f5a:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000050 	.word	0x20000050

08006f6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2243      	movs	r2, #67	; 0x43
 8006f78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f7a:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	200000d8 	.word	0x200000d8

08006f8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	220a      	movs	r2, #10
 8006f98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f9a:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	2000000c 	.word	0x2000000c

08006fac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr

08006fd8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	371c      	adds	r7, #28
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr

0800700a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800701a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800703e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01c      	beq.n	8007084 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007050:	2b00      	cmp	r3, #0
 8007052:	d115      	bne.n	8007080 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007072:	b29b      	uxth	r3, r3
 8007074:	2181      	movs	r1, #129	; 0x81
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fd99 	bl	8008bae <USBD_LL_Transmit>

      return USBD_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	e002      	b.n	8007086 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007084:	2302      	movs	r3, #2
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800709c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d017      	beq.n	80070d8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7c1b      	ldrb	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ba:	2101      	movs	r1, #1
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fd99 	bl	8008bf4 <USBD_LL_PrepareReceive>
 80070c2:	e007      	b.n	80070d4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ca:	2340      	movs	r3, #64	; 0x40
 80070cc:	2101      	movs	r1, #1
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fd90 	bl	8008bf4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e000      	b.n	80070da <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80070d8:	2302      	movs	r3, #2
  }
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	4613      	mov	r3, r2
 80070ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070f6:	2302      	movs	r3, #2
 80070f8:	e01a      	b.n	8007130 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	79fa      	ldrb	r2, [r7, #7]
 8007126:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f001 fbfd 	bl	8008928 <USBD_LL_Init>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d006      	beq.n	800715a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]
 8007158:	e001      	b.n	800715e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800715a:	2302      	movs	r3, #2
 800715c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fc32 	bl	80089dc <USBD_LL_Start>

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr

08007196 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80071a2:	2302      	movs	r3, #2
 80071a4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00c      	beq.n	80071ca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	4611      	mov	r1, r2
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	4611      	mov	r1, r2
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fe62 	bl	8007ed6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007220:	461a      	mov	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800722e:	f003 031f 	and.w	r3, r3, #31
 8007232:	2b02      	cmp	r3, #2
 8007234:	d016      	beq.n	8007264 <USBD_LL_SetupStage+0x6a>
 8007236:	2b02      	cmp	r3, #2
 8007238:	d81c      	bhi.n	8007274 <USBD_LL_SetupStage+0x7a>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <USBD_LL_SetupStage+0x4a>
 800723e:	2b01      	cmp	r3, #1
 8007240:	d008      	beq.n	8007254 <USBD_LL_SetupStage+0x5a>
 8007242:	e017      	b.n	8007274 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f9c5 	bl	80075dc <USBD_StdDevReq>
    break;
 8007252:	e01a      	b.n	800728a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa27 	bl	80076b0 <USBD_StdItfReq>
    break;
 8007262:	e012      	b.n	800728a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa67 	bl	8007740 <USBD_StdEPReq>
    break;
 8007272:	e00a      	b.n	800728a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800727a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800727e:	b2db      	uxtb	r3, r3
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fc0a 	bl	8008a9c <USBD_LL_StallEP>
    break;
 8007288:	bf00      	nop
  }

  return USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	460b      	mov	r3, r1
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d14b      	bne.n	8007340 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80072ae:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d134      	bne.n	8007324 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d919      	bls.n	80072fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80072dc:	429a      	cmp	r2, r3
 80072de:	d203      	bcs.n	80072e8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	e002      	b.n	80072ee <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fee1 	bl	80080ba <USBD_CtlContinueRx>
 80072f8:	e038      	b.n	800736c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800730c:	2b03      	cmp	r3, #3
 800730e:	d105      	bne.n	800731c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fede 	bl	80080de <USBD_CtlSendStatus>
 8007322:	e023      	b.n	800736c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800732a:	2b05      	cmp	r3, #5
 800732c:	d11e      	bne.n	800736c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007336:	2100      	movs	r1, #0
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f001 fbaf 	bl	8008a9c <USBD_LL_StallEP>
 800733e:	e015      	b.n	800736c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00d      	beq.n	8007368 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007352:	2b03      	cmp	r3, #3
 8007354:	d108      	bne.n	8007368 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	7afa      	ldrb	r2, [r7, #11]
 8007360:	4611      	mov	r1, r2
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	4798      	blx	r3
 8007366:	e001      	b.n	800736c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007368:	2302      	movs	r3, #2
 800736a:	e000      	b.n	800736e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b086      	sub	sp, #24
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	460b      	mov	r3, r1
 8007380:	607a      	str	r2, [r7, #4]
 8007382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007384:	7afb      	ldrb	r3, [r7, #11]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d17f      	bne.n	800748a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3314      	adds	r3, #20
 800738e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007396:	2b02      	cmp	r3, #2
 8007398:	d15c      	bne.n	8007454 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d915      	bls.n	80073d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 fe4b 	bl	800805a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80073c4:	2300      	movs	r3, #0
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 fc12 	bl	8008bf4 <USBD_LL_PrepareReceive>
 80073d0:	e04e      	b.n	8007470 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	6912      	ldr	r2, [r2, #16]
 80073da:	fbb3 f1f2 	udiv	r1, r3, r2
 80073de:	fb01 f202 	mul.w	r2, r1, r2
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d11c      	bne.n	8007422 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d316      	bcc.n	8007422 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80073fe:	429a      	cmp	r2, r3
 8007400:	d20f      	bcs.n	8007422 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007402:	2200      	movs	r2, #0
 8007404:	2100      	movs	r1, #0
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fe27 	bl	800805a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007414:	2300      	movs	r3, #0
 8007416:	2200      	movs	r2, #0
 8007418:	2100      	movs	r1, #0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f001 fbea 	bl	8008bf4 <USBD_LL_PrepareReceive>
 8007420:	e026      	b.n	8007470 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007434:	2b03      	cmp	r3, #3
 8007436:	d105      	bne.n	8007444 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007444:	2180      	movs	r1, #128	; 0x80
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f001 fb28 	bl	8008a9c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 fe59 	bl	8008104 <USBD_CtlReceiveStatus>
 8007452:	e00d      	b.n	8007470 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800745a:	2b04      	cmp	r3, #4
 800745c:	d004      	beq.n	8007468 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007464:	2b00      	cmp	r3, #0
 8007466:	d103      	bne.n	8007470 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007468:	2180      	movs	r1, #128	; 0x80
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f001 fb16 	bl	8008a9c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007476:	2b01      	cmp	r3, #1
 8007478:	d11d      	bne.n	80074b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7ff fe81 	bl	8007182 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007488:	e015      	b.n	80074b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800749c:	2b03      	cmp	r3, #3
 800749e:	d108      	bne.n	80074b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	7afa      	ldrb	r2, [r7, #11]
 80074aa:	4611      	mov	r1, r2
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	4798      	blx	r3
 80074b0:	e001      	b.n	80074b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074b2:	2302      	movs	r3, #2
 80074b4:	e000      	b.n	80074b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	2200      	movs	r2, #0
 80074cc:	2100      	movs	r1, #0
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fa9f 	bl	8008a12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	2200      	movs	r2, #0
 80074e8:	2180      	movs	r1, #128	; 0x80
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fa91 	bl	8008a12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2240      	movs	r2, #64	; 0x40
 80074fa:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007520:	2b00      	cmp	r3, #0
 8007522:	d009      	beq.n	8007538 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6852      	ldr	r2, [r2, #4]
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	4611      	mov	r1, r2
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
  }

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	78fa      	ldrb	r2, [r7, #3]
 8007552:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr

08007560 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2204      	movs	r2, #4
 8007578:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr

08007588 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr

080075a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d10b      	bne.n	80075d2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d005      	beq.n	8007602 <USBD_StdDevReq+0x26>
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d84f      	bhi.n	800769a <USBD_StdDevReq+0xbe>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d009      	beq.n	8007612 <USBD_StdDevReq+0x36>
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d14b      	bne.n	800769a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
    break;
 8007610:	e048      	b.n	80076a4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2b09      	cmp	r3, #9
 8007618:	d839      	bhi.n	800768e <USBD_StdDevReq+0xb2>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <USBD_StdDevReq+0x44>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007671 	.word	0x08007671
 8007624:	08007685 	.word	0x08007685
 8007628:	0800768f 	.word	0x0800768f
 800762c:	0800767b 	.word	0x0800767b
 8007630:	0800768f 	.word	0x0800768f
 8007634:	08007653 	.word	0x08007653
 8007638:	08007649 	.word	0x08007649
 800763c:	0800768f 	.word	0x0800768f
 8007640:	08007667 	.word	0x08007667
 8007644:	0800765d 	.word	0x0800765d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9da 	bl	8007a04 <USBD_GetDescriptor>
      break;
 8007650:	e022      	b.n	8007698 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 facf 	bl	8007bf8 <USBD_SetAddress>
      break;
 800765a:	e01d      	b.n	8007698 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fb0e 	bl	8007c80 <USBD_SetConfig>
      break;
 8007664:	e018      	b.n	8007698 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fb97 	bl	8007d9c <USBD_GetConfig>
      break;
 800766e:	e013      	b.n	8007698 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fbc7 	bl	8007e06 <USBD_GetStatus>
      break;
 8007678:	e00e      	b.n	8007698 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fbf5 	bl	8007e6c <USBD_SetFeature>
      break;
 8007682:	e009      	b.n	8007698 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fc04 	bl	8007e94 <USBD_ClrFeature>
      break;
 800768c:	e004      	b.n	8007698 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fc5c 	bl	8007f4e <USBD_CtlError>
      break;
 8007696:	bf00      	nop
    }
    break;
 8007698:	e004      	b.n	80076a4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fc56 	bl	8007f4e <USBD_CtlError>
    break;
 80076a2:	bf00      	nop
  }

  return ret;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop

080076b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d005      	beq.n	80076d6 <USBD_StdItfReq+0x26>
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d82e      	bhi.n	800772c <USBD_StdItfReq+0x7c>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <USBD_StdItfReq+0x26>
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d12a      	bne.n	800772c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076dc:	3b01      	subs	r3, #1
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d81d      	bhi.n	800771e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	889b      	ldrh	r3, [r3, #4]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d813      	bhi.n	8007714 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d110      	bne.n	8007728 <USBD_StdItfReq+0x78>
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fce6 	bl	80080de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007712:	e009      	b.n	8007728 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fc19 	bl	8007f4e <USBD_CtlError>
      break;
 800771c:	e004      	b.n	8007728 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc14 	bl	8007f4e <USBD_CtlError>
      break;
 8007726:	e000      	b.n	800772a <USBD_StdItfReq+0x7a>
      break;
 8007728:	bf00      	nop
    }
    break;
 800772a:	e004      	b.n	8007736 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fc0d 	bl	8007f4e <USBD_CtlError>
    break;
 8007734:	bf00      	nop
  }

  return USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	889b      	ldrh	r3, [r3, #4]
 8007752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800775c:	2b40      	cmp	r3, #64	; 0x40
 800775e:	d007      	beq.n	8007770 <USBD_StdEPReq+0x30>
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	f200 8144 	bhi.w	80079ee <USBD_StdEPReq+0x2ae>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <USBD_StdEPReq+0x40>
 800776a:	2b20      	cmp	r3, #32
 800776c:	f040 813f 	bne.w	80079ee <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
    break;
 800777e:	e13b      	b.n	80079f8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007788:	2b20      	cmp	r3, #32
 800778a:	d10a      	bne.n	80077a2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	e12b      	b.n	80079fa <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d007      	beq.n	80077ba <USBD_StdEPReq+0x7a>
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	f300 8119 	bgt.w	80079e2 <USBD_StdEPReq+0x2a2>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d072      	beq.n	800789a <USBD_StdEPReq+0x15a>
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d03a      	beq.n	800782e <USBD_StdEPReq+0xee>
 80077b8:	e113      	b.n	80079e2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d002      	beq.n	80077ca <USBD_StdEPReq+0x8a>
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d015      	beq.n	80077f4 <USBD_StdEPReq+0xb4>
 80077c8:	e02b      	b.n	8007822 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00c      	beq.n	80077ea <USBD_StdEPReq+0xaa>
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b80      	cmp	r3, #128	; 0x80
 80077d4:	d009      	beq.n	80077ea <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 f95e 	bl	8008a9c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80077e0:	2180      	movs	r1, #128	; 0x80
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 f95a 	bl	8008a9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80077e8:	e020      	b.n	800782c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fbae 	bl	8007f4e <USBD_CtlError>
        break;
 80077f2:	e01b      	b.n	800782c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	885b      	ldrh	r3, [r3, #2]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10e      	bne.n	800781a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <USBD_StdEPReq+0xda>
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b80      	cmp	r3, #128	; 0x80
 8007806:	d008      	beq.n	800781a <USBD_StdEPReq+0xda>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f941 	bl	8008a9c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fc5f 	bl	80080de <USBD_CtlSendStatus>

        break;
 8007820:	e004      	b.n	800782c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fb92 	bl	8007f4e <USBD_CtlError>
        break;
 800782a:	bf00      	nop
      }
      break;
 800782c:	e0de      	b.n	80079ec <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007834:	2b02      	cmp	r3, #2
 8007836:	d002      	beq.n	800783e <USBD_StdEPReq+0xfe>
 8007838:	2b03      	cmp	r3, #3
 800783a:	d015      	beq.n	8007868 <USBD_StdEPReq+0x128>
 800783c:	e026      	b.n	800788c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00c      	beq.n	800785e <USBD_StdEPReq+0x11e>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d009      	beq.n	800785e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 f924 	bl	8008a9c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007854:	2180      	movs	r1, #128	; 0x80
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f920 	bl	8008a9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800785c:	e01c      	b.n	8007898 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fb74 	bl	8007f4e <USBD_CtlError>
        break;
 8007866:	e017      	b.n	8007898 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	885b      	ldrh	r3, [r3, #2]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d112      	bne.n	8007896 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 f92b 	bl	8008ada <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc2a 	bl	80080de <USBD_CtlSendStatus>
        }
        break;
 800788a:	e004      	b.n	8007896 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fb5d 	bl	8007f4e <USBD_CtlError>
        break;
 8007894:	e000      	b.n	8007898 <USBD_StdEPReq+0x158>
        break;
 8007896:	bf00      	nop
      }
      break;
 8007898:	e0a8      	b.n	80079ec <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d002      	beq.n	80078aa <USBD_StdEPReq+0x16a>
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d031      	beq.n	800790c <USBD_StdEPReq+0x1cc>
 80078a8:	e095      	b.n	80079d6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d007      	beq.n	80078c0 <USBD_StdEPReq+0x180>
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d004      	beq.n	80078c0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fb48 	bl	8007f4e <USBD_CtlError>
          break;
 80078be:	e08f      	b.n	80079e0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80078c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da0b      	bge.n	80078e0 <USBD_StdEPReq+0x1a0>
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	3310      	adds	r3, #16
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	4413      	add	r3, r2
 80078dc:	3304      	adds	r3, #4
 80078de:	e00a      	b.n	80078f6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2202      	movs	r2, #2
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fb8c 	bl	8008022 <USBD_CtlSendData>
          break;
 800790a:	e069      	b.n	80079e0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800790c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007910:	2b00      	cmp	r3, #0
 8007912:	da11      	bge.n	8007938 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	f003 020f 	and.w	r2, r3, #15
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	3318      	adds	r3, #24
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d117      	bne.n	800795e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fb0c 	bl	8007f4e <USBD_CtlError>
            break;
 8007936:	e053      	b.n	80079e0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	f003 020f 	and.w	r2, r3, #15
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 faf9 	bl	8007f4e <USBD_CtlError>
            break;
 800795c:	e040      	b.n	80079e0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800795e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007962:	2b00      	cmp	r3, #0
 8007964:	da0b      	bge.n	800797e <USBD_StdEPReq+0x23e>
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	3310      	adds	r3, #16
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4413      	add	r3, r2
 800797a:	3304      	adds	r3, #4
 800797c:	e00a      	b.n	8007994 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <USBD_StdEPReq+0x262>
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b80      	cmp	r3, #128	; 0x80
 80079a0:	d103      	bne.n	80079aa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	e00e      	b.n	80079c8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 f8b2 	bl	8008b18 <USBD_LL_IsStallEP>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	e002      	b.n	80079c8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2202      	movs	r2, #2
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fb27 	bl	8008022 <USBD_CtlSendData>
          break;
 80079d4:	e004      	b.n	80079e0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fab8 	bl	8007f4e <USBD_CtlError>
        break;
 80079de:	bf00      	nop
      }
      break;
 80079e0:	e004      	b.n	80079ec <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fab2 	bl	8007f4e <USBD_CtlError>
      break;
 80079ea:	bf00      	nop
    }
    break;
 80079ec:	e004      	b.n	80079f8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 faac 	bl	8007f4e <USBD_CtlError>
    break;
 80079f6:	bf00      	nop
  }

  return ret;
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	885b      	ldrh	r3, [r3, #2]
 8007a12:	0a1b      	lsrs	r3, r3, #8
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	2b06      	cmp	r3, #6
 8007a1a:	f200 80c9 	bhi.w	8007bb0 <USBD_GetDescriptor+0x1ac>
 8007a1e:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <USBD_GetDescriptor+0x20>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a41 	.word	0x08007a41
 8007a28:	08007a59 	.word	0x08007a59
 8007a2c:	08007a99 	.word	0x08007a99
 8007a30:	08007bb1 	.word	0x08007bb1
 8007a34:	08007bb1 	.word	0x08007bb1
 8007a38:	08007b5d 	.word	0x08007b5d
 8007a3c:	08007b83 	.word	0x08007b83
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	7c12      	ldrb	r2, [r2, #16]
 8007a4c:	f107 010a 	add.w	r1, r7, #10
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
 8007a54:	60f8      	str	r0, [r7, #12]
    break;
 8007a56:	e0b0      	b.n	8007bba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	7c1b      	ldrb	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10d      	bne.n	8007a7c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	f107 020a 	add.w	r2, r7, #10
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4798      	blx	r3
 8007a70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	2202      	movs	r2, #2
 8007a78:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007a7a:	e09e      	b.n	8007bba <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	f107 020a 	add.w	r2, r7, #10
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3301      	adds	r3, #1
 8007a92:	2202      	movs	r2, #2
 8007a94:	701a      	strb	r2, [r3, #0]
    break;
 8007a96:	e090      	b.n	8007bba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	885b      	ldrh	r3, [r3, #2]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d856      	bhi.n	8007b50 <USBD_GetDescriptor+0x14c>
 8007aa2:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <USBD_GetDescriptor+0xa4>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ac1 	.word	0x08007ac1
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007af1 	.word	0x08007af1
 8007ab4:	08007b09 	.word	0x08007b09
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007b39 	.word	0x08007b39
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	7c12      	ldrb	r2, [r2, #16]
 8007acc:	f107 010a 	add.w	r1, r7, #10
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
      break;
 8007ad6:	e040      	b.n	8007b5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	7c12      	ldrb	r2, [r2, #16]
 8007ae4:	f107 010a 	add.w	r1, r7, #10
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	60f8      	str	r0, [r7, #12]
      break;
 8007aee:	e034      	b.n	8007b5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	7c12      	ldrb	r2, [r2, #16]
 8007afc:	f107 010a 	add.w	r1, r7, #10
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	60f8      	str	r0, [r7, #12]
      break;
 8007b06:	e028      	b.n	8007b5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	7c12      	ldrb	r2, [r2, #16]
 8007b14:	f107 010a 	add.w	r1, r7, #10
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	60f8      	str	r0, [r7, #12]
      break;
 8007b1e:	e01c      	b.n	8007b5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7c12      	ldrb	r2, [r2, #16]
 8007b2c:	f107 010a 	add.w	r1, r7, #10
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
      break;
 8007b36:	e010      	b.n	8007b5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7c12      	ldrb	r2, [r2, #16]
 8007b44:	f107 010a 	add.w	r1, r7, #10
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
      break;
 8007b4e:	e004      	b.n	8007b5a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9fb 	bl	8007f4e <USBD_CtlError>
      return;
 8007b58:	e04b      	b.n	8007bf2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007b5a:	e02e      	b.n	8007bba <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7c1b      	ldrb	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6c:	f107 020a 	add.w	r2, r7, #10
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	60f8      	str	r0, [r7, #12]
      break;
 8007b76:	e020      	b.n	8007bba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f9e7 	bl	8007f4e <USBD_CtlError>
      return;
 8007b80:	e037      	b.n	8007bf2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	7c1b      	ldrb	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10d      	bne.n	8007ba6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b92:	f107 020a 	add.w	r2, r7, #10
 8007b96:	4610      	mov	r0, r2
 8007b98:	4798      	blx	r3
 8007b9a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	2207      	movs	r2, #7
 8007ba2:	701a      	strb	r2, [r3, #0]
      break;
 8007ba4:	e009      	b.n	8007bba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f9d0 	bl	8007f4e <USBD_CtlError>
      return;
 8007bae:	e020      	b.n	8007bf2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f9cb 	bl	8007f4e <USBD_CtlError>
    return;
 8007bb8:	e01b      	b.n	8007bf2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007bba:	897b      	ldrh	r3, [r7, #10]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d011      	beq.n	8007be4 <USBD_GetDescriptor+0x1e0>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	88db      	ldrh	r3, [r3, #6]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00d      	beq.n	8007be4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	88da      	ldrh	r2, [r3, #6]
 8007bcc:	897b      	ldrh	r3, [r7, #10]
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	bf28      	it	cs
 8007bd2:	4613      	movcs	r3, r2
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007bd8:	897b      	ldrh	r3, [r7, #10]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68f9      	ldr	r1, [r7, #12]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa1f 	bl	8008022 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	88db      	ldrh	r3, [r3, #6]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fa76 	bl	80080de <USBD_CtlSendStatus>
  }
}
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	889b      	ldrh	r3, [r3, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d130      	bne.n	8007c6c <USBD_SetAddress+0x74>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	88db      	ldrh	r3, [r3, #6]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d12c      	bne.n	8007c6c <USBD_SetAddress+0x74>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	2b7f      	cmp	r3, #127	; 0x7f
 8007c18:	d828      	bhi.n	8007c6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d104      	bne.n	8007c3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f98b 	bl	8007f4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c38:	e01d      	b.n	8007c76 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	7bfa      	ldrb	r2, [r7, #15]
 8007c3e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 ff92 	bl	8008b70 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fa46 	bl	80080de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c60:	e009      	b.n	8007c76 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6a:	e004      	b.n	8007c76 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f96d 	bl	8007f4e <USBD_CtlError>
  }
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	885b      	ldrh	r3, [r3, #2]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	4b41      	ldr	r3, [pc, #260]	; (8007d98 <USBD_SetConfig+0x118>)
 8007c92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c94:	4b40      	ldr	r3, [pc, #256]	; (8007d98 <USBD_SetConfig+0x118>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d904      	bls.n	8007ca6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f955 	bl	8007f4e <USBD_CtlError>
 8007ca4:	e075      	b.n	8007d92 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d002      	beq.n	8007cb6 <USBD_SetConfig+0x36>
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d023      	beq.n	8007cfc <USBD_SetConfig+0x7c>
 8007cb4:	e062      	b.n	8007d7c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007cb6:	4b38      	ldr	r3, [pc, #224]	; (8007d98 <USBD_SetConfig+0x118>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01a      	beq.n	8007cf4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007cbe:	4b36      	ldr	r3, [pc, #216]	; (8007d98 <USBD_SetConfig+0x118>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2203      	movs	r2, #3
 8007ccc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cd0:	4b31      	ldr	r3, [pc, #196]	; (8007d98 <USBD_SetConfig+0x118>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff fa5d 	bl	8007196 <USBD_SetClassConfig>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d104      	bne.n	8007cec <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f932 	bl	8007f4e <USBD_CtlError>
          return;
 8007cea:	e052      	b.n	8007d92 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f9f6 	bl	80080de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007cf2:	e04e      	b.n	8007d92 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f9f2 	bl	80080de <USBD_CtlSendStatus>
      break;
 8007cfa:	e04a      	b.n	8007d92 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cfc:	4b26      	ldr	r3, [pc, #152]	; (8007d98 <USBD_SetConfig+0x118>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d112      	bne.n	8007d2a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007d0c:	4b22      	ldr	r3, [pc, #136]	; (8007d98 <USBD_SetConfig+0x118>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d16:	4b20      	ldr	r3, [pc, #128]	; (8007d98 <USBD_SetConfig+0x118>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff fa59 	bl	80071d4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9db 	bl	80080de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007d28:	e033      	b.n	8007d92 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <USBD_SetConfig+0x118>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d01d      	beq.n	8007d74 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff fa47 	bl	80071d4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <USBD_SetConfig+0x118>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d50:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <USBD_SetConfig+0x118>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fa1d 	bl	8007196 <USBD_SetClassConfig>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d104      	bne.n	8007d6c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f8f2 	bl	8007f4e <USBD_CtlError>
          return;
 8007d6a:	e012      	b.n	8007d92 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f9b6 	bl	80080de <USBD_CtlSendStatus>
      break;
 8007d72:	e00e      	b.n	8007d92 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9b2 	bl	80080de <USBD_CtlSendStatus>
      break;
 8007d7a:	e00a      	b.n	8007d92 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8e5 	bl	8007f4e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007d84:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <USBD_SetConfig+0x118>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff fa22 	bl	80071d4 <USBD_ClrClassConfig>
      break;
 8007d90:	bf00      	nop
    }
  }
}
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	200002f4 	.word	0x200002f4

08007d9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d004      	beq.n	8007db8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f8cc 	bl	8007f4e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007db6:	e022      	b.n	8007dfe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	dc02      	bgt.n	8007dc8 <USBD_GetConfig+0x2c>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	dc03      	bgt.n	8007dce <USBD_GetConfig+0x32>
 8007dc6:	e015      	b.n	8007df4 <USBD_GetConfig+0x58>
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d00b      	beq.n	8007de4 <USBD_GetConfig+0x48>
 8007dcc:	e012      	b.n	8007df4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	2201      	movs	r2, #1
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f920 	bl	8008022 <USBD_CtlSendData>
      break;
 8007de2:	e00c      	b.n	8007dfe <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	2201      	movs	r2, #1
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f918 	bl	8008022 <USBD_CtlSendData>
      break;
 8007df2:	e004      	b.n	8007dfe <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f8a9 	bl	8007f4e <USBD_CtlError>
      break;
 8007dfc:	bf00      	nop
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e16:	3b01      	subs	r3, #1
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d81e      	bhi.n	8007e5a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	88db      	ldrh	r3, [r3, #6]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d004      	beq.n	8007e2e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f891 	bl	8007f4e <USBD_CtlError>
      break;
 8007e2c:	e01a      	b.n	8007e64 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f043 0202 	orr.w	r2, r3, #2
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	2202      	movs	r2, #2
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f8e5 	bl	8008022 <USBD_CtlSendData>
    break;
 8007e58:	e004      	b.n	8007e64 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f876 	bl	8007f4e <USBD_CtlError>
    break;
 8007e62:	bf00      	nop
  }
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d106      	bne.n	8007e8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f929 	bl	80080de <USBD_CtlSendStatus>
  }

}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d80b      	bhi.n	8007ec2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	885b      	ldrh	r3, [r3, #2]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d10c      	bne.n	8007ecc <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f90f 	bl	80080de <USBD_CtlSendStatus>
    }
    break;
 8007ec0:	e004      	b.n	8007ecc <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f842 	bl	8007f4e <USBD_CtlError>
    break;
 8007eca:	e000      	b.n	8007ece <USBD_ClrFeature+0x3a>
    break;
 8007ecc:	bf00      	nop
  }
}
 8007ece:	bf00      	nop
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781a      	ldrb	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	785a      	ldrb	r2, [r3, #1]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	3303      	adds	r3, #3
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4413      	add	r3, r2
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	3305      	adds	r3, #5
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	4413      	add	r3, r2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	3306      	adds	r3, #6
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	3307      	adds	r3, #7
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	4413      	add	r3, r2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	80da      	strh	r2, [r3, #6]

}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bc80      	pop	{r7}
 8007f4c:	4770      	bx	lr

08007f4e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fd9e 	bl	8008a9c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007f60:	2100      	movs	r1, #0
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fd9a 	bl	8008a9c <USBD_LL_StallEP>
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d032      	beq.n	8007fec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f834 	bl	8007ff4 <USBD_GetLen>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	3301      	adds	r3, #1
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	75fa      	strb	r2, [r7, #23]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	7812      	ldrb	r2, [r2, #0]
 8007faa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	75fa      	strb	r2, [r7, #23]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	2203      	movs	r2, #3
 8007fba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007fbc:	e012      	b.n	8007fe4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	60fa      	str	r2, [r7, #12]
 8007fc4:	7dfa      	ldrb	r2, [r7, #23]
 8007fc6:	1c51      	adds	r1, r2, #1
 8007fc8:	75f9      	strb	r1, [r7, #23]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	440a      	add	r2, r1
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	75fa      	strb	r2, [r7, #23]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4413      	add	r3, r2
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e8      	bne.n	8007fbe <USBD_GetString+0x4e>
    }
  }
}
 8007fec:	bf00      	nop
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008000:	e005      	b.n	800800e <USBD_GetLen+0x1a>
    {
        len++;
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	3301      	adds	r3, #1
 8008006:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3301      	adds	r3, #1
 800800c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f5      	bne.n	8008002 <USBD_GetLen+0xe>
    }

    return len;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	4613      	mov	r3, r2
 800802e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2202      	movs	r2, #2
 8008034:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008038:	88fa      	ldrh	r2, [r7, #6]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	2100      	movs	r1, #0
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fdaf 	bl	8008bae <USBD_LL_Transmit>

  return USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	4613      	mov	r3, r2
 8008066:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008068:	88fb      	ldrh	r3, [r7, #6]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	2100      	movs	r1, #0
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fd9d 	bl	8008bae <USBD_LL_Transmit>

  return USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	4613      	mov	r3, r2
 800808a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2203      	movs	r2, #3
 8008090:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800809c:	88fa      	ldrh	r2, [r7, #6]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	2100      	movs	r1, #0
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fda2 	bl	8008bf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	4613      	mov	r3, r2
 80080c6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	2100      	movs	r1, #0
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fd90 	bl	8008bf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2204      	movs	r2, #4
 80080ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080ee:	2300      	movs	r3, #0
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fd5a 	bl	8008bae <USBD_LL_Transmit>

  return USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2205      	movs	r2, #5
 8008110:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008114:	2300      	movs	r3, #0
 8008116:	2200      	movs	r2, #0
 8008118:	2100      	movs	r1, #0
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fd6a 	bl	8008bf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8008136:	f7f8 fd59 	bl	8000bec <HAL_GetTick>
 800813a:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 800813c:	e009      	b.n	8008152 <WaitWhileBusy+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 800813e:	f7f8 fd55 	bl	8000bec <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	88fb      	ldrh	r3, [r7, #6]
 800814a:	429a      	cmp	r2, r3
 800814c:	d901      	bls.n	8008152 <WaitWhileBusy+0x26>
		{
			return(LoRa_TIMEOUT);
 800814e:	2302      	movs	r3, #2
 8008150:	e008      	b.n	8008164 <WaitWhileBusy+0x38>
	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8008152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008156:	4805      	ldr	r0, [pc, #20]	; (800816c <WaitWhileBusy+0x40>)
 8008158:	f7f9 f802 	bl	8001160 <HAL_GPIO_ReadPin>
 800815c:	4603      	mov	r3, r0
 800815e:	2b01      	cmp	r3, #1
 8008160:	d0ed      	beq.n	800813e <WaitWhileBusy+0x12>
		}
	}

	return(LoRa_OK);
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	40020000 	.word	0x40020000

08008170 <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	807b      	strh	r3, [r7, #2]
 800817c:	4613      	mov	r3, r2
 800817e:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 8008180:	200a      	movs	r0, #10
 8008182:	f7ff ffd3 	bl	800812c <WaitWhileBusy>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 800818c:	2301      	movs	r3, #1
 800818e:	e01c      	b.n	80081ca <SPI_Send+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8008190:	2200      	movs	r2, #0
 8008192:	2110      	movs	r1, #16
 8008194:	480f      	ldr	r0, [pc, #60]	; (80081d4 <SPI_Send+0x64>)
 8008196:	f7f8 fffa 	bl	800118e <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, buffer, numBytes, 100) != HAL_OK)
 800819a:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <SPI_Send+0x68>)
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	887a      	ldrh	r2, [r7, #2]
 80081a0:	2364      	movs	r3, #100	; 0x64
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	f7fb fbec 	bl	8003980 <HAL_SPI_Transmit>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <SPI_Send+0x42>
	{
		return(LoRa_ERROR);
 80081ae:	2301      	movs	r3, #1
 80081b0:	e00b      	b.n	80081ca <SPI_Send+0x5a>
	}

	if(moreToCome != true)
 80081b2:	787b      	ldrb	r3, [r7, #1]
 80081b4:	f083 0301 	eor.w	r3, r3, #1
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <SPI_Send+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 80081be:	2201      	movs	r2, #1
 80081c0:	2110      	movs	r1, #16
 80081c2:	4804      	ldr	r0, [pc, #16]	; (80081d4 <SPI_Send+0x64>)
 80081c4:	f7f8 ffe3 	bl	800118e <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	40020000 	.word	0x40020000
 80081d8:	200002f8 	.word	0x200002f8

080081dc <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SPI_HandleTypeDef *hspiPtr)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[10];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 80081e4:	4a65      	ldr	r2, [pc, #404]	; (800837c <LoRa_Init+0x1a0>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6013      	str	r3, [r2, #0]

  /* Set NSS high */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 80081ea:	2201      	movs	r2, #1
 80081ec:	2110      	movs	r1, #16
 80081ee:	4864      	ldr	r0, [pc, #400]	; (8008380 <LoRa_Init+0x1a4>)
 80081f0:	f7f8 ffcd 	bl	800118e <HAL_GPIO_WritePin>

  /* Reset SX1262 chip */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET); 	/* Pull NRST low */
 80081f4:	2200      	movs	r2, #0
 80081f6:	2101      	movs	r1, #1
 80081f8:	4861      	ldr	r0, [pc, #388]	; (8008380 <LoRa_Init+0x1a4>)
 80081fa:	f7f8 ffc8 	bl	800118e <HAL_GPIO_WritePin>
  HAL_Delay(1); 															/* delay 1mS */
 80081fe:	2001      	movs	r0, #1
 8008200:	f7f8 fcfe 	bl	8000c00 <HAL_Delay>
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);		/* Set NRST high */
 8008204:	2201      	movs	r2, #1
 8008206:	2101      	movs	r1, #1
 8008208:	485d      	ldr	r0, [pc, #372]	; (8008380 <LoRa_Init+0x1a4>)
 800820a:	f7f8 ffc0 	bl	800118e <HAL_GPIO_WritePin>

  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 800820e:	2380      	movs	r3, #128	; 0x80
 8008210:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_STDBY_RC;
 8008212:	2300      	movs	r3, #0
 8008214:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8008216:	f107 030c 	add.w	r3, r7, #12
 800821a:	2200      	movs	r2, #0
 800821c:	2102      	movs	r1, #2
 800821e:	4618      	mov	r0, r3
 8008220:	f7ff ffa6 	bl	8008170 <SPI_Send>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <LoRa_Init+0x52>
  {
	  return(LoRa_ERROR);
 800822a:	2301      	movs	r3, #1
 800822c:	e0a2      	b.n	8008374 <LoRa_Init+0x198>
  }

  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 800822e:	238a      	movs	r3, #138	; 0x8a
 8008230:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 8008232:	2301      	movs	r3, #1
 8008234:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8008236:	f107 030c 	add.w	r3, r7, #12
 800823a:	2200      	movs	r2, #0
 800823c:	2102      	movs	r1, #2
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff ff96 	bl	8008170 <SPI_Send>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <LoRa_Init+0x72>
  {
	  return(LoRa_ERROR);
 800824a:	2301      	movs	r3, #1
 800824c:	e092      	b.n	8008374 <LoRa_Init+0x198>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 800824e:	2386      	movs	r3, #134	; 0x86
 8008250:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x39;
 8008252:	2339      	movs	r3, #57	; 0x39
 8008254:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x30;
 8008256:	2330      	movs	r3, #48	; 0x30
 8008258:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x00;
 800825e:	2300      	movs	r3, #0
 8008260:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8008262:	f107 030c 	add.w	r3, r7, #12
 8008266:	2200      	movs	r2, #0
 8008268:	2105      	movs	r1, #5
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff ff80 	bl	8008170 <SPI_Send>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <LoRa_Init+0x9e>
  {
	  return(LoRa_ERROR);
 8008276:	2301      	movs	r3, #1
 8008278:	e07c      	b.n	8008374 <LoRa_Init+0x198>
  }

  /* Set the power amplifier configuration */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 800827a:	2395      	movs	r3, #149	; 0x95
 800827c:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 800827e:	2304      	movs	r3, #4
 8008280:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x07; /* hpMax */
 8008282:	2307      	movs	r3, #7
 8008284:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00; /* devSel */
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x01; /* paLut */
 800828a:	2301      	movs	r3, #1
 800828c:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 800828e:	f107 030c 	add.w	r3, r7, #12
 8008292:	2200      	movs	r2, #0
 8008294:	2105      	movs	r1, #5
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff ff6a 	bl	8008170 <SPI_Send>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <LoRa_Init+0xca>
  {
	  return(LoRa_ERROR);
 80082a2:	2301      	movs	r3, #1
 80082a4:	e066      	b.n	8008374 <LoRa_Init+0x198>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 80082a6:	238e      	movs	r3, #142	; 0x8e
 80082a8:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 80082aa:	2316      	movs	r3, #22
 80082ac:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = LORA_STANDARD_RAMPTIME;
 80082ae:	2304      	movs	r3, #4
 80082b0:	73bb      	strb	r3, [r7, #14]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 80082b2:	f107 030c 	add.w	r3, r7, #12
 80082b6:	2200      	movs	r2, #0
 80082b8:	2103      	movs	r1, #3
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff ff58 	bl	8008170 <SPI_Send>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <LoRa_Init+0xee>
  {
	  return(LoRa_ERROR);
 80082c6:	2301      	movs	r3, #1
 80082c8:	e054      	b.n	8008374 <LoRa_Init+0x198>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 80082ca:	239d      	movs	r3, #157	; 0x9d
 80082cc:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* enable */
 80082ce:	2301      	movs	r3, #1
 80082d0:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80082d2:	f107 030c 	add.w	r3, r7, #12
 80082d6:	2200      	movs	r2, #0
 80082d8:	2102      	movs	r1, #2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff ff48 	bl	8008170 <SPI_Send>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <LoRa_Init+0x10e>
  {
	  return(LoRa_ERROR);
 80082e6:	2301      	movs	r3, #1
 80082e8:	e044      	b.n	8008374 <LoRa_Init+0x198>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 80082ea:	2396      	movs	r3, #150	; 0x96
 80082ec:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 80082ee:	2301      	movs	r3, #1
 80082f0:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80082f2:	f107 030c 	add.w	r3, r7, #12
 80082f6:	2200      	movs	r2, #0
 80082f8:	2102      	movs	r1, #2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7ff ff38 	bl	8008170 <SPI_Send>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <LoRa_Init+0x12e>
  {
	  return(LoRa_ERROR);
 8008306:	2301      	movs	r3, #1
 8008308:	e034      	b.n	8008374 <LoRa_Init+0x198>
  }

  /* Set LoRa modulation parameters */
  xmitBuffer[0] = LORA_SET_MODULATION_PARAMS_OPCODE;
 800830a:	238b      	movs	r3, #139	; 0x8b
 800830c:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 7; 		/* Spreading factor */
 800830e:	2307      	movs	r3, #7
 8008310:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x04; 	/* BW = 125 KHz */
 8008312:	2304      	movs	r3, #4
 8008314:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x01;		/* Coding Rate = 4/5 */
 8008316:	2301      	movs	r3, #1
 8008318:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0;		/* Low data rate optimization off */
 800831a:	2300      	movs	r3, #0
 800831c:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	2200      	movs	r2, #0
 8008324:	2105      	movs	r1, #5
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff ff22 	bl	8008170 <SPI_Send>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <LoRa_Init+0x15a>
  {
	  return(LoRa_ERROR);
 8008332:	2301      	movs	r3, #1
 8008334:	e01e      	b.n	8008374 <LoRa_Init+0x198>
  }

  /* Set DIO IRQ parameters */
  xmitBuffer[0] = LORA_SET_DIO_IRQ_PARAMS_OPCODE;
 8008336:	2308      	movs	r3, #8
 8008338:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x02;	/* Enable timeout interrupt */
 800833a:	2302      	movs	r3, #2
 800833c:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x02;	/* Enable RX done interrupt */
 800833e:	2302      	movs	r3, #2
 8008340:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x02;	/* Map timeout to DIO1 */
 8008342:	2302      	movs	r3, #2
 8008344:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x02; /* Map RX done to DIO1 */
 8008346:	2302      	movs	r3, #2
 8008348:	743b      	strb	r3, [r7, #16]
  xmitBuffer[5] = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	747b      	strb	r3, [r7, #17]
  xmitBuffer[6] = 0;	/* No interrupts to DIO2 */
 800834e:	2300      	movs	r3, #0
 8008350:	74bb      	strb	r3, [r7, #18]
  xmitBuffer[7]	= 0;
 8008352:	2300      	movs	r3, #0
 8008354:	74fb      	strb	r3, [r7, #19]
  xmitBuffer[8]	= 0;	/* No interrupts to DIO3 */
 8008356:	2300      	movs	r3, #0
 8008358:	753b      	strb	r3, [r7, #20]
  if(SPI_Send(xmitBuffer, 9, false) != LoRa_OK)
 800835a:	f107 030c 	add.w	r3, r7, #12
 800835e:	2200      	movs	r2, #0
 8008360:	2109      	movs	r1, #9
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff ff04 	bl	8008170 <SPI_Send>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <LoRa_Init+0x196>
  {
	  return(LoRa_ERROR);
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <LoRa_Init+0x198>
  }

  return(LoRa_OK);
 8008372:	2300      	movs	r3, #0

}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	200002f8 	.word	0x200002f8
 8008380:	40020000 	.word	0x40020000

08008384 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008388:	2200      	movs	r2, #0
 800838a:	4912      	ldr	r1, [pc, #72]	; (80083d4 <MX_USB_DEVICE_Init+0x50>)
 800838c:	4812      	ldr	r0, [pc, #72]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 800838e:	f7fe fea8 	bl	80070e2 <USBD_Init>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008398:	f7f8 fa30 	bl	80007fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800839c:	490f      	ldr	r1, [pc, #60]	; (80083dc <MX_USB_DEVICE_Init+0x58>)
 800839e:	480e      	ldr	r0, [pc, #56]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083a0:	f7fe feca 	bl	8007138 <USBD_RegisterClass>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083aa:	f7f8 fa27 	bl	80007fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ae:	490c      	ldr	r1, [pc, #48]	; (80083e0 <MX_USB_DEVICE_Init+0x5c>)
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083b2:	f7fe fdfb 	bl	8006fac <USBD_CDC_RegisterInterface>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083bc:	f7f8 fa1e 	bl	80007fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083c2:	f7fe fed2 	bl	800716a <USBD_Start>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083cc:	f7f8 fa16 	bl	80007fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083d0:	bf00      	nop
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	2000012c 	.word	0x2000012c
 80083d8:	200002fc 	.word	0x200002fc
 80083dc:	20000018 	.word	0x20000018
 80083e0:	2000011c 	.word	0x2000011c

080083e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083e8:	2200      	movs	r2, #0
 80083ea:	4905      	ldr	r1, [pc, #20]	; (8008400 <CDC_Init_FS+0x1c>)
 80083ec:	4805      	ldr	r0, [pc, #20]	; (8008404 <CDC_Init_FS+0x20>)
 80083ee:	f7fe fdf3 	bl	8006fd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083f2:	4905      	ldr	r1, [pc, #20]	; (8008408 <CDC_Init_FS+0x24>)
 80083f4:	4803      	ldr	r0, [pc, #12]	; (8008404 <CDC_Init_FS+0x20>)
 80083f6:	f7fe fe08 	bl	800700a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000998 	.word	0x20000998
 8008404:	200002fc 	.word	0x200002fc
 8008408:	20000598 	.word	0x20000598

0800840c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008410:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008412:	4618      	mov	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr
	...

0800841c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	71fb      	strb	r3, [r7, #7]
 8008428:	4613      	mov	r3, r2
 800842a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	2b23      	cmp	r3, #35	; 0x23
 8008430:	d84a      	bhi.n	80084c8 <CDC_Control_FS+0xac>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <CDC_Control_FS+0x1c>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	080084c9 	.word	0x080084c9
 800843c:	080084c9 	.word	0x080084c9
 8008440:	080084c9 	.word	0x080084c9
 8008444:	080084c9 	.word	0x080084c9
 8008448:	080084c9 	.word	0x080084c9
 800844c:	080084c9 	.word	0x080084c9
 8008450:	080084c9 	.word	0x080084c9
 8008454:	080084c9 	.word	0x080084c9
 8008458:	080084c9 	.word	0x080084c9
 800845c:	080084c9 	.word	0x080084c9
 8008460:	080084c9 	.word	0x080084c9
 8008464:	080084c9 	.word	0x080084c9
 8008468:	080084c9 	.word	0x080084c9
 800846c:	080084c9 	.word	0x080084c9
 8008470:	080084c9 	.word	0x080084c9
 8008474:	080084c9 	.word	0x080084c9
 8008478:	080084c9 	.word	0x080084c9
 800847c:	080084c9 	.word	0x080084c9
 8008480:	080084c9 	.word	0x080084c9
 8008484:	080084c9 	.word	0x080084c9
 8008488:	080084c9 	.word	0x080084c9
 800848c:	080084c9 	.word	0x080084c9
 8008490:	080084c9 	.word	0x080084c9
 8008494:	080084c9 	.word	0x080084c9
 8008498:	080084c9 	.word	0x080084c9
 800849c:	080084c9 	.word	0x080084c9
 80084a0:	080084c9 	.word	0x080084c9
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084c9 	.word	0x080084c9
 80084ac:	080084c9 	.word	0x080084c9
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084c9 	.word	0x080084c9
 80084c0:	080084c9 	.word	0x080084c9
 80084c4:	080084c9 	.word	0x080084c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084c8:	bf00      	nop
  }

  return (USBD_OK);
 80084ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop

080084d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4805      	ldr	r0, [pc, #20]	; (80084fc <CDC_Receive_FS+0x24>)
 80084e6:	f7fe fd90 	bl	800700a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084ea:	4804      	ldr	r0, [pc, #16]	; (80084fc <CDC_Receive_FS+0x24>)
 80084ec:	f7fe fdcf 	bl	800708e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	200002fc 	.word	0x200002fc

08008500 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008510:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <CDC_Transmit_FS+0x48>)
 8008512:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008516:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008522:	2301      	movs	r3, #1
 8008524:	e00b      	b.n	800853e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008526:	887b      	ldrh	r3, [r7, #2]
 8008528:	461a      	mov	r2, r3
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4806      	ldr	r0, [pc, #24]	; (8008548 <CDC_Transmit_FS+0x48>)
 800852e:	f7fe fd53 	bl	8006fd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008532:	4805      	ldr	r0, [pc, #20]	; (8008548 <CDC_Transmit_FS+0x48>)
 8008534:	f7fe fd7c 	bl	8007030 <USBD_CDC_TransmitPacket>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	200002fc 	.word	0x200002fc

0800854c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2212      	movs	r2, #18
 800855c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800855e:	4b03      	ldr	r3, [pc, #12]	; (800856c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20000148 	.word	0x20000148

08008570 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2204      	movs	r2, #4
 8008580:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008582:	4b03      	ldr	r3, [pc, #12]	; (8008590 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	2000015c 	.word	0x2000015c

08008594 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085a0:	79fb      	ldrb	r3, [r7, #7]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4907      	ldr	r1, [pc, #28]	; (80085c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085aa:	4808      	ldr	r0, [pc, #32]	; (80085cc <USBD_FS_ProductStrDescriptor+0x38>)
 80085ac:	f7ff fce0 	bl	8007f70 <USBD_GetString>
 80085b0:	e004      	b.n	80085bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	4904      	ldr	r1, [pc, #16]	; (80085c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085b6:	4805      	ldr	r0, [pc, #20]	; (80085cc <USBD_FS_ProductStrDescriptor+0x38>)
 80085b8:	f7ff fcda 	bl	8007f70 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000d98 	.word	0x20000d98
 80085cc:	0800967c 	.word	0x0800967c

080085d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	4904      	ldr	r1, [pc, #16]	; (80085f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085e0:	4804      	ldr	r0, [pc, #16]	; (80085f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085e2:	f7ff fcc5 	bl	8007f70 <USBD_GetString>
  return USBD_StrDesc;
 80085e6:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20000d98 	.word	0x20000d98
 80085f4:	08009694 	.word	0x08009694

080085f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	221a      	movs	r2, #26
 8008608:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800860a:	f000 f843 	bl	8008694 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800860e:	4b02      	ldr	r3, [pc, #8]	; (8008618 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20000160 	.word	0x20000160

0800861c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d105      	bne.n	800863a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	4907      	ldr	r1, [pc, #28]	; (8008650 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008632:	4808      	ldr	r0, [pc, #32]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008634:	f7ff fc9c 	bl	8007f70 <USBD_GetString>
 8008638:	e004      	b.n	8008644 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	4904      	ldr	r1, [pc, #16]	; (8008650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800863e:	4805      	ldr	r0, [pc, #20]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008640:	f7ff fc96 	bl	8007f70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008644:	4b02      	ldr	r3, [pc, #8]	; (8008650 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008646:	4618      	mov	r0, r3
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000d98 	.word	0x20000d98
 8008654:	080096a8 	.word	0x080096a8

08008658 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	6039      	str	r1, [r7, #0]
 8008662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d105      	bne.n	8008676 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	4907      	ldr	r1, [pc, #28]	; (800868c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800866e:	4808      	ldr	r0, [pc, #32]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008670:	f7ff fc7e 	bl	8007f70 <USBD_GetString>
 8008674:	e004      	b.n	8008680 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	4904      	ldr	r1, [pc, #16]	; (800868c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800867a:	4805      	ldr	r0, [pc, #20]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800867c:	f7ff fc78 	bl	8007f70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008680:	4b02      	ldr	r3, [pc, #8]	; (800868c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000d98 	.word	0x20000d98
 8008690:	080096b4 	.word	0x080096b4

08008694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800869a:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <Get_SerialNum+0x44>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086a0:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <Get_SerialNum+0x48>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086a6:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <Get_SerialNum+0x4c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ba:	2208      	movs	r2, #8
 80086bc:	4909      	ldr	r1, [pc, #36]	; (80086e4 <Get_SerialNum+0x50>)
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f814 	bl	80086ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086c4:	2204      	movs	r2, #4
 80086c6:	4908      	ldr	r1, [pc, #32]	; (80086e8 <Get_SerialNum+0x54>)
 80086c8:	68b8      	ldr	r0, [r7, #8]
 80086ca:	f000 f80f 	bl	80086ec <IntToUnicode>
  }
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	1ff80050 	.word	0x1ff80050
 80086dc:	1ff80054 	.word	0x1ff80054
 80086e0:	1ff80058 	.word	0x1ff80058
 80086e4:	20000162 	.word	0x20000162
 80086e8:	20000172 	.word	0x20000172

080086ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4613      	mov	r3, r2
 80086f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086fe:	2300      	movs	r3, #0
 8008700:	75fb      	strb	r3, [r7, #23]
 8008702:	e027      	b.n	8008754 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	0f1b      	lsrs	r3, r3, #28
 8008708:	2b09      	cmp	r3, #9
 800870a:	d80b      	bhi.n	8008724 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	0f1b      	lsrs	r3, r3, #28
 8008710:	b2da      	uxtb	r2, r3
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4619      	mov	r1, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	440b      	add	r3, r1
 800871c:	3230      	adds	r2, #48	; 0x30
 800871e:	b2d2      	uxtb	r2, r2
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	e00a      	b.n	800873a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	0f1b      	lsrs	r3, r3, #28
 8008728:	b2da      	uxtb	r2, r3
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4619      	mov	r1, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	440b      	add	r3, r1
 8008734:	3237      	adds	r2, #55	; 0x37
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	3301      	adds	r3, #1
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	4413      	add	r3, r2
 800874a:	2200      	movs	r2, #0
 800874c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	3301      	adds	r3, #1
 8008752:	75fb      	strb	r3, [r7, #23]
 8008754:	7dfa      	ldrb	r2, [r7, #23]
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	429a      	cmp	r2, r3
 800875a:	d3d3      	bcc.n	8008704 <IntToUnicode+0x18>
  }
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d106      	bne.n	8008788 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <HAL_PCDEx_SetConnectionState+0x38>)
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <HAL_PCDEx_SetConnectionState+0x38>)
 8008780:	f043 0301 	orr.w	r3, r3, #1
 8008784:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008786:	e005      	b.n	8008794 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008788:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <HAL_PCDEx_SetConnectionState+0x38>)
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	4a04      	ldr	r2, [pc, #16]	; (80087a0 <HAL_PCDEx_SetConnectionState+0x38>)
 800878e:	f023 0301 	bic.w	r3, r3, #1
 8008792:	6053      	str	r3, [r2, #4]
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40010000 	.word	0x40010000

080087a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0d      	ldr	r2, [pc, #52]	; (80087e8 <HAL_PCD_MspInit+0x44>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d113      	bne.n	80087de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087b6:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <HAL_PCD_MspInit+0x48>)
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	4a0c      	ldr	r2, [pc, #48]	; (80087ec <HAL_PCD_MspInit+0x48>)
 80087bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087c0:	6253      	str	r3, [r2, #36]	; 0x24
 80087c2:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <HAL_PCD_MspInit+0x48>)
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	2014      	movs	r0, #20
 80087d4:	f7f8 fb0d 	bl	8000df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80087d8:	2014      	movs	r0, #20
 80087da:	f7f8 fb26 	bl	8000e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40005c00 	.word	0x40005c00
 80087ec:	40023800 	.word	0x40023800

080087f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008804:	4619      	mov	r1, r3
 8008806:	4610      	mov	r0, r2
 8008808:	f7fe fcf7 	bl	80071fa <USBD_LL_SetupStage>
}
 800880c:	bf00      	nop
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008826:	78fa      	ldrb	r2, [r7, #3]
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	440b      	add	r3, r1
 8008834:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	4619      	mov	r1, r3
 800883e:	f7fe fd29 	bl	8007294 <USBD_LL_DataOutStage>
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	440b      	add	r3, r1
 800886a:	333c      	adds	r3, #60	; 0x3c
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	4619      	mov	r1, r3
 8008872:	f7fe fd80 	bl	8007376 <USBD_LL_DataInStage>
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fe8b 	bl	80075a8 <USBD_LL_SOF>
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088a2:	2301      	movs	r3, #1
 80088a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d001      	beq.n	80088b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088ae:	f7f7 ffa5 	bl	80007fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80088b8:	7bfa      	ldrb	r2, [r7, #15]
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fe40 	bl	8007542 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe fdf9 	bl	80074c0 <USBD_LL_Reset>
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fe3a 	bl	8007560 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d005      	beq.n	8008900 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <HAL_PCD_SuspendCallback+0x30>)
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	4a03      	ldr	r2, [pc, #12]	; (8008908 <HAL_PCD_SuspendCallback+0x30>)
 80088fa:	f043 0306 	orr.w	r3, r3, #6
 80088fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	e000ed00 	.word	0xe000ed00

0800890c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800891a:	4618      	mov	r0, r3
 800891c:	f7fe fe34 	bl	8007588 <USBD_LL_Resume>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008930:	4a28      	ldr	r2, [pc, #160]	; (80089d4 <USBD_LL_Init+0xac>)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a26      	ldr	r2, [pc, #152]	; (80089d4 <USBD_LL_Init+0xac>)
 800893c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008940:	4b24      	ldr	r3, [pc, #144]	; (80089d4 <USBD_LL_Init+0xac>)
 8008942:	4a25      	ldr	r2, [pc, #148]	; (80089d8 <USBD_LL_Init+0xb0>)
 8008944:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008946:	4b23      	ldr	r3, [pc, #140]	; (80089d4 <USBD_LL_Init+0xac>)
 8008948:	2208      	movs	r2, #8
 800894a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800894c:	4b21      	ldr	r3, [pc, #132]	; (80089d4 <USBD_LL_Init+0xac>)
 800894e:	2202      	movs	r2, #2
 8008950:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008952:	4b20      	ldr	r3, [pc, #128]	; (80089d4 <USBD_LL_Init+0xac>)
 8008954:	2202      	movs	r2, #2
 8008956:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008958:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <USBD_LL_Init+0xac>)
 800895a:	2200      	movs	r2, #0
 800895c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800895e:	4b1d      	ldr	r3, [pc, #116]	; (80089d4 <USBD_LL_Init+0xac>)
 8008960:	2200      	movs	r2, #0
 8008962:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008964:	481b      	ldr	r0, [pc, #108]	; (80089d4 <USBD_LL_Init+0xac>)
 8008966:	f7f8 fd6f 	bl	8001448 <HAL_PCD_Init>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008970:	f7f7 ff44 	bl	80007fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800897a:	2318      	movs	r3, #24
 800897c:	2200      	movs	r2, #0
 800897e:	2100      	movs	r1, #0
 8008980:	f7fa f94c 	bl	8002c1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800898a:	2358      	movs	r3, #88	; 0x58
 800898c:	2200      	movs	r2, #0
 800898e:	2180      	movs	r1, #128	; 0x80
 8008990:	f7fa f944 	bl	8002c1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800899a:	23c0      	movs	r3, #192	; 0xc0
 800899c:	2200      	movs	r2, #0
 800899e:	2181      	movs	r1, #129	; 0x81
 80089a0:	f7fa f93c 	bl	8002c1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80089aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80089ae:	2200      	movs	r2, #0
 80089b0:	2101      	movs	r1, #1
 80089b2:	f7fa f933 	bl	8002c1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80089bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089c0:	2200      	movs	r2, #0
 80089c2:	2182      	movs	r1, #130	; 0x82
 80089c4:	f7fa f92a 	bl	8002c1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000f98 	.word	0x20000f98
 80089d8:	40005c00 	.word	0x40005c00

080089dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7f8 fe06 	bl	8001604 <HAL_PCD_Start>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 f944 	bl	8008c8c <USBD_Get_USB_Status>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	4608      	mov	r0, r1
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	461a      	mov	r2, r3
 8008a20:	4603      	mov	r3, r0
 8008a22:	70fb      	strb	r3, [r7, #3]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70bb      	strb	r3, [r7, #2]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a3a:	78bb      	ldrb	r3, [r7, #2]
 8008a3c:	883a      	ldrh	r2, [r7, #0]
 8008a3e:	78f9      	ldrb	r1, [r7, #3]
 8008a40:	f7f8 ff22 	bl	8001888 <HAL_PCD_EP_Open>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f91e 	bl	8008c8c <USBD_Get_USB_Status>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	460b      	mov	r3, r1
 8008a68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a78:	78fa      	ldrb	r2, [r7, #3]
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7f8 ff69 	bl	8001954 <HAL_PCD_EP_Close>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 f8ff 	bl	8008c8c <USBD_Get_USB_Status>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f9 f829 	bl	8001b12 <HAL_PCD_EP_SetStall>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f8e0 	bl	8008c8c <USBD_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	4611      	mov	r1, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7f9 f85c 	bl	8001bb6 <HAL_PCD_EP_ClrStall>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 f8c1 	bl	8008c8c <USBD_Get_USB_Status>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008b2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	da0c      	bge.n	8008b4e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	440b      	add	r3, r1
 8008b48:	3302      	adds	r3, #2
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	e00b      	b.n	8008b66 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b54:	68f9      	ldr	r1, [r7, #12]
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	440b      	add	r3, r1
 8008b60:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008b64:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bc80      	pop	{r7}
 8008b6e:	4770      	bx	lr

08008b70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7f8 fe55 	bl	800183e <HAL_PCD_SetAddress>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f876 	bl	8008c8c <USBD_Get_USB_Status>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b086      	sub	sp, #24
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	460b      	mov	r3, r1
 8008bbc:	72fb      	strb	r3, [r7, #11]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008bd0:	893b      	ldrh	r3, [r7, #8]
 8008bd2:	7af9      	ldrb	r1, [r7, #11]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	f7f8 ff59 	bl	8001a8c <HAL_PCD_EP_Transmit>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f853 	bl	8008c8c <USBD_Get_USB_Status>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bea:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	607a      	str	r2, [r7, #4]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	460b      	mov	r3, r1
 8008c02:	72fb      	strb	r3, [r7, #11]
 8008c04:	4613      	mov	r3, r2
 8008c06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008c16:	893b      	ldrh	r3, [r7, #8]
 8008c18:	7af9      	ldrb	r1, [r7, #11]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	f7f8 fee2 	bl	80019e4 <HAL_PCD_EP_Receive>
 8008c20:	4603      	mov	r3, r0
 8008c22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 f830 	bl	8008c8c <USBD_Get_USB_Status>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c30:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008c4c:	78fa      	ldrb	r2, [r7, #3]
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7f8 ff04 	bl	8001a5e <HAL_PCD_EP_GetRxCount>
 8008c56:	4603      	mov	r3, r0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c68:	4b02      	ldr	r3, [pc, #8]	; (8008c74 <USBD_static_malloc+0x14>)
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr
 8008c74:	20001284 	.word	0x20001284

08008c78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]

}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc80      	pop	{r7}
 8008c88:	4770      	bx	lr
	...

08008c8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d817      	bhi.n	8008cd0 <USBD_Get_USB_Status+0x44>
 8008ca0:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <USBD_Get_USB_Status+0x1c>)
 8008ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca6:	bf00      	nop
 8008ca8:	08008cb9 	.word	0x08008cb9
 8008cac:	08008cbf 	.word	0x08008cbf
 8008cb0:	08008cc5 	.word	0x08008cc5
 8008cb4:	08008ccb 	.word	0x08008ccb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbc:	e00b      	b.n	8008cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc2:	e008      	b.n	8008cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc8:	e005      	b.n	8008cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cca:	2302      	movs	r3, #2
 8008ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cce:	e002      	b.n	8008cd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd4:	bf00      	nop
  }
  return usb_status;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bc80      	pop	{r7}
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop

08008ce4 <__errno>:
 8008ce4:	4b01      	ldr	r3, [pc, #4]	; (8008cec <__errno+0x8>)
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	2000017c 	.word	0x2000017c

08008cf0 <__libc_init_array>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	4d0c      	ldr	r5, [pc, #48]	; (8008d28 <__libc_init_array+0x38>)
 8008cf6:	4c0d      	ldr	r4, [pc, #52]	; (8008d2c <__libc_init_array+0x3c>)
 8008cf8:	1b64      	subs	r4, r4, r5
 8008cfa:	10a4      	asrs	r4, r4, #2
 8008cfc:	42a6      	cmp	r6, r4
 8008cfe:	d109      	bne.n	8008d14 <__libc_init_array+0x24>
 8008d00:	f000 fc9c 	bl	800963c <_init>
 8008d04:	2600      	movs	r6, #0
 8008d06:	4d0a      	ldr	r5, [pc, #40]	; (8008d30 <__libc_init_array+0x40>)
 8008d08:	4c0a      	ldr	r4, [pc, #40]	; (8008d34 <__libc_init_array+0x44>)
 8008d0a:	1b64      	subs	r4, r4, r5
 8008d0c:	10a4      	asrs	r4, r4, #2
 8008d0e:	42a6      	cmp	r6, r4
 8008d10:	d105      	bne.n	8008d1e <__libc_init_array+0x2e>
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d18:	4798      	blx	r3
 8008d1a:	3601      	adds	r6, #1
 8008d1c:	e7ee      	b.n	8008cfc <__libc_init_array+0xc>
 8008d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d22:	4798      	blx	r3
 8008d24:	3601      	adds	r6, #1
 8008d26:	e7f2      	b.n	8008d0e <__libc_init_array+0x1e>
 8008d28:	08009724 	.word	0x08009724
 8008d2c:	08009724 	.word	0x08009724
 8008d30:	08009724 	.word	0x08009724
 8008d34:	08009728 	.word	0x08009728

08008d38 <memset>:
 8008d38:	4603      	mov	r3, r0
 8008d3a:	4402      	add	r2, r0
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d100      	bne.n	8008d42 <memset+0xa>
 8008d40:	4770      	bx	lr
 8008d42:	f803 1b01 	strb.w	r1, [r3], #1
 8008d46:	e7f9      	b.n	8008d3c <memset+0x4>

08008d48 <siprintf>:
 8008d48:	b40e      	push	{r1, r2, r3}
 8008d4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d4e:	b500      	push	{lr}
 8008d50:	b09c      	sub	sp, #112	; 0x70
 8008d52:	ab1d      	add	r3, sp, #116	; 0x74
 8008d54:	9002      	str	r0, [sp, #8]
 8008d56:	9006      	str	r0, [sp, #24]
 8008d58:	9107      	str	r1, [sp, #28]
 8008d5a:	9104      	str	r1, [sp, #16]
 8008d5c:	4808      	ldr	r0, [pc, #32]	; (8008d80 <siprintf+0x38>)
 8008d5e:	4909      	ldr	r1, [pc, #36]	; (8008d84 <siprintf+0x3c>)
 8008d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d64:	9105      	str	r1, [sp, #20]
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	a902      	add	r1, sp, #8
 8008d6a:	9301      	str	r3, [sp, #4]
 8008d6c:	f000 f868 	bl	8008e40 <_svfiprintf_r>
 8008d70:	2200      	movs	r2, #0
 8008d72:	9b02      	ldr	r3, [sp, #8]
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	b01c      	add	sp, #112	; 0x70
 8008d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d7c:	b003      	add	sp, #12
 8008d7e:	4770      	bx	lr
 8008d80:	2000017c 	.word	0x2000017c
 8008d84:	ffff0208 	.word	0xffff0208

08008d88 <__ssputs_r>:
 8008d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	688e      	ldr	r6, [r1, #8]
 8008d8e:	4682      	mov	sl, r0
 8008d90:	429e      	cmp	r6, r3
 8008d92:	460c      	mov	r4, r1
 8008d94:	4690      	mov	r8, r2
 8008d96:	461f      	mov	r7, r3
 8008d98:	d838      	bhi.n	8008e0c <__ssputs_r+0x84>
 8008d9a:	898a      	ldrh	r2, [r1, #12]
 8008d9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008da0:	d032      	beq.n	8008e08 <__ssputs_r+0x80>
 8008da2:	6825      	ldr	r5, [r4, #0]
 8008da4:	6909      	ldr	r1, [r1, #16]
 8008da6:	3301      	adds	r3, #1
 8008da8:	eba5 0901 	sub.w	r9, r5, r1
 8008dac:	6965      	ldr	r5, [r4, #20]
 8008dae:	444b      	add	r3, r9
 8008db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008db4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008db8:	106d      	asrs	r5, r5, #1
 8008dba:	429d      	cmp	r5, r3
 8008dbc:	bf38      	it	cc
 8008dbe:	461d      	movcc	r5, r3
 8008dc0:	0553      	lsls	r3, r2, #21
 8008dc2:	d531      	bpl.n	8008e28 <__ssputs_r+0xa0>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f000 fb6f 	bl	80094a8 <_malloc_r>
 8008dca:	4606      	mov	r6, r0
 8008dcc:	b950      	cbnz	r0, 8008de4 <__ssputs_r+0x5c>
 8008dce:	230c      	movs	r3, #12
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	f8ca 3000 	str.w	r3, [sl]
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de4:	464a      	mov	r2, r9
 8008de6:	6921      	ldr	r1, [r4, #16]
 8008de8:	f000 face 	bl	8009388 <memcpy>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	6126      	str	r6, [r4, #16]
 8008dfa:	444e      	add	r6, r9
 8008dfc:	6026      	str	r6, [r4, #0]
 8008dfe:	463e      	mov	r6, r7
 8008e00:	6165      	str	r5, [r4, #20]
 8008e02:	eba5 0509 	sub.w	r5, r5, r9
 8008e06:	60a5      	str	r5, [r4, #8]
 8008e08:	42be      	cmp	r6, r7
 8008e0a:	d900      	bls.n	8008e0e <__ssputs_r+0x86>
 8008e0c:	463e      	mov	r6, r7
 8008e0e:	4632      	mov	r2, r6
 8008e10:	4641      	mov	r1, r8
 8008e12:	6820      	ldr	r0, [r4, #0]
 8008e14:	f000 fac6 	bl	80093a4 <memmove>
 8008e18:	68a3      	ldr	r3, [r4, #8]
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	1b9b      	subs	r3, r3, r6
 8008e1e:	60a3      	str	r3, [r4, #8]
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	4433      	add	r3, r6
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	e7db      	b.n	8008de0 <__ssputs_r+0x58>
 8008e28:	462a      	mov	r2, r5
 8008e2a:	f000 fbb1 	bl	8009590 <_realloc_r>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d1e1      	bne.n	8008df8 <__ssputs_r+0x70>
 8008e34:	4650      	mov	r0, sl
 8008e36:	6921      	ldr	r1, [r4, #16]
 8008e38:	f000 face 	bl	80093d8 <_free_r>
 8008e3c:	e7c7      	b.n	8008dce <__ssputs_r+0x46>
	...

08008e40 <_svfiprintf_r>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	4698      	mov	r8, r3
 8008e46:	898b      	ldrh	r3, [r1, #12]
 8008e48:	4607      	mov	r7, r0
 8008e4a:	061b      	lsls	r3, r3, #24
 8008e4c:	460d      	mov	r5, r1
 8008e4e:	4614      	mov	r4, r2
 8008e50:	b09d      	sub	sp, #116	; 0x74
 8008e52:	d50e      	bpl.n	8008e72 <_svfiprintf_r+0x32>
 8008e54:	690b      	ldr	r3, [r1, #16]
 8008e56:	b963      	cbnz	r3, 8008e72 <_svfiprintf_r+0x32>
 8008e58:	2140      	movs	r1, #64	; 0x40
 8008e5a:	f000 fb25 	bl	80094a8 <_malloc_r>
 8008e5e:	6028      	str	r0, [r5, #0]
 8008e60:	6128      	str	r0, [r5, #16]
 8008e62:	b920      	cbnz	r0, 8008e6e <_svfiprintf_r+0x2e>
 8008e64:	230c      	movs	r3, #12
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	e0d1      	b.n	8009012 <_svfiprintf_r+0x1d2>
 8008e6e:	2340      	movs	r3, #64	; 0x40
 8008e70:	616b      	str	r3, [r5, #20]
 8008e72:	2300      	movs	r3, #0
 8008e74:	9309      	str	r3, [sp, #36]	; 0x24
 8008e76:	2320      	movs	r3, #32
 8008e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e7c:	2330      	movs	r3, #48	; 0x30
 8008e7e:	f04f 0901 	mov.w	r9, #1
 8008e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800902c <_svfiprintf_r+0x1ec>
 8008e8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e8e:	4623      	mov	r3, r4
 8008e90:	469a      	mov	sl, r3
 8008e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e96:	b10a      	cbz	r2, 8008e9c <_svfiprintf_r+0x5c>
 8008e98:	2a25      	cmp	r2, #37	; 0x25
 8008e9a:	d1f9      	bne.n	8008e90 <_svfiprintf_r+0x50>
 8008e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008ea0:	d00b      	beq.n	8008eba <_svfiprintf_r+0x7a>
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f7ff ff6d 	bl	8008d88 <__ssputs_r>
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f000 80aa 	beq.w	8009008 <_svfiprintf_r+0x1c8>
 8008eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb6:	445a      	add	r2, fp
 8008eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8008eba:	f89a 3000 	ldrb.w	r3, [sl]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 80a2 	beq.w	8009008 <_svfiprintf_r+0x1c8>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ece:	f10a 0a01 	add.w	sl, sl, #1
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	9307      	str	r3, [sp, #28]
 8008ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eda:	931a      	str	r3, [sp, #104]	; 0x68
 8008edc:	4654      	mov	r4, sl
 8008ede:	2205      	movs	r2, #5
 8008ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee4:	4851      	ldr	r0, [pc, #324]	; (800902c <_svfiprintf_r+0x1ec>)
 8008ee6:	f000 fa41 	bl	800936c <memchr>
 8008eea:	9a04      	ldr	r2, [sp, #16]
 8008eec:	b9d8      	cbnz	r0, 8008f26 <_svfiprintf_r+0xe6>
 8008eee:	06d0      	lsls	r0, r2, #27
 8008ef0:	bf44      	itt	mi
 8008ef2:	2320      	movmi	r3, #32
 8008ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef8:	0711      	lsls	r1, r2, #28
 8008efa:	bf44      	itt	mi
 8008efc:	232b      	movmi	r3, #43	; 0x2b
 8008efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f02:	f89a 3000 	ldrb.w	r3, [sl]
 8008f06:	2b2a      	cmp	r3, #42	; 0x2a
 8008f08:	d015      	beq.n	8008f36 <_svfiprintf_r+0xf6>
 8008f0a:	4654      	mov	r4, sl
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	f04f 0c0a 	mov.w	ip, #10
 8008f12:	9a07      	ldr	r2, [sp, #28]
 8008f14:	4621      	mov	r1, r4
 8008f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f1a:	3b30      	subs	r3, #48	; 0x30
 8008f1c:	2b09      	cmp	r3, #9
 8008f1e:	d94e      	bls.n	8008fbe <_svfiprintf_r+0x17e>
 8008f20:	b1b0      	cbz	r0, 8008f50 <_svfiprintf_r+0x110>
 8008f22:	9207      	str	r2, [sp, #28]
 8008f24:	e014      	b.n	8008f50 <_svfiprintf_r+0x110>
 8008f26:	eba0 0308 	sub.w	r3, r0, r8
 8008f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	46a2      	mov	sl, r4
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	e7d2      	b.n	8008edc <_svfiprintf_r+0x9c>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	1d19      	adds	r1, r3, #4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	9103      	str	r1, [sp, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	bfbb      	ittet	lt
 8008f42:	425b      	neglt	r3, r3
 8008f44:	f042 0202 	orrlt.w	r2, r2, #2
 8008f48:	9307      	strge	r3, [sp, #28]
 8008f4a:	9307      	strlt	r3, [sp, #28]
 8008f4c:	bfb8      	it	lt
 8008f4e:	9204      	strlt	r2, [sp, #16]
 8008f50:	7823      	ldrb	r3, [r4, #0]
 8008f52:	2b2e      	cmp	r3, #46	; 0x2e
 8008f54:	d10c      	bne.n	8008f70 <_svfiprintf_r+0x130>
 8008f56:	7863      	ldrb	r3, [r4, #1]
 8008f58:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5a:	d135      	bne.n	8008fc8 <_svfiprintf_r+0x188>
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	3402      	adds	r4, #2
 8008f60:	1d1a      	adds	r2, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9203      	str	r2, [sp, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfb8      	it	lt
 8008f6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f6e:	9305      	str	r3, [sp, #20]
 8008f70:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009030 <_svfiprintf_r+0x1f0>
 8008f74:	2203      	movs	r2, #3
 8008f76:	4650      	mov	r0, sl
 8008f78:	7821      	ldrb	r1, [r4, #0]
 8008f7a:	f000 f9f7 	bl	800936c <memchr>
 8008f7e:	b140      	cbz	r0, 8008f92 <_svfiprintf_r+0x152>
 8008f80:	2340      	movs	r3, #64	; 0x40
 8008f82:	eba0 000a 	sub.w	r0, r0, sl
 8008f86:	fa03 f000 	lsl.w	r0, r3, r0
 8008f8a:	9b04      	ldr	r3, [sp, #16]
 8008f8c:	3401      	adds	r4, #1
 8008f8e:	4303      	orrs	r3, r0
 8008f90:	9304      	str	r3, [sp, #16]
 8008f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f96:	2206      	movs	r2, #6
 8008f98:	4826      	ldr	r0, [pc, #152]	; (8009034 <_svfiprintf_r+0x1f4>)
 8008f9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f9e:	f000 f9e5 	bl	800936c <memchr>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d038      	beq.n	8009018 <_svfiprintf_r+0x1d8>
 8008fa6:	4b24      	ldr	r3, [pc, #144]	; (8009038 <_svfiprintf_r+0x1f8>)
 8008fa8:	bb1b      	cbnz	r3, 8008ff2 <_svfiprintf_r+0x1b2>
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	3307      	adds	r3, #7
 8008fae:	f023 0307 	bic.w	r3, r3, #7
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	9303      	str	r3, [sp, #12]
 8008fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb8:	4433      	add	r3, r6
 8008fba:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbc:	e767      	b.n	8008e8e <_svfiprintf_r+0x4e>
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fc6:	e7a5      	b.n	8008f14 <_svfiprintf_r+0xd4>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f04f 0c0a 	mov.w	ip, #10
 8008fce:	4619      	mov	r1, r3
 8008fd0:	3401      	adds	r4, #1
 8008fd2:	9305      	str	r3, [sp, #20]
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fda:	3a30      	subs	r2, #48	; 0x30
 8008fdc:	2a09      	cmp	r2, #9
 8008fde:	d903      	bls.n	8008fe8 <_svfiprintf_r+0x1a8>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0c5      	beq.n	8008f70 <_svfiprintf_r+0x130>
 8008fe4:	9105      	str	r1, [sp, #20]
 8008fe6:	e7c3      	b.n	8008f70 <_svfiprintf_r+0x130>
 8008fe8:	4604      	mov	r4, r0
 8008fea:	2301      	movs	r3, #1
 8008fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ff0:	e7f0      	b.n	8008fd4 <_svfiprintf_r+0x194>
 8008ff2:	ab03      	add	r3, sp, #12
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	462a      	mov	r2, r5
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	4b10      	ldr	r3, [pc, #64]	; (800903c <_svfiprintf_r+0x1fc>)
 8008ffc:	a904      	add	r1, sp, #16
 8008ffe:	f3af 8000 	nop.w
 8009002:	1c42      	adds	r2, r0, #1
 8009004:	4606      	mov	r6, r0
 8009006:	d1d6      	bne.n	8008fb6 <_svfiprintf_r+0x176>
 8009008:	89ab      	ldrh	r3, [r5, #12]
 800900a:	065b      	lsls	r3, r3, #25
 800900c:	f53f af2c 	bmi.w	8008e68 <_svfiprintf_r+0x28>
 8009010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009012:	b01d      	add	sp, #116	; 0x74
 8009014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	ab03      	add	r3, sp, #12
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	462a      	mov	r2, r5
 800901e:	4638      	mov	r0, r7
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <_svfiprintf_r+0x1fc>)
 8009022:	a904      	add	r1, sp, #16
 8009024:	f000 f87c 	bl	8009120 <_printf_i>
 8009028:	e7eb      	b.n	8009002 <_svfiprintf_r+0x1c2>
 800902a:	bf00      	nop
 800902c:	080096e8 	.word	0x080096e8
 8009030:	080096ee 	.word	0x080096ee
 8009034:	080096f2 	.word	0x080096f2
 8009038:	00000000 	.word	0x00000000
 800903c:	08008d89 	.word	0x08008d89

08009040 <_printf_common>:
 8009040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	4616      	mov	r6, r2
 8009046:	4699      	mov	r9, r3
 8009048:	688a      	ldr	r2, [r1, #8]
 800904a:	690b      	ldr	r3, [r1, #16]
 800904c:	4607      	mov	r7, r0
 800904e:	4293      	cmp	r3, r2
 8009050:	bfb8      	it	lt
 8009052:	4613      	movlt	r3, r2
 8009054:	6033      	str	r3, [r6, #0]
 8009056:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800905a:	460c      	mov	r4, r1
 800905c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009060:	b10a      	cbz	r2, 8009066 <_printf_common+0x26>
 8009062:	3301      	adds	r3, #1
 8009064:	6033      	str	r3, [r6, #0]
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	0699      	lsls	r1, r3, #26
 800906a:	bf42      	ittt	mi
 800906c:	6833      	ldrmi	r3, [r6, #0]
 800906e:	3302      	addmi	r3, #2
 8009070:	6033      	strmi	r3, [r6, #0]
 8009072:	6825      	ldr	r5, [r4, #0]
 8009074:	f015 0506 	ands.w	r5, r5, #6
 8009078:	d106      	bne.n	8009088 <_printf_common+0x48>
 800907a:	f104 0a19 	add.w	sl, r4, #25
 800907e:	68e3      	ldr	r3, [r4, #12]
 8009080:	6832      	ldr	r2, [r6, #0]
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	42ab      	cmp	r3, r5
 8009086:	dc28      	bgt.n	80090da <_printf_common+0x9a>
 8009088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800908c:	1e13      	subs	r3, r2, #0
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	bf18      	it	ne
 8009092:	2301      	movne	r3, #1
 8009094:	0692      	lsls	r2, r2, #26
 8009096:	d42d      	bmi.n	80090f4 <_printf_common+0xb4>
 8009098:	4649      	mov	r1, r9
 800909a:	4638      	mov	r0, r7
 800909c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090a0:	47c0      	blx	r8
 80090a2:	3001      	adds	r0, #1
 80090a4:	d020      	beq.n	80090e8 <_printf_common+0xa8>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	68e5      	ldr	r5, [r4, #12]
 80090aa:	f003 0306 	and.w	r3, r3, #6
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	bf18      	it	ne
 80090b2:	2500      	movne	r5, #0
 80090b4:	6832      	ldr	r2, [r6, #0]
 80090b6:	f04f 0600 	mov.w	r6, #0
 80090ba:	68a3      	ldr	r3, [r4, #8]
 80090bc:	bf08      	it	eq
 80090be:	1aad      	subeq	r5, r5, r2
 80090c0:	6922      	ldr	r2, [r4, #16]
 80090c2:	bf08      	it	eq
 80090c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090c8:	4293      	cmp	r3, r2
 80090ca:	bfc4      	itt	gt
 80090cc:	1a9b      	subgt	r3, r3, r2
 80090ce:	18ed      	addgt	r5, r5, r3
 80090d0:	341a      	adds	r4, #26
 80090d2:	42b5      	cmp	r5, r6
 80090d4:	d11a      	bne.n	800910c <_printf_common+0xcc>
 80090d6:	2000      	movs	r0, #0
 80090d8:	e008      	b.n	80090ec <_printf_common+0xac>
 80090da:	2301      	movs	r3, #1
 80090dc:	4652      	mov	r2, sl
 80090de:	4649      	mov	r1, r9
 80090e0:	4638      	mov	r0, r7
 80090e2:	47c0      	blx	r8
 80090e4:	3001      	adds	r0, #1
 80090e6:	d103      	bne.n	80090f0 <_printf_common+0xb0>
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f0:	3501      	adds	r5, #1
 80090f2:	e7c4      	b.n	800907e <_printf_common+0x3e>
 80090f4:	2030      	movs	r0, #48	; 0x30
 80090f6:	18e1      	adds	r1, r4, r3
 80090f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009102:	4422      	add	r2, r4
 8009104:	3302      	adds	r3, #2
 8009106:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800910a:	e7c5      	b.n	8009098 <_printf_common+0x58>
 800910c:	2301      	movs	r3, #1
 800910e:	4622      	mov	r2, r4
 8009110:	4649      	mov	r1, r9
 8009112:	4638      	mov	r0, r7
 8009114:	47c0      	blx	r8
 8009116:	3001      	adds	r0, #1
 8009118:	d0e6      	beq.n	80090e8 <_printf_common+0xa8>
 800911a:	3601      	adds	r6, #1
 800911c:	e7d9      	b.n	80090d2 <_printf_common+0x92>
	...

08009120 <_printf_i>:
 8009120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	7e0f      	ldrb	r7, [r1, #24]
 8009126:	4691      	mov	r9, r2
 8009128:	2f78      	cmp	r7, #120	; 0x78
 800912a:	4680      	mov	r8, r0
 800912c:	460c      	mov	r4, r1
 800912e:	469a      	mov	sl, r3
 8009130:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009136:	d807      	bhi.n	8009148 <_printf_i+0x28>
 8009138:	2f62      	cmp	r7, #98	; 0x62
 800913a:	d80a      	bhi.n	8009152 <_printf_i+0x32>
 800913c:	2f00      	cmp	r7, #0
 800913e:	f000 80d9 	beq.w	80092f4 <_printf_i+0x1d4>
 8009142:	2f58      	cmp	r7, #88	; 0x58
 8009144:	f000 80a4 	beq.w	8009290 <_printf_i+0x170>
 8009148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800914c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009150:	e03a      	b.n	80091c8 <_printf_i+0xa8>
 8009152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009156:	2b15      	cmp	r3, #21
 8009158:	d8f6      	bhi.n	8009148 <_printf_i+0x28>
 800915a:	a101      	add	r1, pc, #4	; (adr r1, 8009160 <_printf_i+0x40>)
 800915c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009160:	080091b9 	.word	0x080091b9
 8009164:	080091cd 	.word	0x080091cd
 8009168:	08009149 	.word	0x08009149
 800916c:	08009149 	.word	0x08009149
 8009170:	08009149 	.word	0x08009149
 8009174:	08009149 	.word	0x08009149
 8009178:	080091cd 	.word	0x080091cd
 800917c:	08009149 	.word	0x08009149
 8009180:	08009149 	.word	0x08009149
 8009184:	08009149 	.word	0x08009149
 8009188:	08009149 	.word	0x08009149
 800918c:	080092db 	.word	0x080092db
 8009190:	080091fd 	.word	0x080091fd
 8009194:	080092bd 	.word	0x080092bd
 8009198:	08009149 	.word	0x08009149
 800919c:	08009149 	.word	0x08009149
 80091a0:	080092fd 	.word	0x080092fd
 80091a4:	08009149 	.word	0x08009149
 80091a8:	080091fd 	.word	0x080091fd
 80091ac:	08009149 	.word	0x08009149
 80091b0:	08009149 	.word	0x08009149
 80091b4:	080092c5 	.word	0x080092c5
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	1d1a      	adds	r2, r3, #4
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	602a      	str	r2, [r5, #0]
 80091c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091c8:	2301      	movs	r3, #1
 80091ca:	e0a4      	b.n	8009316 <_printf_i+0x1f6>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	6829      	ldr	r1, [r5, #0]
 80091d0:	0606      	lsls	r6, r0, #24
 80091d2:	f101 0304 	add.w	r3, r1, #4
 80091d6:	d50a      	bpl.n	80091ee <_printf_i+0xce>
 80091d8:	680e      	ldr	r6, [r1, #0]
 80091da:	602b      	str	r3, [r5, #0]
 80091dc:	2e00      	cmp	r6, #0
 80091de:	da03      	bge.n	80091e8 <_printf_i+0xc8>
 80091e0:	232d      	movs	r3, #45	; 0x2d
 80091e2:	4276      	negs	r6, r6
 80091e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e8:	230a      	movs	r3, #10
 80091ea:	485e      	ldr	r0, [pc, #376]	; (8009364 <_printf_i+0x244>)
 80091ec:	e019      	b.n	8009222 <_printf_i+0x102>
 80091ee:	680e      	ldr	r6, [r1, #0]
 80091f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	bf18      	it	ne
 80091f8:	b236      	sxthne	r6, r6
 80091fa:	e7ef      	b.n	80091dc <_printf_i+0xbc>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	6820      	ldr	r0, [r4, #0]
 8009200:	1d19      	adds	r1, r3, #4
 8009202:	6029      	str	r1, [r5, #0]
 8009204:	0601      	lsls	r1, r0, #24
 8009206:	d501      	bpl.n	800920c <_printf_i+0xec>
 8009208:	681e      	ldr	r6, [r3, #0]
 800920a:	e002      	b.n	8009212 <_printf_i+0xf2>
 800920c:	0646      	lsls	r6, r0, #25
 800920e:	d5fb      	bpl.n	8009208 <_printf_i+0xe8>
 8009210:	881e      	ldrh	r6, [r3, #0]
 8009212:	2f6f      	cmp	r7, #111	; 0x6f
 8009214:	bf0c      	ite	eq
 8009216:	2308      	moveq	r3, #8
 8009218:	230a      	movne	r3, #10
 800921a:	4852      	ldr	r0, [pc, #328]	; (8009364 <_printf_i+0x244>)
 800921c:	2100      	movs	r1, #0
 800921e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009222:	6865      	ldr	r5, [r4, #4]
 8009224:	2d00      	cmp	r5, #0
 8009226:	bfa8      	it	ge
 8009228:	6821      	ldrge	r1, [r4, #0]
 800922a:	60a5      	str	r5, [r4, #8]
 800922c:	bfa4      	itt	ge
 800922e:	f021 0104 	bicge.w	r1, r1, #4
 8009232:	6021      	strge	r1, [r4, #0]
 8009234:	b90e      	cbnz	r6, 800923a <_printf_i+0x11a>
 8009236:	2d00      	cmp	r5, #0
 8009238:	d04d      	beq.n	80092d6 <_printf_i+0x1b6>
 800923a:	4615      	mov	r5, r2
 800923c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009240:	fb03 6711 	mls	r7, r3, r1, r6
 8009244:	5dc7      	ldrb	r7, [r0, r7]
 8009246:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800924a:	4637      	mov	r7, r6
 800924c:	42bb      	cmp	r3, r7
 800924e:	460e      	mov	r6, r1
 8009250:	d9f4      	bls.n	800923c <_printf_i+0x11c>
 8009252:	2b08      	cmp	r3, #8
 8009254:	d10b      	bne.n	800926e <_printf_i+0x14e>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	07de      	lsls	r6, r3, #31
 800925a:	d508      	bpl.n	800926e <_printf_i+0x14e>
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	6861      	ldr	r1, [r4, #4]
 8009260:	4299      	cmp	r1, r3
 8009262:	bfde      	ittt	le
 8009264:	2330      	movle	r3, #48	; 0x30
 8009266:	f805 3c01 	strble.w	r3, [r5, #-1]
 800926a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800926e:	1b52      	subs	r2, r2, r5
 8009270:	6122      	str	r2, [r4, #16]
 8009272:	464b      	mov	r3, r9
 8009274:	4621      	mov	r1, r4
 8009276:	4640      	mov	r0, r8
 8009278:	f8cd a000 	str.w	sl, [sp]
 800927c:	aa03      	add	r2, sp, #12
 800927e:	f7ff fedf 	bl	8009040 <_printf_common>
 8009282:	3001      	adds	r0, #1
 8009284:	d14c      	bne.n	8009320 <_printf_i+0x200>
 8009286:	f04f 30ff 	mov.w	r0, #4294967295
 800928a:	b004      	add	sp, #16
 800928c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009290:	4834      	ldr	r0, [pc, #208]	; (8009364 <_printf_i+0x244>)
 8009292:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009296:	6829      	ldr	r1, [r5, #0]
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	f851 6b04 	ldr.w	r6, [r1], #4
 800929e:	6029      	str	r1, [r5, #0]
 80092a0:	061d      	lsls	r5, r3, #24
 80092a2:	d514      	bpl.n	80092ce <_printf_i+0x1ae>
 80092a4:	07df      	lsls	r7, r3, #31
 80092a6:	bf44      	itt	mi
 80092a8:	f043 0320 	orrmi.w	r3, r3, #32
 80092ac:	6023      	strmi	r3, [r4, #0]
 80092ae:	b91e      	cbnz	r6, 80092b8 <_printf_i+0x198>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	f023 0320 	bic.w	r3, r3, #32
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	2310      	movs	r3, #16
 80092ba:	e7af      	b.n	800921c <_printf_i+0xfc>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	f043 0320 	orr.w	r3, r3, #32
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	2378      	movs	r3, #120	; 0x78
 80092c6:	4828      	ldr	r0, [pc, #160]	; (8009368 <_printf_i+0x248>)
 80092c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092cc:	e7e3      	b.n	8009296 <_printf_i+0x176>
 80092ce:	0659      	lsls	r1, r3, #25
 80092d0:	bf48      	it	mi
 80092d2:	b2b6      	uxthmi	r6, r6
 80092d4:	e7e6      	b.n	80092a4 <_printf_i+0x184>
 80092d6:	4615      	mov	r5, r2
 80092d8:	e7bb      	b.n	8009252 <_printf_i+0x132>
 80092da:	682b      	ldr	r3, [r5, #0]
 80092dc:	6826      	ldr	r6, [r4, #0]
 80092de:	1d18      	adds	r0, r3, #4
 80092e0:	6961      	ldr	r1, [r4, #20]
 80092e2:	6028      	str	r0, [r5, #0]
 80092e4:	0635      	lsls	r5, r6, #24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	d501      	bpl.n	80092ee <_printf_i+0x1ce>
 80092ea:	6019      	str	r1, [r3, #0]
 80092ec:	e002      	b.n	80092f4 <_printf_i+0x1d4>
 80092ee:	0670      	lsls	r0, r6, #25
 80092f0:	d5fb      	bpl.n	80092ea <_printf_i+0x1ca>
 80092f2:	8019      	strh	r1, [r3, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	4615      	mov	r5, r2
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	e7ba      	b.n	8009272 <_printf_i+0x152>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	2100      	movs	r1, #0
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	602a      	str	r2, [r5, #0]
 8009304:	681d      	ldr	r5, [r3, #0]
 8009306:	6862      	ldr	r2, [r4, #4]
 8009308:	4628      	mov	r0, r5
 800930a:	f000 f82f 	bl	800936c <memchr>
 800930e:	b108      	cbz	r0, 8009314 <_printf_i+0x1f4>
 8009310:	1b40      	subs	r0, r0, r5
 8009312:	6060      	str	r0, [r4, #4]
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	2300      	movs	r3, #0
 800931a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800931e:	e7a8      	b.n	8009272 <_printf_i+0x152>
 8009320:	462a      	mov	r2, r5
 8009322:	4649      	mov	r1, r9
 8009324:	4640      	mov	r0, r8
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	47d0      	blx	sl
 800932a:	3001      	adds	r0, #1
 800932c:	d0ab      	beq.n	8009286 <_printf_i+0x166>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	079b      	lsls	r3, r3, #30
 8009332:	d413      	bmi.n	800935c <_printf_i+0x23c>
 8009334:	68e0      	ldr	r0, [r4, #12]
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	4298      	cmp	r0, r3
 800933a:	bfb8      	it	lt
 800933c:	4618      	movlt	r0, r3
 800933e:	e7a4      	b.n	800928a <_printf_i+0x16a>
 8009340:	2301      	movs	r3, #1
 8009342:	4632      	mov	r2, r6
 8009344:	4649      	mov	r1, r9
 8009346:	4640      	mov	r0, r8
 8009348:	47d0      	blx	sl
 800934a:	3001      	adds	r0, #1
 800934c:	d09b      	beq.n	8009286 <_printf_i+0x166>
 800934e:	3501      	adds	r5, #1
 8009350:	68e3      	ldr	r3, [r4, #12]
 8009352:	9903      	ldr	r1, [sp, #12]
 8009354:	1a5b      	subs	r3, r3, r1
 8009356:	42ab      	cmp	r3, r5
 8009358:	dcf2      	bgt.n	8009340 <_printf_i+0x220>
 800935a:	e7eb      	b.n	8009334 <_printf_i+0x214>
 800935c:	2500      	movs	r5, #0
 800935e:	f104 0619 	add.w	r6, r4, #25
 8009362:	e7f5      	b.n	8009350 <_printf_i+0x230>
 8009364:	080096f9 	.word	0x080096f9
 8009368:	0800970a 	.word	0x0800970a

0800936c <memchr>:
 800936c:	4603      	mov	r3, r0
 800936e:	b510      	push	{r4, lr}
 8009370:	b2c9      	uxtb	r1, r1
 8009372:	4402      	add	r2, r0
 8009374:	4293      	cmp	r3, r2
 8009376:	4618      	mov	r0, r3
 8009378:	d101      	bne.n	800937e <memchr+0x12>
 800937a:	2000      	movs	r0, #0
 800937c:	e003      	b.n	8009386 <memchr+0x1a>
 800937e:	7804      	ldrb	r4, [r0, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	428c      	cmp	r4, r1
 8009384:	d1f6      	bne.n	8009374 <memchr+0x8>
 8009386:	bd10      	pop	{r4, pc}

08009388 <memcpy>:
 8009388:	440a      	add	r2, r1
 800938a:	4291      	cmp	r1, r2
 800938c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009390:	d100      	bne.n	8009394 <memcpy+0xc>
 8009392:	4770      	bx	lr
 8009394:	b510      	push	{r4, lr}
 8009396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939a:	4291      	cmp	r1, r2
 800939c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093a0:	d1f9      	bne.n	8009396 <memcpy+0xe>
 80093a2:	bd10      	pop	{r4, pc}

080093a4 <memmove>:
 80093a4:	4288      	cmp	r0, r1
 80093a6:	b510      	push	{r4, lr}
 80093a8:	eb01 0402 	add.w	r4, r1, r2
 80093ac:	d902      	bls.n	80093b4 <memmove+0x10>
 80093ae:	4284      	cmp	r4, r0
 80093b0:	4623      	mov	r3, r4
 80093b2:	d807      	bhi.n	80093c4 <memmove+0x20>
 80093b4:	1e43      	subs	r3, r0, #1
 80093b6:	42a1      	cmp	r1, r4
 80093b8:	d008      	beq.n	80093cc <memmove+0x28>
 80093ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093c2:	e7f8      	b.n	80093b6 <memmove+0x12>
 80093c4:	4601      	mov	r1, r0
 80093c6:	4402      	add	r2, r0
 80093c8:	428a      	cmp	r2, r1
 80093ca:	d100      	bne.n	80093ce <memmove+0x2a>
 80093cc:	bd10      	pop	{r4, pc}
 80093ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093d6:	e7f7      	b.n	80093c8 <memmove+0x24>

080093d8 <_free_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4605      	mov	r5, r0
 80093dc:	2900      	cmp	r1, #0
 80093de:	d040      	beq.n	8009462 <_free_r+0x8a>
 80093e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e4:	1f0c      	subs	r4, r1, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfb8      	it	lt
 80093ea:	18e4      	addlt	r4, r4, r3
 80093ec:	f000 f910 	bl	8009610 <__malloc_lock>
 80093f0:	4a1c      	ldr	r2, [pc, #112]	; (8009464 <_free_r+0x8c>)
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	b933      	cbnz	r3, 8009404 <_free_r+0x2c>
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	6014      	str	r4, [r2, #0]
 80093fa:	4628      	mov	r0, r5
 80093fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009400:	f000 b90c 	b.w	800961c <__malloc_unlock>
 8009404:	42a3      	cmp	r3, r4
 8009406:	d908      	bls.n	800941a <_free_r+0x42>
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	1821      	adds	r1, r4, r0
 800940c:	428b      	cmp	r3, r1
 800940e:	bf01      	itttt	eq
 8009410:	6819      	ldreq	r1, [r3, #0]
 8009412:	685b      	ldreq	r3, [r3, #4]
 8009414:	1809      	addeq	r1, r1, r0
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	e7ed      	b.n	80093f6 <_free_r+0x1e>
 800941a:	461a      	mov	r2, r3
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b10b      	cbz	r3, 8009424 <_free_r+0x4c>
 8009420:	42a3      	cmp	r3, r4
 8009422:	d9fa      	bls.n	800941a <_free_r+0x42>
 8009424:	6811      	ldr	r1, [r2, #0]
 8009426:	1850      	adds	r0, r2, r1
 8009428:	42a0      	cmp	r0, r4
 800942a:	d10b      	bne.n	8009444 <_free_r+0x6c>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	4401      	add	r1, r0
 8009430:	1850      	adds	r0, r2, r1
 8009432:	4283      	cmp	r3, r0
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	d1e0      	bne.n	80093fa <_free_r+0x22>
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	4401      	add	r1, r0
 800943e:	6011      	str	r1, [r2, #0]
 8009440:	6053      	str	r3, [r2, #4]
 8009442:	e7da      	b.n	80093fa <_free_r+0x22>
 8009444:	d902      	bls.n	800944c <_free_r+0x74>
 8009446:	230c      	movs	r3, #12
 8009448:	602b      	str	r3, [r5, #0]
 800944a:	e7d6      	b.n	80093fa <_free_r+0x22>
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	1821      	adds	r1, r4, r0
 8009450:	428b      	cmp	r3, r1
 8009452:	bf01      	itttt	eq
 8009454:	6819      	ldreq	r1, [r3, #0]
 8009456:	685b      	ldreq	r3, [r3, #4]
 8009458:	1809      	addeq	r1, r1, r0
 800945a:	6021      	streq	r1, [r4, #0]
 800945c:	6063      	str	r3, [r4, #4]
 800945e:	6054      	str	r4, [r2, #4]
 8009460:	e7cb      	b.n	80093fa <_free_r+0x22>
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	200014a4 	.word	0x200014a4

08009468 <sbrk_aligned>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	4e0e      	ldr	r6, [pc, #56]	; (80094a4 <sbrk_aligned+0x3c>)
 800946c:	460c      	mov	r4, r1
 800946e:	6831      	ldr	r1, [r6, #0]
 8009470:	4605      	mov	r5, r0
 8009472:	b911      	cbnz	r1, 800947a <sbrk_aligned+0x12>
 8009474:	f000 f8bc 	bl	80095f0 <_sbrk_r>
 8009478:	6030      	str	r0, [r6, #0]
 800947a:	4621      	mov	r1, r4
 800947c:	4628      	mov	r0, r5
 800947e:	f000 f8b7 	bl	80095f0 <_sbrk_r>
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	d00a      	beq.n	800949c <sbrk_aligned+0x34>
 8009486:	1cc4      	adds	r4, r0, #3
 8009488:	f024 0403 	bic.w	r4, r4, #3
 800948c:	42a0      	cmp	r0, r4
 800948e:	d007      	beq.n	80094a0 <sbrk_aligned+0x38>
 8009490:	1a21      	subs	r1, r4, r0
 8009492:	4628      	mov	r0, r5
 8009494:	f000 f8ac 	bl	80095f0 <_sbrk_r>
 8009498:	3001      	adds	r0, #1
 800949a:	d101      	bne.n	80094a0 <sbrk_aligned+0x38>
 800949c:	f04f 34ff 	mov.w	r4, #4294967295
 80094a0:	4620      	mov	r0, r4
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	200014a8 	.word	0x200014a8

080094a8 <_malloc_r>:
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	1ccd      	adds	r5, r1, #3
 80094ae:	f025 0503 	bic.w	r5, r5, #3
 80094b2:	3508      	adds	r5, #8
 80094b4:	2d0c      	cmp	r5, #12
 80094b6:	bf38      	it	cc
 80094b8:	250c      	movcc	r5, #12
 80094ba:	2d00      	cmp	r5, #0
 80094bc:	4607      	mov	r7, r0
 80094be:	db01      	blt.n	80094c4 <_malloc_r+0x1c>
 80094c0:	42a9      	cmp	r1, r5
 80094c2:	d905      	bls.n	80094d0 <_malloc_r+0x28>
 80094c4:	230c      	movs	r3, #12
 80094c6:	2600      	movs	r6, #0
 80094c8:	603b      	str	r3, [r7, #0]
 80094ca:	4630      	mov	r0, r6
 80094cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d0:	4e2e      	ldr	r6, [pc, #184]	; (800958c <_malloc_r+0xe4>)
 80094d2:	f000 f89d 	bl	8009610 <__malloc_lock>
 80094d6:	6833      	ldr	r3, [r6, #0]
 80094d8:	461c      	mov	r4, r3
 80094da:	bb34      	cbnz	r4, 800952a <_malloc_r+0x82>
 80094dc:	4629      	mov	r1, r5
 80094de:	4638      	mov	r0, r7
 80094e0:	f7ff ffc2 	bl	8009468 <sbrk_aligned>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	4604      	mov	r4, r0
 80094e8:	d14d      	bne.n	8009586 <_malloc_r+0xde>
 80094ea:	6834      	ldr	r4, [r6, #0]
 80094ec:	4626      	mov	r6, r4
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	d140      	bne.n	8009574 <_malloc_r+0xcc>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	4631      	mov	r1, r6
 80094f6:	4638      	mov	r0, r7
 80094f8:	eb04 0803 	add.w	r8, r4, r3
 80094fc:	f000 f878 	bl	80095f0 <_sbrk_r>
 8009500:	4580      	cmp	r8, r0
 8009502:	d13a      	bne.n	800957a <_malloc_r+0xd2>
 8009504:	6821      	ldr	r1, [r4, #0]
 8009506:	3503      	adds	r5, #3
 8009508:	1a6d      	subs	r5, r5, r1
 800950a:	f025 0503 	bic.w	r5, r5, #3
 800950e:	3508      	adds	r5, #8
 8009510:	2d0c      	cmp	r5, #12
 8009512:	bf38      	it	cc
 8009514:	250c      	movcc	r5, #12
 8009516:	4638      	mov	r0, r7
 8009518:	4629      	mov	r1, r5
 800951a:	f7ff ffa5 	bl	8009468 <sbrk_aligned>
 800951e:	3001      	adds	r0, #1
 8009520:	d02b      	beq.n	800957a <_malloc_r+0xd2>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	442b      	add	r3, r5
 8009526:	6023      	str	r3, [r4, #0]
 8009528:	e00e      	b.n	8009548 <_malloc_r+0xa0>
 800952a:	6822      	ldr	r2, [r4, #0]
 800952c:	1b52      	subs	r2, r2, r5
 800952e:	d41e      	bmi.n	800956e <_malloc_r+0xc6>
 8009530:	2a0b      	cmp	r2, #11
 8009532:	d916      	bls.n	8009562 <_malloc_r+0xba>
 8009534:	1961      	adds	r1, r4, r5
 8009536:	42a3      	cmp	r3, r4
 8009538:	6025      	str	r5, [r4, #0]
 800953a:	bf18      	it	ne
 800953c:	6059      	strne	r1, [r3, #4]
 800953e:	6863      	ldr	r3, [r4, #4]
 8009540:	bf08      	it	eq
 8009542:	6031      	streq	r1, [r6, #0]
 8009544:	5162      	str	r2, [r4, r5]
 8009546:	604b      	str	r3, [r1, #4]
 8009548:	4638      	mov	r0, r7
 800954a:	f104 060b 	add.w	r6, r4, #11
 800954e:	f000 f865 	bl	800961c <__malloc_unlock>
 8009552:	f026 0607 	bic.w	r6, r6, #7
 8009556:	1d23      	adds	r3, r4, #4
 8009558:	1af2      	subs	r2, r6, r3
 800955a:	d0b6      	beq.n	80094ca <_malloc_r+0x22>
 800955c:	1b9b      	subs	r3, r3, r6
 800955e:	50a3      	str	r3, [r4, r2]
 8009560:	e7b3      	b.n	80094ca <_malloc_r+0x22>
 8009562:	6862      	ldr	r2, [r4, #4]
 8009564:	42a3      	cmp	r3, r4
 8009566:	bf0c      	ite	eq
 8009568:	6032      	streq	r2, [r6, #0]
 800956a:	605a      	strne	r2, [r3, #4]
 800956c:	e7ec      	b.n	8009548 <_malloc_r+0xa0>
 800956e:	4623      	mov	r3, r4
 8009570:	6864      	ldr	r4, [r4, #4]
 8009572:	e7b2      	b.n	80094da <_malloc_r+0x32>
 8009574:	4634      	mov	r4, r6
 8009576:	6876      	ldr	r6, [r6, #4]
 8009578:	e7b9      	b.n	80094ee <_malloc_r+0x46>
 800957a:	230c      	movs	r3, #12
 800957c:	4638      	mov	r0, r7
 800957e:	603b      	str	r3, [r7, #0]
 8009580:	f000 f84c 	bl	800961c <__malloc_unlock>
 8009584:	e7a1      	b.n	80094ca <_malloc_r+0x22>
 8009586:	6025      	str	r5, [r4, #0]
 8009588:	e7de      	b.n	8009548 <_malloc_r+0xa0>
 800958a:	bf00      	nop
 800958c:	200014a4 	.word	0x200014a4

08009590 <_realloc_r>:
 8009590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009594:	4680      	mov	r8, r0
 8009596:	4614      	mov	r4, r2
 8009598:	460e      	mov	r6, r1
 800959a:	b921      	cbnz	r1, 80095a6 <_realloc_r+0x16>
 800959c:	4611      	mov	r1, r2
 800959e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a2:	f7ff bf81 	b.w	80094a8 <_malloc_r>
 80095a6:	b92a      	cbnz	r2, 80095b4 <_realloc_r+0x24>
 80095a8:	f7ff ff16 	bl	80093d8 <_free_r>
 80095ac:	4625      	mov	r5, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b4:	f000 f838 	bl	8009628 <_malloc_usable_size_r>
 80095b8:	4284      	cmp	r4, r0
 80095ba:	4607      	mov	r7, r0
 80095bc:	d802      	bhi.n	80095c4 <_realloc_r+0x34>
 80095be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095c2:	d812      	bhi.n	80095ea <_realloc_r+0x5a>
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff ff6e 	bl	80094a8 <_malloc_r>
 80095cc:	4605      	mov	r5, r0
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d0ed      	beq.n	80095ae <_realloc_r+0x1e>
 80095d2:	42bc      	cmp	r4, r7
 80095d4:	4622      	mov	r2, r4
 80095d6:	4631      	mov	r1, r6
 80095d8:	bf28      	it	cs
 80095da:	463a      	movcs	r2, r7
 80095dc:	f7ff fed4 	bl	8009388 <memcpy>
 80095e0:	4631      	mov	r1, r6
 80095e2:	4640      	mov	r0, r8
 80095e4:	f7ff fef8 	bl	80093d8 <_free_r>
 80095e8:	e7e1      	b.n	80095ae <_realloc_r+0x1e>
 80095ea:	4635      	mov	r5, r6
 80095ec:	e7df      	b.n	80095ae <_realloc_r+0x1e>
	...

080095f0 <_sbrk_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	2300      	movs	r3, #0
 80095f4:	4d05      	ldr	r5, [pc, #20]	; (800960c <_sbrk_r+0x1c>)
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7f7 fa30 	bl	8000a60 <_sbrk>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_sbrk_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_sbrk_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	200014ac 	.word	0x200014ac

08009610 <__malloc_lock>:
 8009610:	4801      	ldr	r0, [pc, #4]	; (8009618 <__malloc_lock+0x8>)
 8009612:	f000 b811 	b.w	8009638 <__retarget_lock_acquire_recursive>
 8009616:	bf00      	nop
 8009618:	200014b0 	.word	0x200014b0

0800961c <__malloc_unlock>:
 800961c:	4801      	ldr	r0, [pc, #4]	; (8009624 <__malloc_unlock+0x8>)
 800961e:	f000 b80c 	b.w	800963a <__retarget_lock_release_recursive>
 8009622:	bf00      	nop
 8009624:	200014b0 	.word	0x200014b0

08009628 <_malloc_usable_size_r>:
 8009628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800962c:	1f18      	subs	r0, r3, #4
 800962e:	2b00      	cmp	r3, #0
 8009630:	bfbc      	itt	lt
 8009632:	580b      	ldrlt	r3, [r1, r0]
 8009634:	18c0      	addlt	r0, r0, r3
 8009636:	4770      	bx	lr

08009638 <__retarget_lock_acquire_recursive>:
 8009638:	4770      	bx	lr

0800963a <__retarget_lock_release_recursive>:
 800963a:	4770      	bx	lr

0800963c <_init>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	bf00      	nop
 8009640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009642:	bc08      	pop	{r3}
 8009644:	469e      	mov	lr, r3
 8009646:	4770      	bx	lr

08009648 <_fini>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	bf00      	nop
 800964c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964e:	bc08      	pop	{r3}
 8009650:	469e      	mov	lr, r3
 8009652:	4770      	bx	lr
