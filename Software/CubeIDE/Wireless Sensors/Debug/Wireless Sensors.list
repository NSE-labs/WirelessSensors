
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009730  08009730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097e0  080097e0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097e8  080097e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097e8  080097e8  000197e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080097f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e4  200001e0  080099d0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014c4  080099d0  000214c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119c5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003026  00000000  00000000  00031bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00034bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00035ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016978  00000000  00000000  00036888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001405f  00000000  00000000  0004d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c039  00000000  00000000  0006125f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040cc  00000000  00000000  000dd2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08009718 	.word	0x08009718

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08009718 	.word	0x08009718

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09a      	sub	sp, #104	; 0x68
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 faae 	bl	80009fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f82f 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f8e1 	bl	8000668 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f87d 	bl	80005a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8a9 	bl	8000600 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f007 ffd7 	bl	8008460 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[100];
  uint8_t LoRaStatus;
  LoRa_Init();
 80004b2:	f007 ff75 	bl	80083a0 <LoRa_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin); /* Toggle the LED */
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	480f      	ldr	r0, [pc, #60]	; (80004f8 <main+0x64>)
 80004bc:	f000 fdd4 	bl	8001068 <HAL_GPIO_TogglePin>
	  LoRaStatus = LoRaGetStatus();
 80004c0:	f007 ffaa 	bl	8008418 <LoRaGetStatus>
 80004c4:	4603      	mov	r3, r0
 80004c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  sprintf((char *)buffer, "Status = %x\r\n", LoRaStatus);
 80004ca:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80004ce:	463b      	mov	r3, r7
 80004d0:	490a      	ldr	r1, [pc, #40]	; (80004fc <main+0x68>)
 80004d2:	4618      	mov	r0, r3
 80004d4:	f008 fca6 	bl	8008e24 <siprintf>
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004d8:	463b      	mov	r3, r7
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fe4e 	bl	800017c <strlen>
 80004e0:	4603      	mov	r3, r0
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	463b      	mov	r3, r7
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f008 f877 	bl	80085dc <CDC_Transmit_FS>
	  HAL_Delay (500);   /* Delay 500 ms */
 80004ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f2:	f000 faf1 	bl	8000ad8 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin); /* Toggle the LED */
 80004f6:	e7de      	b.n	80004b6 <main+0x22>
 80004f8:	40020800 	.word	0x40020800
 80004fc:	08009730 	.word	0x08009730

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b092      	sub	sp, #72	; 0x48
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2234      	movs	r2, #52	; 0x34
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fc80 	bl	8008e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <SystemClock_Config+0xa0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800052a:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <SystemClock_Config+0xa0>)
 800052c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000530:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000532:	2303      	movs	r3, #3
 8000534:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800054c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000550:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000556:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fb0d 	bl	8002b7c <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000568:	f000 f8f8 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000570:	2301      	movs	r3, #1
 8000572:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800057c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000580:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fe28 	bl	80031dc <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 f8e3 	bl	800075c <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3748      	adds	r7, #72	; 0x48
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40007000 	.word	0x40007000

080005a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <MX_I2C1_Init+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005b0:	4a12      	ldr	r2, [pc, #72]	; (80005fc <MX_I2C1_Init+0x58>)
 80005b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005e2:	f000 fd5b 	bl	800109c <HAL_I2C_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f000 f8b6 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200001fc 	.word	0x200001fc
 80005f8:	40005400 	.word	0x40005400
 80005fc:	000186a0 	.word	0x000186a0

08000600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_SPI1_Init+0x60>)
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <MX_SPI1_Init+0x64>)
 8000608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_SPI1_Init+0x60>)
 800060c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_SPI1_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_SPI1_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_SPI1_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_SPI1_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_SPI1_Init+0x60>)
 800062c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_SPI1_Init+0x60>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_SPI1_Init+0x60>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_SPI1_Init+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_SPI1_Init+0x60>)
 8000646:	220a      	movs	r2, #10
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_SPI1_Init+0x60>)
 800064c:	f003 f876 	bl	800373c <HAL_SPI_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000656:	f000 f881 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000250 	.word	0x20000250
 8000664:	40013000 	.word	0x40013000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b34      	ldr	r3, [pc, #208]	; (8000750 <MX_GPIO_Init+0xe8>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a33      	ldr	r2, [pc, #204]	; (8000750 <MX_GPIO_Init+0xe8>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <MX_GPIO_Init+0xe8>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_GPIO_Init+0xe8>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <MX_GPIO_Init+0xe8>)
 800069c:	f043 0320 	orr.w	r3, r3, #32
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_GPIO_Init+0xe8>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f003 0320 	and.w	r3, r3, #32
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_GPIO_Init+0xe8>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a27      	ldr	r2, [pc, #156]	; (8000750 <MX_GPIO_Init+0xe8>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <MX_GPIO_Init+0xe8>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_GPIO_Init+0xe8>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a21      	ldr	r2, [pc, #132]	; (8000750 <MX_GPIO_Init+0xe8>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_GPIO_Init+0xe8>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	481b      	ldr	r0, [pc, #108]	; (8000754 <MX_GPIO_Init+0xec>)
 80006e6:	f000 fca7 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	481a      	ldr	r0, [pc, #104]	; (8000758 <MX_GPIO_Init+0xf0>)
 80006f0:	f000 fca2 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	4811      	ldr	r0, [pc, #68]	; (8000754 <MX_GPIO_Init+0xec>)
 800070e:	f000 fb13 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_NRST_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LoRa_NRST_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <MX_GPIO_Init+0xf0>)
 800072a:	f000 fb05 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 800072e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_GPIO_Init+0xf0>)
 8000744:	f000 faf8 	bl	8000d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40020800 	.word	0x40020800
 8000758:	40020000 	.word	0x40020000

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_MspInit+0x58>)
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <HAL_MspInit+0x58>)
 8000774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000778:	6253      	str	r3, [r2, #36]	; 0x24
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_MspInit+0x58>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_MspInit+0x58>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <HAL_MspInit+0x58>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6213      	str	r3, [r2, #32]
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_MspInit+0x58>)
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_MspInit+0x58>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_MspInit+0x58>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6253      	str	r3, [r2, #36]	; 0x24
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_MspInit+0x58>)
 80007ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <HAL_I2C_MspInit+0x7c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d127      	bne.n	8000836 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	61d3      	str	r3, [r2, #28]
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fe:	23c0      	movs	r3, #192	; 0xc0
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000802:	2312      	movs	r3, #18
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080e:	2304      	movs	r3, #4
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <HAL_I2C_MspInit+0x84>)
 800081a:	f000 fa8d 	bl	8000d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_I2C_MspInit+0x80>)
 8000820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_I2C_MspInit+0x80>)
 8000824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000828:	6253      	str	r3, [r2, #36]	; 0x24
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_I2C_MspInit+0x80>)
 800082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40005400 	.word	0x40005400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400

0800084c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_SPI_MspInit+0x7c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d127      	bne.n	80008be <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_SPI_MspInit+0x80>)
 8000870:	6a1b      	ldr	r3, [r3, #32]
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <HAL_SPI_MspInit+0x80>)
 8000874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000878:	6213      	str	r3, [r2, #32]
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_SPI_MspInit+0x80>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_SPI_MspInit+0x80>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <HAL_SPI_MspInit+0x80>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_SPI_MspInit+0x80>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800089e:	23f0      	movs	r3, #240	; 0xf0
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ae:	2305      	movs	r3, #5
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <HAL_SPI_MspInit+0x84>)
 80008ba:	f000 fa3d 	bl	8000d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40013000 	.word	0x40013000
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f8c1 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USB_LP_IRQHandler+0x10>)
 800092a:	f000 fdff 	bl	800152c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000fa8 	.word	0x20000fa8

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f008 fa2a 	bl	8008dc0 <__errno>
 800096c:	4603      	mov	r3, r0
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20002800 	.word	0x20002800
 8000998:	00000400 	.word	0x00000400
 800099c:	200002a8 	.word	0x200002a8
 80009a0:	200014c8 	.word	0x200014c8

080009a4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d6:	f7ff ffe5 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f008 f9f7 	bl	8008dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff fd59 	bl	8000494 <main>
  bx lr
 80009e2:	4770      	bx	lr
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80009ec:	080097f0 	.word	0x080097f0
  ldr r2, =_sbss
 80009f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80009f4:	200014c4 	.word	0x200014c4

080009f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_IRQHandler>

080009fa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f955 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f000 f80e 	bl	8000a2c <HAL_InitTick>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	e001      	b.n	8000a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a1c:	f7ff fea4 	bl	8000768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_InitTick+0x68>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d022      	beq.n	8000a86 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_InitTick+0x6c>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_InitTick+0x68>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f962 	bl	8000d1e <HAL_SYSTICK_Config>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10f      	bne.n	8000a80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	d809      	bhi.n	8000a7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a66:	2200      	movs	r2, #0
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6e:	f000 f92c 	bl	8000cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_InitTick+0x70>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	e007      	b.n	8000a8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
 8000a7e:	e004      	b.n	8000a8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e001      	b.n	8000a8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x1c>)
 8000ab0:	6013      	str	r3, [r2, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200002ac 	.word	0x200002ac
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	200002ac 	.word	0x200002ac

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff fff0 	bl	8000ac4 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d004      	beq.n	8000afc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_Delay+0x40>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000afc:	bf00      	nop
 8000afe:	f7ff ffe1 	bl	8000ac4 <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d8f7      	bhi.n	8000afe <HAL_Delay+0x26>
  {
  }
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4906      	ldr	r1, [pc, #24]	; (8000bb4 <__NVIC_EnableIRQ+0x34>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff90 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff2d 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff42 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff90 	bl	8000c0c <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5f 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff35 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffa2 	bl	8000c70 <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d4e:	e154      	b.n	8000ffa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8146 	beq.w	8000ff4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d005      	beq.n	8000d80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d130      	bne.n	8000de2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000db6:	2201      	movs	r2, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	f003 0201 	and.w	r2, r3, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d017      	beq.n	8000e1e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d123      	bne.n	8000e72 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	6939      	ldr	r1, [r7, #16]
 8000e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0203 	and.w	r2, r3, #3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80a0 	beq.w	8000ff4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4b58      	ldr	r3, [pc, #352]	; (8001018 <HAL_GPIO_Init+0x2e0>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	4a57      	ldr	r2, [pc, #348]	; (8001018 <HAL_GPIO_Init+0x2e0>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6213      	str	r3, [r2, #32]
 8000ec0:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HAL_GPIO_Init+0x2e0>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ecc:	4a53      	ldr	r2, [pc, #332]	; (800101c <HAL_GPIO_Init+0x2e4>)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a4b      	ldr	r2, [pc, #300]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d019      	beq.n	8000f2c <HAL_GPIO_Init+0x1f4>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a4a      	ldr	r2, [pc, #296]	; (8001024 <HAL_GPIO_Init+0x2ec>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d013      	beq.n	8000f28 <HAL_GPIO_Init+0x1f0>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a49      	ldr	r2, [pc, #292]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d00d      	beq.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a48      	ldr	r2, [pc, #288]	; (800102c <HAL_GPIO_Init+0x2f4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d007      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a47      	ldr	r2, [pc, #284]	; (8001030 <HAL_GPIO_Init+0x2f8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d101      	bne.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e008      	b.n	8000f2e <HAL_GPIO_Init+0x1f6>
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x1f6>
 8000f20:	2303      	movs	r3, #3
 8000f22:	e004      	b.n	8000f2e <HAL_GPIO_Init+0x1f6>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x1f6>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_GPIO_Init+0x1f6>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	f002 0203 	and.w	r2, r2, #3
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4093      	lsls	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f3e:	4937      	ldr	r1, [pc, #220]	; (800101c <HAL_GPIO_Init+0x2e4>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f70:	4a30      	ldr	r2, [pc, #192]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f76:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f9a:	4a26      	ldr	r2, [pc, #152]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f aea3 	bne.w	8000d50 <HAL_GPIO_Init+0x18>
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40010000 	.word	0x40010000
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4013      	ands	r3, r2
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43d9      	mvns	r1, r3
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	400b      	ands	r3, r1
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
	...

0800109c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e12b      	b.n	8001306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fb7e 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001100:	f002 faa8 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8001104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4a81      	ldr	r2, [pc, #516]	; (8001310 <HAL_I2C_Init+0x274>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d807      	bhi.n	8001120 <HAL_I2C_Init+0x84>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4a80      	ldr	r2, [pc, #512]	; (8001314 <HAL_I2C_Init+0x278>)
 8001114:	4293      	cmp	r3, r2
 8001116:	bf94      	ite	ls
 8001118:	2301      	movls	r3, #1
 800111a:	2300      	movhi	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	e006      	b.n	800112e <HAL_I2C_Init+0x92>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4a7d      	ldr	r2, [pc, #500]	; (8001318 <HAL_I2C_Init+0x27c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	bf94      	ite	ls
 8001128:	2301      	movls	r3, #1
 800112a:	2300      	movhi	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0e7      	b.n	8001306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a78      	ldr	r2, [pc, #480]	; (800131c <HAL_I2C_Init+0x280>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	0c9b      	lsrs	r3, r3, #18
 8001140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	430a      	orrs	r2, r1
 8001154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a6a      	ldr	r2, [pc, #424]	; (8001310 <HAL_I2C_Init+0x274>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d802      	bhi.n	8001170 <HAL_I2C_Init+0xd4>
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3301      	adds	r3, #1
 800116e:	e009      	b.n	8001184 <HAL_I2C_Init+0xe8>
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	4a69      	ldr	r2, [pc, #420]	; (8001320 <HAL_I2C_Init+0x284>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	099b      	lsrs	r3, r3, #6
 8001182:	3301      	adds	r3, #1
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	430b      	orrs	r3, r1
 800118a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	495c      	ldr	r1, [pc, #368]	; (8001310 <HAL_I2C_Init+0x274>)
 80011a0:	428b      	cmp	r3, r1
 80011a2:	d819      	bhi.n	80011d8 <HAL_I2C_Init+0x13c>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1e59      	subs	r1, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b2:	1c59      	adds	r1, r3, #1
 80011b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011b8:	400b      	ands	r3, r1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <HAL_I2C_Init+0x138>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1e59      	subs	r1, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d2:	e051      	b.n	8001278 <HAL_I2C_Init+0x1dc>
 80011d4:	2304      	movs	r3, #4
 80011d6:	e04f      	b.n	8001278 <HAL_I2C_Init+0x1dc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d111      	bne.n	8001204 <HAL_I2C_Init+0x168>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1e58      	subs	r0, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	440b      	add	r3, r1
 80011ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f2:	3301      	adds	r3, #1
 80011f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	e012      	b.n	800122a <HAL_I2C_Init+0x18e>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1e58      	subs	r0, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6859      	ldr	r1, [r3, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	0099      	lsls	r1, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	fbb0 f3f3 	udiv	r3, r0, r3
 800121a:	3301      	adds	r3, #1
 800121c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_I2C_Init+0x196>
 800122e:	2301      	movs	r3, #1
 8001230:	e022      	b.n	8001278 <HAL_I2C_Init+0x1dc>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10e      	bne.n	8001258 <HAL_I2C_Init+0x1bc>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1e58      	subs	r0, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6859      	ldr	r1, [r3, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	440b      	add	r3, r1
 8001248:	fbb0 f3f3 	udiv	r3, r0, r3
 800124c:	3301      	adds	r3, #1
 800124e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001256:	e00f      	b.n	8001278 <HAL_I2C_Init+0x1dc>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1e58      	subs	r0, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	0099      	lsls	r1, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	fbb0 f3f3 	udiv	r3, r0, r3
 800126e:	3301      	adds	r3, #1
 8001270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	6809      	ldr	r1, [r1, #0]
 800127c:	4313      	orrs	r3, r2
 800127e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69da      	ldr	r2, [r3, #28]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6911      	ldr	r1, [r2, #16]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68d2      	ldr	r2, [r2, #12]
 80012b2:	4311      	orrs	r1, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2220      	movs	r2, #32
 80012f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	000186a0 	.word	0x000186a0
 8001314:	001e847f 	.word	0x001e847f
 8001318:	003d08ff 	.word	0x003d08ff
 800131c:	431bde83 	.word	0x431bde83
 8001320:	10624dd3 	.word	0x10624dd3

08001324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b08b      	sub	sp, #44	; 0x2c
 8001328:	af06      	add	r7, sp, #24
 800132a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0d0      	b.n	80014d8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f007 fa98 	bl	8008880 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 ff9f 	bl	80042a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e04c      	b.n	8001402 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	3301      	adds	r3, #1
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	440b      	add	r3, r1
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	b298      	uxth	r0, r3
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	3336      	adds	r3, #54	; 0x36
 80013a6:	4602      	mov	r2, r0
 80013a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	3303      	adds	r3, #3
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3338      	adds	r3, #56	; 0x38
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	333c      	adds	r3, #60	; 0x3c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	3340      	adds	r3, #64	; 0x40
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	3301      	adds	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3ad      	bcc.n	8001368 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e044      	b.n	800149c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	3301      	adds	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d3b5      	bcc.n	8001412 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	687e      	ldr	r6, [r7, #4]
 80014ae:	466d      	mov	r5, sp
 80014b0:	f106 0410 	add.w	r4, r6, #16
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	602b      	str	r3, [r5, #0]
 80014bc:	1d33      	adds	r3, r6, #4
 80014be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c0:	6838      	ldr	r0, [r7, #0]
 80014c2:	f002 ff07 	bl	80042d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_PCD_Start+0x16>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e016      	b.n	8001524 <HAL_PCD_Start+0x44>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 feb6 	bl	8004274 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001508:	2101      	movs	r1, #1
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f007 f99a 	bl	8008844 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f005 fb9b 	bl	8006c50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f005 fb93 	bl	8006c64 <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001548:	d102      	bne.n	8001550 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 faf5 	bl	8001b3a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f005 fb85 	bl	8006c64 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d112      	bne.n	800158c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001578:	b292      	uxth	r2, r2
 800157a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f007 f9f9 	bl	8008976 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8c7 	bl	800171a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f005 fb67 	bl	8006c64 <USB_ReadInterrupts>
 8001596:	4603      	mov	r3, r0
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a0:	d10b      	bne.n	80015ba <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015b4:	b292      	uxth	r2, r2
 80015b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f005 fb50 	bl	8006c64 <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ce:	d10b      	bne.n	80015e8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015e2:	b292      	uxth	r2, r2
 80015e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f005 fb39 	bl	8006c64 <USB_ReadInterrupts>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015fc:	d126      	bne.n	800164c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0204 	bic.w	r2, r2, #4
 8001610:	b292      	uxth	r2, r2
 8001612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0208 	bic.w	r2, r2, #8
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f007 f9da 	bl	80089e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800163c:	b29a      	uxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001646:	b292      	uxth	r2, r2
 8001648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fb07 	bl	8006c64 <USB_ReadInterrupts>
 8001656:	4603      	mov	r3, r0
 8001658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001660:	d126      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0208 	orr.w	r2, r2, #8
 8001674:	b292      	uxth	r2, r2
 8001676:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168c:	b292      	uxth	r2, r2
 800168e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800169a:	b29a      	uxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0204 	orr.w	r2, r2, #4
 80016a4:	b292      	uxth	r2, r2
 80016a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f007 f982 	bl	80089b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 fad5 	bl	8006c64 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c4:	d10e      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f007 f93b 	bl	800895a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 fabb 	bl	8006c64 <USB_ReadInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f8:	d10b      	bne.n	8001712 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800170c:	b292      	uxth	r2, r2
 800170e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_PCD_SetAddress+0x1a>
 8001730:	2302      	movs	r3, #2
 8001732:	e013      	b.n	800175c <HAL_PCD_SetAddress+0x42>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f005 fa6c 	bl	8006c2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4603      	mov	r3, r0
 8001774:	70fb      	strb	r3, [r7, #3]
 8001776:	460b      	mov	r3, r1
 8001778:	803b      	strh	r3, [r7, #0]
 800177a:	4613      	mov	r3, r2
 800177c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001786:	2b00      	cmp	r3, #0
 8001788:	da0e      	bge.n	80017a8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	705a      	strb	r2, [r3, #1]
 80017a6:	e00e      	b.n	80017c6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	f003 0207 	and.w	r2, r3, #7
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017d2:	883a      	ldrh	r2, [r7, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	78ba      	ldrb	r2, [r7, #2]
 80017dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d102      	bne.n	80017fc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_PCD_EP_Open+0xa6>
 8001806:	2302      	movs	r3, #2
 8001808:	e00e      	b.n	8001828 <HAL_PCD_EP_Open+0xc4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	4618      	mov	r0, r3
 800181a:	f002 fd7b 	bl	8004314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001826:	7afb      	ldrb	r3, [r7, #11]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800183c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001840:	2b00      	cmp	r3, #0
 8001842:	da0e      	bge.n	8001862 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2201      	movs	r2, #1
 800185e:	705a      	strb	r2, [r3, #1]
 8001860:	e00e      	b.n	8001880 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	f003 0207 	and.w	r2, r3, #7
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	b2da      	uxtb	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_PCD_EP_Close+0x6a>
 8001896:	2302      	movs	r3, #2
 8001898:	e00e      	b.n	80018b8 <HAL_PCD_EP_Close+0x88>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68f9      	ldr	r1, [r7, #12]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 f89d 	bl	80049e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	460b      	mov	r3, r1
 80018ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d0:	7afb      	ldrb	r3, [r7, #11]
 80018d2:	f003 0207 	and.w	r2, r3, #7
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2200      	movs	r2, #0
 80018fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	b2da      	uxtb	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800190c:	7afb      	ldrb	r3, [r7, #11]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6979      	ldr	r1, [r7, #20]
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fa4f 	bl	8004dc0 <USB_EPStartXfer>
 8001922:	e005      	b.n	8001930 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fa48 	bl	8004dc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f003 0207 	and.w	r2, r3, #7
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800195c:	681b      	ldr	r3, [r3, #0]
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	460b      	mov	r3, r1
 8001976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2201      	movs	r2, #1
 80019b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019c0:	7afb      	ldrb	r3, [r7, #11]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6979      	ldr	r1, [r7, #20]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 f9f5 	bl	8004dc0 <USB_EPStartXfer>
 80019d6:	e005      	b.n	80019e4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6979      	ldr	r1, [r7, #20]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 f9ee 	bl	8004dc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	f003 0207 	and.w	r2, r3, #7
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d901      	bls.n	8001a0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e03e      	b.n	8001a8a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da0e      	bge.n	8001a32 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	705a      	strb	r2, [r3, #1]
 8001a30:	e00c      	b.n	8001a4c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_PCD_EP_SetStall+0x7e>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e00e      	b.n	8001a8a <HAL_PCD_EP_SetStall+0x9c>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 ffd8 	bl	8006a30 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	f003 020f 	and.w	r2, r3, #15
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d901      	bls.n	8001ab0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e040      	b.n	8001b32 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da0e      	bge.n	8001ad6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	705a      	strb	r2, [r3, #1]
 8001ad4:	e00e      	b.n	8001af4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	f003 0207 	and.w	r2, r3, #7
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_PCD_EP_ClrStall+0x82>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e00e      	b.n	8001b32 <HAL_PCD_EP_ClrStall+0xa0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 ffd4 	bl	8006ad0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b08e      	sub	sp, #56	; 0x38
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b42:	e2ec      	b.n	800211e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b4c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 8161 	bne.w	8001e26 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d152      	bne.n	8001c14 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b7e:	81fb      	strh	r3, [r7, #14]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3328      	adds	r3, #40	; 0x28
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	3302      	adds	r3, #2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	441a      	add	r2, r3
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f006 fea6 	bl	8008926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 829b 	beq.w	800211e <PCD_EP_ISR_Handler+0x5e4>
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f040 8296 	bne.w	800211e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b292      	uxth	r2, r2
 8001c06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c12:	e284      	b.n	800211e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d034      	beq.n	8001c98 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	3306      	adds	r3, #6
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f005 f84d 	bl	8006d0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c7e:	4013      	ands	r3, r2
 8001c80:	823b      	strh	r3, [r7, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	8a3a      	ldrh	r2, [r7, #16]
 8001c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c8c:	b292      	uxth	r2, r2
 8001c8e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f006 fe1b 	bl	80088cc <HAL_PCD_SetupStageCallback>
 8001c96:	e242      	b.n	800211e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c98:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f280 823e 	bge.w	800211e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cae:	4013      	ands	r3, r2
 8001cb0:	83bb      	strh	r3, [r7, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	8bba      	ldrh	r2, [r7, #28]
 8001cb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cbc:	b292      	uxth	r2, r2
 8001cbe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3306      	adds	r3, #6
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d019      	beq.n	8001d28 <PCD_EP_ISR_Handler+0x1ee>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d015      	beq.n	8001d28 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	6959      	ldr	r1, [r3, #20]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f004 fffd 	bl	8006d0c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	441a      	add	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d20:	2100      	movs	r1, #0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f006 fde4 	bl	80088f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 81f2 	bne.w	800211e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	4413      	add	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d112      	bne.n	8001d88 <PCD_EP_ISR_Handler+0x24e>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	e02f      	b.n	8001de8 <PCD_EP_ISR_Handler+0x2ae>
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8001d8e:	d813      	bhi.n	8001db8 <PCD_EP_ISR_Handler+0x27e>
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <PCD_EP_ISR_Handler+0x270>
 8001da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da6:	3301      	adds	r3, #1
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	e017      	b.n	8001de8 <PCD_EP_ISR_Handler+0x2ae>
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <PCD_EP_ISR_Handler+0x298>
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df8:	827b      	strh	r3, [r7, #18]
 8001dfa:	8a7b      	ldrh	r3, [r7, #18]
 8001dfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e00:	827b      	strh	r3, [r7, #18]
 8001e02:	8a7b      	ldrh	r3, [r7, #18]
 8001e04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e08:	827b      	strh	r3, [r7, #18]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	8a7b      	ldrh	r3, [r7, #18]
 8001e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	8013      	strh	r3, [r2, #0]
 8001e24:	e17b      	b.n	800211e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f280 80ea 	bge.w	8002016 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e58:	4013      	ands	r3, r2
 8001e5a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e70:	b292      	uxth	r2, r2
 8001e72:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e74:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	7b1b      	ldrb	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d122      	bne.n	8001ed8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3306      	adds	r3, #6
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eba:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ebc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8087 	beq.w	8001fd2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	6959      	ldr	r1, [r3, #20]
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	88da      	ldrh	r2, [r3, #6]
 8001ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed2:	f004 ff1b 	bl	8006d0c <USB_ReadPMA>
 8001ed6:	e07c      	b.n	8001fd2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	78db      	ldrb	r3, [r3, #3]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d108      	bne.n	8001ef2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ee0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f927 	bl	800213a <HAL_PCD_EP_DB_Receive>
 8001eec:	4603      	mov	r3, r0
 8001eee:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ef0:	e06f      	b.n	8001fd2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	441a      	add	r2, r3
 8001f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d021      	beq.n	8001f90 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3302      	adds	r3, #2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f74:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d02a      	beq.n	8001fd2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	6959      	ldr	r1, [r3, #20]
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	891a      	ldrh	r2, [r3, #8]
 8001f88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f8a:	f004 febf 	bl	8006d0c <USB_ReadPMA>
 8001f8e:	e020      	b.n	8001fd2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	6959      	ldr	r1, [r3, #20]
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	895a      	ldrh	r2, [r3, #10]
 8001fcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fce:	f004 fe9d 	bl	8006d0c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fd8:	441a      	add	r2, r3
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe4:	441a      	add	r2, r3
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <PCD_EP_ISR_Handler+0x4c2>
 8001ff2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d206      	bcs.n	800200a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f006 fc74 	bl	80088f0 <HAL_PCD_DataOutStageCallback>
 8002008:	e005      	b.n	8002016 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002010:	4618      	mov	r0, r3
 8002012:	f002 fed5 	bl	8004dc0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002016:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	2b00      	cmp	r3, #0
 800201e:	d07e      	beq.n	800211e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002020:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	843b      	strh	r3, [r7, #32]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	441a      	add	r2, r3
 800205e:	8c3b      	ldrh	r3, [r7, #32]
 8002060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002068:	b29b      	uxth	r3, r3
 800206a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	78db      	ldrb	r3, [r3, #3]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d00c      	beq.n	800208e <PCD_EP_ISR_Handler+0x554>
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	78db      	ldrb	r3, [r3, #3]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002080:	2b02      	cmp	r3, #2
 8002082:	d146      	bne.n	8002112 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002084:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d141      	bne.n	8002112 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	3302      	adds	r3, #2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	699a      	ldr	r2, [r3, #24]
 80020bc:	8bfb      	ldrh	r3, [r7, #30]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d906      	bls.n	80020d0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	8bfb      	ldrh	r3, [r7, #30]
 80020c8:	1ad2      	subs	r2, r2, r3
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	619a      	str	r2, [r3, #24]
 80020ce:	e002      	b.n	80020d6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f006 fc1e 	bl	8008926 <HAL_PCD_DataInStageCallback>
 80020ea:	e018      	b.n	800211e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	8bfb      	ldrh	r3, [r7, #30]
 80020f2:	441a      	add	r2, r3
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	8bfb      	ldrh	r3, [r7, #30]
 80020fe:	441a      	add	r2, r3
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fe58 	bl	8004dc0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002110:	e005      	b.n	800211e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002112:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002114:	461a      	mov	r2, r3
 8002116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f91b 	bl	8002354 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002126:	b29b      	uxth	r3, r3
 8002128:	b21b      	sxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f6ff ad0a 	blt.w	8001b44 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3738      	adds	r7, #56	; 0x38
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b088      	sub	sp, #32
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	4613      	mov	r3, r2
 8002146:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07e      	beq.n	8002250 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	3302      	adds	r3, #2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	8b7b      	ldrh	r3, [r7, #26]
 8002182:	429a      	cmp	r2, r3
 8002184:	d306      	bcc.n	8002194 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	8b7b      	ldrh	r3, [r7, #26]
 800218c:	1ad2      	subs	r2, r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	619a      	str	r2, [r3, #24]
 8002192:	e002      	b.n	800219a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d123      	bne.n	80021ea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021bc:	833b      	strh	r3, [r7, #24]
 80021be:	8b3b      	ldrh	r3, [r7, #24]
 80021c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021c4:	833b      	strh	r3, [r7, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	441a      	add	r2, r3
 80021d4:	8b3b      	ldrh	r3, [r7, #24]
 80021d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01f      	beq.n	8002234 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	82fb      	strh	r3, [r7, #22]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	441a      	add	r2, r3
 800221e:	8afb      	ldrh	r3, [r7, #22]
 8002220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002230:	b29b      	uxth	r3, r3
 8002232:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002234:	8b7b      	ldrh	r3, [r7, #26]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8087 	beq.w	800234a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6959      	ldr	r1, [r3, #20]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	891a      	ldrh	r2, [r3, #8]
 8002248:	8b7b      	ldrh	r3, [r7, #26]
 800224a:	f004 fd5f 	bl	8006d0c <USB_ReadPMA>
 800224e:	e07c      	b.n	800234a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002258:	b29b      	uxth	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	3306      	adds	r3, #6
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002278:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	8b7b      	ldrh	r3, [r7, #26]
 8002280:	429a      	cmp	r2, r3
 8002282:	d306      	bcc.n	8002292 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	8b7b      	ldrh	r3, [r7, #26]
 800228a:	1ad2      	subs	r2, r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	619a      	str	r2, [r3, #24]
 8002290:	e002      	b.n	8002298 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d123      	bne.n	80022e8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ba:	83fb      	strh	r3, [r7, #30]
 80022bc:	8bfb      	ldrh	r3, [r7, #30]
 80022be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022c2:	83fb      	strh	r3, [r7, #30]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	441a      	add	r2, r3
 80022d2:	8bfb      	ldrh	r3, [r7, #30]
 80022d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d11f      	bne.n	8002332 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230c:	83bb      	strh	r3, [r7, #28]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	441a      	add	r2, r3
 800231c:	8bbb      	ldrh	r3, [r7, #28]
 800231e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800232e:	b29b      	uxth	r3, r3
 8002330:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002332:	8b7b      	ldrh	r3, [r7, #26]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6959      	ldr	r1, [r3, #20]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	895a      	ldrh	r2, [r3, #10]
 8002344:	8b7b      	ldrh	r3, [r7, #26]
 8002346:	f004 fce1 	bl	8006d0c <USB_ReadPMA>
    }
  }

  return count;
 800234a:	8b7b      	ldrh	r3, [r7, #26]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b0a2      	sub	sp, #136	; 0x88
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 81c7 	beq.w	80026fc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	3302      	adds	r3, #2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	4413      	add	r3, r2
 800238c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002396:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d907      	bls.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	619a      	str	r2, [r3, #24]
 80023b4:	e002      	b.n	80023bc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 80b9 	bne.w	8002538 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d126      	bne.n	800241c <HAL_PCD_EP_DB_Transmit+0xc8>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e2:	4413      	add	r3, r2
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	011a      	lsls	r2, r3, #4
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	4413      	add	r3, r2
 80023f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002400:	b29a      	uxth	r2, r3
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002414:	b29a      	uxth	r2, r3
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	e01a      	b.n	8002452 <HAL_PCD_EP_DB_Transmit+0xfe>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d116      	bne.n	8002452 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	4413      	add	r3, r2
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	011a      	lsls	r2, r3, #4
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	4413      	add	r3, r2
 8002446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	2200      	movs	r2, #0
 8002450:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	785b      	ldrb	r3, [r3, #1]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d126      	bne.n	80024ae <HAL_PCD_EP_DB_Transmit+0x15a>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4413      	add	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	011a      	lsls	r2, r3, #4
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4413      	add	r3, r2
 8002482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002492:	b29a      	uxth	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	801a      	strh	r2, [r3, #0]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	801a      	strh	r2, [r3, #0]
 80024ac:	e017      	b.n	80024de <HAL_PCD_EP_DB_Transmit+0x18a>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d113      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x18a>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	4413      	add	r3, r2
 80024c6:	623b      	str	r3, [r7, #32]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	011a      	lsls	r2, r3, #4
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	4413      	add	r3, r2
 80024d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2200      	movs	r2, #0
 80024dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f006 fa1e 	bl	8008926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 82d4 	beq.w	8002a9e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	827b      	strh	r3, [r7, #18]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	441a      	add	r2, r3
 8002520:	8a7b      	ldrh	r3, [r7, #18]
 8002522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800252a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800252e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002532:	b29b      	uxth	r3, r3
 8002534:	8013      	strh	r3, [r2, #0]
 8002536:	e2b2      	b.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d021      	beq.n	8002586 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	441a      	add	r2, r3
 800256e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002582:	b29b      	uxth	r3, r3
 8002584:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800258c:	2b01      	cmp	r3, #1
 800258e:	f040 8286 	bne.w	8002a9e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800259a:	441a      	add	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025a8:	441a      	add	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6a1a      	ldr	r2, [r3, #32]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d309      	bcc.n	80025ce <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c6:	1ad2      	subs	r2, r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	621a      	str	r2, [r3, #32]
 80025cc:	e015      	b.n	80025fa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80025d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025e4:	e009      	b.n	80025fa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d155      	bne.n	80026ae <HAL_PCD_EP_DB_Transmit+0x35a>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002610:	b29b      	uxth	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	4413      	add	r3, r2
 8002618:	63bb      	str	r3, [r7, #56]	; 0x38
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	011a      	lsls	r2, r3, #4
 8002620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002622:	4413      	add	r3, r2
 8002624:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
 800262a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800262c:	2b00      	cmp	r3, #0
 800262e:	d112      	bne.n	8002656 <HAL_PCD_EP_DB_Transmit+0x302>
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800263a:	b29a      	uxth	r2, r3
 800263c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263e:	801a      	strh	r2, [r3, #0]
 8002640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800264a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264e:	b29a      	uxth	r2, r3
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	801a      	strh	r2, [r3, #0]
 8002654:	e047      	b.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002658:	2b3e      	cmp	r3, #62	; 0x3e
 800265a:	d811      	bhi.n	8002680 <HAL_PCD_EP_DB_Transmit+0x32c>
 800265c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	64bb      	str	r3, [r7, #72]	; 0x48
 8002662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_PCD_EP_DB_Transmit+0x31e>
 800266c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266e:	3301      	adds	r3, #1
 8002670:	64bb      	str	r3, [r7, #72]	; 0x48
 8002672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002674:	b29b      	uxth	r3, r3
 8002676:	029b      	lsls	r3, r3, #10
 8002678:	b29a      	uxth	r2, r3
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	e032      	b.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	64bb      	str	r3, [r7, #72]	; 0x48
 8002686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <HAL_PCD_EP_DB_Transmit+0x342>
 8002690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002692:	3b01      	subs	r3, #1
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
 8002696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002698:	b29b      	uxth	r3, r3
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	b29b      	uxth	r3, r3
 800269e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	e01b      	b.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x392>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d117      	bne.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x392>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ca:	4413      	add	r3, r2
 80026cc:	643b      	str	r3, [r7, #64]	; 0x40
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	011a      	lsls	r2, r3, #4
 80026d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d6:	4413      	add	r3, r2
 80026d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6959      	ldr	r1, [r3, #20]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	891a      	ldrh	r2, [r3, #8]
 80026f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f004 fac4 	bl	8006c82 <USB_WritePMA>
 80026fa:	e1d0      	b.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002704:	b29b      	uxth	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	3306      	adds	r3, #6
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002724:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002730:	429a      	cmp	r2, r3
 8002732:	d307      	bcc.n	8002744 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	699a      	ldr	r2, [r3, #24]
 8002738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800273c:	1ad2      	subs	r2, r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	619a      	str	r2, [r3, #24]
 8002742:	e002      	b.n	800274a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 80c4 	bne.w	80028dc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d126      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x456>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002770:	4413      	add	r3, r2
 8002772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	011a      	lsls	r2, r3, #4
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	4413      	add	r3, r2
 800277e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800278e:	b29a      	uxth	r2, r3
 8002790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e01a      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	785b      	ldrb	r3, [r3, #1]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d116      	bne.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	677b      	str	r3, [r7, #116]	; 0x74
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c6:	4413      	add	r3, r2
 80027c8:	677b      	str	r3, [r7, #116]	; 0x74
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	011a      	lsls	r2, r3, #4
 80027d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d2:	4413      	add	r3, r2
 80027d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027d8:	673b      	str	r3, [r7, #112]	; 0x70
 80027da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027dc:	2200      	movs	r2, #0
 80027de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12f      	bne.n	800284e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002806:	4413      	add	r3, r2
 8002808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	011a      	lsls	r2, r3, #4
 8002812:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002816:	4413      	add	r3, r2
 8002818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800281c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800282c:	b29a      	uxth	r2, r3
 800282e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002844:	b29a      	uxth	r2, r3
 8002846:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	e017      	b.n	800287e <HAL_PCD_EP_DB_Transmit+0x52a>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d113      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002864:	4413      	add	r3, r2
 8002866:	67bb      	str	r3, [r7, #120]	; 0x78
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	011a      	lsls	r2, r3, #4
 800286e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002870:	4413      	add	r3, r2
 8002872:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002876:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800287a:	2200      	movs	r2, #0
 800287c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f006 f84e 	bl	8008926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 8104 	bne.w	8002a9e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
 80028da:	e0e0      	b.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d121      	bne.n	800292a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002900:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002926:	b29b      	uxth	r3, r3
 8002928:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	f040 80b4 	bne.w	8002a9e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800293e:	441a      	add	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800294c:	441a      	add	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	6a1a      	ldr	r2, [r3, #32]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	d309      	bcc.n	8002972 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	6a1a      	ldr	r2, [r3, #32]
 8002968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296a:	1ad2      	subs	r2, r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	621a      	str	r2, [r3, #32]
 8002970:	e015      	b.n	800299e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800297a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800297e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002988:	e009      	b.n	800299e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	667b      	str	r3, [r7, #100]	; 0x64
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d155      	bne.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x704>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c0:	4413      	add	r3, r2
 80029c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	011a      	lsls	r2, r3, #4
 80029ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029cc:	4413      	add	r3, r2
 80029ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80029d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d112      	bne.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80029da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e8:	801a      	strh	r2, [r3, #0]
 80029ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	801a      	strh	r2, [r3, #0]
 80029fe:	e044      	b.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x736>
 8002a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a02:	2b3e      	cmp	r3, #62	; 0x3e
 8002a04:	d811      	bhi.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	3301      	adds	r3, #1
 8002a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a26:	801a      	strh	r2, [r3, #0]
 8002a28:	e02f      	b.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x736>
 8002a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	029b      	lsls	r3, r3, #10
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a54:	801a      	strh	r2, [r3, #0]
 8002a56:	e018      	b.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x736>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d114      	bne.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x736>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a6e:	4413      	add	r3, r2
 8002a70:	667b      	str	r3, [r7, #100]	; 0x64
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	011a      	lsls	r2, r3, #4
 8002a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a80:	663b      	str	r3, [r7, #96]	; 0x60
 8002a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6959      	ldr	r1, [r3, #20]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	895a      	ldrh	r2, [r3, #10]
 8002a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f004 f8f2 	bl	8006c82 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab8:	823b      	strh	r3, [r7, #16]
 8002aba:	8a3b      	ldrh	r3, [r7, #16]
 8002abc:	f083 0310 	eor.w	r3, r3, #16
 8002ac0:	823b      	strh	r3, [r7, #16]
 8002ac2:	8a3b      	ldrh	r3, [r7, #16]
 8002ac4:	f083 0320 	eor.w	r3, r3, #32
 8002ac8:	823b      	strh	r3, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	441a      	add	r2, r3
 8002ad8:	8a3b      	ldrh	r3, [r7, #16]
 8002ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3788      	adds	r7, #136	; 0x88
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	4613      	mov	r3, r2
 8002b08:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4413      	add	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	e009      	b.n	8002b42 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b2e:	897a      	ldrh	r2, [r7, #10]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b42:	893b      	ldrh	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	80da      	strh	r2, [r3, #6]
 8002b56:	e00b      	b.n	8002b70 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e31d      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8e:	4b94      	ldr	r3, [pc, #592]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b98:	4b91      	ldr	r3, [pc, #580]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d006      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d10f      	bne.n	8002bda <HAL_RCC_OscConfig+0x5e>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d10b      	bne.n	8002bda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	4b87      	ldr	r3, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d06a      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x128>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d166      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e2f7      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d106      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x74>
 8002be2:	4b7f      	ldr	r3, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7e      	ldr	r2, [pc, #504]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e02d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x96>
 8002bf8:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a78      	ldr	r2, [pc, #480]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a75      	ldr	r2, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0xd0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xb8>
 8002c1a:	4b71      	ldr	r3, [pc, #452]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6d      	ldr	r2, [pc, #436]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd0>
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a69      	ldr	r2, [pc, #420]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a66      	ldr	r2, [pc, #408]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fd ff36 	bl	8000ac4 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fd ff32 	bl	8000ac4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e2ad      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe0>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fd ff22 	bl	8000ac4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fd ff1e 	bl	8000ac4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e299      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c96:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x108>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d05a      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d119      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x176>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d116      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc4:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x160>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e276      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cdc:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	493d      	ldr	r1, [pc, #244]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf0:	e03a      	b.n	8002d68 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d020      	beq.n	8002d3c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <HAL_RCC_OscConfig+0x268>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fd fee0 	bl	8000ac4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fd fedc 	bl	8000ac4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e257      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	492a      	ldr	r1, [pc, #168]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
 8002d3a:	e015      	b.n	8002d68 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCC_OscConfig+0x268>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fd febf 	bl	8000ac4 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fd febb 	bl	8000ac4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e236      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80b8 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d170      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_OscConfig+0x218>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e21a      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d921      	bls.n	8002de8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fc67 	bl	800367c <RCC_SetFlashLatencyFromMSIRange>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e208      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4906      	ldr	r1, [pc, #24]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	4901      	ldr	r1, [pc, #4]	; (8002de0 <HAL_RCC_OscConfig+0x264>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
 8002dde:	e020      	b.n	8002e22 <HAL_RCC_OscConfig+0x2a6>
 8002de0:	40023800 	.word	0x40023800
 8002de4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de8:	4b99      	ldr	r3, [pc, #612]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4996      	ldr	r1, [pc, #600]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfa:	4b95      	ldr	r3, [pc, #596]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	061b      	lsls	r3, r3, #24
 8002e08:	4991      	ldr	r1, [pc, #580]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fc32 	bl	800367c <RCC_SetFlashLatencyFromMSIRange>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1d3      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	0b5b      	lsrs	r3, r3, #13
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e32:	4a87      	ldr	r2, [pc, #540]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002e34:	6892      	ldr	r2, [r2, #8]
 8002e36:	0912      	lsrs	r2, r2, #4
 8002e38:	f002 020f 	and.w	r2, r2, #15
 8002e3c:	4985      	ldr	r1, [pc, #532]	; (8003054 <HAL_RCC_OscConfig+0x4d8>)
 8002e3e:	5c8a      	ldrb	r2, [r1, r2]
 8002e40:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e42:	4a85      	ldr	r2, [pc, #532]	; (8003058 <HAL_RCC_OscConfig+0x4dc>)
 8002e44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e46:	4b85      	ldr	r3, [pc, #532]	; (800305c <HAL_RCC_OscConfig+0x4e0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fdee 	bl	8000a2c <HAL_InitTick>
 8002e50:	4603      	mov	r3, r0
 8002e52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d045      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	e1b5      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d029      	beq.n	8002eba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e66:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x4e4>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fd fe2a 	bl	8000ac4 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e74:	f7fd fe26 	bl	8000ac4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e1a1      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e86:	4b72      	ldr	r3, [pc, #456]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e92:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	496c      	ldr	r1, [pc, #432]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	4967      	ldr	r1, [pc, #412]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eba:	4b69      	ldr	r3, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x4e4>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fe00 	bl	8000ac4 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec8:	f7fd fdfc 	bl	8000ac4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e177      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d030      	beq.n	8002f54 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b5a      	ldr	r3, [pc, #360]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fd fde0 	bl	8000ac4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fd fddc 	bl	8000ac4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e157      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x38c>
 8002f26:	e015      	b.n	8002f54 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b4e      	ldr	r3, [pc, #312]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fd fdc9 	bl	8000ac4 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fd fdc5 	bl	8000ac4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e140      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f48:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80b5 	beq.w	80030cc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	4a36      	ldr	r2, [pc, #216]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6253      	str	r3, [r2, #36]	; 0x24
 8002f7e:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_RCC_OscConfig+0x4ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d118      	bne.n	8002fcc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x4ec>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a32      	ldr	r2, [pc, #200]	; (8003068 <HAL_RCC_OscConfig+0x4ec>)
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa6:	f7fd fd8d 	bl	8000ac4 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fae:	f7fd fd89 	bl	8000ac4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b64      	cmp	r3, #100	; 0x64
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e104      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCC_OscConfig+0x4ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x466>
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fde:	6353      	str	r3, [r2, #52]	; 0x34
 8002fe0:	e02d      	b.n	800303e <HAL_RCC_OscConfig+0x4c2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0x488>
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff4:	6353      	str	r3, [r2, #52]	; 0x34
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8002ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003000:	6353      	str	r3, [r2, #52]	; 0x34
 8003002:	e01c      	b.n	800303e <HAL_RCC_OscConfig+0x4c2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d10c      	bne.n	8003026 <HAL_RCC_OscConfig+0x4aa>
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 800300e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003010:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8003012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003016:	6353      	str	r3, [r2, #52]	; 0x34
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6353      	str	r3, [r2, #52]	; 0x34
 8003024:	e00b      	b.n	800303e <HAL_RCC_OscConfig+0x4c2>
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 800302c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003030:	6353      	str	r3, [r2, #52]	; 0x34
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	4a06      	ldr	r2, [pc, #24]	; (8003050 <HAL_RCC_OscConfig+0x4d4>)
 8003038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800303c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d024      	beq.n	8003090 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7fd fd3d 	bl	8000ac4 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800304c:	e019      	b.n	8003082 <HAL_RCC_OscConfig+0x506>
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	08009794 	.word	0x08009794
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004
 8003060:	42470020 	.word	0x42470020
 8003064:	42470680 	.word	0x42470680
 8003068:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fd fd2a 	bl	8000ac4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0a3      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003082:	4b54      	ldr	r3, [pc, #336]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <HAL_RCC_OscConfig+0x4f0>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003090:	f7fd fd18 	bl	8000ac4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fd fd14 	bl	8000ac4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e08d      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030ae:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ee      	bne.n	8003098 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ba:	7ffb      	ldrb	r3, [r7, #31]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b44      	ldr	r3, [pc, #272]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	4a43      	ldr	r2, [pc, #268]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d079      	beq.n	80031c8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d056      	beq.n	8003188 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d13b      	bne.n	800315a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_RCC_OscConfig+0x65c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fd fcec 	bl	8000ac4 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fd fce8 	bl	8000ac4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e063      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003102:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	4319      	orrs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	430b      	orrs	r3, r1
 8003126:	492b      	ldr	r1, [pc, #172]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_RCC_OscConfig+0x65c>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fd fcc7 	bl	8000ac4 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313a:	f7fd fcc3 	bl	8000ac4 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e03e      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x5be>
 8003158:	e036      	b.n	80031c8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_RCC_OscConfig+0x65c>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fd fcb0 	bl	8000ac4 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003168:	f7fd fcac 	bl	8000ac4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e027      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x5ec>
 8003186:	e01f      	b.n	80031c8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e01a      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCC_OscConfig+0x658>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	42470060 	.word	0x42470060

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e11a      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b8f      	ldr	r3, [pc, #572]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d919      	bls.n	8003232 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_ClockConfig+0x34>
 8003204:	4b8a      	ldr	r3, [pc, #552]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a89      	ldr	r2, [pc, #548]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b87      	ldr	r3, [pc, #540]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f023 0201 	bic.w	r2, r3, #1
 8003218:	4985      	ldr	r1, [pc, #532]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003220:	4b83      	ldr	r3, [pc, #524]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d001      	beq.n	8003232 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0f9      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323e:	4b7d      	ldr	r3, [pc, #500]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	497a      	ldr	r1, [pc, #488]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 808e 	beq.w	800337a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003266:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d121      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0d7      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800327e:	4b6d      	ldr	r3, [pc, #436]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0cb      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003296:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0bf      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032a6:	4b63      	ldr	r3, [pc, #396]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0b7      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	495c      	ldr	r1, [pc, #368]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fd fbfc 	bl	8000ac4 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d112      	bne.n	80032fc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fd fbf4 	bl	8000ac4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e09b      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d1ee      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xfc>
 80032fa:	e03e      	b.n	800337a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d112      	bne.n	800332a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003304:	e00a      	b.n	800331c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003306:	f7fd fbdd 	bl	8000ac4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e084      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800331c:	4b45      	ldr	r3, [pc, #276]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d1ee      	bne.n	8003306 <HAL_RCC_ClockConfig+0x12a>
 8003328:	e027      	b.n	800337a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d11d      	bne.n	800336e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fd fbc6 	bl	8000ac4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e06d      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800334a:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b04      	cmp	r3, #4
 8003354:	d1ee      	bne.n	8003334 <HAL_RCC_ClockConfig+0x158>
 8003356:	e010      	b.n	800337a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fd fbb4 	bl	8000ac4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e05b      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ee      	bne.n	8003358 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337a:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d219      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d105      	bne.n	800339a <HAL_RCC_ClockConfig+0x1be>
 800338e:	4b28      	ldr	r3, [pc, #160]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a27      	ldr	r2, [pc, #156]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 0201 	bic.w	r2, r3, #1
 80033a2:	4923      	ldr	r1, [pc, #140]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b21      	ldr	r3, [pc, #132]	; (8003430 <HAL_RCC_ClockConfig+0x254>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e034      	b.n	8003426 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4917      	ldr	r1, [pc, #92]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	490f      	ldr	r1, [pc, #60]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fa:	f000 f823 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_RCC_ClockConfig+0x258>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	490b      	ldr	r1, [pc, #44]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 800340c:	5ccb      	ldrb	r3, [r1, r3]
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 8003414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x264>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd fb06 	bl	8000a2c <HAL_InitTick>
 8003420:	4603      	mov	r3, r0
 8003422:	72fb      	strb	r3, [r7, #11]

  return status;
 8003424:	7afb      	ldrb	r3, [r7, #11]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	08009794 	.word	0x08009794
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003448:	b092      	sub	sp, #72	; 0x48
 800344a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800344c:	4b79      	ldr	r3, [pc, #484]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d00d      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x34>
 800345c:	2b0c      	cmp	r3, #12
 800345e:	f200 80d5 	bhi.w	800360c <HAL_RCC_GetSysClockFreq+0x1c8>
 8003462:	2b04      	cmp	r3, #4
 8003464:	d002      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x28>
 8003466:	2b08      	cmp	r3, #8
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x2e>
 800346a:	e0cf      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b72      	ldr	r3, [pc, #456]	; (8003638 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800346e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003470:	e0da      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003472:	4b71      	ldr	r3, [pc, #452]	; (8003638 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003474:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003476:	e0d7      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347a:	0c9b      	lsrs	r3, r3, #18
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	4b6e      	ldr	r3, [pc, #440]	; (800363c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	0d9b      	lsrs	r3, r3, #22
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003492:	4b68      	ldr	r3, [pc, #416]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d05d      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2200      	movs	r2, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	4611      	mov	r1, r2
 80034a6:	4604      	mov	r4, r0
 80034a8:	460d      	mov	r5, r1
 80034aa:	4622      	mov	r2, r4
 80034ac:	462b      	mov	r3, r5
 80034ae:	f04f 0000 	mov.w	r0, #0
 80034b2:	f04f 0100 	mov.w	r1, #0
 80034b6:	0159      	lsls	r1, r3, #5
 80034b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034bc:	0150      	lsls	r0, r2, #5
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4621      	mov	r1, r4
 80034c4:	1a51      	subs	r1, r2, r1
 80034c6:	6139      	str	r1, [r7, #16]
 80034c8:	4629      	mov	r1, r5
 80034ca:	eb63 0301 	sbc.w	r3, r3, r1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034dc:	4659      	mov	r1, fp
 80034de:	018b      	lsls	r3, r1, #6
 80034e0:	4651      	mov	r1, sl
 80034e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e6:	4651      	mov	r1, sl
 80034e8:	018a      	lsls	r2, r1, #6
 80034ea:	46d4      	mov	ip, sl
 80034ec:	ebb2 080c 	subs.w	r8, r2, ip
 80034f0:	4659      	mov	r1, fp
 80034f2:	eb63 0901 	sbc.w	r9, r3, r1
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800350a:	4690      	mov	r8, r2
 800350c:	4699      	mov	r9, r3
 800350e:	4623      	mov	r3, r4
 8003510:	eb18 0303 	adds.w	r3, r8, r3
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	462b      	mov	r3, r5
 8003518:	eb49 0303 	adc.w	r3, r9, r3
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800352a:	4629      	mov	r1, r5
 800352c:	028b      	lsls	r3, r1, #10
 800352e:	4620      	mov	r0, r4
 8003530:	4629      	mov	r1, r5
 8003532:	4604      	mov	r4, r0
 8003534:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003538:	4601      	mov	r1, r0
 800353a:	028a      	lsls	r2, r1, #10
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	2200      	movs	r2, #0
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
 8003546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003548:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800354c:	f7fc fe1e 	bl	800018c <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4613      	mov	r3, r2
 8003556:	647b      	str	r3, [r7, #68]	; 0x44
 8003558:	e055      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	2200      	movs	r2, #0
 800355e:	623b      	str	r3, [r7, #32]
 8003560:	627a      	str	r2, [r7, #36]	; 0x24
 8003562:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003566:	4642      	mov	r2, r8
 8003568:	464b      	mov	r3, r9
 800356a:	f04f 0000 	mov.w	r0, #0
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	0159      	lsls	r1, r3, #5
 8003574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003578:	0150      	lsls	r0, r2, #5
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	46c4      	mov	ip, r8
 8003580:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003584:	4640      	mov	r0, r8
 8003586:	4649      	mov	r1, r9
 8003588:	468c      	mov	ip, r1
 800358a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800359a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800359e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035a2:	ebb2 040a 	subs.w	r4, r2, sl
 80035a6:	eb63 050b 	sbc.w	r5, r3, fp
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	00eb      	lsls	r3, r5, #3
 80035b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b8:	00e2      	lsls	r2, r4, #3
 80035ba:	4614      	mov	r4, r2
 80035bc:	461d      	mov	r5, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	18e3      	adds	r3, r4, r3
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	460b      	mov	r3, r1
 80035c6:	eb45 0303 	adc.w	r3, r5, r3
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035d8:	4629      	mov	r1, r5
 80035da:	028b      	lsls	r3, r1, #10
 80035dc:	4620      	mov	r0, r4
 80035de:	4629      	mov	r1, r5
 80035e0:	4604      	mov	r4, r0
 80035e2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80035e6:	4601      	mov	r1, r0
 80035e8:	028a      	lsls	r2, r1, #10
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	2200      	movs	r2, #0
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	61fa      	str	r2, [r7, #28]
 80035f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035fa:	f7fc fdc7 	bl	800018c <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4613      	mov	r3, r2
 8003604:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800360a:	e00d      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0b5b      	lsrs	r3, r3, #13
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	3301      	adds	r3, #1
 800361c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003626:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800362a:	4618      	mov	r0, r3
 800362c:	3748      	adds	r7, #72	; 0x48
 800362e:	46bd      	mov	sp, r7
 8003630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	00f42400 	.word	0x00f42400
 800363c:	08009788 	.word	0x08009788

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b02      	ldr	r3, [pc, #8]	; (8003650 <HAL_RCC_GetHCLKFreq+0x10>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000000 	.word	0x20000000

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff2 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	080097a4 	.word	0x080097a4

0800367c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003688:	4b29      	ldr	r3, [pc, #164]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d12c      	bne.n	80036ee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003694:	4b26      	ldr	r3, [pc, #152]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e016      	b.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ac:	4b20      	ldr	r3, [pc, #128]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6253      	str	r3, [r2, #36]	; 0x24
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036cc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	4a17      	ldr	r2, [pc, #92]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80036e0:	d105      	bne.n	80036ee <RCC_SetFlashLatencyFromMSIRange+0x72>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036e8:	d101      	bne.n	80036ee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80036ea:	2301      	movs	r3, #1
 80036ec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 0201 	bic.w	r2, r3, #1
 8003708:	490b      	ldr	r1, [pc, #44]	; (8003738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	429a      	cmp	r2, r3
 800371c:	d001      	beq.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	40007000 	.word	0x40007000
 8003738:	40023c00 	.word	0x40023c00

0800373c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e06e      	b.n	800382c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375e:	d009      	beq.n	8003774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]
 8003766:	e005      	b.n	8003774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd f85c 	bl	800084c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	ea42 0103 	orr.w	r1, r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	0c1a      	lsrs	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f002 0204 	and.w	r2, r2, #4
 800381a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_SPI_Transmit+0x22>
 8003852:	2302      	movs	r3, #2
 8003854:	e126      	b.n	8003aa4 <HAL_SPI_Transmit+0x270>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800385e:	f7fd f931 	bl	8000ac4 <HAL_GetTick>
 8003862:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d002      	beq.n	800387a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003874:	2302      	movs	r3, #2
 8003876:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003878:	e10b      	b.n	8003a92 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_SPI_Transmit+0x52>
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800388a:	e102      	b.n	8003a92 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2203      	movs	r2, #3
 8003890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d2:	d10f      	bne.n	80038f4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d007      	beq.n	8003912 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391a:	d14b      	bne.n	80039b4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_SPI_Transmit+0xf6>
 8003924:	8afb      	ldrh	r3, [r7, #22]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d13e      	bne.n	80039a8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800394e:	e02b      	b.n	80039a8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d112      	bne.n	8003984 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	881a      	ldrh	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	86da      	strh	r2, [r3, #54]	; 0x36
 8003982:	e011      	b.n	80039a8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003984:	f7fd f89e 	bl	8000ac4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d803      	bhi.n	800399c <HAL_SPI_Transmit+0x168>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399a:	d102      	bne.n	80039a2 <HAL_SPI_Transmit+0x16e>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039a6:	e074      	b.n	8003a92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ce      	bne.n	8003950 <HAL_SPI_Transmit+0x11c>
 80039b2:	e04c      	b.n	8003a4e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_Transmit+0x18e>
 80039bc:	8afb      	ldrh	r3, [r7, #22]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d140      	bne.n	8003a44 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039e8:	e02c      	b.n	8003a44 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d113      	bne.n	8003a20 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a1e:	e011      	b.n	8003a44 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a20:	f7fd f850 	bl	8000ac4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d803      	bhi.n	8003a38 <HAL_SPI_Transmit+0x204>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d102      	bne.n	8003a3e <HAL_SPI_Transmit+0x20a>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a42:	e026      	b.n	8003a92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1cd      	bne.n	80039ea <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fbcc 	bl	80041f0 <SPI_EndRxTxTransaction>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e000      	b.n	8003a92 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac8:	d112      	bne.n	8003af0 <HAL_SPI_Receive+0x44>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10e      	bne.n	8003af0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f8f1 	bl	8003cce <HAL_SPI_TransmitReceive>
 8003aec:	4603      	mov	r3, r0
 8003aee:	e0ea      	b.n	8003cc6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Receive+0x52>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e0e3      	b.n	8003cc6 <HAL_SPI_Receive+0x21a>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b06:	f7fc ffdd 	bl	8000ac4 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b1c:	e0ca      	b.n	8003cb4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Receive+0x7e>
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b2e:	e0c1      	b.n	8003cb4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2204      	movs	r2, #4
 8003b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	d10f      	bne.n	8003b98 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d007      	beq.n	8003bb6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d162      	bne.n	8003c84 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003bbe:	e02e      	b.n	8003c1e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d115      	bne.n	8003bfa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f103 020c 	add.w	r2, r3, #12
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bf8:	e011      	b.n	8003c1e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bfa:	f7fc ff63 	bl	8000ac4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d803      	bhi.n	8003c12 <HAL_SPI_Receive+0x166>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d102      	bne.n	8003c18 <HAL_SPI_Receive+0x16c>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c1c:	e04a      	b.n	8003cb4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1cb      	bne.n	8003bc0 <HAL_SPI_Receive+0x114>
 8003c28:	e031      	b.n	8003c8e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d113      	bne.n	8003c60 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	b292      	uxth	r2, r2
 8003c44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	1c9a      	adds	r2, r3, #2
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c5e:	e011      	b.n	8003c84 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c60:	f7fc ff30 	bl	8000ac4 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d803      	bhi.n	8003c78 <HAL_SPI_Receive+0x1cc>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d102      	bne.n	8003c7e <HAL_SPI_Receive+0x1d2>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c82:	e017      	b.n	8003cb4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1cd      	bne.n	8003c2a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa46 	bl	8004124 <SPI_EndRxTransaction>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
 8003cb0:	e000      	b.n	8003cb4 <HAL_SPI_Receive+0x208>
  }

error :
 8003cb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b08c      	sub	sp, #48	; 0x30
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x26>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e18a      	b.n	800400a <HAL_SPI_TransmitReceive+0x33c>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cfc:	f7fc fee2 	bl	8000ac4 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d00f      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x70>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d24:	d107      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x68>
 8003d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d003      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d3c:	e15b      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0x82>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0x82>
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d56:	e14e      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d003      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2205      	movs	r2, #5
 8003d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	887a      	ldrh	r2, [r7, #2]
 8003d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	887a      	ldrh	r2, [r7, #2]
 8003d8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d007      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc8:	d178      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x10a>
 8003dd2:	8b7b      	ldrh	r3, [r7, #26]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d166      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfc:	e053      	b.n	8003ea6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d11b      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x176>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d016      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x176>
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d113      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	881a      	ldrh	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d119      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x1b8>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d014      	beq.n	8003e86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	b292      	uxth	r2, r2
 8003e68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	1c9a      	adds	r2, r3, #2
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e82:	2301      	movs	r3, #1
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e86:	f7fc fe1d 	bl	8000ac4 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d807      	bhi.n	8003ea6 <HAL_SPI_TransmitReceive+0x1d8>
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d003      	beq.n	8003ea6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ea4:	e0a7      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1a6      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x130>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1a1      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x130>
 8003eba:	e07c      	b.n	8003fb6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x1fc>
 8003ec4:	8b7b      	ldrh	r3, [r7, #26]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d16b      	bne.n	8003fa2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	7812      	ldrb	r2, [r2, #0]
 8003ed6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef0:	e057      	b.n	8003fa2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d11c      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x26c>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d017      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x26c>
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d114      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	7812      	ldrb	r2, [r2, #0]
 8003f1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d119      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x2ae>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f7c:	f7fc fda2 	bl	8000ac4 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d803      	bhi.n	8003f94 <HAL_SPI_TransmitReceive+0x2c6>
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x2cc>
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fa0:	e029      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1a2      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x224>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d19d      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f918 	bl	80041f0 <SPI_EndRxTxTransaction>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fd2:	e010      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	e000      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ff4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800400a:	4618      	mov	r0, r3
 800400c:	3730      	adds	r7, #48	; 0x30
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004024:	f7fc fd4e 	bl	8000ac4 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4413      	add	r3, r2
 8004032:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004034:	f7fc fd46 	bl	8000ac4 <HAL_GetTick>
 8004038:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800403a:	4b39      	ldr	r3, [pc, #228]	; (8004120 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	0d1b      	lsrs	r3, r3, #20
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800404a:	e054      	b.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d050      	beq.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004054:	f7fc fd36 	bl	8000ac4 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d902      	bls.n	800406a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d13d      	bne.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004082:	d111      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	d004      	beq.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d107      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b0:	d10f      	bne.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e017      	b.n	8004116 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	429a      	cmp	r2, r3
 8004112:	d19b      	bne.n	800404c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000

08004124 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004138:	d111      	bne.n	800415e <SPI_EndRxTransaction+0x3a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004142:	d004      	beq.n	800414e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414c:	d107      	bne.n	800415e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004166:	d12a      	bne.n	80041be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004170:	d012      	beq.n	8004198 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2200      	movs	r2, #0
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff ff49 	bl	8004014 <SPI_WaitFlagStateUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02d      	beq.n	80041e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e026      	b.n	80041e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2200      	movs	r2, #0
 80041a0:	2101      	movs	r1, #1
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff ff36 	bl	8004014 <SPI_WaitFlagStateUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e013      	b.n	80041e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	2101      	movs	r1, #1
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff ff23 	bl	8004014 <SPI_WaitFlagStateUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e000      	b.n	80041e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <SPI_EndRxTxTransaction+0x7c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <SPI_EndRxTxTransaction+0x80>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0d5b      	lsrs	r3, r3, #21
 8004208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800421a:	d112      	bne.n	8004242 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2200      	movs	r2, #0
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff fef4 	bl	8004014 <SPI_WaitFlagStateUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e00f      	b.n	8004262 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3b01      	subs	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d0f2      	beq.n	8004242 <SPI_EndRxTxTransaction+0x52>
 800425c:	e000      	b.n	8004260 <SPI_EndRxTxTransaction+0x70>
        break;
 800425e:	bf00      	nop
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000000 	.word	0x20000000
 8004270:	165e9f81 	.word	0x165e9f81

08004274 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004284:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004288:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4013      	ands	r3, r2
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042d4:	b084      	sub	sp, #16
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	f107 0014 	add.w	r0, r7, #20
 80042e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	b004      	add	sp, #16
 8004312:	4770      	bx	lr

08004314 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004314:	b480      	push	{r7}
 8004316:	b09b      	sub	sp, #108	; 0x6c
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	78db      	ldrb	r3, [r3, #3]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d81f      	bhi.n	8004386 <USB_ActivateEndpoint+0x72>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <USB_ActivateEndpoint+0x38>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	0800435d 	.word	0x0800435d
 8004350:	08004379 	.word	0x08004379
 8004354:	0800438f 	.word	0x0800438f
 8004358:	0800436b 	.word	0x0800436b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800435c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004364:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004368:	e012      	b.n	8004390 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800436a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800436e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004372:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004376:	e00b      	b.n	8004390 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004378:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800437c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004380:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004384:	e004      	b.n	8004390 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800438c:	e000      	b.n	8004390 <USB_ActivateEndpoint+0x7c>
      break;
 800438e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800439e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	7b1b      	ldrb	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 8149 	bne.w	8004694 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8084 	beq.w	8004514 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4413      	add	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	011a      	lsls	r2, r3, #4
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	88db      	ldrh	r3, [r3, #6]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	81fb      	strh	r3, [r7, #14]
 800444e:	89fb      	ldrh	r3, [r7, #14]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01b      	beq.n	8004490 <USB_ActivateEndpoint+0x17c>
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	81bb      	strh	r3, [r7, #12]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	89bb      	ldrh	r3, [r7, #12]
 800447c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800448c:	b29b      	uxth	r3, r3
 800448e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	78db      	ldrb	r3, [r3, #3]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d020      	beq.n	80044da <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ae:	813b      	strh	r3, [r7, #8]
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	f083 0320 	eor.w	r3, r3, #32
 80044b6:	813b      	strh	r3, [r7, #8]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	893b      	ldrh	r3, [r7, #8]
 80044c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	8013      	strh	r3, [r2, #0]
 80044d8:	e27f      	b.n	80049da <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f0:	817b      	strh	r3, [r7, #10]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	441a      	add	r2, r3
 80044fc:	897b      	ldrh	r3, [r7, #10]
 80044fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]
 8004512:	e262      	b.n	80049da <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	4413      	add	r3, r2
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	011a      	lsls	r2, r3, #4
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	4413      	add	r3, r2
 8004532:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	88db      	ldrh	r3, [r3, #6]
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	4413      	add	r3, r2
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	011a      	lsls	r2, r3, #4
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	4413      	add	r3, r2
 8004566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d112      	bne.n	800459a <USB_ActivateEndpoint+0x286>
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800457e:	b29a      	uxth	r2, r3
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004592:	b29a      	uxth	r2, r3
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	801a      	strh	r2, [r3, #0]
 8004598:	e02f      	b.n	80045fa <USB_ActivateEndpoint+0x2e6>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b3e      	cmp	r3, #62	; 0x3e
 80045a0:	d813      	bhi.n	80045ca <USB_ActivateEndpoint+0x2b6>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	663b      	str	r3, [r7, #96]	; 0x60
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <USB_ActivateEndpoint+0x2a8>
 80045b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b8:	3301      	adds	r3, #1
 80045ba:	663b      	str	r3, [r7, #96]	; 0x60
 80045bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045be:	b29b      	uxth	r3, r3
 80045c0:	029b      	lsls	r3, r3, #10
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	e017      	b.n	80045fa <USB_ActivateEndpoint+0x2e6>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	663b      	str	r3, [r7, #96]	; 0x60
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <USB_ActivateEndpoint+0x2d0>
 80045de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e0:	3b01      	subs	r3, #1
 80045e2:	663b      	str	r3, [r7, #96]	; 0x60
 80045e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	029b      	lsls	r3, r3, #10
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	83fb      	strh	r3, [r7, #30]
 8004608:	8bfb      	ldrh	r3, [r7, #30]
 800460a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01b      	beq.n	800464a <USB_ActivateEndpoint+0x336>
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	83bb      	strh	r3, [r7, #28]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	8bbb      	ldrh	r3, [r7, #28]
 8004636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	837b      	strh	r3, [r7, #26]
 8004662:	8b7b      	ldrh	r3, [r7, #26]
 8004664:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004668:	837b      	strh	r3, [r7, #26]
 800466a:	8b7b      	ldrh	r3, [r7, #26]
 800466c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004670:	837b      	strh	r3, [r7, #26]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	8b7b      	ldrh	r3, [r7, #26]
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]
 8004692:	e1a2      	b.n	80049da <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	441a      	add	r2, r3
 80046b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80046bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80046c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046da:	b29b      	uxth	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e0:	4413      	add	r3, r2
 80046e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	011a      	lsls	r2, r3, #4
 80046ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f2:	657b      	str	r3, [r7, #84]	; 0x54
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	891b      	ldrh	r3, [r3, #8]
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	653b      	str	r3, [r7, #80]	; 0x50
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470e:	b29b      	uxth	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004714:	4413      	add	r3, r2
 8004716:	653b      	str	r3, [r7, #80]	; 0x50
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	011a      	lsls	r2, r3, #4
 800471e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004720:	4413      	add	r3, r2
 8004722:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	895b      	ldrh	r3, [r3, #10]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	b29b      	uxth	r3, r3
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004736:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f040 8091 	bne.w	8004864 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004750:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01b      	beq.n	8004792 <USB_ActivateEndpoint+0x47e>
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	441a      	add	r2, r3
 800477c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800477e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800478a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478e:	b29b      	uxth	r3, r3
 8004790:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	873b      	strh	r3, [r7, #56]	; 0x38
 80047a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01b      	beq.n	80047e2 <USB_ActivateEndpoint+0x4ce>
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	441a      	add	r2, r3
 80047cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004800:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004802:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004804:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004808:	86bb      	strh	r3, [r7, #52]	; 0x34
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	441a      	add	r2, r3
 8004814:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004840:	867b      	strh	r3, [r7, #50]	; 0x32
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]
 8004862:	e0ba      	b.n	80049da <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004874:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01d      	beq.n	80048bc <USB_ActivateEndpoint+0x5a8>
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80048cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01d      	beq.n	8004914 <USB_ActivateEndpoint+0x600>
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004910:	b29b      	uxth	r3, r3
 8004912:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	78db      	ldrb	r3, [r3, #3]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d024      	beq.n	8004966 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004932:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800493a:	f083 0320 	eor.w	r3, r3, #32
 800493e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	b29b      	uxth	r3, r3
 8004962:	8013      	strh	r3, [r2, #0]
 8004964:	e01d      	b.n	80049a2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800498e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80049da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049de:	4618      	mov	r0, r3
 80049e0:	376c      	adds	r7, #108	; 0x6c
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b08d      	sub	sp, #52	; 0x34
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	7b1b      	ldrb	r3, [r3, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 808e 	bne.w	8004b18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d044      	beq.n	8004a8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	81bb      	strh	r3, [r7, #12]
 8004a12:	89bb      	ldrh	r3, [r7, #12]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01b      	beq.n	8004a54 <USB_DeactivateEndpoint+0x6c>
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	817b      	strh	r3, [r7, #10]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	813b      	strh	r3, [r7, #8]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	893b      	ldrh	r3, [r7, #8]
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
 8004a8c:	e192      	b.n	8004db4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	827b      	strh	r3, [r7, #18]
 8004a9c:	8a7b      	ldrh	r3, [r7, #18]
 8004a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01b      	beq.n	8004ade <USB_DeactivateEndpoint+0xf6>
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	823b      	strh	r3, [r7, #16]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	8a3b      	ldrh	r3, [r7, #16]
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af4:	81fb      	strh	r3, [r7, #14]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	89fb      	ldrh	r3, [r7, #14]
 8004b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
 8004b16:	e14d      	b.n	8004db4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 80a5 	bne.w	8004c6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	843b      	strh	r3, [r7, #32]
 8004b30:	8c3b      	ldrh	r3, [r7, #32]
 8004b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01b      	beq.n	8004b72 <USB_DeactivateEndpoint+0x18a>
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b50:	83fb      	strh	r3, [r7, #30]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	8bfb      	ldrh	r3, [r7, #30]
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	83bb      	strh	r3, [r7, #28]
 8004b80:	8bbb      	ldrh	r3, [r7, #28]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01b      	beq.n	8004bc2 <USB_DeactivateEndpoint+0x1da>
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba0:	837b      	strh	r3, [r7, #26]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	8b7b      	ldrh	r3, [r7, #26]
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd8:	833b      	strh	r3, [r7, #24]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	441a      	add	r2, r3
 8004be4:	8b3b      	ldrh	r3, [r7, #24]
 8004be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	82fb      	strh	r3, [r7, #22]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8afb      	ldrh	r3, [r7, #22]
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c48:	82bb      	strh	r3, [r7, #20]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	8abb      	ldrh	r3, [r7, #20]
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
 8004c6a:	e0a3      	b.n	8004db4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <USB_DeactivateEndpoint+0x2d4>
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004cca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <USB_DeactivateEndpoint+0x324>
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	441a      	add	r2, r3
 8004d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3734      	adds	r7, #52	; 0x34
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b0cc      	sub	sp, #304	; 0x130
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dce:	6018      	str	r0, [r3, #0]
 8004dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	f041 817d 	bne.w	80060e6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d908      	bls.n	8004e1a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e18:	e007      	b.n	8004e2a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	7b1b      	ldrb	r3, [r3, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d152      	bne.n	8004ee0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6959      	ldr	r1, [r3, #20]
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	88da      	ldrh	r2, [r3, #6]
 8004e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e60:	6800      	ldr	r0, [r0, #0]
 8004e62:	f001 ff0e 	bl	8006c82 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e72:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e98:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	011a      	lsls	r2, r3, #4
 8004eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	f001 b8b5 	b.w	800604a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	78db      	ldrb	r3, [r3, #3]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	f040 84c6 	bne.w	800587e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a1a      	ldr	r2, [r3, #32]
 8004efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	f240 8443 	bls.w	8005796 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a1a      	ldr	r2, [r3, #32]
 8004f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7c:	1ad2      	subs	r2, r2, r3
 8004f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 823e 	beq.w	800542e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fbe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 809a 	bne.w	800510c <USB_EPStartXfer+0x34c>
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fe4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005006:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800500a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	440a      	add	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	011a      	lsls	r2, r3, #4
 8005022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4413      	add	r3, r2
 800502e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005036:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d122      	bne.n	800508a <USB_EPStartXfer+0x2ca>
 8005044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005048:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005056:	b29a      	uxth	r2, r3
 8005058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507a:	b29a      	uxth	r2, r3
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e079      	b.n	800517e <USB_EPStartXfer+0x3be>
 800508a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508e:	2b3e      	cmp	r3, #62	; 0x3e
 8005090:	d81b      	bhi.n	80050ca <USB_EPStartXfer+0x30a>
 8005092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800509c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d004      	beq.n	80050b2 <USB_EPStartXfer+0x2f2>
 80050a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050ac:	3301      	adds	r3, #1
 80050ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	029b      	lsls	r3, r3, #10
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	e059      	b.n	800517e <USB_EPStartXfer+0x3be>
 80050ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <USB_EPStartXfer+0x32a>
 80050e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050e4:	3b01      	subs	r3, #1
 80050e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	e038      	b.n	800517e <USB_EPStartXfer+0x3be>
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d130      	bne.n	800517e <USB_EPStartXfer+0x3be>
 800511c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	4619      	mov	r1, r3
 800512e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005132:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005136:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800513a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	440a      	add	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	011a      	lsls	r2, r3, #4
 8005152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005156:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4413      	add	r3, r2
 800515e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005170:	b29a      	uxth	r2, r3
 8005172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800517e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	895b      	ldrh	r3, [r3, #10]
 800518a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6959      	ldr	r1, [r3, #20]
 800519a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	f001 fd68 	bl	8006c82 <USB_WritePMA>
            ep->xfer_buff += len;
 80051b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c2:	441a      	add	r2, r3
 80051c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6a1a      	ldr	r2, [r3, #32]
 80051dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d90f      	bls.n	800520c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80051ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fc:	1ad2      	subs	r2, r2, r3
 80051fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	621a      	str	r2, [r3, #32]
 800520a:	e00e      	b.n	800522a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800520c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800521c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	f040 809a 	bne.w	8005370 <USB_EPStartXfer+0x5b0>
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005244:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005248:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525e:	b29b      	uxth	r3, r3
 8005260:	4619      	mov	r1, r3
 8005262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005266:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800526a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800526e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	440a      	add	r2, r1
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	011a      	lsls	r2, r3, #4
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4413      	add	r3, r2
 8005292:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d122      	bne.n	80052ee <USB_EPStartXfer+0x52e>
 80052a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052de:	b29a      	uxth	r2, r3
 80052e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	801a      	strh	r2, [r3, #0]
 80052ec:	e083      	b.n	80053f6 <USB_EPStartXfer+0x636>
 80052ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f2:	2b3e      	cmp	r3, #62	; 0x3e
 80052f4:	d81b      	bhi.n	800532e <USB_EPStartXfer+0x56e>
 80052f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <USB_EPStartXfer+0x556>
 800530c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005310:	3301      	adds	r3, #1
 8005312:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005316:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800531a:	b29b      	uxth	r3, r3
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	b29a      	uxth	r2, r3
 8005320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005324:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	e063      	b.n	80053f6 <USB_EPStartXfer+0x636>
 800532e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <USB_EPStartXfer+0x58e>
 8005344:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005348:	3b01      	subs	r3, #1
 800534a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800534e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005352:	b29b      	uxth	r3, r3
 8005354:	029b      	lsls	r3, r3, #10
 8005356:	b29b      	uxth	r3, r3
 8005358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005360:	b29a      	uxth	r2, r3
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e042      	b.n	80053f6 <USB_EPStartXfer+0x636>
 8005370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d13a      	bne.n	80053f6 <USB_EPStartXfer+0x636>
 8005380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005384:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005388:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800538c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4619      	mov	r1, r3
 80053a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	440a      	add	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	011a      	lsls	r2, r3, #4
 80053ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80053da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	891b      	ldrh	r3, [r3, #8]
 8005402:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6959      	ldr	r1, [r3, #20]
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	b29b      	uxth	r3, r3
 8005418:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800541c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005420:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005424:	6800      	ldr	r0, [r0, #0]
 8005426:	f001 fc2c 	bl	8006c82 <USB_WritePMA>
 800542a:	f000 be0e 	b.w	800604a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d16d      	bne.n	800551a <USB_EPStartXfer+0x75a>
 800543e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	64bb      	str	r3, [r7, #72]	; 0x48
 800544a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005458:	b29b      	uxth	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800545e:	4413      	add	r3, r2
 8005460:	64bb      	str	r3, [r7, #72]	; 0x48
 8005462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	011a      	lsls	r2, r3, #4
 8005470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005472:	4413      	add	r3, r2
 8005474:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005478:	647b      	str	r3, [r7, #68]	; 0x44
 800547a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d112      	bne.n	80054a8 <USB_EPStartXfer+0x6e8>
 8005482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800548c:	b29a      	uxth	r2, r3
 800548e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	e063      	b.n	8005570 <USB_EPStartXfer+0x7b0>
 80054a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ac:	2b3e      	cmp	r3, #62	; 0x3e
 80054ae:	d817      	bhi.n	80054e0 <USB_EPStartXfer+0x720>
 80054b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <USB_EPStartXfer+0x710>
 80054c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054ca:	3301      	adds	r3, #1
 80054cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	b29a      	uxth	r2, r3
 80054da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	e047      	b.n	8005570 <USB_EPStartXfer+0x7b0>
 80054e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <USB_EPStartXfer+0x740>
 80054f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054fa:	3b01      	subs	r3, #1
 80054fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005500:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005504:	b29b      	uxth	r3, r3
 8005506:	029b      	lsls	r3, r3, #10
 8005508:	b29b      	uxth	r3, r3
 800550a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005512:	b29a      	uxth	r2, r3
 8005514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e02a      	b.n	8005570 <USB_EPStartXfer+0x7b0>
 800551a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d122      	bne.n	8005570 <USB_EPStartXfer+0x7b0>
 800552a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	653b      	str	r3, [r7, #80]	; 0x50
 8005536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005544:	b29b      	uxth	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554a:	4413      	add	r3, r2
 800554c:	653b      	str	r3, [r7, #80]	; 0x50
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	011a      	lsls	r2, r3, #4
 800555c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555e:	4413      	add	r3, r2
 8005560:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005564:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556a:	b29a      	uxth	r2, r3
 800556c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	891b      	ldrh	r3, [r3, #8]
 800557c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6959      	ldr	r1, [r3, #20]
 800558c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005590:	b29b      	uxth	r3, r3
 8005592:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005596:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800559a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800559e:	6800      	ldr	r0, [r0, #0]
 80055a0:	f001 fb6f 	bl	8006c82 <USB_WritePMA>
            ep->xfer_buff += len;
 80055a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b4:	441a      	add	r2, r3
 80055b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d90f      	bls.n	80055fe <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	621a      	str	r2, [r3, #32]
 80055fc:	e00e      	b.n	800561c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800560e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2200      	movs	r2, #0
 800561a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800561c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
 8005628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d16d      	bne.n	8005714 <USB_EPStartXfer+0x954>
 8005638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	63bb      	str	r3, [r7, #56]	; 0x38
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	4413      	add	r3, r2
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	4413      	add	r3, r2
 800566e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
 8005674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d112      	bne.n	80056a2 <USB_EPStartXfer+0x8e2>
 800567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005686:	b29a      	uxth	r2, r3
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569a:	b29a      	uxth	r2, r3
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	e05d      	b.n	800575e <USB_EPStartXfer+0x99e>
 80056a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a6:	2b3e      	cmp	r3, #62	; 0x3e
 80056a8:	d817      	bhi.n	80056da <USB_EPStartXfer+0x91a>
 80056aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <USB_EPStartXfer+0x90a>
 80056c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056c4:	3301      	adds	r3, #1
 80056c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e041      	b.n	800575e <USB_EPStartXfer+0x99e>
 80056da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <USB_EPStartXfer+0x93a>
 80056f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056f4:	3b01      	subs	r3, #1
 80056f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29b      	uxth	r3, r3
 8005704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570c:	b29a      	uxth	r2, r3
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	801a      	strh	r2, [r3, #0]
 8005712:	e024      	b.n	800575e <USB_EPStartXfer+0x99e>
 8005714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d11c      	bne.n	800575e <USB_EPStartXfer+0x99e>
 8005724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005728:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005738:	4413      	add	r3, r2
 800573a:	643b      	str	r3, [r7, #64]	; 0x40
 800573c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	011a      	lsls	r2, r3, #4
 800574a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574c:	4413      	add	r3, r2
 800574e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005758:	b29a      	uxth	r2, r3
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	895b      	ldrh	r3, [r3, #10]
 800576a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800576e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6959      	ldr	r1, [r3, #20]
 800577a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577e:	b29b      	uxth	r3, r3
 8005780:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005784:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005788:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f001 fa78 	bl	8006c82 <USB_WritePMA>
 8005792:	f000 bc5a 	b.w	800604a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80057a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005806:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800580e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581c:	b29b      	uxth	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005822:	4413      	add	r3, r2
 8005824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	011a      	lsls	r2, r3, #4
 8005834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005836:	4413      	add	r3, r2
 8005838:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800583c:	65bb      	str	r3, [r7, #88]	; 0x58
 800583e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005842:	b29a      	uxth	r2, r3
 8005844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005846:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	891b      	ldrh	r3, [r3, #8]
 8005854:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6959      	ldr	r1, [r3, #20]
 8005864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005868:	b29b      	uxth	r3, r3
 800586a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800586e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005872:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005876:	6800      	ldr	r0, [r0, #0]
 8005878:	f001 fa03 	bl	8006c82 <USB_WritePMA>
 800587c:	e3e5      	b.n	800604a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800587e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005882:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80058a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80058c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80058d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6a1a      	ldr	r2, [r3, #32]
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 81bc 	beq.w	8005c98 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800592e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d16d      	bne.n	8005a1a <USB_EPStartXfer+0xc5a>
 800593e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005942:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	67bb      	str	r3, [r7, #120]	; 0x78
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800595e:	4413      	add	r3, r2
 8005960:	67bb      	str	r3, [r7, #120]	; 0x78
 8005962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	011a      	lsls	r2, r3, #4
 8005970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005972:	4413      	add	r3, r2
 8005974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005978:	677b      	str	r3, [r7, #116]	; 0x74
 800597a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d112      	bne.n	80059a8 <USB_EPStartXfer+0xbe8>
 8005982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800598c:	b29a      	uxth	r2, r3
 800598e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b29b      	uxth	r3, r3
 8005998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	e060      	b.n	8005a6a <USB_EPStartXfer+0xcaa>
 80059a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ac:	2b3e      	cmp	r3, #62	; 0x3e
 80059ae:	d817      	bhi.n	80059e0 <USB_EPStartXfer+0xc20>
 80059b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <USB_EPStartXfer+0xc10>
 80059c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059ca:	3301      	adds	r3, #1
 80059cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	e044      	b.n	8005a6a <USB_EPStartXfer+0xcaa>
 80059e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <USB_EPStartXfer+0xc40>
 80059f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059fa:	3b01      	subs	r3, #1
 80059fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	029b      	lsls	r3, r3, #10
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	e027      	b.n	8005a6a <USB_EPStartXfer+0xcaa>
 8005a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d11f      	bne.n	8005a6a <USB_EPStartXfer+0xcaa>
 8005a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a40:	4413      	add	r3, r2
 8005a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	011a      	lsls	r2, r3, #4
 8005a54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	895b      	ldrh	r3, [r3, #10]
 8005a76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6959      	ldr	r1, [r3, #20]
 8005a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	f001 f8f2 	bl	8006c82 <USB_WritePMA>
          ep->xfer_buff += len;
 8005a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aae:	441a      	add	r2, r3
 8005ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
 8005ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d90f      	bls.n	8005af8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae8:	1ad2      	subs	r2, r2, r3
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	621a      	str	r2, [r3, #32]
 8005af6:	e00e      	b.n	8005b16 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2200      	movs	r2, #0
 8005b14:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 8295 	beq.w	800604a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d16d      	bne.n	8005c0c <USB_EPStartXfer+0xe4c>
 8005b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b50:	4413      	add	r3, r2
 8005b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	011a      	lsls	r2, r3, #4
 8005b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b64:	4413      	add	r3, r2
 8005b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d112      	bne.n	8005b9a <USB_EPStartXfer+0xdda>
 8005b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e063      	b.n	8005c62 <USB_EPStartXfer+0xea2>
 8005b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba0:	d817      	bhi.n	8005bd2 <USB_EPStartXfer+0xe12>
 8005ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d004      	beq.n	8005bc2 <USB_EPStartXfer+0xe02>
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	029b      	lsls	r3, r3, #10
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e047      	b.n	8005c62 <USB_EPStartXfer+0xea2>
 8005bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <USB_EPStartXfer+0xe32>
 8005be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bec:	3b01      	subs	r3, #1
 8005bee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e02a      	b.n	8005c62 <USB_EPStartXfer+0xea2>
 8005c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d122      	bne.n	8005c62 <USB_EPStartXfer+0xea2>
 8005c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	673b      	str	r3, [r7, #112]	; 0x70
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3c:	4413      	add	r3, r2
 8005c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	011a      	lsls	r2, r3, #4
 8005c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c50:	4413      	add	r3, r2
 8005c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	891b      	ldrh	r3, [r3, #8]
 8005c6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6959      	ldr	r1, [r3, #20]
 8005c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c90:	6800      	ldr	r0, [r0, #0]
 8005c92:	f000 fff6 	bl	8006c82 <USB_WritePMA>
 8005c96:	e1d8      	b.n	800604a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d178      	bne.n	8005d9a <USB_EPStartXfer+0xfda>
 8005ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ccc:	4413      	add	r3, r2
 8005cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	011a      	lsls	r2, r3, #4
 8005ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d116      	bne.n	8005d24 <USB_EPStartXfer+0xf64>
 8005cf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	e06b      	b.n	8005dfc <USB_EPStartXfer+0x103c>
 8005d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d28:	2b3e      	cmp	r3, #62	; 0x3e
 8005d2a:	d818      	bhi.n	8005d5e <USB_EPStartXfer+0xf9e>
 8005d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <USB_EPStartXfer+0xf8c>
 8005d42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d46:	3301      	adds	r3, #1
 8005d48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	029b      	lsls	r3, r3, #10
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	e04e      	b.n	8005dfc <USB_EPStartXfer+0x103c>
 8005d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <USB_EPStartXfer+0xfbe>
 8005d74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e030      	b.n	8005dfc <USB_EPStartXfer+0x103c>
 8005d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d128      	bne.n	8005dfc <USB_EPStartXfer+0x103c>
 8005daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dce:	4413      	add	r3, r2
 8005dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	011a      	lsls	r2, r3, #4
 8005de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	891b      	ldrh	r3, [r3, #8]
 8005e08:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6959      	ldr	r1, [r3, #20]
 8005e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e22:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e26:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	f000 ff29 	bl	8006c82 <USB_WritePMA>
          ep->xfer_buff += len;
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695a      	ldr	r2, [r3, #20]
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	441a      	add	r2, r3
 8005e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d90f      	bls.n	8005e8a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	621a      	str	r2, [r3, #32]
 8005e88:	e00e      	b.n	8005ea8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80cc 	beq.w	800604a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d178      	bne.n	8005fc2 <USB_EPStartXfer+0x1202>
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	011a      	lsls	r2, r3, #4
 8005f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d116      	bne.n	8005f4c <USB_EPStartXfer+0x118c>
 8005f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e064      	b.n	8006016 <USB_EPStartXfer+0x1256>
 8005f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f50:	2b3e      	cmp	r3, #62	; 0x3e
 8005f52:	d818      	bhi.n	8005f86 <USB_EPStartXfer+0x11c6>
 8005f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <USB_EPStartXfer+0x11b4>
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6e:	3301      	adds	r3, #1
 8005f70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	029b      	lsls	r3, r3, #10
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e047      	b.n	8006016 <USB_EPStartXfer+0x1256>
 8005f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d104      	bne.n	8005fa6 <USB_EPStartXfer+0x11e6>
 8005f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	e029      	b.n	8006016 <USB_EPStartXfer+0x1256>
 8005fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d121      	bne.n	8006016 <USB_EPStartXfer+0x1256>
 8005fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fe8:	4413      	add	r3, r2
 8005fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	011a      	lsls	r2, r3, #4
 8005ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006000:	4413      	add	r3, r2
 8006002:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800600a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600e:	b29a      	uxth	r2, r3
 8006010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006014:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	895b      	ldrh	r3, [r3, #10]
 8006022:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6959      	ldr	r1, [r3, #20]
 8006032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006036:	b29b      	uxth	r3, r3
 8006038:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800603c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006040:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006044:	6800      	ldr	r0, [r0, #0]
 8006046:	f000 fe1c 	bl	8006c82 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800604a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800606c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006078:	8013      	strh	r3, [r2, #0]
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006082:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006086:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800608a:	8812      	ldrh	r2, [r2, #0]
 800608c:	f082 0210 	eor.w	r2, r2, #16
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800609a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800609e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060a2:	8812      	ldrh	r2, [r2, #0]
 80060a4:	f082 0220 	eor.w	r2, r2, #32
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060de:	b29b      	uxth	r3, r3
 80060e0:	8013      	strh	r3, [r2, #0]
 80060e2:	f000 bc9f 	b.w	8006a24 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	7b1b      	ldrb	r3, [r3, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 80ae 	bne.w	8006254 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80060f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	429a      	cmp	r2, r3
 8006112:	d917      	bls.n	8006144 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699a      	ldr	r2, [r3, #24]
 8006130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006134:	1ad2      	subs	r2, r2, r3
 8006136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	619a      	str	r2, [r3, #24]
 8006142:	e00e      	b.n	8006162 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2200      	movs	r2, #0
 8006160:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006166:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617e:	b29b      	uxth	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006186:	4413      	add	r3, r2
 8006188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800618c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	011a      	lsls	r2, r3, #4
 800619a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800619e:	4413      	add	r3, r2
 80061a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d116      	bne.n	80061de <USB_EPStartXfer+0x141e>
 80061b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	e3e8      	b.n	80069b0 <USB_EPStartXfer+0x1bf0>
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	2b3e      	cmp	r3, #62	; 0x3e
 80061e4:	d818      	bhi.n	8006218 <USB_EPStartXfer+0x1458>
 80061e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <USB_EPStartXfer+0x1446>
 80061fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006200:	3301      	adds	r3, #1
 8006202:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006206:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800620a:	b29b      	uxth	r3, r3
 800620c:	029b      	lsls	r3, r3, #10
 800620e:	b29a      	uxth	r2, r3
 8006210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e3cb      	b.n	80069b0 <USB_EPStartXfer+0x1bf0>
 8006218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <USB_EPStartXfer+0x1478>
 800622e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006232:	3b01      	subs	r3, #1
 8006234:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006238:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800623c:	b29b      	uxth	r3, r3
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624a:	b29a      	uxth	r2, r3
 800624c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e3ad      	b.n	80069b0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	78db      	ldrb	r3, [r3, #3]
 8006260:	2b02      	cmp	r3, #2
 8006262:	f040 8200 	bne.w	8006666 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 8091 	bne.w	800639a <USB_EPStartXfer+0x15da>
 8006278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006294:	b29b      	uxth	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800629c:	4413      	add	r3, r2
 800629e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	011a      	lsls	r2, r3, #4
 80062b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062b4:	4413      	add	r3, r2
 80062b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d116      	bne.n	80062fc <USB_EPStartXfer+0x153c>
 80062ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e083      	b.n	8006404 <USB_EPStartXfer+0x1644>
 80062fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b3e      	cmp	r3, #62	; 0x3e
 800630a:	d820      	bhi.n	800634e <USB_EPStartXfer+0x158e>
 800630c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <USB_EPStartXfer+0x157c>
 8006332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006336:	3301      	adds	r3, #1
 8006338:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800633c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006340:	b29b      	uxth	r3, r3
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	b29a      	uxth	r2, r3
 8006346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	e05a      	b.n	8006404 <USB_EPStartXfer+0x1644>
 800634e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <USB_EPStartXfer+0x15be>
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006378:	3b01      	subs	r3, #1
 800637a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006382:	b29b      	uxth	r3, r3
 8006384:	029b      	lsls	r3, r3, #10
 8006386:	b29b      	uxth	r3, r3
 8006388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006390:	b29a      	uxth	r2, r3
 8006392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	e034      	b.n	8006404 <USB_EPStartXfer+0x1644>
 800639a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	785b      	ldrb	r3, [r3, #1]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d12c      	bne.n	8006404 <USB_EPStartXfer+0x1644>
 80063aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ce:	4413      	add	r3, r2
 80063d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	011a      	lsls	r2, r3, #4
 80063e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e6:	4413      	add	r3, r2
 80063e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 8091 	bne.w	8006546 <USB_EPStartXfer+0x1786>
 8006424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006440:	b29b      	uxth	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006448:	4413      	add	r3, r2
 800644a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	011a      	lsls	r2, r3, #4
 800645c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006460:	4413      	add	r3, r2
 8006462:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006466:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d116      	bne.n	80064a8 <USB_EPStartXfer+0x16e8>
 800647a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006486:	b29a      	uxth	r2, r3
 8006488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649e:	b29a      	uxth	r2, r3
 80064a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	e07c      	b.n	80065a2 <USB_EPStartXfer+0x17e2>
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b3e      	cmp	r3, #62	; 0x3e
 80064b6:	d820      	bhi.n	80064fa <USB_EPStartXfer+0x173a>
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	085b      	lsrs	r3, r3, #1
 80064c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <USB_EPStartXfer+0x1728>
 80064de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064e2:	3301      	adds	r3, #1
 80064e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064f6:	801a      	strh	r2, [r3, #0]
 80064f8:	e053      	b.n	80065a2 <USB_EPStartXfer+0x17e2>
 80064fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800650c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <USB_EPStartXfer+0x176a>
 8006520:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006524:	3b01      	subs	r3, #1
 8006526:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800652a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800652e:	b29b      	uxth	r3, r3
 8006530:	029b      	lsls	r3, r3, #10
 8006532:	b29b      	uxth	r3, r3
 8006534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653c:	b29a      	uxth	r2, r3
 800653e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e02d      	b.n	80065a2 <USB_EPStartXfer+0x17e2>
 8006546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d125      	bne.n	80065a2 <USB_EPStartXfer+0x17e2>
 8006556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006564:	b29b      	uxth	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800656c:	4413      	add	r3, r2
 800656e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	011a      	lsls	r2, r3, #4
 8006580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006584:	4413      	add	r3, r2
 8006586:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800658a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800658e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 81fe 	beq.w	80069b0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <USB_EPStartXfer+0x182c>
 80065e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10d      	bne.n	8006608 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 81db 	bne.w	80069b0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065fa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	f040 81d4 	bne.w	80069b0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]
 8006664:	e1a4      	b.n	80069b0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	78db      	ldrb	r3, [r3, #3]
 8006672:	2b01      	cmp	r3, #1
 8006674:	f040 819a 	bne.w	80069ac <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	429a      	cmp	r2, r3
 8006692:	d917      	bls.n	80066c4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80066a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b4:	1ad2      	subs	r2, r2, r3
 80066b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	619a      	str	r2, [r3, #24]
 80066c2:	e00e      	b.n	80066e2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d178      	bne.n	80067e4 <USB_EPStartXfer+0x1a24>
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670e:	b29b      	uxth	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006716:	4413      	add	r3, r2
 8006718:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800671c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	011a      	lsls	r2, r3, #4
 800672a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800672e:	4413      	add	r3, r2
 8006730:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006734:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d116      	bne.n	800676e <USB_EPStartXfer+0x19ae>
 8006740:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e06b      	b.n	8006846 <USB_EPStartXfer+0x1a86>
 800676e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006772:	2b3e      	cmp	r3, #62	; 0x3e
 8006774:	d818      	bhi.n	80067a8 <USB_EPStartXfer+0x19e8>
 8006776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <USB_EPStartXfer+0x19d6>
 800678c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006790:	3301      	adds	r3, #1
 8006792:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679a:	b29b      	uxth	r3, r3
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	b29a      	uxth	r2, r3
 80067a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e04e      	b.n	8006846 <USB_EPStartXfer+0x1a86>
 80067a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <USB_EPStartXfer+0x1a08>
 80067be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c2:	3b01      	subs	r3, #1
 80067c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	029b      	lsls	r3, r3, #10
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067da:	b29a      	uxth	r2, r3
 80067dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	e030      	b.n	8006846 <USB_EPStartXfer+0x1a86>
 80067e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d128      	bne.n	8006846 <USB_EPStartXfer+0x1a86>
 80067f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006806:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006810:	b29b      	uxth	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	4413      	add	r3, r2
 800681a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	011a      	lsls	r2, r3, #4
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	4413      	add	r3, r2
 8006832:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006836:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800683a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683e:	b29a      	uxth	r2, r3
 8006840:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d178      	bne.n	8006956 <USB_EPStartXfer+0x1b96>
 8006864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006888:	4413      	add	r3, r2
 800688a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800688e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	011a      	lsls	r2, r3, #4
 800689c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d116      	bne.n	80068e0 <USB_EPStartXfer+0x1b20>
 80068b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068be:	b29a      	uxth	r2, r3
 80068c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	e067      	b.n	80069b0 <USB_EPStartXfer+0x1bf0>
 80068e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e4:	2b3e      	cmp	r3, #62	; 0x3e
 80068e6:	d818      	bhi.n	800691a <USB_EPStartXfer+0x1b5a>
 80068e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <USB_EPStartXfer+0x1b48>
 80068fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006902:	3301      	adds	r3, #1
 8006904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006908:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800690c:	b29b      	uxth	r3, r3
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	b29a      	uxth	r2, r3
 8006912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006916:	801a      	strh	r2, [r3, #0]
 8006918:	e04a      	b.n	80069b0 <USB_EPStartXfer+0x1bf0>
 800691a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <USB_EPStartXfer+0x1b7a>
 8006930:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006934:	3b01      	subs	r3, #1
 8006936:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800693a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800693e:	b29b      	uxth	r3, r3
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	b29b      	uxth	r3, r3
 8006944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	e02c      	b.n	80069b0 <USB_EPStartXfer+0x1bf0>
 8006956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	785b      	ldrb	r3, [r3, #1]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d124      	bne.n	80069b0 <USB_EPStartXfer+0x1bf0>
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006974:	b29b      	uxth	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697c:	4413      	add	r3, r2
 800697e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	011a      	lsls	r2, r3, #4
 8006990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006994:	4413      	add	r3, r2
 8006996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800699a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800699e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e001      	b.n	80069b0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e03a      	b.n	8006a26 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80069da:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80069e6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d020      	beq.n	8006a84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a58:	81bb      	strh	r3, [r7, #12]
 8006a5a:	89bb      	ldrh	r3, [r7, #12]
 8006a5c:	f083 0310 	eor.w	r3, r3, #16
 8006a60:	81bb      	strh	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	89bb      	ldrh	r3, [r7, #12]
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
 8006a82:	e01f      	b.n	8006ac4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	81fb      	strh	r3, [r7, #14]
 8006a9c:	89fb      	ldrh	r3, [r7, #14]
 8006a9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006aa2:	81fb      	strh	r3, [r7, #14]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	441a      	add	r2, r3
 8006aae:	89fb      	ldrh	r3, [r7, #14]
 8006ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	7b1b      	ldrb	r3, [r3, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 809d 	bne.w	8006c1e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d04c      	beq.n	8006b86 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	823b      	strh	r3, [r7, #16]
 8006afa:	8a3b      	ldrh	r3, [r7, #16]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01b      	beq.n	8006b3c <USB_EPClearStall+0x6c>
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	81fb      	strh	r3, [r7, #14]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	89fb      	ldrh	r3, [r7, #14]
 8006b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	78db      	ldrb	r3, [r3, #3]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d06c      	beq.n	8006c1e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b5a:	81bb      	strh	r3, [r7, #12]
 8006b5c:	89bb      	ldrh	r3, [r7, #12]
 8006b5e:	f083 0320 	eor.w	r3, r3, #32
 8006b62:	81bb      	strh	r3, [r7, #12]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	89bb      	ldrh	r3, [r7, #12]
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]
 8006b84:	e04b      	b.n	8006c1e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	82fb      	strh	r3, [r7, #22]
 8006b94:	8afb      	ldrh	r3, [r7, #22]
 8006b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d01b      	beq.n	8006bd6 <USB_EPClearStall+0x106>
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb4:	82bb      	strh	r3, [r7, #20]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	441a      	add	r2, r3
 8006bc0:	8abb      	ldrh	r3, [r7, #20]
 8006bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	827b      	strh	r3, [r7, #18]
 8006bee:	8a7b      	ldrh	r3, [r7, #18]
 8006bf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bf4:	827b      	strh	r3, [r7, #18]
 8006bf6:	8a7b      	ldrh	r3, [r7, #18]
 8006bf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bfc:	827b      	strh	r3, [r7, #18]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	441a      	add	r2, r3
 8006c08:	8a7b      	ldrh	r3, [r7, #18]
 8006c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d103      	bne.n	8006c44 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2280      	movs	r2, #128	; 0x80
 8006c40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr

08006c64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c76:	68fb      	ldr	r3, [r7, #12]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bc80      	pop	{r7}
 8006c80:	4770      	bx	lr

08006c82 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b08d      	sub	sp, #52	; 0x34
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	461a      	mov	r2, r3
 8006c90:	460b      	mov	r3, r1
 8006c92:	80fb      	strh	r3, [r7, #6]
 8006c94:	4613      	mov	r3, r2
 8006c96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c98:	88bb      	ldrh	r3, [r7, #4]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	005a      	lsls	r2, r3, #1
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cb4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cba:	e01e      	b.n	8006cfa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	3302      	adds	r3, #2
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	3302      	adds	r3, #2
 8006cec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1dd      	bne.n	8006cbc <USB_WritePMA+0x3a>
  }
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	3734      	adds	r7, #52	; 0x34
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr

08006d0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b08b      	sub	sp, #44	; 0x2c
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4611      	mov	r1, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	80fb      	strh	r3, [r7, #6]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d22:	88bb      	ldrh	r3, [r7, #4]
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	005a      	lsls	r2, r3, #1
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d3e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
 8006d44:	e01b      	b.n	8006d7e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	3302      	adds	r3, #2
 8006d52:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	3302      	adds	r3, #2
 8006d76:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e0      	bne.n	8006d46 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006d84:	88bb      	ldrh	r3, [r7, #4]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	701a      	strb	r2, [r3, #0]
  }
}
 8006da0:	bf00      	nop
 8006da2:	372c      	adds	r7, #44	; 0x2c
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr

08006daa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	7c1b      	ldrb	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d115      	bne.n	8006dee <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	2181      	movs	r1, #129	; 0x81
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fe8f 	bl	8008aee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dda:	2202      	movs	r2, #2
 8006ddc:	2101      	movs	r1, #1
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fe85 	bl	8008aee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006dec:	e012      	b.n	8006e14 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dee:	2340      	movs	r3, #64	; 0x40
 8006df0:	2202      	movs	r2, #2
 8006df2:	2181      	movs	r1, #129	; 0x81
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fe7a 	bl	8008aee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e00:	2340      	movs	r3, #64	; 0x40
 8006e02:	2202      	movs	r2, #2
 8006e04:	2101      	movs	r1, #1
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fe71 	bl	8008aee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e14:	2308      	movs	r3, #8
 8006e16:	2203      	movs	r2, #3
 8006e18:	2182      	movs	r1, #130	; 0x82
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fe67 	bl	8008aee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006e26:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e2a:	f001 ff87 	bl	8008d3c <USBD_static_malloc>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e026      	b.n	8006e94 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e4c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	7c1b      	ldrb	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d109      	bne.n	8006e84 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 ff27 	bl	8008cd0 <USBD_LL_PrepareReceive>
 8006e82:	e007      	b.n	8006e94 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e8a:	2340      	movs	r3, #64	; 0x40
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 ff1e 	bl	8008cd0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006eae:	2181      	movs	r1, #129	; 0x81
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fe42 	bl	8008b3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fe3b 	bl	8008b3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ecc:	2182      	movs	r1, #130	; 0x82
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fe33 	bl	8008b3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 ff2d 	bl	8008d54 <USBD_static_free>
    pdev->pClassData = NULL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f1c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d039      	beq.n	8006faa <USBD_CDC_Setup+0x9e>
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d17f      	bne.n	800703a <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	88db      	ldrh	r3, [r3, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d029      	beq.n	8006f96 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	b25b      	sxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	da11      	bge.n	8006f70 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006f58:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	88d2      	ldrh	r2, [r2, #6]
 8006f5e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f60:	6939      	ldr	r1, [r7, #16]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	88db      	ldrh	r3, [r3, #6]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f994 	bl	8008296 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006f6e:	e06b      	b.n	8007048 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	785a      	ldrb	r2, [r3, #1]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	88db      	ldrh	r3, [r3, #6]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f86:	6939      	ldr	r1, [r7, #16]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	88db      	ldrh	r3, [r3, #6]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f9af 	bl	80082f2 <USBD_CtlPrepareRx>
    break;
 8006f94:	e058      	b.n	8007048 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	7850      	ldrb	r0, [r2, #1]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	4798      	blx	r3
    break;
 8006fa8:	e04e      	b.n	8007048 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	2b0b      	cmp	r3, #11
 8006fb0:	d02e      	beq.n	8007010 <USBD_CDC_Setup+0x104>
 8006fb2:	2b0b      	cmp	r3, #11
 8006fb4:	dc38      	bgt.n	8007028 <USBD_CDC_Setup+0x11c>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <USBD_CDC_Setup+0xb4>
 8006fba:	2b0a      	cmp	r3, #10
 8006fbc:	d014      	beq.n	8006fe8 <USBD_CDC_Setup+0xdc>
 8006fbe:	e033      	b.n	8007028 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d107      	bne.n	8006fda <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fca:	f107 030c 	add.w	r3, r7, #12
 8006fce:	2202      	movs	r2, #2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 f95f 	bl	8008296 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006fd8:	e02e      	b.n	8007038 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f8f0 	bl	80081c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe6:	e027      	b.n	8007038 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d107      	bne.n	8007002 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006ff2:	f107 030f 	add.w	r3, r7, #15
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f94b 	bl	8008296 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007000:	e01a      	b.n	8007038 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 f8dc 	bl	80081c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800700a:	2302      	movs	r3, #2
 800700c:	75fb      	strb	r3, [r7, #23]
      break;
 800700e:	e013      	b.n	8007038 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007016:	2b03      	cmp	r3, #3
 8007018:	d00d      	beq.n	8007036 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f8d0 	bl	80081c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007022:	2302      	movs	r3, #2
 8007024:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007026:	e006      	b.n	8007036 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 f8c9 	bl	80081c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007030:	2302      	movs	r3, #2
 8007032:	75fb      	strb	r3, [r7, #23]
      break;
 8007034:	e000      	b.n	8007038 <USBD_CDC_Setup+0x12c>
      break;
 8007036:	bf00      	nop
    }
    break;
 8007038:	e006      	b.n	8007048 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f8c0 	bl	80081c2 <USBD_CtlError>
    ret = USBD_FAIL;
 8007042:	2302      	movs	r3, #2
 8007044:	75fb      	strb	r3, [r7, #23]
    break;
 8007046:	bf00      	nop
  }

  return ret;
 8007048:	7dfb      	ldrb	r3, [r7, #23]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007064:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800706c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007074:	2b00      	cmp	r3, #0
 8007076:	d03a      	beq.n	80070ee <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	331c      	adds	r3, #28
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d029      	beq.n	80070e2 <USBD_CDC_DataIn+0x90>
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	440b      	add	r3, r1
 800709c:	331c      	adds	r3, #28
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	78f9      	ldrb	r1, [r7, #3]
 80070a2:	68b8      	ldr	r0, [r7, #8]
 80070a4:	460b      	mov	r3, r1
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	4403      	add	r3, r0
 80070ae:	3338      	adds	r3, #56	; 0x38
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d110      	bne.n	80070e2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	331c      	adds	r3, #28
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80070d4:	78f9      	ldrb	r1, [r7, #3]
 80070d6:	2300      	movs	r3, #0
 80070d8:	2200      	movs	r2, #0
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fdd5 	bl	8008c8a <USBD_LL_Transmit>
 80070e0:	e003      	b.n	80070ea <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e000      	b.n	80070f0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070ee:	2302      	movs	r3, #2
  }
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800710a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 fe00 	bl	8008d16 <USBD_LL_GetRxDataSize>
 8007116:	4602      	mov	r2, r0
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00d      	beq.n	8007144 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800713c:	4611      	mov	r1, r2
 800713e:	4798      	blx	r3

    return USBD_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800715c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007164:	2b00      	cmp	r3, #0
 8007166:	d015      	beq.n	8007194 <USBD_CDC_EP0_RxReady+0x46>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800716e:	2bff      	cmp	r3, #255	; 0xff
 8007170:	d010      	beq.n	8007194 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007180:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007188:	b292      	uxth	r2, r2
 800718a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	22ff      	movs	r2, #255	; 0xff
 8007190:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2243      	movs	r2, #67	; 0x43
 80071ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80071ae:	4b03      	ldr	r3, [pc, #12]	; (80071bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000094 	.word	0x20000094

080071c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2243      	movs	r2, #67	; 0x43
 80071cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80071ce:	4b03      	ldr	r3, [pc, #12]	; (80071dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	20000050 	.word	0x20000050

080071e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2243      	movs	r2, #67	; 0x43
 80071ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80071ee:	4b03      	ldr	r3, [pc, #12]	; (80071fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	200000d8 	.word	0x200000d8

08007200 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	220a      	movs	r2, #10
 800720c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800720e:	4b03      	ldr	r3, [pc, #12]	; (800721c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	2000000c 	.word	0x2000000c

08007220 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800722a:	2302      	movs	r3, #2
 800722c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007260:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800726a:	88fa      	ldrh	r2, [r7, #6]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr

0800727e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800728e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr

080072a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072b2:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01c      	beq.n	80072f8 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d115      	bne.n	80072f4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2181      	movs	r1, #129	; 0x81
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 fccd 	bl	8008c8a <USBD_LL_Transmit>

      return USBD_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e002      	b.n	80072fa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80072f8:	2302      	movs	r3, #2
  }
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007310:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007318:	2b00      	cmp	r3, #0
 800731a:	d017      	beq.n	800734c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7c1b      	ldrb	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800732a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800732e:	2101      	movs	r1, #1
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 fccd 	bl	8008cd0 <USBD_LL_PrepareReceive>
 8007336:	e007      	b.n	8007348 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800733e:	2340      	movs	r3, #64	; 0x40
 8007340:	2101      	movs	r1, #1
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fcc4 	bl	8008cd0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	e000      	b.n	800734e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800734c:	2302      	movs	r3, #2
  }
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	4613      	mov	r3, r2
 8007362:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800736a:	2302      	movs	r3, #2
 800736c:	e01a      	b.n	80073a4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	79fa      	ldrb	r2, [r7, #7]
 800739a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f001 fb31 	bl	8008a04 <USBD_LL_Init>

  return USBD_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
 80073cc:	e001      	b.n	80073d2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073ce:	2302      	movs	r3, #2
 80073d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr

080073de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fb66 	bl	8008ab8 <USBD_LL_Start>

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr

0800740a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007416:	2302      	movs	r3, #2
 8007418:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	4611      	mov	r1, r2
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	78fa      	ldrb	r2, [r7, #3]
 800745e:	4611      	mov	r1, r2
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
  return USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fe62 	bl	800814a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007494:	461a      	mov	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d016      	beq.n	80074d8 <USBD_LL_SetupStage+0x6a>
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d81c      	bhi.n	80074e8 <USBD_LL_SetupStage+0x7a>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <USBD_LL_SetupStage+0x4a>
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d008      	beq.n	80074c8 <USBD_LL_SetupStage+0x5a>
 80074b6:	e017      	b.n	80074e8 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f9c5 	bl	8007850 <USBD_StdDevReq>
    break;
 80074c6:	e01a      	b.n	80074fe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fa27 	bl	8007924 <USBD_StdItfReq>
    break;
 80074d6:	e012      	b.n	80074fe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fa67 	bl	80079b4 <USBD_StdEPReq>
    break;
 80074e6:	e00a      	b.n	80074fe <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80074ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 fb3e 	bl	8008b78 <USBD_LL_StallEP>
    break;
 80074fc:	bf00      	nop
  }

  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	460b      	mov	r3, r1
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007516:	7afb      	ldrb	r3, [r7, #11]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d14b      	bne.n	80075b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007522:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800752a:	2b03      	cmp	r3, #3
 800752c:	d134      	bne.n	8007598 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	d919      	bls.n	800756e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	1ad2      	subs	r2, r2, r3
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007550:	429a      	cmp	r2, r3
 8007552:	d203      	bcs.n	800755c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007558:	b29b      	uxth	r3, r3
 800755a:	e002      	b.n	8007562 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007560:	b29b      	uxth	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fee1 	bl	800832e <USBD_CtlContinueRx>
 800756c:	e038      	b.n	80075e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007580:	2b03      	cmp	r3, #3
 8007582:	d105      	bne.n	8007590 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fede 	bl	8008352 <USBD_CtlSendStatus>
 8007596:	e023      	b.n	80075e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d11e      	bne.n	80075e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80075aa:	2100      	movs	r1, #0
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 fae3 	bl	8008b78 <USBD_LL_StallEP>
 80075b2:	e015      	b.n	80075e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00d      	beq.n	80075dc <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d108      	bne.n	80075dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	7afa      	ldrb	r2, [r7, #11]
 80075d4:	4611      	mov	r1, r2
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	4798      	blx	r3
 80075da:	e001      	b.n	80075e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075dc:	2302      	movs	r3, #2
 80075de:	e000      	b.n	80075e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b086      	sub	sp, #24
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	460b      	mov	r3, r1
 80075f4:	607a      	str	r2, [r7, #4]
 80075f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d17f      	bne.n	80076fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3314      	adds	r3, #20
 8007602:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800760a:	2b02      	cmp	r3, #2
 800760c:	d15c      	bne.n	80076c8 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	429a      	cmp	r2, r3
 8007618:	d915      	bls.n	8007646 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	1ad2      	subs	r2, r2, r3
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fe4b 	bl	80082ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007638:	2300      	movs	r3, #0
 800763a:	2200      	movs	r2, #0
 800763c:	2100      	movs	r1, #0
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f001 fb46 	bl	8008cd0 <USBD_LL_PrepareReceive>
 8007644:	e04e      	b.n	80076e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	6912      	ldr	r2, [r2, #16]
 800764e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007652:	fb01 f202 	mul.w	r2, r1, r2
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d11c      	bne.n	8007696 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007664:	429a      	cmp	r2, r3
 8007666:	d316      	bcc.n	8007696 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007672:	429a      	cmp	r2, r3
 8007674:	d20f      	bcs.n	8007696 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fe27 	bl	80082ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007688:	2300      	movs	r3, #0
 800768a:	2200      	movs	r2, #0
 800768c:	2100      	movs	r1, #0
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f001 fb1e 	bl	8008cd0 <USBD_LL_PrepareReceive>
 8007694:	e026      	b.n	80076e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d105      	bne.n	80076b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076b8:	2180      	movs	r1, #128	; 0x80
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f001 fa5c 	bl	8008b78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fe59 	bl	8008378 <USBD_CtlReceiveStatus>
 80076c6:	e00d      	b.n	80076e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d004      	beq.n	80076dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076dc:	2180      	movs	r1, #128	; 0x80
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f001 fa4a 	bl	8008b78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d11d      	bne.n	800772a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff fe81 	bl	80073f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80076fc:	e015      	b.n	800772a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00d      	beq.n	8007726 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007710:	2b03      	cmp	r3, #3
 8007712:	d108      	bne.n	8007726 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	7afa      	ldrb	r2, [r7, #11]
 800771e:	4611      	mov	r1, r2
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	4798      	blx	r3
 8007724:	e001      	b.n	800772a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007726:	2302      	movs	r3, #2
 8007728:	e000      	b.n	800772c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800773c:	2340      	movs	r3, #64	; 0x40
 800773e:	2200      	movs	r2, #0
 8007740:	2100      	movs	r1, #0
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f9d3 	bl	8008aee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2240      	movs	r2, #64	; 0x40
 8007754:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007758:	2340      	movs	r3, #64	; 0x40
 800775a:	2200      	movs	r2, #0
 800775c:	2180      	movs	r1, #128	; 0x80
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f9c5 	bl	8008aee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2240      	movs	r2, #64	; 0x40
 800776e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007794:	2b00      	cmp	r3, #0
 8007796:	d009      	beq.n	80077ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6852      	ldr	r2, [r2, #4]
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	4611      	mov	r1, r2
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
  }

  return USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2204      	movs	r2, #4
 80077ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800782a:	2b03      	cmp	r3, #3
 800782c:	d10b      	bne.n	8007846 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d005      	beq.n	8007876 <USBD_StdDevReq+0x26>
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d84f      	bhi.n	800790e <USBD_StdDevReq+0xbe>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d009      	beq.n	8007886 <USBD_StdDevReq+0x36>
 8007872:	2b20      	cmp	r3, #32
 8007874:	d14b      	bne.n	800790e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	4798      	blx	r3
    break;
 8007884:	e048      	b.n	8007918 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b09      	cmp	r3, #9
 800788c:	d839      	bhi.n	8007902 <USBD_StdDevReq+0xb2>
 800788e:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <USBD_StdDevReq+0x44>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078e5 	.word	0x080078e5
 8007898:	080078f9 	.word	0x080078f9
 800789c:	08007903 	.word	0x08007903
 80078a0:	080078ef 	.word	0x080078ef
 80078a4:	08007903 	.word	0x08007903
 80078a8:	080078c7 	.word	0x080078c7
 80078ac:	080078bd 	.word	0x080078bd
 80078b0:	08007903 	.word	0x08007903
 80078b4:	080078db 	.word	0x080078db
 80078b8:	080078d1 	.word	0x080078d1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9da 	bl	8007c78 <USBD_GetDescriptor>
      break;
 80078c4:	e022      	b.n	800790c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 facf 	bl	8007e6c <USBD_SetAddress>
      break;
 80078ce:	e01d      	b.n	800790c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fb0e 	bl	8007ef4 <USBD_SetConfig>
      break;
 80078d8:	e018      	b.n	800790c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fb97 	bl	8008010 <USBD_GetConfig>
      break;
 80078e2:	e013      	b.n	800790c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fbc7 	bl	800807a <USBD_GetStatus>
      break;
 80078ec:	e00e      	b.n	800790c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fbf5 	bl	80080e0 <USBD_SetFeature>
      break;
 80078f6:	e009      	b.n	800790c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fc04 	bl	8008108 <USBD_ClrFeature>
      break;
 8007900:	e004      	b.n	800790c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc5c 	bl	80081c2 <USBD_CtlError>
      break;
 800790a:	bf00      	nop
    }
    break;
 800790c:	e004      	b.n	8007918 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc56 	bl	80081c2 <USBD_CtlError>
    break;
 8007916:	bf00      	nop
  }

  return ret;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop

08007924 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	d005      	beq.n	800794a <USBD_StdItfReq+0x26>
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d82e      	bhi.n	80079a0 <USBD_StdItfReq+0x7c>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <USBD_StdItfReq+0x26>
 8007946:	2b20      	cmp	r3, #32
 8007948:	d12a      	bne.n	80079a0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007950:	3b01      	subs	r3, #1
 8007952:	2b02      	cmp	r3, #2
 8007954:	d81d      	bhi.n	8007992 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	889b      	ldrh	r3, [r3, #4]
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b01      	cmp	r3, #1
 800795e:	d813      	bhi.n	8007988 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	88db      	ldrh	r3, [r3, #6]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d110      	bne.n	800799c <USBD_StdItfReq+0x78>
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10d      	bne.n	800799c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fce6 	bl	8008352 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007986:	e009      	b.n	800799c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc19 	bl	80081c2 <USBD_CtlError>
      break;
 8007990:	e004      	b.n	800799c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc14 	bl	80081c2 <USBD_CtlError>
      break;
 800799a:	e000      	b.n	800799e <USBD_StdItfReq+0x7a>
      break;
 800799c:	bf00      	nop
    }
    break;
 800799e:	e004      	b.n	80079aa <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fc0d 	bl	80081c2 <USBD_CtlError>
    break;
 80079a8:	bf00      	nop
  }

  return USBD_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079d0:	2b40      	cmp	r3, #64	; 0x40
 80079d2:	d007      	beq.n	80079e4 <USBD_StdEPReq+0x30>
 80079d4:	2b40      	cmp	r3, #64	; 0x40
 80079d6:	f200 8144 	bhi.w	8007c62 <USBD_StdEPReq+0x2ae>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <USBD_StdEPReq+0x40>
 80079de:	2b20      	cmp	r3, #32
 80079e0:	f040 813f 	bne.w	8007c62 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
    break;
 80079f2:	e13b      	b.n	8007c6c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d10a      	bne.n	8007a16 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	e12b      	b.n	8007c6e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d007      	beq.n	8007a2e <USBD_StdEPReq+0x7a>
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	f300 8119 	bgt.w	8007c56 <USBD_StdEPReq+0x2a2>
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d072      	beq.n	8007b0e <USBD_StdEPReq+0x15a>
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d03a      	beq.n	8007aa2 <USBD_StdEPReq+0xee>
 8007a2c:	e113      	b.n	8007c56 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d002      	beq.n	8007a3e <USBD_StdEPReq+0x8a>
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d015      	beq.n	8007a68 <USBD_StdEPReq+0xb4>
 8007a3c:	e02b      	b.n	8007a96 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <USBD_StdEPReq+0xaa>
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b80      	cmp	r3, #128	; 0x80
 8007a48:	d009      	beq.n	8007a5e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f892 	bl	8008b78 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007a54:	2180      	movs	r1, #128	; 0x80
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 f88e 	bl	8008b78 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a5c:	e020      	b.n	8007aa0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fbae 	bl	80081c2 <USBD_CtlError>
        break;
 8007a66:	e01b      	b.n	8007aa0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	885b      	ldrh	r3, [r3, #2]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10e      	bne.n	8007a8e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <USBD_StdEPReq+0xda>
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b80      	cmp	r3, #128	; 0x80
 8007a7a:	d008      	beq.n	8007a8e <USBD_StdEPReq+0xda>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	88db      	ldrh	r3, [r3, #6]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 f875 	bl	8008b78 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fc5f 	bl	8008352 <USBD_CtlSendStatus>

        break;
 8007a94:	e004      	b.n	8007aa0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fb92 	bl	80081c2 <USBD_CtlError>
        break;
 8007a9e:	bf00      	nop
      }
      break;
 8007aa0:	e0de      	b.n	8007c60 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d002      	beq.n	8007ab2 <USBD_StdEPReq+0xfe>
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d015      	beq.n	8007adc <USBD_StdEPReq+0x128>
 8007ab0:	e026      	b.n	8007b00 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00c      	beq.n	8007ad2 <USBD_StdEPReq+0x11e>
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d009      	beq.n	8007ad2 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 f858 	bl	8008b78 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 f854 	bl	8008b78 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007ad0:	e01c      	b.n	8007b0c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb74 	bl	80081c2 <USBD_CtlError>
        break;
 8007ada:	e017      	b.n	8007b0c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	885b      	ldrh	r3, [r3, #2]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d112      	bne.n	8007b0a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 f85f 	bl	8008bb6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc2a 	bl	8008352 <USBD_CtlSendStatus>
        }
        break;
 8007afe:	e004      	b.n	8007b0a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fb5d 	bl	80081c2 <USBD_CtlError>
        break;
 8007b08:	e000      	b.n	8007b0c <USBD_StdEPReq+0x158>
        break;
 8007b0a:	bf00      	nop
      }
      break;
 8007b0c:	e0a8      	b.n	8007c60 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d002      	beq.n	8007b1e <USBD_StdEPReq+0x16a>
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d031      	beq.n	8007b80 <USBD_StdEPReq+0x1cc>
 8007b1c:	e095      	b.n	8007c4a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <USBD_StdEPReq+0x180>
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d004      	beq.n	8007b34 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fb48 	bl	80081c2 <USBD_CtlError>
          break;
 8007b32:	e08f      	b.n	8007c54 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	da0b      	bge.n	8007b54 <USBD_StdEPReq+0x1a0>
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	3310      	adds	r3, #16
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	4413      	add	r3, r2
 8007b50:	3304      	adds	r3, #4
 8007b52:	e00a      	b.n	8007b6a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	4413      	add	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2202      	movs	r2, #2
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb8c 	bl	8008296 <USBD_CtlSendData>
          break;
 8007b7e:	e069      	b.n	8007c54 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	da11      	bge.n	8007bac <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	f003 020f 	and.w	r2, r3, #15
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d117      	bne.n	8007bd2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb0c 	bl	80081c2 <USBD_CtlError>
            break;
 8007baa:	e053      	b.n	8007c54 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	f003 020f 	and.w	r2, r3, #15
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 faf9 	bl	80081c2 <USBD_CtlError>
            break;
 8007bd0:	e040      	b.n	8007c54 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007bd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	da0b      	bge.n	8007bf2 <USBD_StdEPReq+0x23e>
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	3310      	adds	r3, #16
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	3304      	adds	r3, #4
 8007bf0:	e00a      	b.n	8007c08 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	4413      	add	r3, r2
 8007c08:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <USBD_StdEPReq+0x262>
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b80      	cmp	r3, #128	; 0x80
 8007c14:	d103      	bne.n	8007c1e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	e00e      	b.n	8007c3c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 ffe6 	bl	8008bf4 <USBD_LL_IsStallEP>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2201      	movs	r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e002      	b.n	8007c3c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fb27 	bl	8008296 <USBD_CtlSendData>
          break;
 8007c48:	e004      	b.n	8007c54 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fab8 	bl	80081c2 <USBD_CtlError>
        break;
 8007c52:	bf00      	nop
      }
      break;
 8007c54:	e004      	b.n	8007c60 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fab2 	bl	80081c2 <USBD_CtlError>
      break;
 8007c5e:	bf00      	nop
    }
    break;
 8007c60:	e004      	b.n	8007c6c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 faac 	bl	80081c2 <USBD_CtlError>
    break;
 8007c6a:	bf00      	nop
  }

  return ret;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	2b06      	cmp	r3, #6
 8007c8e:	f200 80c9 	bhi.w	8007e24 <USBD_GetDescriptor+0x1ac>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <USBD_GetDescriptor+0x20>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cb5 	.word	0x08007cb5
 8007c9c:	08007ccd 	.word	0x08007ccd
 8007ca0:	08007d0d 	.word	0x08007d0d
 8007ca4:	08007e25 	.word	0x08007e25
 8007ca8:	08007e25 	.word	0x08007e25
 8007cac:	08007dd1 	.word	0x08007dd1
 8007cb0:	08007df7 	.word	0x08007df7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7c12      	ldrb	r2, [r2, #16]
 8007cc0:	f107 010a 	add.w	r1, r7, #10
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	60f8      	str	r0, [r7, #12]
    break;
 8007cca:	e0b0      	b.n	8007e2e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7c1b      	ldrb	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10d      	bne.n	8007cf0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f107 020a 	add.w	r2, r7, #10
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	2202      	movs	r2, #2
 8007cec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007cee:	e09e      	b.n	8007e2e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	f107 020a 	add.w	r2, r7, #10
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3301      	adds	r3, #1
 8007d06:	2202      	movs	r2, #2
 8007d08:	701a      	strb	r2, [r3, #0]
    break;
 8007d0a:	e090      	b.n	8007e2e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	885b      	ldrh	r3, [r3, #2]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d856      	bhi.n	8007dc4 <USBD_GetDescriptor+0x14c>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <USBD_GetDescriptor+0xa4>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d35 	.word	0x08007d35
 8007d20:	08007d4d 	.word	0x08007d4d
 8007d24:	08007d65 	.word	0x08007d65
 8007d28:	08007d7d 	.word	0x08007d7d
 8007d2c:	08007d95 	.word	0x08007d95
 8007d30:	08007dad 	.word	0x08007dad
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	f107 010a 	add.w	r1, r7, #10
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
      break;
 8007d4a:	e040      	b.n	8007dce <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7c12      	ldrb	r2, [r2, #16]
 8007d58:	f107 010a 	add.w	r1, r7, #10
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
      break;
 8007d62:	e034      	b.n	8007dce <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7c12      	ldrb	r2, [r2, #16]
 8007d70:	f107 010a 	add.w	r1, r7, #10
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
      break;
 8007d7a:	e028      	b.n	8007dce <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	7c12      	ldrb	r2, [r2, #16]
 8007d88:	f107 010a 	add.w	r1, r7, #10
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
      break;
 8007d92:	e01c      	b.n	8007dce <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	7c12      	ldrb	r2, [r2, #16]
 8007da0:	f107 010a 	add.w	r1, r7, #10
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	60f8      	str	r0, [r7, #12]
      break;
 8007daa:	e010      	b.n	8007dce <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	7c12      	ldrb	r2, [r2, #16]
 8007db8:	f107 010a 	add.w	r1, r7, #10
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	60f8      	str	r0, [r7, #12]
      break;
 8007dc2:	e004      	b.n	8007dce <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f9fb 	bl	80081c2 <USBD_CtlError>
      return;
 8007dcc:	e04b      	b.n	8007e66 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007dce:	e02e      	b.n	8007e2e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	7c1b      	ldrb	r3, [r3, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de0:	f107 020a 	add.w	r2, r7, #10
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
      break;
 8007dea:	e020      	b.n	8007e2e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f9e7 	bl	80081c2 <USBD_CtlError>
      return;
 8007df4:	e037      	b.n	8007e66 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7c1b      	ldrb	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10d      	bne.n	8007e1a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	f107 020a 	add.w	r2, r7, #10
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	4798      	blx	r3
 8007e0e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	2207      	movs	r2, #7
 8007e16:	701a      	strb	r2, [r3, #0]
      break;
 8007e18:	e009      	b.n	8007e2e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9d0 	bl	80081c2 <USBD_CtlError>
      return;
 8007e22:	e020      	b.n	8007e66 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9cb 	bl	80081c2 <USBD_CtlError>
    return;
 8007e2c:	e01b      	b.n	8007e66 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007e2e:	897b      	ldrh	r3, [r7, #10]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d011      	beq.n	8007e58 <USBD_GetDescriptor+0x1e0>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	88db      	ldrh	r3, [r3, #6]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00d      	beq.n	8007e58 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	88da      	ldrh	r2, [r3, #6]
 8007e40:	897b      	ldrh	r3, [r7, #10]
 8007e42:	4293      	cmp	r3, r2
 8007e44:	bf28      	it	cs
 8007e46:	4613      	movcs	r3, r2
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007e4c:	897b      	ldrh	r3, [r7, #10]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68f9      	ldr	r1, [r7, #12]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa1f 	bl	8008296 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	88db      	ldrh	r3, [r3, #6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d102      	bne.n	8007e66 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa76 	bl	8008352 <USBD_CtlSendStatus>
  }
}
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	889b      	ldrh	r3, [r3, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d130      	bne.n	8007ee0 <USBD_SetAddress+0x74>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	88db      	ldrh	r3, [r3, #6]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d12c      	bne.n	8007ee0 <USBD_SetAddress+0x74>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	885b      	ldrh	r3, [r3, #2]
 8007e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e8c:	d828      	bhi.n	8007ee0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	885b      	ldrh	r3, [r3, #2]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d104      	bne.n	8007eae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f98b 	bl	80081c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eac:	e01d      	b.n	8007eea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	7bfa      	ldrb	r2, [r7, #15]
 8007eb2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fec6 	bl	8008c4c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fa46 	bl	8008352 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed4:	e009      	b.n	8007eea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ede:	e004      	b.n	8007eea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f96d 	bl	80081c2 <USBD_CtlError>
  }
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	4b41      	ldr	r3, [pc, #260]	; (800800c <USBD_SetConfig+0x118>)
 8007f06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f08:	4b40      	ldr	r3, [pc, #256]	; (800800c <USBD_SetConfig+0x118>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d904      	bls.n	8007f1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f955 	bl	80081c2 <USBD_CtlError>
 8007f18:	e075      	b.n	8008006 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d002      	beq.n	8007f2a <USBD_SetConfig+0x36>
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d023      	beq.n	8007f70 <USBD_SetConfig+0x7c>
 8007f28:	e062      	b.n	8007ff0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007f2a:	4b38      	ldr	r3, [pc, #224]	; (800800c <USBD_SetConfig+0x118>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01a      	beq.n	8007f68 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007f32:	4b36      	ldr	r3, [pc, #216]	; (800800c <USBD_SetConfig+0x118>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f44:	4b31      	ldr	r3, [pc, #196]	; (800800c <USBD_SetConfig+0x118>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fa5d 	bl	800740a <USBD_SetClassConfig>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d104      	bne.n	8007f60 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f932 	bl	80081c2 <USBD_CtlError>
          return;
 8007f5e:	e052      	b.n	8008006 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f9f6 	bl	8008352 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007f66:	e04e      	b.n	8008006 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9f2 	bl	8008352 <USBD_CtlSendStatus>
      break;
 8007f6e:	e04a      	b.n	8008006 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f70:	4b26      	ldr	r3, [pc, #152]	; (800800c <USBD_SetConfig+0x118>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d112      	bne.n	8007f9e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007f80:	4b22      	ldr	r3, [pc, #136]	; (800800c <USBD_SetConfig+0x118>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f8a:	4b20      	ldr	r3, [pc, #128]	; (800800c <USBD_SetConfig+0x118>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fa59 	bl	8007448 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9db 	bl	8008352 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007f9c:	e033      	b.n	8008006 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007f9e:	4b1b      	ldr	r3, [pc, #108]	; (800800c <USBD_SetConfig+0x118>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d01d      	beq.n	8007fe8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fa47 	bl	8007448 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fba:	4b14      	ldr	r3, [pc, #80]	; (800800c <USBD_SetConfig+0x118>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fc4:	4b11      	ldr	r3, [pc, #68]	; (800800c <USBD_SetConfig+0x118>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff fa1d 	bl	800740a <USBD_SetClassConfig>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d104      	bne.n	8007fe0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f8f2 	bl	80081c2 <USBD_CtlError>
          return;
 8007fde:	e012      	b.n	8008006 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f9b6 	bl	8008352 <USBD_CtlSendStatus>
      break;
 8007fe6:	e00e      	b.n	8008006 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9b2 	bl	8008352 <USBD_CtlSendStatus>
      break;
 8007fee:	e00a      	b.n	8008006 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8e5 	bl	80081c2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <USBD_SetConfig+0x118>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7ff fa22 	bl	8007448 <USBD_ClrClassConfig>
      break;
 8008004:	bf00      	nop
    }
  }
}
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	200002b0 	.word	0x200002b0

08008010 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	88db      	ldrh	r3, [r3, #6]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d004      	beq.n	800802c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8cc 	bl	80081c2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800802a:	e022      	b.n	8008072 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008032:	2b02      	cmp	r3, #2
 8008034:	dc02      	bgt.n	800803c <USBD_GetConfig+0x2c>
 8008036:	2b00      	cmp	r3, #0
 8008038:	dc03      	bgt.n	8008042 <USBD_GetConfig+0x32>
 800803a:	e015      	b.n	8008068 <USBD_GetConfig+0x58>
 800803c:	2b03      	cmp	r3, #3
 800803e:	d00b      	beq.n	8008058 <USBD_GetConfig+0x48>
 8008040:	e012      	b.n	8008068 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3308      	adds	r3, #8
 800804c:	2201      	movs	r2, #1
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f920 	bl	8008296 <USBD_CtlSendData>
      break;
 8008056:	e00c      	b.n	8008072 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3304      	adds	r3, #4
 800805c:	2201      	movs	r2, #1
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f918 	bl	8008296 <USBD_CtlSendData>
      break;
 8008066:	e004      	b.n	8008072 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f8a9 	bl	80081c2 <USBD_CtlError>
      break;
 8008070:	bf00      	nop
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800808a:	3b01      	subs	r3, #1
 800808c:	2b02      	cmp	r3, #2
 800808e:	d81e      	bhi.n	80080ce <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	88db      	ldrh	r3, [r3, #6]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d004      	beq.n	80080a2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f891 	bl	80081c2 <USBD_CtlError>
      break;
 80080a0:	e01a      	b.n	80080d8 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f043 0202 	orr.w	r2, r3, #2
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	330c      	adds	r3, #12
 80080c2:	2202      	movs	r2, #2
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8e5 	bl	8008296 <USBD_CtlSendData>
    break;
 80080cc:	e004      	b.n	80080d8 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f876 	bl	80081c2 <USBD_CtlError>
    break;
 80080d6:	bf00      	nop
  }
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	885b      	ldrh	r3, [r3, #2]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d106      	bne.n	8008100 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f929 	bl	8008352 <USBD_CtlSendStatus>
  }

}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008118:	3b01      	subs	r3, #1
 800811a:	2b02      	cmp	r3, #2
 800811c:	d80b      	bhi.n	8008136 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	885b      	ldrh	r3, [r3, #2]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d10c      	bne.n	8008140 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f90f 	bl	8008352 <USBD_CtlSendStatus>
    }
    break;
 8008134:	e004      	b.n	8008140 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f842 	bl	80081c2 <USBD_CtlError>
    break;
 800813e:	e000      	b.n	8008142 <USBD_ClrFeature+0x3a>
    break;
 8008140:	bf00      	nop
  }
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781a      	ldrb	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	785a      	ldrb	r2, [r3, #1]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	3302      	adds	r3, #2
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b29a      	uxth	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	3303      	adds	r3, #3
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	b29b      	uxth	r3, r3
 8008178:	4413      	add	r3, r2
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	3304      	adds	r3, #4
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b29a      	uxth	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	3305      	adds	r3, #5
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	021b      	lsls	r3, r3, #8
 8008192:	b29b      	uxth	r3, r3
 8008194:	4413      	add	r3, r2
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	3306      	adds	r3, #6
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	3307      	adds	r3, #7
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	4413      	add	r3, r2
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	80da      	strh	r2, [r3, #6]

}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	bc80      	pop	{r7}
 80081c0:	4770      	bx	lr

080081c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80081cc:	2180      	movs	r1, #128	; 0x80
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fcd2 	bl	8008b78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80081d4:	2100      	movs	r1, #0
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fcce 	bl	8008b78 <USBD_LL_StallEP>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d032      	beq.n	8008260 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f834 	bl	8008268 <USBD_GetLen>
 8008200:	4603      	mov	r3, r0
 8008202:	3301      	adds	r3, #1
 8008204:	b29b      	uxth	r3, r3
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	b29a      	uxth	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	75fa      	strb	r2, [r7, #23]
 8008214:	461a      	mov	r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4413      	add	r3, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	75fa      	strb	r2, [r7, #23]
 8008226:	461a      	mov	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	4413      	add	r3, r2
 800822c:	2203      	movs	r2, #3
 800822e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008230:	e012      	b.n	8008258 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	60fa      	str	r2, [r7, #12]
 8008238:	7dfa      	ldrb	r2, [r7, #23]
 800823a:	1c51      	adds	r1, r2, #1
 800823c:	75f9      	strb	r1, [r7, #23]
 800823e:	4611      	mov	r1, r2
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	440a      	add	r2, r1
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	75fa      	strb	r2, [r7, #23]
 800824e:	461a      	mov	r2, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4413      	add	r3, r2
 8008254:	2200      	movs	r2, #0
 8008256:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e8      	bne.n	8008232 <USBD_GetString+0x4e>
    }
  }
}
 8008260:	bf00      	nop
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008274:	e005      	b.n	8008282 <USBD_GetLen+0x1a>
    {
        len++;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	3301      	adds	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3301      	adds	r3, #1
 8008280:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f5      	bne.n	8008276 <USBD_GetLen+0xe>
    }

    return len;
 800828a:	7bfb      	ldrb	r3, [r7, #15]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr

08008296 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	4613      	mov	r3, r2
 80082a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	2100      	movs	r1, #0
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 fce3 	bl	8008c8a <USBD_LL_Transmit>

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	4613      	mov	r3, r2
 80082da:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	2100      	movs	r1, #0
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fcd1 	bl	8008c8a <USBD_LL_Transmit>

  return USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	4613      	mov	r3, r2
 80082fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2203      	movs	r2, #3
 8008304:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008308:	88fa      	ldrh	r2, [r7, #6]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	2100      	movs	r1, #0
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fcd6 	bl	8008cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	4613      	mov	r3, r2
 800833a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800833c:	88fb      	ldrh	r3, [r7, #6]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	2100      	movs	r1, #0
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 fcc4 	bl	8008cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2204      	movs	r2, #4
 800835e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008362:	2300      	movs	r3, #0
 8008364:	2200      	movs	r2, #0
 8008366:	2100      	movs	r1, #0
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fc8e 	bl	8008c8a <USBD_LL_Transmit>

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2205      	movs	r2, #5
 8008384:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008388:	2300      	movs	r3, #0
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fc9e 	bl	8008cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <LoRa_Init>:
#include "main.h"

SPI_HandleTypeDef hspi;

HAL_StatusTypeDef LoRa_Init(void)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef retValue;

  /* SPI1 parameter configuration*/
  hspi.Instance = SPI1;
 80083a6:	4b19      	ldr	r3, [pc, #100]	; (800840c <LoRa_Init+0x6c>)
 80083a8:	4a19      	ldr	r2, [pc, #100]	; (8008410 <LoRa_Init+0x70>)
 80083aa:	601a      	str	r2, [r3, #0]
  hspi.Init.Mode = SPI_MODE_MASTER;
 80083ac:	4b17      	ldr	r3, [pc, #92]	; (800840c <LoRa_Init+0x6c>)
 80083ae:	f44f 7282 	mov.w	r2, #260	; 0x104
 80083b2:	605a      	str	r2, [r3, #4]
  hspi.Init.Direction = SPI_DIRECTION_2LINES;
 80083b4:	4b15      	ldr	r3, [pc, #84]	; (800840c <LoRa_Init+0x6c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	609a      	str	r2, [r3, #8]
  hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 80083ba:	4b14      	ldr	r3, [pc, #80]	; (800840c <LoRa_Init+0x6c>)
 80083bc:	2200      	movs	r2, #0
 80083be:	60da      	str	r2, [r3, #12]
  hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 80083c0:	4b12      	ldr	r3, [pc, #72]	; (800840c <LoRa_Init+0x6c>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 80083c6:	4b11      	ldr	r3, [pc, #68]	; (800840c <LoRa_Init+0x6c>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	615a      	str	r2, [r3, #20]
  hspi.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80083cc:	4b0f      	ldr	r3, [pc, #60]	; (800840c <LoRa_Init+0x6c>)
 80083ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80083d2:	619a      	str	r2, [r3, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083d4:	4b0d      	ldr	r3, [pc, #52]	; (800840c <LoRa_Init+0x6c>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	61da      	str	r2, [r3, #28]
  hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80083da:	4b0c      	ldr	r3, [pc, #48]	; (800840c <LoRa_Init+0x6c>)
 80083dc:	2200      	movs	r2, #0
 80083de:	621a      	str	r2, [r3, #32]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083e0:	4b0a      	ldr	r3, [pc, #40]	; (800840c <LoRa_Init+0x6c>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.CRCPolynomial = 10;
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <LoRa_Init+0x6c>)
 80083e8:	220a      	movs	r2, #10
 80083ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SPI port */
  retValue = HAL_SPI_Init(&hspi);
 80083ec:	4807      	ldr	r0, [pc, #28]	; (800840c <LoRa_Init+0x6c>)
 80083ee:	f7fb f9a5 	bl	800373c <HAL_SPI_Init>
 80083f2:	4603      	mov	r3, r0
 80083f4:	71fb      	strb	r3, [r7, #7]

  /* Take SX1262 chip out of reset */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);
 80083f6:	2201      	movs	r2, #1
 80083f8:	2101      	movs	r1, #1
 80083fa:	4806      	ldr	r0, [pc, #24]	; (8008414 <LoRa_Init+0x74>)
 80083fc:	f7f8 fe1c 	bl	8001038 <HAL_GPIO_WritePin>

  return(retValue);
 8008400:	79fb      	ldrb	r3, [r7, #7]

}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	200002b4 	.word	0x200002b4
 8008410:	40013000 	.word	0x40013000
 8008414:	40020000 	.word	0x40020000

08008418 <LoRaGetStatus>:

uint8_t LoRaGetStatus(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
	/* Return the status byte from the SX1262 chip */
	uint8_t status = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	71fb      	strb	r3, [r7, #7]
	uint8_t opcode = LORA_GET_STATUS;
 8008422:	23c0      	movs	r3, #192	; 0xc0
 8008424:	71bb      	strb	r3, [r7, #6]

	if(HAL_SPI_Transmit(&hspi, &opcode, 1, 100) != HAL_OK)
 8008426:	1db9      	adds	r1, r7, #6
 8008428:	2364      	movs	r3, #100	; 0x64
 800842a:	2201      	movs	r2, #1
 800842c:	480b      	ldr	r0, [pc, #44]	; (800845c <LoRaGetStatus+0x44>)
 800842e:	f7fb fa01 	bl	8003834 <HAL_SPI_Transmit>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <LoRaGetStatus+0x24>
	{
		return 0xFF;
 8008438:	23ff      	movs	r3, #255	; 0xff
 800843a:	e00b      	b.n	8008454 <LoRaGetStatus+0x3c>
	}

	if(HAL_SPI_Receive(&hspi, &status, 1, 100) != HAL_OK)
 800843c:	1df9      	adds	r1, r7, #7
 800843e:	2364      	movs	r3, #100	; 0x64
 8008440:	2201      	movs	r2, #1
 8008442:	4806      	ldr	r0, [pc, #24]	; (800845c <LoRaGetStatus+0x44>)
 8008444:	f7fb fb32 	bl	8003aac <HAL_SPI_Receive>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <LoRaGetStatus+0x3a>
	{
			return 0xFF;
 800844e:	23ff      	movs	r3, #255	; 0xff
 8008450:	e000      	b.n	8008454 <LoRaGetStatus+0x3c>
	}

	return status;
 8008452:	79fb      	ldrb	r3, [r7, #7]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	200002b4 	.word	0x200002b4

08008460 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008464:	2200      	movs	r2, #0
 8008466:	4912      	ldr	r1, [pc, #72]	; (80084b0 <MX_USB_DEVICE_Init+0x50>)
 8008468:	4812      	ldr	r0, [pc, #72]	; (80084b4 <MX_USB_DEVICE_Init+0x54>)
 800846a:	f7fe ff74 	bl	8007356 <USBD_Init>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008474:	f7f8 f972 	bl	800075c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008478:	490f      	ldr	r1, [pc, #60]	; (80084b8 <MX_USB_DEVICE_Init+0x58>)
 800847a:	480e      	ldr	r0, [pc, #56]	; (80084b4 <MX_USB_DEVICE_Init+0x54>)
 800847c:	f7fe ff96 	bl	80073ac <USBD_RegisterClass>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008486:	f7f8 f969 	bl	800075c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800848a:	490c      	ldr	r1, [pc, #48]	; (80084bc <MX_USB_DEVICE_Init+0x5c>)
 800848c:	4809      	ldr	r0, [pc, #36]	; (80084b4 <MX_USB_DEVICE_Init+0x54>)
 800848e:	f7fe fec7 	bl	8007220 <USBD_CDC_RegisterInterface>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008498:	f7f8 f960 	bl	800075c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800849c:	4805      	ldr	r0, [pc, #20]	; (80084b4 <MX_USB_DEVICE_Init+0x54>)
 800849e:	f7fe ff9e 	bl	80073de <USBD_Start>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084a8:	f7f8 f958 	bl	800075c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084ac:	bf00      	nop
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	2000012c 	.word	0x2000012c
 80084b4:	2000030c 	.word	0x2000030c
 80084b8:	20000018 	.word	0x20000018
 80084bc:	2000011c 	.word	0x2000011c

080084c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084c4:	2200      	movs	r2, #0
 80084c6:	4905      	ldr	r1, [pc, #20]	; (80084dc <CDC_Init_FS+0x1c>)
 80084c8:	4805      	ldr	r0, [pc, #20]	; (80084e0 <CDC_Init_FS+0x20>)
 80084ca:	f7fe febf 	bl	800724c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084ce:	4905      	ldr	r1, [pc, #20]	; (80084e4 <CDC_Init_FS+0x24>)
 80084d0:	4803      	ldr	r0, [pc, #12]	; (80084e0 <CDC_Init_FS+0x20>)
 80084d2:	f7fe fed4 	bl	800727e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084d8:	4618      	mov	r0, r3
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	200009a8 	.word	0x200009a8
 80084e0:	2000030c 	.word	0x2000030c
 80084e4:	200005a8 	.word	0x200005a8

080084e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bc80      	pop	{r7}
 80084f4:	4770      	bx	lr
	...

080084f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	6039      	str	r1, [r7, #0]
 8008502:	71fb      	strb	r3, [r7, #7]
 8008504:	4613      	mov	r3, r2
 8008506:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	2b23      	cmp	r3, #35	; 0x23
 800850c:	d84a      	bhi.n	80085a4 <CDC_Control_FS+0xac>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <CDC_Control_FS+0x1c>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	080085a5 	.word	0x080085a5
 8008518:	080085a5 	.word	0x080085a5
 800851c:	080085a5 	.word	0x080085a5
 8008520:	080085a5 	.word	0x080085a5
 8008524:	080085a5 	.word	0x080085a5
 8008528:	080085a5 	.word	0x080085a5
 800852c:	080085a5 	.word	0x080085a5
 8008530:	080085a5 	.word	0x080085a5
 8008534:	080085a5 	.word	0x080085a5
 8008538:	080085a5 	.word	0x080085a5
 800853c:	080085a5 	.word	0x080085a5
 8008540:	080085a5 	.word	0x080085a5
 8008544:	080085a5 	.word	0x080085a5
 8008548:	080085a5 	.word	0x080085a5
 800854c:	080085a5 	.word	0x080085a5
 8008550:	080085a5 	.word	0x080085a5
 8008554:	080085a5 	.word	0x080085a5
 8008558:	080085a5 	.word	0x080085a5
 800855c:	080085a5 	.word	0x080085a5
 8008560:	080085a5 	.word	0x080085a5
 8008564:	080085a5 	.word	0x080085a5
 8008568:	080085a5 	.word	0x080085a5
 800856c:	080085a5 	.word	0x080085a5
 8008570:	080085a5 	.word	0x080085a5
 8008574:	080085a5 	.word	0x080085a5
 8008578:	080085a5 	.word	0x080085a5
 800857c:	080085a5 	.word	0x080085a5
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085a5 	.word	0x080085a5
 8008588:	080085a5 	.word	0x080085a5
 800858c:	080085a5 	.word	0x080085a5
 8008590:	080085a5 	.word	0x080085a5
 8008594:	080085a5 	.word	0x080085a5
 8008598:	080085a5 	.word	0x080085a5
 800859c:	080085a5 	.word	0x080085a5
 80085a0:	080085a5 	.word	0x080085a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085a4:	bf00      	nop
  }

  return (USBD_OK);
 80085a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop

080085b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	4805      	ldr	r0, [pc, #20]	; (80085d8 <CDC_Receive_FS+0x24>)
 80085c2:	f7fe fe5c 	bl	800727e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085c6:	4804      	ldr	r0, [pc, #16]	; (80085d8 <CDC_Receive_FS+0x24>)
 80085c8:	f7fe fe9b 	bl	8007302 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	2000030c 	.word	0x2000030c

080085dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085ec:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <CDC_Transmit_FS+0x48>)
 80085ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085fe:	2301      	movs	r3, #1
 8008600:	e00b      	b.n	800861a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008602:	887b      	ldrh	r3, [r7, #2]
 8008604:	461a      	mov	r2, r3
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	4806      	ldr	r0, [pc, #24]	; (8008624 <CDC_Transmit_FS+0x48>)
 800860a:	f7fe fe1f 	bl	800724c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800860e:	4805      	ldr	r0, [pc, #20]	; (8008624 <CDC_Transmit_FS+0x48>)
 8008610:	f7fe fe48 	bl	80072a4 <USBD_CDC_TransmitPacket>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	2000030c 	.word	0x2000030c

08008628 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2212      	movs	r2, #18
 8008638:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800863a:	4b03      	ldr	r3, [pc, #12]	; (8008648 <USBD_FS_DeviceDescriptor+0x20>)
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	20000148 	.word	0x20000148

0800864c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2204      	movs	r2, #4
 800865c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800865e:	4b03      	ldr	r3, [pc, #12]	; (800866c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	bc80      	pop	{r7}
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	2000015c 	.word	0x2000015c

08008670 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d105      	bne.n	800868e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	4907      	ldr	r1, [pc, #28]	; (80086a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008686:	4808      	ldr	r0, [pc, #32]	; (80086a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008688:	f7ff fdac 	bl	80081e4 <USBD_GetString>
 800868c:	e004      	b.n	8008698 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	4904      	ldr	r1, [pc, #16]	; (80086a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008692:	4805      	ldr	r0, [pc, #20]	; (80086a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008694:	f7ff fda6 	bl	80081e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000da8 	.word	0x20000da8
 80086a8:	08009740 	.word	0x08009740

080086ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	4603      	mov	r3, r0
 80086b4:	6039      	str	r1, [r7, #0]
 80086b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	4904      	ldr	r1, [pc, #16]	; (80086cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086bc:	4804      	ldr	r0, [pc, #16]	; (80086d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086be:	f7ff fd91 	bl	80081e4 <USBD_GetString>
  return USBD_StrDesc;
 80086c2:	4b02      	ldr	r3, [pc, #8]	; (80086cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	20000da8 	.word	0x20000da8
 80086d0:	08009758 	.word	0x08009758

080086d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	221a      	movs	r2, #26
 80086e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086e6:	f000 f843 	bl	8008770 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086ea:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000160 	.word	0x20000160

080086f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	4907      	ldr	r1, [pc, #28]	; (800872c <USBD_FS_ConfigStrDescriptor+0x34>)
 800870e:	4808      	ldr	r0, [pc, #32]	; (8008730 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008710:	f7ff fd68 	bl	80081e4 <USBD_GetString>
 8008714:	e004      	b.n	8008720 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4904      	ldr	r1, [pc, #16]	; (800872c <USBD_FS_ConfigStrDescriptor+0x34>)
 800871a:	4805      	ldr	r0, [pc, #20]	; (8008730 <USBD_FS_ConfigStrDescriptor+0x38>)
 800871c:	f7ff fd62 	bl	80081e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008720:	4b02      	ldr	r3, [pc, #8]	; (800872c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000da8 	.word	0x20000da8
 8008730:	0800976c 	.word	0x0800976c

08008734 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4907      	ldr	r1, [pc, #28]	; (8008768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800874a:	4808      	ldr	r0, [pc, #32]	; (800876c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800874c:	f7ff fd4a 	bl	80081e4 <USBD_GetString>
 8008750:	e004      	b.n	800875c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4904      	ldr	r1, [pc, #16]	; (8008768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008756:	4805      	ldr	r0, [pc, #20]	; (800876c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008758:	f7ff fd44 	bl	80081e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800875c:	4b02      	ldr	r3, [pc, #8]	; (8008768 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000da8 	.word	0x20000da8
 800876c:	08009778 	.word	0x08009778

08008770 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <Get_SerialNum+0x44>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800877c:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <Get_SerialNum+0x48>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008782:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <Get_SerialNum+0x4c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d009      	beq.n	80087aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008796:	2208      	movs	r2, #8
 8008798:	4909      	ldr	r1, [pc, #36]	; (80087c0 <Get_SerialNum+0x50>)
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f814 	bl	80087c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087a0:	2204      	movs	r2, #4
 80087a2:	4908      	ldr	r1, [pc, #32]	; (80087c4 <Get_SerialNum+0x54>)
 80087a4:	68b8      	ldr	r0, [r7, #8]
 80087a6:	f000 f80f 	bl	80087c8 <IntToUnicode>
  }
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	1ff80050 	.word	0x1ff80050
 80087b8:	1ff80054 	.word	0x1ff80054
 80087bc:	1ff80058 	.word	0x1ff80058
 80087c0:	20000162 	.word	0x20000162
 80087c4:	20000172 	.word	0x20000172

080087c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087da:	2300      	movs	r3, #0
 80087dc:	75fb      	strb	r3, [r7, #23]
 80087de:	e027      	b.n	8008830 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	0f1b      	lsrs	r3, r3, #28
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d80b      	bhi.n	8008800 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	0f1b      	lsrs	r3, r3, #28
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	4619      	mov	r1, r3
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	440b      	add	r3, r1
 80087f8:	3230      	adds	r2, #48	; 0x30
 80087fa:	b2d2      	uxtb	r2, r2
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	e00a      	b.n	8008816 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	0f1b      	lsrs	r3, r3, #28
 8008804:	b2da      	uxtb	r2, r3
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4619      	mov	r1, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	440b      	add	r3, r1
 8008810:	3237      	adds	r2, #55	; 0x37
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	3301      	adds	r3, #1
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	4413      	add	r3, r2
 8008826:	2200      	movs	r2, #0
 8008828:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	3301      	adds	r3, #1
 800882e:	75fb      	strb	r3, [r7, #23]
 8008830:	7dfa      	ldrb	r2, [r7, #23]
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	429a      	cmp	r2, r3
 8008836:	d3d3      	bcc.n	80087e0 <IntToUnicode+0x18>
  }
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr

08008844 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d106      	bne.n	8008864 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008856:	4b09      	ldr	r3, [pc, #36]	; (800887c <HAL_PCDEx_SetConnectionState+0x38>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4a08      	ldr	r2, [pc, #32]	; (800887c <HAL_PCDEx_SetConnectionState+0x38>)
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008862:	e005      	b.n	8008870 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008864:	4b05      	ldr	r3, [pc, #20]	; (800887c <HAL_PCDEx_SetConnectionState+0x38>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	4a04      	ldr	r2, [pc, #16]	; (800887c <HAL_PCDEx_SetConnectionState+0x38>)
 800886a:	f023 0301 	bic.w	r3, r3, #1
 800886e:	6053      	str	r3, [r2, #4]
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	bc80      	pop	{r7}
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40010000 	.word	0x40010000

08008880 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a0d      	ldr	r2, [pc, #52]	; (80088c4 <HAL_PCD_MspInit+0x44>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d113      	bne.n	80088ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <HAL_PCD_MspInit+0x48>)
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <HAL_PCD_MspInit+0x48>)
 8008898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800889c:	6253      	str	r3, [r2, #36]	; 0x24
 800889e:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <HAL_PCD_MspInit+0x48>)
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	2014      	movs	r0, #20
 80088b0:	f7f8 fa0b 	bl	8000cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80088b4:	2014      	movs	r0, #20
 80088b6:	f7f8 fa24 	bl	8000d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80088ba:	bf00      	nop
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40005c00 	.word	0x40005c00
 80088c8:	40023800 	.word	0x40023800

080088cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80088e0:	4619      	mov	r1, r3
 80088e2:	4610      	mov	r0, r2
 80088e4:	f7fe fdc3 	bl	800746e <USBD_LL_SetupStage>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	440b      	add	r3, r1
 8008910:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	4619      	mov	r1, r3
 800891a:	f7fe fdf5 	bl	8007508 <USBD_LL_DataOutStage>
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	440b      	add	r3, r1
 8008946:	333c      	adds	r3, #60	; 0x3c
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	4619      	mov	r1, r3
 800894e:	f7fe fe4c 	bl	80075ea <USBD_LL_DataInStage>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe ff57 	bl	800781c <USBD_LL_SOF>
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800897e:	2301      	movs	r3, #1
 8008980:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	2b02      	cmp	r3, #2
 8008988:	d001      	beq.n	800898e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800898a:	f7f7 fee7 	bl	800075c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008994:	7bfa      	ldrb	r2, [r7, #15]
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f7fe ff0c 	bl	80077b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe fec5 	bl	8007734 <USBD_LL_Reset>
}
 80089aa:	bf00      	nop
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe ff06 	bl	80077d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089d0:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <HAL_PCD_SuspendCallback+0x30>)
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	4a03      	ldr	r2, [pc, #12]	; (80089e4 <HAL_PCD_SuspendCallback+0x30>)
 80089d6:	f043 0306 	orr.w	r3, r3, #6
 80089da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	e000ed00 	.word	0xe000ed00

080089e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe ff00 	bl	80077fc <USBD_LL_Resume>
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a0c:	4a28      	ldr	r2, [pc, #160]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a26      	ldr	r2, [pc, #152]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008a1c:	4b24      	ldr	r3, [pc, #144]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a1e:	4a25      	ldr	r2, [pc, #148]	; (8008ab4 <USBD_LL_Init+0xb0>)
 8008a20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a22:	4b23      	ldr	r3, [pc, #140]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a24:	2208      	movs	r2, #8
 8008a26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a28:	4b21      	ldr	r3, [pc, #132]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a2e:	4b20      	ldr	r3, [pc, #128]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a30:	2202      	movs	r2, #2
 8008a32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a34:	4b1e      	ldr	r3, [pc, #120]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a3a:	4b1d      	ldr	r3, [pc, #116]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a40:	481b      	ldr	r0, [pc, #108]	; (8008ab0 <USBD_LL_Init+0xac>)
 8008a42:	f7f8 fc6f 	bl	8001324 <HAL_PCD_Init>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a4c:	f7f7 fe86 	bl	800075c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a56:	2318      	movs	r3, #24
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	f7fa f84c 	bl	8002af8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a66:	2358      	movs	r3, #88	; 0x58
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2180      	movs	r1, #128	; 0x80
 8008a6c:	f7fa f844 	bl	8002af8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a76:	23c0      	movs	r3, #192	; 0xc0
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2181      	movs	r1, #129	; 0x81
 8008a7c:	f7fa f83c 	bl	8002af8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	f7fa f833 	bl	8002af8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2182      	movs	r1, #130	; 0x82
 8008aa0:	f7fa f82a 	bl	8002af8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000fa8 	.word	0x20000fa8
 8008ab4:	40005c00 	.word	0x40005c00

08008ab8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f8 fd06 	bl	80014e0 <HAL_PCD_Start>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f944 	bl	8008d68 <USBD_Get_USB_Status>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	4608      	mov	r0, r1
 8008af8:	4611      	mov	r1, r2
 8008afa:	461a      	mov	r2, r3
 8008afc:	4603      	mov	r3, r0
 8008afe:	70fb      	strb	r3, [r7, #3]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70bb      	strb	r3, [r7, #2]
 8008b04:	4613      	mov	r3, r2
 8008b06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008b16:	78bb      	ldrb	r3, [r7, #2]
 8008b18:	883a      	ldrh	r2, [r7, #0]
 8008b1a:	78f9      	ldrb	r1, [r7, #3]
 8008b1c:	f7f8 fe22 	bl	8001764 <HAL_PCD_EP_Open>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 f91e 	bl	8008d68 <USBD_Get_USB_Status>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008b54:	78fa      	ldrb	r2, [r7, #3]
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7f8 fe69 	bl	8001830 <HAL_PCD_EP_Close>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 f8ff 	bl	8008d68 <USBD_Get_USB_Status>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	4611      	mov	r1, r2
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7f8 ff29 	bl	80019ee <HAL_PCD_EP_SetStall>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f8e0 	bl	8008d68 <USBD_Get_USB_Status>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008bd0:	78fa      	ldrb	r2, [r7, #3]
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7f8 ff5c 	bl	8001a92 <HAL_PCD_EP_ClrStall>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f8c1 	bl	8008d68 <USBD_Get_USB_Status>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008c06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	da0c      	bge.n	8008c2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c16:	68f9      	ldr	r1, [r7, #12]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	440b      	add	r3, r1
 8008c24:	3302      	adds	r3, #2
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	e00b      	b.n	8008c42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c30:	68f9      	ldr	r1, [r7, #12]
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	440b      	add	r3, r1
 8008c3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c40:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr

08008c4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7f8 fd55 	bl	800171a <HAL_PCD_SetAddress>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f876 	bl	8008d68 <USBD_Get_USB_Status>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b086      	sub	sp, #24
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	461a      	mov	r2, r3
 8008c96:	460b      	mov	r3, r1
 8008c98:	72fb      	strb	r3, [r7, #11]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008cac:	893b      	ldrh	r3, [r7, #8]
 8008cae:	7af9      	ldrb	r1, [r7, #11]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	f7f8 fe59 	bl	8001968 <HAL_PCD_EP_Transmit>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f853 	bl	8008d68 <USBD_Get_USB_Status>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	460b      	mov	r3, r1
 8008cde:	72fb      	strb	r3, [r7, #11]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008cf2:	893b      	ldrh	r3, [r7, #8]
 8008cf4:	7af9      	ldrb	r1, [r7, #11]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	f7f8 fde2 	bl	80018c0 <HAL_PCD_EP_Receive>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 f830 	bl	8008d68 <USBD_Get_USB_Status>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008d28:	78fa      	ldrb	r2, [r7, #3]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7f8 fe04 	bl	800193a <HAL_PCD_EP_GetRxCount>
 8008d32:	4603      	mov	r3, r0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <USBD_static_malloc+0x14>)
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr
 8008d50:	20001294 	.word	0x20001294

08008d54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]

}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bc80      	pop	{r7}
 8008d64:	4770      	bx	lr
	...

08008d68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d817      	bhi.n	8008dac <USBD_Get_USB_Status+0x44>
 8008d7c:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <USBD_Get_USB_Status+0x1c>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008d95 	.word	0x08008d95
 8008d88:	08008d9b 	.word	0x08008d9b
 8008d8c:	08008da1 	.word	0x08008da1
 8008d90:	08008da7 	.word	0x08008da7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e00b      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e008      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	e005      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008da6:	2302      	movs	r3, #2
 8008da8:	73fb      	strb	r3, [r7, #15]
    break;
 8008daa:	e002      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dac:	2302      	movs	r3, #2
 8008dae:	73fb      	strb	r3, [r7, #15]
    break;
 8008db0:	bf00      	nop
  }
  return usb_status;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop

08008dc0 <__errno>:
 8008dc0:	4b01      	ldr	r3, [pc, #4]	; (8008dc8 <__errno+0x8>)
 8008dc2:	6818      	ldr	r0, [r3, #0]
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	2000017c 	.word	0x2000017c

08008dcc <__libc_init_array>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	2600      	movs	r6, #0
 8008dd0:	4d0c      	ldr	r5, [pc, #48]	; (8008e04 <__libc_init_array+0x38>)
 8008dd2:	4c0d      	ldr	r4, [pc, #52]	; (8008e08 <__libc_init_array+0x3c>)
 8008dd4:	1b64      	subs	r4, r4, r5
 8008dd6:	10a4      	asrs	r4, r4, #2
 8008dd8:	42a6      	cmp	r6, r4
 8008dda:	d109      	bne.n	8008df0 <__libc_init_array+0x24>
 8008ddc:	f000 fc9c 	bl	8009718 <_init>
 8008de0:	2600      	movs	r6, #0
 8008de2:	4d0a      	ldr	r5, [pc, #40]	; (8008e0c <__libc_init_array+0x40>)
 8008de4:	4c0a      	ldr	r4, [pc, #40]	; (8008e10 <__libc_init_array+0x44>)
 8008de6:	1b64      	subs	r4, r4, r5
 8008de8:	10a4      	asrs	r4, r4, #2
 8008dea:	42a6      	cmp	r6, r4
 8008dec:	d105      	bne.n	8008dfa <__libc_init_array+0x2e>
 8008dee:	bd70      	pop	{r4, r5, r6, pc}
 8008df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df4:	4798      	blx	r3
 8008df6:	3601      	adds	r6, #1
 8008df8:	e7ee      	b.n	8008dd8 <__libc_init_array+0xc>
 8008dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dfe:	4798      	blx	r3
 8008e00:	3601      	adds	r6, #1
 8008e02:	e7f2      	b.n	8008dea <__libc_init_array+0x1e>
 8008e04:	080097e8 	.word	0x080097e8
 8008e08:	080097e8 	.word	0x080097e8
 8008e0c:	080097e8 	.word	0x080097e8
 8008e10:	080097ec 	.word	0x080097ec

08008e14 <memset>:
 8008e14:	4603      	mov	r3, r0
 8008e16:	4402      	add	r2, r0
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d100      	bne.n	8008e1e <memset+0xa>
 8008e1c:	4770      	bx	lr
 8008e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e22:	e7f9      	b.n	8008e18 <memset+0x4>

08008e24 <siprintf>:
 8008e24:	b40e      	push	{r1, r2, r3}
 8008e26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e2a:	b500      	push	{lr}
 8008e2c:	b09c      	sub	sp, #112	; 0x70
 8008e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e30:	9002      	str	r0, [sp, #8]
 8008e32:	9006      	str	r0, [sp, #24]
 8008e34:	9107      	str	r1, [sp, #28]
 8008e36:	9104      	str	r1, [sp, #16]
 8008e38:	4808      	ldr	r0, [pc, #32]	; (8008e5c <siprintf+0x38>)
 8008e3a:	4909      	ldr	r1, [pc, #36]	; (8008e60 <siprintf+0x3c>)
 8008e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e40:	9105      	str	r1, [sp, #20]
 8008e42:	6800      	ldr	r0, [r0, #0]
 8008e44:	a902      	add	r1, sp, #8
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	f000 f868 	bl	8008f1c <_svfiprintf_r>
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	9b02      	ldr	r3, [sp, #8]
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	b01c      	add	sp, #112	; 0x70
 8008e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e58:	b003      	add	sp, #12
 8008e5a:	4770      	bx	lr
 8008e5c:	2000017c 	.word	0x2000017c
 8008e60:	ffff0208 	.word	0xffff0208

08008e64 <__ssputs_r>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	688e      	ldr	r6, [r1, #8]
 8008e6a:	4682      	mov	sl, r0
 8008e6c:	429e      	cmp	r6, r3
 8008e6e:	460c      	mov	r4, r1
 8008e70:	4690      	mov	r8, r2
 8008e72:	461f      	mov	r7, r3
 8008e74:	d838      	bhi.n	8008ee8 <__ssputs_r+0x84>
 8008e76:	898a      	ldrh	r2, [r1, #12]
 8008e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e7c:	d032      	beq.n	8008ee4 <__ssputs_r+0x80>
 8008e7e:	6825      	ldr	r5, [r4, #0]
 8008e80:	6909      	ldr	r1, [r1, #16]
 8008e82:	3301      	adds	r3, #1
 8008e84:	eba5 0901 	sub.w	r9, r5, r1
 8008e88:	6965      	ldr	r5, [r4, #20]
 8008e8a:	444b      	add	r3, r9
 8008e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e94:	106d      	asrs	r5, r5, #1
 8008e96:	429d      	cmp	r5, r3
 8008e98:	bf38      	it	cc
 8008e9a:	461d      	movcc	r5, r3
 8008e9c:	0553      	lsls	r3, r2, #21
 8008e9e:	d531      	bpl.n	8008f04 <__ssputs_r+0xa0>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f000 fb6f 	bl	8009584 <_malloc_r>
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	b950      	cbnz	r0, 8008ec0 <__ssputs_r+0x5c>
 8008eaa:	230c      	movs	r3, #12
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb0:	f8ca 3000 	str.w	r3, [sl]
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec0:	464a      	mov	r2, r9
 8008ec2:	6921      	ldr	r1, [r4, #16]
 8008ec4:	f000 face 	bl	8009464 <memcpy>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	6126      	str	r6, [r4, #16]
 8008ed6:	444e      	add	r6, r9
 8008ed8:	6026      	str	r6, [r4, #0]
 8008eda:	463e      	mov	r6, r7
 8008edc:	6165      	str	r5, [r4, #20]
 8008ede:	eba5 0509 	sub.w	r5, r5, r9
 8008ee2:	60a5      	str	r5, [r4, #8]
 8008ee4:	42be      	cmp	r6, r7
 8008ee6:	d900      	bls.n	8008eea <__ssputs_r+0x86>
 8008ee8:	463e      	mov	r6, r7
 8008eea:	4632      	mov	r2, r6
 8008eec:	4641      	mov	r1, r8
 8008eee:	6820      	ldr	r0, [r4, #0]
 8008ef0:	f000 fac6 	bl	8009480 <memmove>
 8008ef4:	68a3      	ldr	r3, [r4, #8]
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	1b9b      	subs	r3, r3, r6
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	4433      	add	r3, r6
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	e7db      	b.n	8008ebc <__ssputs_r+0x58>
 8008f04:	462a      	mov	r2, r5
 8008f06:	f000 fbb1 	bl	800966c <_realloc_r>
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d1e1      	bne.n	8008ed4 <__ssputs_r+0x70>
 8008f10:	4650      	mov	r0, sl
 8008f12:	6921      	ldr	r1, [r4, #16]
 8008f14:	f000 face 	bl	80094b4 <_free_r>
 8008f18:	e7c7      	b.n	8008eaa <__ssputs_r+0x46>
	...

08008f1c <_svfiprintf_r>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	4698      	mov	r8, r3
 8008f22:	898b      	ldrh	r3, [r1, #12]
 8008f24:	4607      	mov	r7, r0
 8008f26:	061b      	lsls	r3, r3, #24
 8008f28:	460d      	mov	r5, r1
 8008f2a:	4614      	mov	r4, r2
 8008f2c:	b09d      	sub	sp, #116	; 0x74
 8008f2e:	d50e      	bpl.n	8008f4e <_svfiprintf_r+0x32>
 8008f30:	690b      	ldr	r3, [r1, #16]
 8008f32:	b963      	cbnz	r3, 8008f4e <_svfiprintf_r+0x32>
 8008f34:	2140      	movs	r1, #64	; 0x40
 8008f36:	f000 fb25 	bl	8009584 <_malloc_r>
 8008f3a:	6028      	str	r0, [r5, #0]
 8008f3c:	6128      	str	r0, [r5, #16]
 8008f3e:	b920      	cbnz	r0, 8008f4a <_svfiprintf_r+0x2e>
 8008f40:	230c      	movs	r3, #12
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	e0d1      	b.n	80090ee <_svfiprintf_r+0x1d2>
 8008f4a:	2340      	movs	r3, #64	; 0x40
 8008f4c:	616b      	str	r3, [r5, #20]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9309      	str	r3, [sp, #36]	; 0x24
 8008f52:	2320      	movs	r3, #32
 8008f54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f58:	2330      	movs	r3, #48	; 0x30
 8008f5a:	f04f 0901 	mov.w	r9, #1
 8008f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009108 <_svfiprintf_r+0x1ec>
 8008f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f6a:	4623      	mov	r3, r4
 8008f6c:	469a      	mov	sl, r3
 8008f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f72:	b10a      	cbz	r2, 8008f78 <_svfiprintf_r+0x5c>
 8008f74:	2a25      	cmp	r2, #37	; 0x25
 8008f76:	d1f9      	bne.n	8008f6c <_svfiprintf_r+0x50>
 8008f78:	ebba 0b04 	subs.w	fp, sl, r4
 8008f7c:	d00b      	beq.n	8008f96 <_svfiprintf_r+0x7a>
 8008f7e:	465b      	mov	r3, fp
 8008f80:	4622      	mov	r2, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	4638      	mov	r0, r7
 8008f86:	f7ff ff6d 	bl	8008e64 <__ssputs_r>
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	f000 80aa 	beq.w	80090e4 <_svfiprintf_r+0x1c8>
 8008f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f92:	445a      	add	r2, fp
 8008f94:	9209      	str	r2, [sp, #36]	; 0x24
 8008f96:	f89a 3000 	ldrb.w	r3, [sl]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80a2 	beq.w	80090e4 <_svfiprintf_r+0x1c8>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008faa:	f10a 0a01 	add.w	sl, sl, #1
 8008fae:	9304      	str	r3, [sp, #16]
 8008fb0:	9307      	str	r3, [sp, #28]
 8008fb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fb6:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb8:	4654      	mov	r4, sl
 8008fba:	2205      	movs	r2, #5
 8008fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc0:	4851      	ldr	r0, [pc, #324]	; (8009108 <_svfiprintf_r+0x1ec>)
 8008fc2:	f000 fa41 	bl	8009448 <memchr>
 8008fc6:	9a04      	ldr	r2, [sp, #16]
 8008fc8:	b9d8      	cbnz	r0, 8009002 <_svfiprintf_r+0xe6>
 8008fca:	06d0      	lsls	r0, r2, #27
 8008fcc:	bf44      	itt	mi
 8008fce:	2320      	movmi	r3, #32
 8008fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd4:	0711      	lsls	r1, r2, #28
 8008fd6:	bf44      	itt	mi
 8008fd8:	232b      	movmi	r3, #43	; 0x2b
 8008fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fde:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe4:	d015      	beq.n	8009012 <_svfiprintf_r+0xf6>
 8008fe6:	4654      	mov	r4, sl
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f04f 0c0a 	mov.w	ip, #10
 8008fee:	9a07      	ldr	r2, [sp, #28]
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff6:	3b30      	subs	r3, #48	; 0x30
 8008ff8:	2b09      	cmp	r3, #9
 8008ffa:	d94e      	bls.n	800909a <_svfiprintf_r+0x17e>
 8008ffc:	b1b0      	cbz	r0, 800902c <_svfiprintf_r+0x110>
 8008ffe:	9207      	str	r2, [sp, #28]
 8009000:	e014      	b.n	800902c <_svfiprintf_r+0x110>
 8009002:	eba0 0308 	sub.w	r3, r0, r8
 8009006:	fa09 f303 	lsl.w	r3, r9, r3
 800900a:	4313      	orrs	r3, r2
 800900c:	46a2      	mov	sl, r4
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	e7d2      	b.n	8008fb8 <_svfiprintf_r+0x9c>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	1d19      	adds	r1, r3, #4
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	9103      	str	r1, [sp, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	bfbb      	ittet	lt
 800901e:	425b      	neglt	r3, r3
 8009020:	f042 0202 	orrlt.w	r2, r2, #2
 8009024:	9307      	strge	r3, [sp, #28]
 8009026:	9307      	strlt	r3, [sp, #28]
 8009028:	bfb8      	it	lt
 800902a:	9204      	strlt	r2, [sp, #16]
 800902c:	7823      	ldrb	r3, [r4, #0]
 800902e:	2b2e      	cmp	r3, #46	; 0x2e
 8009030:	d10c      	bne.n	800904c <_svfiprintf_r+0x130>
 8009032:	7863      	ldrb	r3, [r4, #1]
 8009034:	2b2a      	cmp	r3, #42	; 0x2a
 8009036:	d135      	bne.n	80090a4 <_svfiprintf_r+0x188>
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	3402      	adds	r4, #2
 800903c:	1d1a      	adds	r2, r3, #4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	9203      	str	r2, [sp, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	bfb8      	it	lt
 8009046:	f04f 33ff 	movlt.w	r3, #4294967295
 800904a:	9305      	str	r3, [sp, #20]
 800904c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800910c <_svfiprintf_r+0x1f0>
 8009050:	2203      	movs	r2, #3
 8009052:	4650      	mov	r0, sl
 8009054:	7821      	ldrb	r1, [r4, #0]
 8009056:	f000 f9f7 	bl	8009448 <memchr>
 800905a:	b140      	cbz	r0, 800906e <_svfiprintf_r+0x152>
 800905c:	2340      	movs	r3, #64	; 0x40
 800905e:	eba0 000a 	sub.w	r0, r0, sl
 8009062:	fa03 f000 	lsl.w	r0, r3, r0
 8009066:	9b04      	ldr	r3, [sp, #16]
 8009068:	3401      	adds	r4, #1
 800906a:	4303      	orrs	r3, r0
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009072:	2206      	movs	r2, #6
 8009074:	4826      	ldr	r0, [pc, #152]	; (8009110 <_svfiprintf_r+0x1f4>)
 8009076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800907a:	f000 f9e5 	bl	8009448 <memchr>
 800907e:	2800      	cmp	r0, #0
 8009080:	d038      	beq.n	80090f4 <_svfiprintf_r+0x1d8>
 8009082:	4b24      	ldr	r3, [pc, #144]	; (8009114 <_svfiprintf_r+0x1f8>)
 8009084:	bb1b      	cbnz	r3, 80090ce <_svfiprintf_r+0x1b2>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	3307      	adds	r3, #7
 800908a:	f023 0307 	bic.w	r3, r3, #7
 800908e:	3308      	adds	r3, #8
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009094:	4433      	add	r3, r6
 8009096:	9309      	str	r3, [sp, #36]	; 0x24
 8009098:	e767      	b.n	8008f6a <_svfiprintf_r+0x4e>
 800909a:	460c      	mov	r4, r1
 800909c:	2001      	movs	r0, #1
 800909e:	fb0c 3202 	mla	r2, ip, r2, r3
 80090a2:	e7a5      	b.n	8008ff0 <_svfiprintf_r+0xd4>
 80090a4:	2300      	movs	r3, #0
 80090a6:	f04f 0c0a 	mov.w	ip, #10
 80090aa:	4619      	mov	r1, r3
 80090ac:	3401      	adds	r4, #1
 80090ae:	9305      	str	r3, [sp, #20]
 80090b0:	4620      	mov	r0, r4
 80090b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b6:	3a30      	subs	r2, #48	; 0x30
 80090b8:	2a09      	cmp	r2, #9
 80090ba:	d903      	bls.n	80090c4 <_svfiprintf_r+0x1a8>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0c5      	beq.n	800904c <_svfiprintf_r+0x130>
 80090c0:	9105      	str	r1, [sp, #20]
 80090c2:	e7c3      	b.n	800904c <_svfiprintf_r+0x130>
 80090c4:	4604      	mov	r4, r0
 80090c6:	2301      	movs	r3, #1
 80090c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090cc:	e7f0      	b.n	80090b0 <_svfiprintf_r+0x194>
 80090ce:	ab03      	add	r3, sp, #12
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	462a      	mov	r2, r5
 80090d4:	4638      	mov	r0, r7
 80090d6:	4b10      	ldr	r3, [pc, #64]	; (8009118 <_svfiprintf_r+0x1fc>)
 80090d8:	a904      	add	r1, sp, #16
 80090da:	f3af 8000 	nop.w
 80090de:	1c42      	adds	r2, r0, #1
 80090e0:	4606      	mov	r6, r0
 80090e2:	d1d6      	bne.n	8009092 <_svfiprintf_r+0x176>
 80090e4:	89ab      	ldrh	r3, [r5, #12]
 80090e6:	065b      	lsls	r3, r3, #25
 80090e8:	f53f af2c 	bmi.w	8008f44 <_svfiprintf_r+0x28>
 80090ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ee:	b01d      	add	sp, #116	; 0x74
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f4:	ab03      	add	r3, sp, #12
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	462a      	mov	r2, r5
 80090fa:	4638      	mov	r0, r7
 80090fc:	4b06      	ldr	r3, [pc, #24]	; (8009118 <_svfiprintf_r+0x1fc>)
 80090fe:	a904      	add	r1, sp, #16
 8009100:	f000 f87c 	bl	80091fc <_printf_i>
 8009104:	e7eb      	b.n	80090de <_svfiprintf_r+0x1c2>
 8009106:	bf00      	nop
 8009108:	080097ac 	.word	0x080097ac
 800910c:	080097b2 	.word	0x080097b2
 8009110:	080097b6 	.word	0x080097b6
 8009114:	00000000 	.word	0x00000000
 8009118:	08008e65 	.word	0x08008e65

0800911c <_printf_common>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	4616      	mov	r6, r2
 8009122:	4699      	mov	r9, r3
 8009124:	688a      	ldr	r2, [r1, #8]
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	4607      	mov	r7, r0
 800912a:	4293      	cmp	r3, r2
 800912c:	bfb8      	it	lt
 800912e:	4613      	movlt	r3, r2
 8009130:	6033      	str	r3, [r6, #0]
 8009132:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009136:	460c      	mov	r4, r1
 8009138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800913c:	b10a      	cbz	r2, 8009142 <_printf_common+0x26>
 800913e:	3301      	adds	r3, #1
 8009140:	6033      	str	r3, [r6, #0]
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	0699      	lsls	r1, r3, #26
 8009146:	bf42      	ittt	mi
 8009148:	6833      	ldrmi	r3, [r6, #0]
 800914a:	3302      	addmi	r3, #2
 800914c:	6033      	strmi	r3, [r6, #0]
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	f015 0506 	ands.w	r5, r5, #6
 8009154:	d106      	bne.n	8009164 <_printf_common+0x48>
 8009156:	f104 0a19 	add.w	sl, r4, #25
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	6832      	ldr	r2, [r6, #0]
 800915e:	1a9b      	subs	r3, r3, r2
 8009160:	42ab      	cmp	r3, r5
 8009162:	dc28      	bgt.n	80091b6 <_printf_common+0x9a>
 8009164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009168:	1e13      	subs	r3, r2, #0
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	bf18      	it	ne
 800916e:	2301      	movne	r3, #1
 8009170:	0692      	lsls	r2, r2, #26
 8009172:	d42d      	bmi.n	80091d0 <_printf_common+0xb4>
 8009174:	4649      	mov	r1, r9
 8009176:	4638      	mov	r0, r7
 8009178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800917c:	47c0      	blx	r8
 800917e:	3001      	adds	r0, #1
 8009180:	d020      	beq.n	80091c4 <_printf_common+0xa8>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	68e5      	ldr	r5, [r4, #12]
 8009186:	f003 0306 	and.w	r3, r3, #6
 800918a:	2b04      	cmp	r3, #4
 800918c:	bf18      	it	ne
 800918e:	2500      	movne	r5, #0
 8009190:	6832      	ldr	r2, [r6, #0]
 8009192:	f04f 0600 	mov.w	r6, #0
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	bf08      	it	eq
 800919a:	1aad      	subeq	r5, r5, r2
 800919c:	6922      	ldr	r2, [r4, #16]
 800919e:	bf08      	it	eq
 80091a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a4:	4293      	cmp	r3, r2
 80091a6:	bfc4      	itt	gt
 80091a8:	1a9b      	subgt	r3, r3, r2
 80091aa:	18ed      	addgt	r5, r5, r3
 80091ac:	341a      	adds	r4, #26
 80091ae:	42b5      	cmp	r5, r6
 80091b0:	d11a      	bne.n	80091e8 <_printf_common+0xcc>
 80091b2:	2000      	movs	r0, #0
 80091b4:	e008      	b.n	80091c8 <_printf_common+0xac>
 80091b6:	2301      	movs	r3, #1
 80091b8:	4652      	mov	r2, sl
 80091ba:	4649      	mov	r1, r9
 80091bc:	4638      	mov	r0, r7
 80091be:	47c0      	blx	r8
 80091c0:	3001      	adds	r0, #1
 80091c2:	d103      	bne.n	80091cc <_printf_common+0xb0>
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091cc:	3501      	adds	r5, #1
 80091ce:	e7c4      	b.n	800915a <_printf_common+0x3e>
 80091d0:	2030      	movs	r0, #48	; 0x30
 80091d2:	18e1      	adds	r1, r4, r3
 80091d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091de:	4422      	add	r2, r4
 80091e0:	3302      	adds	r3, #2
 80091e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091e6:	e7c5      	b.n	8009174 <_printf_common+0x58>
 80091e8:	2301      	movs	r3, #1
 80091ea:	4622      	mov	r2, r4
 80091ec:	4649      	mov	r1, r9
 80091ee:	4638      	mov	r0, r7
 80091f0:	47c0      	blx	r8
 80091f2:	3001      	adds	r0, #1
 80091f4:	d0e6      	beq.n	80091c4 <_printf_common+0xa8>
 80091f6:	3601      	adds	r6, #1
 80091f8:	e7d9      	b.n	80091ae <_printf_common+0x92>
	...

080091fc <_printf_i>:
 80091fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	7e0f      	ldrb	r7, [r1, #24]
 8009202:	4691      	mov	r9, r2
 8009204:	2f78      	cmp	r7, #120	; 0x78
 8009206:	4680      	mov	r8, r0
 8009208:	460c      	mov	r4, r1
 800920a:	469a      	mov	sl, r3
 800920c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800920e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009212:	d807      	bhi.n	8009224 <_printf_i+0x28>
 8009214:	2f62      	cmp	r7, #98	; 0x62
 8009216:	d80a      	bhi.n	800922e <_printf_i+0x32>
 8009218:	2f00      	cmp	r7, #0
 800921a:	f000 80d9 	beq.w	80093d0 <_printf_i+0x1d4>
 800921e:	2f58      	cmp	r7, #88	; 0x58
 8009220:	f000 80a4 	beq.w	800936c <_printf_i+0x170>
 8009224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800922c:	e03a      	b.n	80092a4 <_printf_i+0xa8>
 800922e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009232:	2b15      	cmp	r3, #21
 8009234:	d8f6      	bhi.n	8009224 <_printf_i+0x28>
 8009236:	a101      	add	r1, pc, #4	; (adr r1, 800923c <_printf_i+0x40>)
 8009238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800923c:	08009295 	.word	0x08009295
 8009240:	080092a9 	.word	0x080092a9
 8009244:	08009225 	.word	0x08009225
 8009248:	08009225 	.word	0x08009225
 800924c:	08009225 	.word	0x08009225
 8009250:	08009225 	.word	0x08009225
 8009254:	080092a9 	.word	0x080092a9
 8009258:	08009225 	.word	0x08009225
 800925c:	08009225 	.word	0x08009225
 8009260:	08009225 	.word	0x08009225
 8009264:	08009225 	.word	0x08009225
 8009268:	080093b7 	.word	0x080093b7
 800926c:	080092d9 	.word	0x080092d9
 8009270:	08009399 	.word	0x08009399
 8009274:	08009225 	.word	0x08009225
 8009278:	08009225 	.word	0x08009225
 800927c:	080093d9 	.word	0x080093d9
 8009280:	08009225 	.word	0x08009225
 8009284:	080092d9 	.word	0x080092d9
 8009288:	08009225 	.word	0x08009225
 800928c:	08009225 	.word	0x08009225
 8009290:	080093a1 	.word	0x080093a1
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	1d1a      	adds	r2, r3, #4
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	602a      	str	r2, [r5, #0]
 800929c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0a4      	b.n	80093f2 <_printf_i+0x1f6>
 80092a8:	6820      	ldr	r0, [r4, #0]
 80092aa:	6829      	ldr	r1, [r5, #0]
 80092ac:	0606      	lsls	r6, r0, #24
 80092ae:	f101 0304 	add.w	r3, r1, #4
 80092b2:	d50a      	bpl.n	80092ca <_printf_i+0xce>
 80092b4:	680e      	ldr	r6, [r1, #0]
 80092b6:	602b      	str	r3, [r5, #0]
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	da03      	bge.n	80092c4 <_printf_i+0xc8>
 80092bc:	232d      	movs	r3, #45	; 0x2d
 80092be:	4276      	negs	r6, r6
 80092c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c4:	230a      	movs	r3, #10
 80092c6:	485e      	ldr	r0, [pc, #376]	; (8009440 <_printf_i+0x244>)
 80092c8:	e019      	b.n	80092fe <_printf_i+0x102>
 80092ca:	680e      	ldr	r6, [r1, #0]
 80092cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092d0:	602b      	str	r3, [r5, #0]
 80092d2:	bf18      	it	ne
 80092d4:	b236      	sxthne	r6, r6
 80092d6:	e7ef      	b.n	80092b8 <_printf_i+0xbc>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	6820      	ldr	r0, [r4, #0]
 80092dc:	1d19      	adds	r1, r3, #4
 80092de:	6029      	str	r1, [r5, #0]
 80092e0:	0601      	lsls	r1, r0, #24
 80092e2:	d501      	bpl.n	80092e8 <_printf_i+0xec>
 80092e4:	681e      	ldr	r6, [r3, #0]
 80092e6:	e002      	b.n	80092ee <_printf_i+0xf2>
 80092e8:	0646      	lsls	r6, r0, #25
 80092ea:	d5fb      	bpl.n	80092e4 <_printf_i+0xe8>
 80092ec:	881e      	ldrh	r6, [r3, #0]
 80092ee:	2f6f      	cmp	r7, #111	; 0x6f
 80092f0:	bf0c      	ite	eq
 80092f2:	2308      	moveq	r3, #8
 80092f4:	230a      	movne	r3, #10
 80092f6:	4852      	ldr	r0, [pc, #328]	; (8009440 <_printf_i+0x244>)
 80092f8:	2100      	movs	r1, #0
 80092fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092fe:	6865      	ldr	r5, [r4, #4]
 8009300:	2d00      	cmp	r5, #0
 8009302:	bfa8      	it	ge
 8009304:	6821      	ldrge	r1, [r4, #0]
 8009306:	60a5      	str	r5, [r4, #8]
 8009308:	bfa4      	itt	ge
 800930a:	f021 0104 	bicge.w	r1, r1, #4
 800930e:	6021      	strge	r1, [r4, #0]
 8009310:	b90e      	cbnz	r6, 8009316 <_printf_i+0x11a>
 8009312:	2d00      	cmp	r5, #0
 8009314:	d04d      	beq.n	80093b2 <_printf_i+0x1b6>
 8009316:	4615      	mov	r5, r2
 8009318:	fbb6 f1f3 	udiv	r1, r6, r3
 800931c:	fb03 6711 	mls	r7, r3, r1, r6
 8009320:	5dc7      	ldrb	r7, [r0, r7]
 8009322:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009326:	4637      	mov	r7, r6
 8009328:	42bb      	cmp	r3, r7
 800932a:	460e      	mov	r6, r1
 800932c:	d9f4      	bls.n	8009318 <_printf_i+0x11c>
 800932e:	2b08      	cmp	r3, #8
 8009330:	d10b      	bne.n	800934a <_printf_i+0x14e>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	07de      	lsls	r6, r3, #31
 8009336:	d508      	bpl.n	800934a <_printf_i+0x14e>
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	6861      	ldr	r1, [r4, #4]
 800933c:	4299      	cmp	r1, r3
 800933e:	bfde      	ittt	le
 8009340:	2330      	movle	r3, #48	; 0x30
 8009342:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009346:	f105 35ff 	addle.w	r5, r5, #4294967295
 800934a:	1b52      	subs	r2, r2, r5
 800934c:	6122      	str	r2, [r4, #16]
 800934e:	464b      	mov	r3, r9
 8009350:	4621      	mov	r1, r4
 8009352:	4640      	mov	r0, r8
 8009354:	f8cd a000 	str.w	sl, [sp]
 8009358:	aa03      	add	r2, sp, #12
 800935a:	f7ff fedf 	bl	800911c <_printf_common>
 800935e:	3001      	adds	r0, #1
 8009360:	d14c      	bne.n	80093fc <_printf_i+0x200>
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	b004      	add	sp, #16
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	4834      	ldr	r0, [pc, #208]	; (8009440 <_printf_i+0x244>)
 800936e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009372:	6829      	ldr	r1, [r5, #0]
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	f851 6b04 	ldr.w	r6, [r1], #4
 800937a:	6029      	str	r1, [r5, #0]
 800937c:	061d      	lsls	r5, r3, #24
 800937e:	d514      	bpl.n	80093aa <_printf_i+0x1ae>
 8009380:	07df      	lsls	r7, r3, #31
 8009382:	bf44      	itt	mi
 8009384:	f043 0320 	orrmi.w	r3, r3, #32
 8009388:	6023      	strmi	r3, [r4, #0]
 800938a:	b91e      	cbnz	r6, 8009394 <_printf_i+0x198>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	f023 0320 	bic.w	r3, r3, #32
 8009392:	6023      	str	r3, [r4, #0]
 8009394:	2310      	movs	r3, #16
 8009396:	e7af      	b.n	80092f8 <_printf_i+0xfc>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	f043 0320 	orr.w	r3, r3, #32
 800939e:	6023      	str	r3, [r4, #0]
 80093a0:	2378      	movs	r3, #120	; 0x78
 80093a2:	4828      	ldr	r0, [pc, #160]	; (8009444 <_printf_i+0x248>)
 80093a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093a8:	e7e3      	b.n	8009372 <_printf_i+0x176>
 80093aa:	0659      	lsls	r1, r3, #25
 80093ac:	bf48      	it	mi
 80093ae:	b2b6      	uxthmi	r6, r6
 80093b0:	e7e6      	b.n	8009380 <_printf_i+0x184>
 80093b2:	4615      	mov	r5, r2
 80093b4:	e7bb      	b.n	800932e <_printf_i+0x132>
 80093b6:	682b      	ldr	r3, [r5, #0]
 80093b8:	6826      	ldr	r6, [r4, #0]
 80093ba:	1d18      	adds	r0, r3, #4
 80093bc:	6961      	ldr	r1, [r4, #20]
 80093be:	6028      	str	r0, [r5, #0]
 80093c0:	0635      	lsls	r5, r6, #24
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	d501      	bpl.n	80093ca <_printf_i+0x1ce>
 80093c6:	6019      	str	r1, [r3, #0]
 80093c8:	e002      	b.n	80093d0 <_printf_i+0x1d4>
 80093ca:	0670      	lsls	r0, r6, #25
 80093cc:	d5fb      	bpl.n	80093c6 <_printf_i+0x1ca>
 80093ce:	8019      	strh	r1, [r3, #0]
 80093d0:	2300      	movs	r3, #0
 80093d2:	4615      	mov	r5, r2
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	e7ba      	b.n	800934e <_printf_i+0x152>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	2100      	movs	r1, #0
 80093dc:	1d1a      	adds	r2, r3, #4
 80093de:	602a      	str	r2, [r5, #0]
 80093e0:	681d      	ldr	r5, [r3, #0]
 80093e2:	6862      	ldr	r2, [r4, #4]
 80093e4:	4628      	mov	r0, r5
 80093e6:	f000 f82f 	bl	8009448 <memchr>
 80093ea:	b108      	cbz	r0, 80093f0 <_printf_i+0x1f4>
 80093ec:	1b40      	subs	r0, r0, r5
 80093ee:	6060      	str	r0, [r4, #4]
 80093f0:	6863      	ldr	r3, [r4, #4]
 80093f2:	6123      	str	r3, [r4, #16]
 80093f4:	2300      	movs	r3, #0
 80093f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fa:	e7a8      	b.n	800934e <_printf_i+0x152>
 80093fc:	462a      	mov	r2, r5
 80093fe:	4649      	mov	r1, r9
 8009400:	4640      	mov	r0, r8
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	47d0      	blx	sl
 8009406:	3001      	adds	r0, #1
 8009408:	d0ab      	beq.n	8009362 <_printf_i+0x166>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	079b      	lsls	r3, r3, #30
 800940e:	d413      	bmi.n	8009438 <_printf_i+0x23c>
 8009410:	68e0      	ldr	r0, [r4, #12]
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	4298      	cmp	r0, r3
 8009416:	bfb8      	it	lt
 8009418:	4618      	movlt	r0, r3
 800941a:	e7a4      	b.n	8009366 <_printf_i+0x16a>
 800941c:	2301      	movs	r3, #1
 800941e:	4632      	mov	r2, r6
 8009420:	4649      	mov	r1, r9
 8009422:	4640      	mov	r0, r8
 8009424:	47d0      	blx	sl
 8009426:	3001      	adds	r0, #1
 8009428:	d09b      	beq.n	8009362 <_printf_i+0x166>
 800942a:	3501      	adds	r5, #1
 800942c:	68e3      	ldr	r3, [r4, #12]
 800942e:	9903      	ldr	r1, [sp, #12]
 8009430:	1a5b      	subs	r3, r3, r1
 8009432:	42ab      	cmp	r3, r5
 8009434:	dcf2      	bgt.n	800941c <_printf_i+0x220>
 8009436:	e7eb      	b.n	8009410 <_printf_i+0x214>
 8009438:	2500      	movs	r5, #0
 800943a:	f104 0619 	add.w	r6, r4, #25
 800943e:	e7f5      	b.n	800942c <_printf_i+0x230>
 8009440:	080097bd 	.word	0x080097bd
 8009444:	080097ce 	.word	0x080097ce

08009448 <memchr>:
 8009448:	4603      	mov	r3, r0
 800944a:	b510      	push	{r4, lr}
 800944c:	b2c9      	uxtb	r1, r1
 800944e:	4402      	add	r2, r0
 8009450:	4293      	cmp	r3, r2
 8009452:	4618      	mov	r0, r3
 8009454:	d101      	bne.n	800945a <memchr+0x12>
 8009456:	2000      	movs	r0, #0
 8009458:	e003      	b.n	8009462 <memchr+0x1a>
 800945a:	7804      	ldrb	r4, [r0, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	428c      	cmp	r4, r1
 8009460:	d1f6      	bne.n	8009450 <memchr+0x8>
 8009462:	bd10      	pop	{r4, pc}

08009464 <memcpy>:
 8009464:	440a      	add	r2, r1
 8009466:	4291      	cmp	r1, r2
 8009468:	f100 33ff 	add.w	r3, r0, #4294967295
 800946c:	d100      	bne.n	8009470 <memcpy+0xc>
 800946e:	4770      	bx	lr
 8009470:	b510      	push	{r4, lr}
 8009472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009476:	4291      	cmp	r1, r2
 8009478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800947c:	d1f9      	bne.n	8009472 <memcpy+0xe>
 800947e:	bd10      	pop	{r4, pc}

08009480 <memmove>:
 8009480:	4288      	cmp	r0, r1
 8009482:	b510      	push	{r4, lr}
 8009484:	eb01 0402 	add.w	r4, r1, r2
 8009488:	d902      	bls.n	8009490 <memmove+0x10>
 800948a:	4284      	cmp	r4, r0
 800948c:	4623      	mov	r3, r4
 800948e:	d807      	bhi.n	80094a0 <memmove+0x20>
 8009490:	1e43      	subs	r3, r0, #1
 8009492:	42a1      	cmp	r1, r4
 8009494:	d008      	beq.n	80094a8 <memmove+0x28>
 8009496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800949a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800949e:	e7f8      	b.n	8009492 <memmove+0x12>
 80094a0:	4601      	mov	r1, r0
 80094a2:	4402      	add	r2, r0
 80094a4:	428a      	cmp	r2, r1
 80094a6:	d100      	bne.n	80094aa <memmove+0x2a>
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094b2:	e7f7      	b.n	80094a4 <memmove+0x24>

080094b4 <_free_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4605      	mov	r5, r0
 80094b8:	2900      	cmp	r1, #0
 80094ba:	d040      	beq.n	800953e <_free_r+0x8a>
 80094bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c0:	1f0c      	subs	r4, r1, #4
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	bfb8      	it	lt
 80094c6:	18e4      	addlt	r4, r4, r3
 80094c8:	f000 f910 	bl	80096ec <__malloc_lock>
 80094cc:	4a1c      	ldr	r2, [pc, #112]	; (8009540 <_free_r+0x8c>)
 80094ce:	6813      	ldr	r3, [r2, #0]
 80094d0:	b933      	cbnz	r3, 80094e0 <_free_r+0x2c>
 80094d2:	6063      	str	r3, [r4, #4]
 80094d4:	6014      	str	r4, [r2, #0]
 80094d6:	4628      	mov	r0, r5
 80094d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094dc:	f000 b90c 	b.w	80096f8 <__malloc_unlock>
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	d908      	bls.n	80094f6 <_free_r+0x42>
 80094e4:	6820      	ldr	r0, [r4, #0]
 80094e6:	1821      	adds	r1, r4, r0
 80094e8:	428b      	cmp	r3, r1
 80094ea:	bf01      	itttt	eq
 80094ec:	6819      	ldreq	r1, [r3, #0]
 80094ee:	685b      	ldreq	r3, [r3, #4]
 80094f0:	1809      	addeq	r1, r1, r0
 80094f2:	6021      	streq	r1, [r4, #0]
 80094f4:	e7ed      	b.n	80094d2 <_free_r+0x1e>
 80094f6:	461a      	mov	r2, r3
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	b10b      	cbz	r3, 8009500 <_free_r+0x4c>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d9fa      	bls.n	80094f6 <_free_r+0x42>
 8009500:	6811      	ldr	r1, [r2, #0]
 8009502:	1850      	adds	r0, r2, r1
 8009504:	42a0      	cmp	r0, r4
 8009506:	d10b      	bne.n	8009520 <_free_r+0x6c>
 8009508:	6820      	ldr	r0, [r4, #0]
 800950a:	4401      	add	r1, r0
 800950c:	1850      	adds	r0, r2, r1
 800950e:	4283      	cmp	r3, r0
 8009510:	6011      	str	r1, [r2, #0]
 8009512:	d1e0      	bne.n	80094d6 <_free_r+0x22>
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	4401      	add	r1, r0
 800951a:	6011      	str	r1, [r2, #0]
 800951c:	6053      	str	r3, [r2, #4]
 800951e:	e7da      	b.n	80094d6 <_free_r+0x22>
 8009520:	d902      	bls.n	8009528 <_free_r+0x74>
 8009522:	230c      	movs	r3, #12
 8009524:	602b      	str	r3, [r5, #0]
 8009526:	e7d6      	b.n	80094d6 <_free_r+0x22>
 8009528:	6820      	ldr	r0, [r4, #0]
 800952a:	1821      	adds	r1, r4, r0
 800952c:	428b      	cmp	r3, r1
 800952e:	bf01      	itttt	eq
 8009530:	6819      	ldreq	r1, [r3, #0]
 8009532:	685b      	ldreq	r3, [r3, #4]
 8009534:	1809      	addeq	r1, r1, r0
 8009536:	6021      	streq	r1, [r4, #0]
 8009538:	6063      	str	r3, [r4, #4]
 800953a:	6054      	str	r4, [r2, #4]
 800953c:	e7cb      	b.n	80094d6 <_free_r+0x22>
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	200014b4 	.word	0x200014b4

08009544 <sbrk_aligned>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	4e0e      	ldr	r6, [pc, #56]	; (8009580 <sbrk_aligned+0x3c>)
 8009548:	460c      	mov	r4, r1
 800954a:	6831      	ldr	r1, [r6, #0]
 800954c:	4605      	mov	r5, r0
 800954e:	b911      	cbnz	r1, 8009556 <sbrk_aligned+0x12>
 8009550:	f000 f8bc 	bl	80096cc <_sbrk_r>
 8009554:	6030      	str	r0, [r6, #0]
 8009556:	4621      	mov	r1, r4
 8009558:	4628      	mov	r0, r5
 800955a:	f000 f8b7 	bl	80096cc <_sbrk_r>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	d00a      	beq.n	8009578 <sbrk_aligned+0x34>
 8009562:	1cc4      	adds	r4, r0, #3
 8009564:	f024 0403 	bic.w	r4, r4, #3
 8009568:	42a0      	cmp	r0, r4
 800956a:	d007      	beq.n	800957c <sbrk_aligned+0x38>
 800956c:	1a21      	subs	r1, r4, r0
 800956e:	4628      	mov	r0, r5
 8009570:	f000 f8ac 	bl	80096cc <_sbrk_r>
 8009574:	3001      	adds	r0, #1
 8009576:	d101      	bne.n	800957c <sbrk_aligned+0x38>
 8009578:	f04f 34ff 	mov.w	r4, #4294967295
 800957c:	4620      	mov	r0, r4
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	200014b8 	.word	0x200014b8

08009584 <_malloc_r>:
 8009584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009588:	1ccd      	adds	r5, r1, #3
 800958a:	f025 0503 	bic.w	r5, r5, #3
 800958e:	3508      	adds	r5, #8
 8009590:	2d0c      	cmp	r5, #12
 8009592:	bf38      	it	cc
 8009594:	250c      	movcc	r5, #12
 8009596:	2d00      	cmp	r5, #0
 8009598:	4607      	mov	r7, r0
 800959a:	db01      	blt.n	80095a0 <_malloc_r+0x1c>
 800959c:	42a9      	cmp	r1, r5
 800959e:	d905      	bls.n	80095ac <_malloc_r+0x28>
 80095a0:	230c      	movs	r3, #12
 80095a2:	2600      	movs	r6, #0
 80095a4:	603b      	str	r3, [r7, #0]
 80095a6:	4630      	mov	r0, r6
 80095a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ac:	4e2e      	ldr	r6, [pc, #184]	; (8009668 <_malloc_r+0xe4>)
 80095ae:	f000 f89d 	bl	80096ec <__malloc_lock>
 80095b2:	6833      	ldr	r3, [r6, #0]
 80095b4:	461c      	mov	r4, r3
 80095b6:	bb34      	cbnz	r4, 8009606 <_malloc_r+0x82>
 80095b8:	4629      	mov	r1, r5
 80095ba:	4638      	mov	r0, r7
 80095bc:	f7ff ffc2 	bl	8009544 <sbrk_aligned>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	4604      	mov	r4, r0
 80095c4:	d14d      	bne.n	8009662 <_malloc_r+0xde>
 80095c6:	6834      	ldr	r4, [r6, #0]
 80095c8:	4626      	mov	r6, r4
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	d140      	bne.n	8009650 <_malloc_r+0xcc>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	4631      	mov	r1, r6
 80095d2:	4638      	mov	r0, r7
 80095d4:	eb04 0803 	add.w	r8, r4, r3
 80095d8:	f000 f878 	bl	80096cc <_sbrk_r>
 80095dc:	4580      	cmp	r8, r0
 80095de:	d13a      	bne.n	8009656 <_malloc_r+0xd2>
 80095e0:	6821      	ldr	r1, [r4, #0]
 80095e2:	3503      	adds	r5, #3
 80095e4:	1a6d      	subs	r5, r5, r1
 80095e6:	f025 0503 	bic.w	r5, r5, #3
 80095ea:	3508      	adds	r5, #8
 80095ec:	2d0c      	cmp	r5, #12
 80095ee:	bf38      	it	cc
 80095f0:	250c      	movcc	r5, #12
 80095f2:	4638      	mov	r0, r7
 80095f4:	4629      	mov	r1, r5
 80095f6:	f7ff ffa5 	bl	8009544 <sbrk_aligned>
 80095fa:	3001      	adds	r0, #1
 80095fc:	d02b      	beq.n	8009656 <_malloc_r+0xd2>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	442b      	add	r3, r5
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	e00e      	b.n	8009624 <_malloc_r+0xa0>
 8009606:	6822      	ldr	r2, [r4, #0]
 8009608:	1b52      	subs	r2, r2, r5
 800960a:	d41e      	bmi.n	800964a <_malloc_r+0xc6>
 800960c:	2a0b      	cmp	r2, #11
 800960e:	d916      	bls.n	800963e <_malloc_r+0xba>
 8009610:	1961      	adds	r1, r4, r5
 8009612:	42a3      	cmp	r3, r4
 8009614:	6025      	str	r5, [r4, #0]
 8009616:	bf18      	it	ne
 8009618:	6059      	strne	r1, [r3, #4]
 800961a:	6863      	ldr	r3, [r4, #4]
 800961c:	bf08      	it	eq
 800961e:	6031      	streq	r1, [r6, #0]
 8009620:	5162      	str	r2, [r4, r5]
 8009622:	604b      	str	r3, [r1, #4]
 8009624:	4638      	mov	r0, r7
 8009626:	f104 060b 	add.w	r6, r4, #11
 800962a:	f000 f865 	bl	80096f8 <__malloc_unlock>
 800962e:	f026 0607 	bic.w	r6, r6, #7
 8009632:	1d23      	adds	r3, r4, #4
 8009634:	1af2      	subs	r2, r6, r3
 8009636:	d0b6      	beq.n	80095a6 <_malloc_r+0x22>
 8009638:	1b9b      	subs	r3, r3, r6
 800963a:	50a3      	str	r3, [r4, r2]
 800963c:	e7b3      	b.n	80095a6 <_malloc_r+0x22>
 800963e:	6862      	ldr	r2, [r4, #4]
 8009640:	42a3      	cmp	r3, r4
 8009642:	bf0c      	ite	eq
 8009644:	6032      	streq	r2, [r6, #0]
 8009646:	605a      	strne	r2, [r3, #4]
 8009648:	e7ec      	b.n	8009624 <_malloc_r+0xa0>
 800964a:	4623      	mov	r3, r4
 800964c:	6864      	ldr	r4, [r4, #4]
 800964e:	e7b2      	b.n	80095b6 <_malloc_r+0x32>
 8009650:	4634      	mov	r4, r6
 8009652:	6876      	ldr	r6, [r6, #4]
 8009654:	e7b9      	b.n	80095ca <_malloc_r+0x46>
 8009656:	230c      	movs	r3, #12
 8009658:	4638      	mov	r0, r7
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	f000 f84c 	bl	80096f8 <__malloc_unlock>
 8009660:	e7a1      	b.n	80095a6 <_malloc_r+0x22>
 8009662:	6025      	str	r5, [r4, #0]
 8009664:	e7de      	b.n	8009624 <_malloc_r+0xa0>
 8009666:	bf00      	nop
 8009668:	200014b4 	.word	0x200014b4

0800966c <_realloc_r>:
 800966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009670:	4680      	mov	r8, r0
 8009672:	4614      	mov	r4, r2
 8009674:	460e      	mov	r6, r1
 8009676:	b921      	cbnz	r1, 8009682 <_realloc_r+0x16>
 8009678:	4611      	mov	r1, r2
 800967a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	f7ff bf81 	b.w	8009584 <_malloc_r>
 8009682:	b92a      	cbnz	r2, 8009690 <_realloc_r+0x24>
 8009684:	f7ff ff16 	bl	80094b4 <_free_r>
 8009688:	4625      	mov	r5, r4
 800968a:	4628      	mov	r0, r5
 800968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009690:	f000 f838 	bl	8009704 <_malloc_usable_size_r>
 8009694:	4284      	cmp	r4, r0
 8009696:	4607      	mov	r7, r0
 8009698:	d802      	bhi.n	80096a0 <_realloc_r+0x34>
 800969a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800969e:	d812      	bhi.n	80096c6 <_realloc_r+0x5a>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4640      	mov	r0, r8
 80096a4:	f7ff ff6e 	bl	8009584 <_malloc_r>
 80096a8:	4605      	mov	r5, r0
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d0ed      	beq.n	800968a <_realloc_r+0x1e>
 80096ae:	42bc      	cmp	r4, r7
 80096b0:	4622      	mov	r2, r4
 80096b2:	4631      	mov	r1, r6
 80096b4:	bf28      	it	cs
 80096b6:	463a      	movcs	r2, r7
 80096b8:	f7ff fed4 	bl	8009464 <memcpy>
 80096bc:	4631      	mov	r1, r6
 80096be:	4640      	mov	r0, r8
 80096c0:	f7ff fef8 	bl	80094b4 <_free_r>
 80096c4:	e7e1      	b.n	800968a <_realloc_r+0x1e>
 80096c6:	4635      	mov	r5, r6
 80096c8:	e7df      	b.n	800968a <_realloc_r+0x1e>
	...

080096cc <_sbrk_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	2300      	movs	r3, #0
 80096d0:	4d05      	ldr	r5, [pc, #20]	; (80096e8 <_sbrk_r+0x1c>)
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	602b      	str	r3, [r5, #0]
 80096d8:	f7f7 f92e 	bl	8000938 <_sbrk>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_sbrk_r+0x1a>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_sbrk_r+0x1a>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	200014bc 	.word	0x200014bc

080096ec <__malloc_lock>:
 80096ec:	4801      	ldr	r0, [pc, #4]	; (80096f4 <__malloc_lock+0x8>)
 80096ee:	f000 b811 	b.w	8009714 <__retarget_lock_acquire_recursive>
 80096f2:	bf00      	nop
 80096f4:	200014c0 	.word	0x200014c0

080096f8 <__malloc_unlock>:
 80096f8:	4801      	ldr	r0, [pc, #4]	; (8009700 <__malloc_unlock+0x8>)
 80096fa:	f000 b80c 	b.w	8009716 <__retarget_lock_release_recursive>
 80096fe:	bf00      	nop
 8009700:	200014c0 	.word	0x200014c0

08009704 <_malloc_usable_size_r>:
 8009704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009708:	1f18      	subs	r0, r3, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfbc      	itt	lt
 800970e:	580b      	ldrlt	r3, [r1, r0]
 8009710:	18c0      	addlt	r0, r0, r3
 8009712:	4770      	bx	lr

08009714 <__retarget_lock_acquire_recursive>:
 8009714:	4770      	bx	lr

08009716 <__retarget_lock_release_recursive>:
 8009716:	4770      	bx	lr

08009718 <_init>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	bf00      	nop
 800971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971e:	bc08      	pop	{r3}
 8009720:	469e      	mov	lr, r3
 8009722:	4770      	bx	lr

08009724 <_fini>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr
