
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009824  08009824  00019824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098ec  080098ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098f4  080098f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098f4  080098f4  000198f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098f8  080098f8  000198f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080098fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d4  200001e0  08009adc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  08009adc  000214b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013843  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337f  00000000  00000000  00033a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00036dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00037f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702f  00000000  00000000  00038f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001610d  00000000  00000000  0004ff7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e982  00000000  00000000  0006608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4a0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  000e4a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800980c 	.word	0x0800980c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	0800980c 	.word	0x0800980c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0c2      	sub	sp, #264	; 0x108
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fb4e 	bl	8000b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f861 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f93d 	bl	8000720 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f8af 	bl	8000608 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8db 	bl	8000664 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f008 f851 	bl	8008554 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80004b2:	f000 f90b 	bl	80006cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* initialize the LoRa chip */
  LoRa_Init(&hspi1);
 80004b6:	4826      	ldr	r0, [pc, #152]	; (8000550 <main+0xbc>)
 80004b8:	f007 ff78 	bl	80083ac <LoRa_Init>

  /* Send a status message to USB port */
  uint8_t buffer[256];
  sprintf((char *)buffer, "Entering transmit loop\r\n");
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	4925      	ldr	r1, [pc, #148]	; (8000554 <main+0xc0>)
 80004c0:	4618      	mov	r0, r3
 80004c2:	f008 fd29 	bl	8008f18 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe57 	bl	800017c <strlen>
 80004ce:	4603      	mov	r3, r0
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4611      	mov	r1, r2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f008 f8fa 	bl	80086d0 <CDC_Transmit_FS>

  int count = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 80004e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80004e6:	3301      	adds	r3, #1
 80004e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  sprintf((char *)buffer, "Count = %d", count);
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80004f2:	4919      	ldr	r1, [pc, #100]	; (8000558 <main+0xc4>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f008 fd0f 	bl	8008f18 <siprintf>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); /* Turn on the LED */
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000500:	4816      	ldr	r0, [pc, #88]	; (800055c <main+0xc8>)
 8000502:	f000 fe50 	bl	80011a6 <HAL_GPIO_WritePin>
//	  LoRaTransmit(buffer, strlen((char *)buffer));
	  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff fe37 	bl	800017c <strlen>
 800050e:	4603      	mov	r3, r0
 8000510:	b29a      	uxth	r2, r3
 8000512:	1d39      	adds	r1, r7, #4
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	4812      	ldr	r0, [pc, #72]	; (8000560 <main+0xcc>)
 8000518:	f003 fc99 	bl	8003e4e <HAL_UART_Transmit>
	  HAL_Delay(500);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f000 fb7a 	bl	8000c18 <HAL_Delay>
	  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off the LED */
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <main+0xc8>)
 800052c:	f000 fe3b 	bl	80011a6 <HAL_GPIO_WritePin>
//	  LoRaReceive(buffer, 0); /* go to receive mode with timeout = 0 (wait forever for one message) */
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe22 	bl	800017c <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f008 f8c5 	bl	80086d0 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054a:	f000 fb65 	bl	8000c18 <HAL_Delay>
	  count++;
 800054e:	e7c8      	b.n	80004e2 <main+0x4e>
 8000550:	20000250 	.word	0x20000250
 8000554:	08009824 	.word	0x08009824
 8000558:	08009840 	.word	0x08009840
 800055c:	40020800 	.word	0x40020800
 8000560:	200002a8 	.word	0x200002a8

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b092      	sub	sp, #72	; 0x48
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2234      	movs	r2, #52	; 0x34
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f008 fcc8 	bl	8008f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xa0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <SystemClock_Config+0xa0>)
 8000590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000594:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000596:	2303      	movs	r3, #3
 8000598:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	2301      	movs	r3, #1
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	2310      	movs	r3, #16
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fb79 	bl	8002cb8 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005cc:	f000 f922 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fe94 	bl	8003318 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f6:	f000 f90d 	bl	8000814 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3748      	adds	r7, #72	; 0x48
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40007000 	.word	0x40007000

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f000 fdc7 	bl	80011d8 <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f8e0 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200001fc 	.word	0x200001fc
 800065c:	40005400 	.word	0x40005400
 8000660:	000186a0 	.word	0x000186a0

08000664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_SPI1_Init+0x60>)
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_SPI1_Init+0x64>)
 800066c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_SPI1_Init+0x60>)
 8000670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_SPI1_Init+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_SPI1_Init+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_SPI1_Init+0x60>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_SPI1_Init+0x60>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_SPI1_Init+0x60>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_SPI1_Init+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SPI1_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_SPI1_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_SPI1_Init+0x60>)
 80006aa:	220a      	movs	r2, #10
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_SPI1_Init+0x60>)
 80006b0:	f003 f8f6 	bl	80038a0 <HAL_SPI_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80006ba:	f000 f8ab 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000250 	.word	0x20000250
 80006c8:	40013000 	.word	0x40013000

080006cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART3_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART3_UART_Init+0x4c>)
 8000704:	f003 fb4e 	bl	8003da4 <HAL_HalfDuplex_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f881 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200002a8 	.word	0x200002a8
 800071c:	40004800 	.word	0x40004800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_GPIO_Init+0xe8>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a33      	ldr	r2, [pc, #204]	; (8000808 <MX_GPIO_Init+0xe8>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <MX_GPIO_Init+0xe8>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_GPIO_Init+0xe8>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a2d      	ldr	r2, [pc, #180]	; (8000808 <MX_GPIO_Init+0xe8>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_GPIO_Init+0xe8>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_GPIO_Init+0xe8>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a27      	ldr	r2, [pc, #156]	; (8000808 <MX_GPIO_Init+0xe8>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <MX_GPIO_Init+0xe8>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_GPIO_Init+0xe8>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a21      	ldr	r2, [pc, #132]	; (8000808 <MX_GPIO_Init+0xe8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_GPIO_Init+0xe8>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	481b      	ldr	r0, [pc, #108]	; (800080c <MX_GPIO_Init+0xec>)
 800079e:	f000 fd02 	bl	80011a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2111      	movs	r1, #17
 80007a6:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_GPIO_Init+0xf0>)
 80007a8:	f000 fcfd 	bl	80011a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_GPIO_Init+0xec>)
 80007c6:	f000 fb57 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin;
 80007ca:	2311      	movs	r3, #17
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <MX_GPIO_Init+0xf0>)
 80007e2:	f000 fb49 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 80007e6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_GPIO_Init+0xf0>)
 80007fc:	f000 fb3c 	bl	8000e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_MspInit+0x58>)
 8000828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <HAL_MspInit+0x58>)
 800082c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000830:	6253      	str	r3, [r2, #36]	; 0x24
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_MspInit+0x58>)
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_MspInit+0x58>)
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_MspInit+0x58>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6213      	str	r3, [r2, #32]
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_MspInit+0x58>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_MspInit+0x58>)
 8000858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_MspInit+0x58>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6253      	str	r3, [r2, #36]	; 0x24
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_MspInit+0x58>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <HAL_I2C_MspInit+0x7c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d127      	bne.n	80008ee <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_I2C_MspInit+0x80>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <HAL_I2C_MspInit+0x80>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_I2C_MspInit+0x80>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008b6:	23c0      	movs	r3, #192	; 0xc0
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ba:	2312      	movs	r3, #18
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c6:	2304      	movs	r3, #4
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <HAL_I2C_MspInit+0x84>)
 80008d2:	f000 fad1 	bl	8000e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_I2C_MspInit+0x80>)
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_I2C_MspInit+0x80>)
 80008dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e0:	6253      	str	r3, [r2, #36]	; 0x24
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_I2C_MspInit+0x80>)
 80008e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40005400 	.word	0x40005400
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_SPI_MspInit+0x7c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d127      	bne.n	8000976 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_SPI_MspInit+0x80>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <HAL_SPI_MspInit+0x80>)
 800092c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000930:	6213      	str	r3, [r2, #32]
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_SPI_MspInit+0x80>)
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_SPI_MspInit+0x80>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_SPI_MspInit+0x80>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_SPI_MspInit+0x80>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000956:	23e0      	movs	r3, #224	; 0xe0
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000966:	2305      	movs	r3, #5
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <HAL_SPI_MspInit+0x84>)
 8000972:	f000 fa81 	bl	8000e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40013000 	.word	0x40013000
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x7c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d128      	bne.n	8000a00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	6253      	str	r3, [r2, #36]	; 0x24
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = OneWire_Pin;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	2312      	movs	r3, #18
 80009e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009f0:	2307      	movs	r3, #7
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OneWire_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009fc:	f000 fa3c 	bl	8000e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40004800 	.word	0x40004800
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 f8c1 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <USB_LP_IRQHandler+0x10>)
 8000a6a:	f000 fdfd 	bl	8001668 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000f98 	.word	0x20000f98

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f008 fa04 	bl	8008eb4 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20002800 	.word	0x20002800
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	200002ec 	.word	0x200002ec
 8000ae0:	200014b8 	.word	0x200014b8

08000ae4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffe5 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f008 f9d1 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fcb9 	bl	8000494 <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000b2c:	080098fc 	.word	0x080098fc
  ldr r2, =_sbss
 8000b30:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000b34:	200014b4 	.word	0x200014b4

08000b38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_IRQHandler>

08000b3a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f955 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f80e 	bl	8000b6c <HAL_InitTick>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	e001      	b.n	8000b60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5c:	f7ff fe60 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_InitTick+0x68>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d022      	beq.n	8000bc6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_InitTick+0x68>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f962 	bl	8000e5e <HAL_SYSTICK_Config>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10f      	bne.n	8000bc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	d809      	bhi.n	8000bba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	f04f 30ff 	mov.w	r0, #4294967295
 8000bae:	f000 f92c 	bl	8000e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_InitTick+0x70>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e007      	b.n	8000bca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e004      	b.n	8000bca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e001      	b.n	8000bca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x1c>)
 8000bf0:	6013      	str	r3, [r2, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200002f0 	.word	0x200002f0
 8000c00:	20000008 	.word	0x20000008

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	200002f0 	.word	0x200002f0

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d004      	beq.n	8000c3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_Delay+0x40>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3c:	bf00      	nop
 8000c3e:	f7ff ffe1 	bl	8000c04 <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d8f7      	bhi.n	8000c3e <HAL_Delay+0x26>
  {
  }
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000008 	.word	0x20000008

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4906      	ldr	r1, [pc, #24]	; (8000cf4 <__NVIC_EnableIRQ+0x34>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff90 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff2d 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff42 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff90 	bl	8000d4c <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5f 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff35 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e8e:	e154      	b.n	800113a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8146 	beq.w	8001134 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d130      	bne.n	8000f22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	f003 0201 	and.w	r2, r3, #1
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d017      	beq.n	8000f5e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d123      	bne.n	8000fb2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	6939      	ldr	r1, [r7, #16]
 8000fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0203 	and.w	r2, r3, #3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80a0 	beq.w	8001134 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff4:	4b58      	ldr	r3, [pc, #352]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a57      	ldr	r2, [pc, #348]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	4b55      	ldr	r3, [pc, #340]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800100c:	4a53      	ldr	r2, [pc, #332]	; (800115c <HAL_GPIO_Init+0x2e4>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_GPIO_Init+0x2e8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d019      	beq.n	800106c <HAL_GPIO_Init+0x1f4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a4a      	ldr	r2, [pc, #296]	; (8001164 <HAL_GPIO_Init+0x2ec>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d013      	beq.n	8001068 <HAL_GPIO_Init+0x1f0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a49      	ldr	r2, [pc, #292]	; (8001168 <HAL_GPIO_Init+0x2f0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d00d      	beq.n	8001064 <HAL_GPIO_Init+0x1ec>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a48      	ldr	r2, [pc, #288]	; (800116c <HAL_GPIO_Init+0x2f4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0x1e8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a47      	ldr	r2, [pc, #284]	; (8001170 <HAL_GPIO_Init+0x2f8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d101      	bne.n	800105c <HAL_GPIO_Init+0x1e4>
 8001058:	2304      	movs	r3, #4
 800105a:	e008      	b.n	800106e <HAL_GPIO_Init+0x1f6>
 800105c:	2305      	movs	r3, #5
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x1f6>
 8001060:	2303      	movs	r3, #3
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x1f6>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x1f6>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x1f6>
 800106c:	2300      	movs	r3, #0
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800107e:	4937      	ldr	r1, [pc, #220]	; (800115c <HAL_GPIO_Init+0x2e4>)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b0:	4a30      	ldr	r2, [pc, #192]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010da:	4a26      	ldr	r2, [pc, #152]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	f47f aea3 	bne.w	8000e90 <HAL_GPIO_Init+0x18>
  }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40010000 	.word	0x40010000
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e001      	b.n	800119a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]
 80011b2:	4613      	mov	r3, r2
 80011b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b6:	787b      	ldrb	r3, [r7, #1]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011bc:	887a      	ldrh	r2, [r7, #2]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80011c2:	e003      	b.n	80011cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	041a      	lsls	r2, r3, #16
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e12b      	b.n	8001442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fb3c 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2224      	movs	r2, #36	; 0x24
 8001208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800122a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800123c:	f002 faa8 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 8001240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a81      	ldr	r2, [pc, #516]	; (800144c <HAL_I2C_Init+0x274>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d807      	bhi.n	800125c <HAL_I2C_Init+0x84>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4a80      	ldr	r2, [pc, #512]	; (8001450 <HAL_I2C_Init+0x278>)
 8001250:	4293      	cmp	r3, r2
 8001252:	bf94      	ite	ls
 8001254:	2301      	movls	r3, #1
 8001256:	2300      	movhi	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	e006      	b.n	800126a <HAL_I2C_Init+0x92>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4a7d      	ldr	r2, [pc, #500]	; (8001454 <HAL_I2C_Init+0x27c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	bf94      	ite	ls
 8001264:	2301      	movls	r3, #1
 8001266:	2300      	movhi	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e0e7      	b.n	8001442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4a78      	ldr	r2, [pc, #480]	; (8001458 <HAL_I2C_Init+0x280>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9b      	lsrs	r3, r3, #18
 800127c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4a6a      	ldr	r2, [pc, #424]	; (800144c <HAL_I2C_Init+0x274>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d802      	bhi.n	80012ac <HAL_I2C_Init+0xd4>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3301      	adds	r3, #1
 80012aa:	e009      	b.n	80012c0 <HAL_I2C_Init+0xe8>
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	4a69      	ldr	r2, [pc, #420]	; (800145c <HAL_I2C_Init+0x284>)
 80012b8:	fba2 2303 	umull	r2, r3, r2, r3
 80012bc:	099b      	lsrs	r3, r3, #6
 80012be:	3301      	adds	r3, #1
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	495c      	ldr	r1, [pc, #368]	; (800144c <HAL_I2C_Init+0x274>)
 80012dc:	428b      	cmp	r3, r1
 80012de:	d819      	bhi.n	8001314 <HAL_I2C_Init+0x13c>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	1e59      	subs	r1, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ee:	1c59      	adds	r1, r3, #1
 80012f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012f4:	400b      	ands	r3, r1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00a      	beq.n	8001310 <HAL_I2C_Init+0x138>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1e59      	subs	r1, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fbb1 f3f3 	udiv	r3, r1, r3
 8001308:	3301      	adds	r3, #1
 800130a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130e:	e051      	b.n	80013b4 <HAL_I2C_Init+0x1dc>
 8001310:	2304      	movs	r3, #4
 8001312:	e04f      	b.n	80013b4 <HAL_I2C_Init+0x1dc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d111      	bne.n	8001340 <HAL_I2C_Init+0x168>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1e58      	subs	r0, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	fbb0 f3f3 	udiv	r3, r0, r3
 800132e:	3301      	adds	r3, #1
 8001330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	e012      	b.n	8001366 <HAL_I2C_Init+0x18e>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1e58      	subs	r0, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	0099      	lsls	r1, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	fbb0 f3f3 	udiv	r3, r0, r3
 8001356:	3301      	adds	r3, #1
 8001358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_I2C_Init+0x196>
 800136a:	2301      	movs	r3, #1
 800136c:	e022      	b.n	80013b4 <HAL_I2C_Init+0x1dc>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10e      	bne.n	8001394 <HAL_I2C_Init+0x1bc>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1e58      	subs	r0, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6859      	ldr	r1, [r3, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	440b      	add	r3, r1
 8001384:	fbb0 f3f3 	udiv	r3, r0, r3
 8001388:	3301      	adds	r3, #1
 800138a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001392:	e00f      	b.n	80013b4 <HAL_I2C_Init+0x1dc>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1e58      	subs	r0, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	0099      	lsls	r1, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	6809      	ldr	r1, [r1, #0]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6911      	ldr	r1, [r2, #16]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68d2      	ldr	r2, [r2, #12]
 80013ee:	4311      	orrs	r1, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2220      	movs	r2, #32
 800142e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	000186a0 	.word	0x000186a0
 8001450:	001e847f 	.word	0x001e847f
 8001454:	003d08ff 	.word	0x003d08ff
 8001458:	431bde83 	.word	0x431bde83
 800145c:	10624dd3 	.word	0x10624dd3

08001460 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	b08b      	sub	sp, #44	; 0x2c
 8001464:	af06      	add	r7, sp, #24
 8001466:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0d0      	b.n	8001614 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f007 fa74 	bl	8008974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f002 feaf 	bl	80041fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e04c      	b.n	800153e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	3301      	adds	r3, #1
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	b298      	uxth	r0, r3
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	3336      	adds	r3, #54	; 0x36
 80014e2:	4602      	mov	r2, r0
 80014e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	3303      	adds	r3, #3
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	3338      	adds	r3, #56	; 0x38
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	333c      	adds	r3, #60	; 0x3c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	3340      	adds	r3, #64	; 0x40
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	3301      	adds	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3ad      	bcc.n	80014a4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e044      	b.n	80015d8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3b5      	bcc.n	800154e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	687e      	ldr	r6, [r7, #4]
 80015ea:	466d      	mov	r5, sp
 80015ec:	f106 0410 	add.w	r4, r6, #16
 80015f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	602b      	str	r3, [r5, #0]
 80015f8:	1d33      	adds	r3, r6, #4
 80015fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fc:	6838      	ldr	r0, [r7, #0]
 80015fe:	f002 fe17 	bl	8004230 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800161c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_PCD_Start+0x16>
 800162e:	2302      	movs	r3, #2
 8001630:	e016      	b.n	8001660 <HAL_PCD_Start+0x44>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fdc6 	bl	80041d0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001644:	2101      	movs	r1, #1
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f007 f976 	bl	8008938 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f005 faab 	bl	8006bac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f005 faa3 	bl	8006bc0 <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001684:	d102      	bne.n	800168c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 faf5 	bl	8001c76 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f005 fa95 	bl	8006bc0 <USB_ReadInterrupts>
 8001696:	4603      	mov	r3, r0
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a0:	d112      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b4:	b292      	uxth	r2, r2
 80016b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f007 f9d5 	bl	8008a6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8c7 	bl	8001856 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 fa77 	bl	8006bc0 <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016dc:	d10b      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016f0:	b292      	uxth	r2, r2
 80016f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 fa60 	bl	8006bc0 <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170a:	d10b      	bne.n	8001724 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001714:	b29a      	uxth	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800171e:	b292      	uxth	r2, r2
 8001720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f005 fa49 	bl	8006bc0 <USB_ReadInterrupts>
 800172e:	4603      	mov	r3, r0
 8001730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001738:	d126      	bne.n	8001788 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0204 	bic.w	r2, r2, #4
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0208 	bic.w	r2, r2, #8
 8001764:	b292      	uxth	r2, r2
 8001766:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f007 f9b6 	bl	8008adc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001778:	b29a      	uxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001782:	b292      	uxth	r2, r2
 8001784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f005 fa17 	bl	8006bc0 <USB_ReadInterrupts>
 8001792:	4603      	mov	r3, r0
 8001794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800179c:	d126      	bne.n	80017ec <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0208 	orr.w	r2, r2, #8
 80017b0:	b292      	uxth	r2, r2
 80017b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0204 	orr.w	r2, r2, #4
 80017e0:	b292      	uxth	r2, r2
 80017e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f007 f95e 	bl	8008aa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f005 f9e5 	bl	8006bc0 <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001800:	d10e      	bne.n	8001820 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001814:	b292      	uxth	r2, r2
 8001816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f007 f917 	bl	8008a4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f005 f9cb 	bl	8006bc0 <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001834:	d10b      	bne.n	800184e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183e:	b29a      	uxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001848:	b292      	uxth	r2, r2
 800184a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_PCD_SetAddress+0x1a>
 800186c:	2302      	movs	r3, #2
 800186e:	e013      	b.n	8001898 <HAL_PCD_SetAddress+0x42>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f005 f97c 	bl	8006b86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	70fb      	strb	r3, [r7, #3]
 80018b2:	460b      	mov	r3, r1
 80018b4:	803b      	strh	r3, [r7, #0]
 80018b6:	4613      	mov	r3, r2
 80018b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da0e      	bge.n	80018e4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	705a      	strb	r2, [r3, #1]
 80018e2:	e00e      	b.n	8001902 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 0207 	and.w	r2, r3, #7
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800190e:	883a      	ldrh	r2, [r7, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	78ba      	ldrb	r2, [r7, #2]
 8001918:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800192c:	78bb      	ldrb	r3, [r7, #2]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d102      	bne.n	8001938 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_PCD_EP_Open+0xa6>
 8001942:	2302      	movs	r3, #2
 8001944:	e00e      	b.n	8001964 <HAL_PCD_EP_Open+0xc4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fc8b 	bl	8004270 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001962:	7afb      	ldrb	r3, [r7, #11]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800197c:	2b00      	cmp	r3, #0
 800197e:	da0e      	bge.n	800199e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	705a      	strb	r2, [r3, #1]
 800199c:	e00e      	b.n	80019bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f003 0207 	and.w	r2, r3, #7
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_PCD_EP_Close+0x6a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e00e      	b.n	80019f4 <HAL_PCD_EP_Close+0x88>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 ffad 	bl	8004944 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	f003 0207 	and.w	r2, r3, #7
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4413      	add	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a48:	7afb      	ldrb	r3, [r7, #11]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6979      	ldr	r1, [r7, #20]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 f95f 	bl	8004d1c <USB_EPStartXfer>
 8001a5e:	e005      	b.n	8001a6c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6979      	ldr	r1, [r7, #20]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 f958 	bl	8004d1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	f003 0207 	and.w	r2, r3, #7
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a98:	681b      	ldr	r3, [r3, #0]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001af0:	7afb      	ldrb	r3, [r7, #11]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6979      	ldr	r1, [r7, #20]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 f905 	bl	8004d1c <USB_EPStartXfer>
 8001b12:	e005      	b.n	8001b20 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6979      	ldr	r1, [r7, #20]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 f8fe 	bl	8004d1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	f003 0207 	and.w	r2, r3, #7
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d901      	bls.n	8001b48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e03e      	b.n	8001bc6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da0e      	bge.n	8001b6e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	705a      	strb	r2, [r3, #1]
 8001b6c:	e00c      	b.n	8001b88 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_PCD_EP_SetStall+0x7e>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e00e      	b.n	8001bc6 <HAL_PCD_EP_SetStall+0x9c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68f9      	ldr	r1, [r7, #12]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 fee8 	bl	800698c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 020f 	and.w	r2, r3, #15
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d901      	bls.n	8001bec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e040      	b.n	8001c6e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	da0e      	bge.n	8001c12 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	705a      	strb	r2, [r3, #1]
 8001c10:	e00e      	b.n	8001c30 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 0207 	and.w	r2, r3, #7
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_PCD_EP_ClrStall+0x82>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e00e      	b.n	8001c6e <HAL_PCD_EP_ClrStall+0xa0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fee4 	bl	8006a2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b08e      	sub	sp, #56	; 0x38
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c7e:	e2ec      	b.n	800225a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c88:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8161 	bne.w	8001f62 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d152      	bne.n	8001d50 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cba:	81fb      	strh	r3, [r7, #14]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	89fb      	ldrh	r3, [r7, #14]
 8001cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3328      	adds	r3, #40	; 0x28
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	441a      	add	r2, r3
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f006 fe82 	bl	8008a1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 829b 	beq.w	800225a <PCD_EP_ISR_Handler+0x5e4>
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 8296 	bne.w	800225a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	b292      	uxth	r2, r2
 8001d42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d4e:	e284      	b.n	800225a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d034      	beq.n	8001dd4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3306      	adds	r3, #6
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f004 ff5d 	bl	8006c68 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dba:	4013      	ands	r3, r2
 8001dbc:	823b      	strh	r3, [r7, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	8a3a      	ldrh	r2, [r7, #16]
 8001dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f006 fdf7 	bl	80089c0 <HAL_PCD_SetupStageCallback>
 8001dd2:	e242      	b.n	800225a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dd4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f280 823e 	bge.w	800225a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dea:	4013      	ands	r3, r2
 8001dec:	83bb      	strh	r3, [r7, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	8bba      	ldrh	r2, [r7, #28]
 8001df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3306      	adds	r3, #6
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d019      	beq.n	8001e64 <PCD_EP_ISR_Handler+0x1ee>
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d015      	beq.n	8001e64 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	6959      	ldr	r1, [r3, #20]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f004 ff0d 	bl	8006c68 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	441a      	add	r2, r3
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f006 fdc0 	bl	80089e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 81f2 	bne.w	800225a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d112      	bne.n	8001ec4 <PCD_EP_ISR_Handler+0x24e>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	e02f      	b.n	8001f24 <PCD_EP_ISR_Handler+0x2ae>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b3e      	cmp	r3, #62	; 0x3e
 8001eca:	d813      	bhi.n	8001ef4 <PCD_EP_ISR_Handler+0x27e>
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <PCD_EP_ISR_Handler+0x270>
 8001ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	029b      	lsls	r3, r3, #10
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	801a      	strh	r2, [r3, #0]
 8001ef2:	e017      	b.n	8001f24 <PCD_EP_ISR_Handler+0x2ae>
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <PCD_EP_ISR_Handler+0x298>
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	029b      	lsls	r3, r3, #10
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f34:	827b      	strh	r3, [r7, #18]
 8001f36:	8a7b      	ldrh	r3, [r7, #18]
 8001f38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f3c:	827b      	strh	r3, [r7, #18]
 8001f3e:	8a7b      	ldrh	r3, [r7, #18]
 8001f40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f44:	827b      	strh	r3, [r7, #18]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	8a7b      	ldrh	r3, [r7, #18]
 8001f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	8013      	strh	r3, [r2, #0]
 8001f60:	e17b      	b.n	800225a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f74:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f280 80ea 	bge.w	8002152 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f94:	4013      	ands	r3, r2
 8001f96:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fac:	b292      	uxth	r2, r2
 8001fae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fb0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	7b1b      	ldrb	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d122      	bne.n	8002014 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ff8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8087 	beq.w	800210e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	6959      	ldr	r1, [r3, #20]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	88da      	ldrh	r2, [r3, #6]
 800200c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800200e:	f004 fe2b 	bl	8006c68 <USB_ReadPMA>
 8002012:	e07c      	b.n	800210e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	78db      	ldrb	r3, [r3, #3]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d108      	bne.n	800202e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800201c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800201e:	461a      	mov	r2, r3
 8002020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f927 	bl	8002276 <HAL_PCD_EP_DB_Receive>
 8002028:	4603      	mov	r3, r0
 800202a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800202c:	e06f      	b.n	800210e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002048:	847b      	strh	r3, [r7, #34]	; 0x22
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	441a      	add	r2, r3
 8002058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800205a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002066:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800206a:	b29b      	uxth	r3, r3
 800206c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d021      	beq.n	80020cc <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	3302      	adds	r3, #2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	6959      	ldr	r1, [r3, #20]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	891a      	ldrh	r2, [r3, #8]
 80020c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020c6:	f004 fdcf 	bl	8006c68 <USB_ReadPMA>
 80020ca:	e020      	b.n	800210e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	3306      	adds	r3, #6
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	6959      	ldr	r1, [r3, #20]
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	895a      	ldrh	r2, [r3, #10]
 8002108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800210a:	f004 fdad 	bl	8006c68 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002114:	441a      	add	r2, r3
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002120:	441a      	add	r2, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <PCD_EP_ISR_Handler+0x4c2>
 800212e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d206      	bcs.n	8002146 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f006 fc50 	bl	80089e4 <HAL_PCD_DataOutStageCallback>
 8002144:	e005      	b.n	8002152 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fde5 	bl	8004d1c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002152:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d07e      	beq.n	800225a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800215c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	843b      	strh	r3, [r7, #32]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	441a      	add	r2, r3
 800219a:	8c3b      	ldrh	r3, [r7, #32]
 800219c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	78db      	ldrb	r3, [r3, #3]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d00c      	beq.n	80021ca <PCD_EP_ISR_Handler+0x554>
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	78db      	ldrb	r3, [r3, #3]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d146      	bne.n	800224e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d141      	bne.n	800224e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	3302      	adds	r3, #2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	8bfb      	ldrh	r3, [r7, #30]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d906      	bls.n	800220c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	8bfb      	ldrh	r3, [r7, #30]
 8002204:	1ad2      	subs	r2, r2, r3
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	619a      	str	r2, [r3, #24]
 800220a:	e002      	b.n	8002212 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f006 fbfa 	bl	8008a1a <HAL_PCD_DataInStageCallback>
 8002226:	e018      	b.n	800225a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	8bfb      	ldrh	r3, [r7, #30]
 800222e:	441a      	add	r2, r3
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	8bfb      	ldrh	r3, [r7, #30]
 800223a:	441a      	add	r2, r3
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002246:	4618      	mov	r0, r3
 8002248:	f002 fd68 	bl	8004d1c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800224c:	e005      	b.n	800225a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800224e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002250:	461a      	mov	r2, r3
 8002252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f91b 	bl	8002490 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002262:	b29b      	uxth	r3, r3
 8002264:	b21b      	sxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	f6ff ad0a 	blt.w	8001c80 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3738      	adds	r7, #56	; 0x38
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b088      	sub	sp, #32
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	4613      	mov	r3, r2
 8002282:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d07e      	beq.n	800238c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	3302      	adds	r3, #2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	8b7b      	ldrh	r3, [r7, #26]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d306      	bcc.n	80022d0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	8b7b      	ldrh	r3, [r7, #26]
 80022c8:	1ad2      	subs	r2, r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	619a      	str	r2, [r3, #24]
 80022ce:	e002      	b.n	80022d6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d123      	bne.n	8002326 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f8:	833b      	strh	r3, [r7, #24]
 80022fa:	8b3b      	ldrh	r3, [r7, #24]
 80022fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002300:	833b      	strh	r3, [r7, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	441a      	add	r2, r3
 8002310:	8b3b      	ldrh	r3, [r7, #24]
 8002312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002322:	b29b      	uxth	r3, r3
 8002324:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01f      	beq.n	8002370 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234a:	82fb      	strh	r3, [r7, #22]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	8afb      	ldrh	r3, [r7, #22]
 800235c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800236c:	b29b      	uxth	r3, r3
 800236e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002370:	8b7b      	ldrh	r3, [r7, #26]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8087 	beq.w	8002486 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6959      	ldr	r1, [r3, #20]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	891a      	ldrh	r2, [r3, #8]
 8002384:	8b7b      	ldrh	r3, [r7, #26]
 8002386:	f004 fc6f 	bl	8006c68 <USB_ReadPMA>
 800238a:	e07c      	b.n	8002486 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	3306      	adds	r3, #6
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	8b7b      	ldrh	r3, [r7, #26]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d306      	bcc.n	80023ce <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	8b7b      	ldrh	r3, [r7, #26]
 80023c6:	1ad2      	subs	r2, r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	619a      	str	r2, [r3, #24]
 80023cc:	e002      	b.n	80023d4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d123      	bne.n	8002424 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f6:	83fb      	strh	r3, [r7, #30]
 80023f8:	8bfb      	ldrh	r3, [r7, #30]
 80023fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023fe:	83fb      	strh	r3, [r7, #30]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	8bfb      	ldrh	r3, [r7, #30]
 8002410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002420:	b29b      	uxth	r3, r3
 8002422:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d11f      	bne.n	800246e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002448:	83bb      	strh	r3, [r7, #28]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	441a      	add	r2, r3
 8002458:	8bbb      	ldrh	r3, [r7, #28]
 800245a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800245e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800246a:	b29b      	uxth	r3, r3
 800246c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800246e:	8b7b      	ldrh	r3, [r7, #26]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	6959      	ldr	r1, [r3, #20]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	895a      	ldrh	r2, [r3, #10]
 8002480:	8b7b      	ldrh	r3, [r7, #26]
 8002482:	f004 fbf1 	bl	8006c68 <USB_ReadPMA>
    }
  }

  return count;
 8002486:	8b7b      	ldrh	r3, [r7, #26]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3720      	adds	r7, #32
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b0a2      	sub	sp, #136	; 0x88
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 81c7 	beq.w	8002838 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	3302      	adds	r3, #2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024de:	429a      	cmp	r2, r3
 80024e0:	d907      	bls.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	619a      	str	r2, [r3, #24]
 80024f0:	e002      	b.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 80b9 	bne.w	8002674 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d126      	bne.n	8002558 <HAL_PCD_EP_DB_Transmit+0xc8>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	4413      	add	r3, r2
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	011a      	lsls	r2, r3, #4
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	4413      	add	r3, r2
 800252c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800253c:	b29a      	uxth	r2, r3
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002550:	b29a      	uxth	r2, r3
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	801a      	strh	r2, [r3, #0]
 8002556:	e01a      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d116      	bne.n	800258e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	4413      	add	r3, r2
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	011a      	lsls	r2, r3, #4
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	4413      	add	r3, r2
 8002582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	2200      	movs	r2, #0
 800258c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	623b      	str	r3, [r7, #32]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d126      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x15a>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4413      	add	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	011a      	lsls	r2, r3, #4
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e017      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x18a>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d113      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x18a>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	4413      	add	r3, r2
 8002602:	623b      	str	r3, [r7, #32]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	011a      	lsls	r2, r3, #4
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	4413      	add	r3, r2
 800260e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f006 f9fa 	bl	8008a1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 82d4 	beq.w	8002bda <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	827b      	strh	r3, [r7, #18]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	441a      	add	r2, r3
 800265c:	8a7b      	ldrh	r3, [r7, #18]
 800265e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	b29b      	uxth	r3, r3
 8002670:	8013      	strh	r3, [r2, #0]
 8002672:	e2b2      	b.n	8002bda <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d021      	beq.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	441a      	add	r2, r3
 80026aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80026ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026be:	b29b      	uxth	r3, r3
 80026c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	f040 8286 	bne.w	8002bda <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d6:	441a      	add	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e4:	441a      	add	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d309      	bcc.n	800270a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002702:	1ad2      	subs	r2, r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	621a      	str	r2, [r3, #32]
 8002708:	e015      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002716:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002720:	e009      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d155      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x35a>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274c:	b29b      	uxth	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	4413      	add	r3, r2
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	011a      	lsls	r2, r3, #4
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	4413      	add	r3, r2
 8002760:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
 8002766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002768:	2b00      	cmp	r3, #0
 800276a:	d112      	bne.n	8002792 <HAL_PCD_EP_DB_Transmit+0x302>
 800276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002776:	b29a      	uxth	r2, r3
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278a:	b29a      	uxth	r2, r3
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	e047      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x392>
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002794:	2b3e      	cmp	r3, #62	; 0x3e
 8002796:	d811      	bhi.n	80027bc <HAL_PCD_EP_DB_Transmit+0x32c>
 8002798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	64bb      	str	r3, [r7, #72]	; 0x48
 800279e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_PCD_EP_DB_Transmit+0x31e>
 80027a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027aa:	3301      	adds	r3, #1
 80027ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	e032      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x392>
 80027bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x342>
 80027cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ce:	3b01      	subs	r3, #1
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	b29b      	uxth	r3, r3
 80027da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e01b      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x392>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d117      	bne.n	8002822 <HAL_PCD_EP_DB_Transmit+0x392>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	643b      	str	r3, [r7, #64]	; 0x40
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002800:	b29b      	uxth	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	4413      	add	r3, r2
 8002808:	643b      	str	r3, [r7, #64]	; 0x40
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	011a      	lsls	r2, r3, #4
 8002810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002812:	4413      	add	r3, r2
 8002814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281c:	b29a      	uxth	r2, r3
 800281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002820:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6959      	ldr	r1, [r3, #20]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	891a      	ldrh	r2, [r3, #8]
 800282e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	f004 f9d4 	bl	8006bde <USB_WritePMA>
 8002836:	e1d0      	b.n	8002bda <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002840:	b29b      	uxth	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	3306      	adds	r3, #6
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002860:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	429a      	cmp	r2, r3
 800286e:	d307      	bcc.n	8002880 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	619a      	str	r2, [r3, #24]
 800287e:	e002      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 80c4 	bne.w	8002a18 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d126      	bne.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x456>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	4413      	add	r3, r2
 80028ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	011a      	lsls	r2, r3, #4
 80028b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b8:	4413      	add	r3, r2
 80028ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028be:	66bb      	str	r3, [r7, #104]	; 0x68
 80028c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ce:	801a      	strh	r2, [r3, #0]
 80028d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028de:	b29a      	uxth	r2, r3
 80028e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e2:	801a      	strh	r2, [r3, #0]
 80028e4:	e01a      	b.n	800291c <HAL_PCD_EP_DB_Transmit+0x48c>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d116      	bne.n	800291c <HAL_PCD_EP_DB_Transmit+0x48c>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	677b      	str	r3, [r7, #116]	; 0x74
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002902:	4413      	add	r3, r2
 8002904:	677b      	str	r3, [r7, #116]	; 0x74
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	011a      	lsls	r2, r3, #4
 800290c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800290e:	4413      	add	r3, r2
 8002910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002914:	673b      	str	r3, [r7, #112]	; 0x70
 8002916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002918:	2200      	movs	r2, #0
 800291a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	67bb      	str	r3, [r7, #120]	; 0x78
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d12f      	bne.n	800298a <HAL_PCD_EP_DB_Transmit+0x4fa>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800293a:	b29b      	uxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002942:	4413      	add	r3, r2
 8002944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	011a      	lsls	r2, r3, #4
 800294e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002952:	4413      	add	r3, r2
 8002954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800295c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002968:	b29a      	uxth	r2, r3
 800296a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002980:	b29a      	uxth	r2, r3
 8002982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002986:	801a      	strh	r2, [r3, #0]
 8002988:	e017      	b.n	80029ba <HAL_PCD_EP_DB_Transmit+0x52a>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d113      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0x52a>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a0:	4413      	add	r3, r2
 80029a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	011a      	lsls	r2, r3, #4
 80029aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ac:	4413      	add	r3, r2
 80029ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029b6:	2200      	movs	r2, #0
 80029b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f006 f82a 	bl	8008a1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 8104 	bne.w	8002bda <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	8013      	strh	r3, [r2, #0]
 8002a16:	e0e0      	b.n	8002bda <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d121      	bne.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f040 80b4 	bne.w	8002bda <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a7a:	441a      	add	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a88:	441a      	add	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d309      	bcc.n	8002aae <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa6:	1ad2      	subs	r2, r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	621a      	str	r2, [r3, #32]
 8002aac:	e015      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002ab6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ac4:	e009      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	667b      	str	r3, [r7, #100]	; 0x64
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d155      	bne.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x704>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afc:	4413      	add	r3, r2
 8002afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	011a      	lsls	r2, r3, #4
 8002b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b08:	4413      	add	r3, r2
 8002b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d112      	bne.n	8002b3c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b38:	801a      	strh	r2, [r3, #0]
 8002b3a:	e044      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b40:	d811      	bhi.n	8002b66 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	657b      	str	r3, [r7, #84]	; 0x54
 8002b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b54:	3301      	adds	r3, #1
 8002b56:	657b      	str	r3, [r7, #84]	; 0x54
 8002b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	029b      	lsls	r3, r3, #10
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b62:	801a      	strh	r2, [r3, #0]
 8002b64:	e02f      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	029b      	lsls	r3, r3, #10
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	e018      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d114      	bne.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002baa:	4413      	add	r3, r2
 8002bac:	667b      	str	r3, [r7, #100]	; 0x64
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	011a      	lsls	r2, r3, #4
 8002bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6959      	ldr	r1, [r3, #20]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	895a      	ldrh	r2, [r3, #10]
 8002bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f004 f802 	bl	8006bde <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf4:	823b      	strh	r3, [r7, #16]
 8002bf6:	8a3b      	ldrh	r3, [r7, #16]
 8002bf8:	f083 0310 	eor.w	r3, r3, #16
 8002bfc:	823b      	strh	r3, [r7, #16]
 8002bfe:	8a3b      	ldrh	r3, [r7, #16]
 8002c00:	f083 0320 	eor.w	r3, r3, #32
 8002c04:	823b      	strh	r3, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	441a      	add	r2, r3
 8002c14:	8a3b      	ldrh	r3, [r7, #16]
 8002c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3788      	adds	r7, #136	; 0x88
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	817b      	strh	r3, [r7, #10]
 8002c42:	4613      	mov	r3, r2
 8002c44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e009      	b.n	8002c7e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c6a:	897a      	ldrh	r2, [r7, #10]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c7e:	893b      	ldrh	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	80da      	strh	r2, [r3, #6]
 8002c92:	e00b      	b.n	8002cac <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2201      	movs	r2, #1
 8002c98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e31d      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cca:	4b94      	ldr	r3, [pc, #592]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd4:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d07b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d006      	beq.n	8002cfe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d10f      	bne.n	8002d16 <HAL_RCC_OscConfig+0x5e>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d10b      	bne.n	8002d16 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfe:	4b87      	ldr	r3, [pc, #540]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d06a      	beq.n	8002de0 <HAL_RCC_OscConfig+0x128>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d166      	bne.n	8002de0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e2f7      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCC_OscConfig+0x74>
 8002d1e:	4b7f      	ldr	r3, [pc, #508]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7e      	ldr	r2, [pc, #504]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e02d      	b.n	8002d88 <HAL_RCC_OscConfig+0xd0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10c      	bne.n	8002d4e <HAL_RCC_OscConfig+0x96>
 8002d34:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a78      	ldr	r2, [pc, #480]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	e01c      	b.n	8002d88 <HAL_RCC_OscConfig+0xd0>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0xb8>
 8002d56:	4b71      	ldr	r3, [pc, #452]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a70      	ldr	r2, [pc, #448]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b6e      	ldr	r3, [pc, #440]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6d      	ldr	r2, [pc, #436]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0xd0>
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a69      	ldr	r2, [pc, #420]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a66      	ldr	r2, [pc, #408]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fd ff38 	bl	8000c04 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fd ff34 	bl	8000c04 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e2ad      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0xe0>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fd ff24 	bl	8000c04 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fd ff20 	bl	8000c04 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e299      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dd2:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x108>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d05a      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d119      	bne.n	8002e2e <HAL_RCC_OscConfig+0x176>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e00:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x160>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e276      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	493d      	ldr	r1, [pc, #244]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2c:	e03a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d020      	beq.n	8002e78 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_RCC_OscConfig+0x268>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd fee2 	bl	8000c04 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fd fede 	bl	8000c04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e257      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	492a      	ldr	r1, [pc, #168]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
 8002e76:	e015      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_OscConfig+0x268>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fd fec1 	bl	8000c04 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fd febd 	bl	8000c04 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e236      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e98:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80b8 	beq.w	8003022 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d170      	bne.n	8002f9a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x218>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e21a      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1a      	ldr	r2, [r3, #32]
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d921      	bls.n	8002f24 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fc7b 	bl	80037e0 <RCC_SetFlashLatencyFromMSIRange>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e208      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4906      	ldr	r1, [pc, #24]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	4901      	ldr	r1, [pc, #4]	; (8002f1c <HAL_RCC_OscConfig+0x264>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
 8002f1a:	e020      	b.n	8002f5e <HAL_RCC_OscConfig+0x2a6>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4996      	ldr	r1, [pc, #600]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f36:	4b95      	ldr	r3, [pc, #596]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	4991      	ldr	r1, [pc, #580]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fc46 	bl	80037e0 <RCC_SetFlashLatencyFromMSIRange>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1d3      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	0b5b      	lsrs	r3, r3, #13
 8002f64:	3301      	adds	r3, #1
 8002f66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002f70:	6892      	ldr	r2, [r2, #8]
 8002f72:	0912      	lsrs	r2, r2, #4
 8002f74:	f002 020f 	and.w	r2, r2, #15
 8002f78:	4985      	ldr	r1, [pc, #532]	; (8003190 <HAL_RCC_OscConfig+0x4d8>)
 8002f7a:	5c8a      	ldrb	r2, [r1, r2]
 8002f7c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f7e:	4a85      	ldr	r2, [pc, #532]	; (8003194 <HAL_RCC_OscConfig+0x4dc>)
 8002f80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f82:	4b85      	ldr	r3, [pc, #532]	; (8003198 <HAL_RCC_OscConfig+0x4e0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fdf0 	bl	8000b6c <HAL_InitTick>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d045      	beq.n	8003022 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	e1b5      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d029      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fa2:	4b7e      	ldr	r3, [pc, #504]	; (800319c <HAL_RCC_OscConfig+0x4e4>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fe2c 	bl	8000c04 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fb0:	f7fd fe28 	bl	8000c04 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1a1      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc2:	4b72      	ldr	r3, [pc, #456]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fce:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	496c      	ldr	r1, [pc, #432]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	4967      	ldr	r1, [pc, #412]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
 8002ff4:	e015      	b.n	8003022 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ff6:	4b69      	ldr	r3, [pc, #420]	; (800319c <HAL_RCC_OscConfig+0x4e4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fd fe02 	bl	8000c04 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003004:	f7fd fdfe 	bl	8000c04 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e177      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003016:	4b5d      	ldr	r3, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d030      	beq.n	8003090 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003036:	4b5a      	ldr	r3, [pc, #360]	; (80031a0 <HAL_RCC_OscConfig+0x4e8>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303c:	f7fd fde2 	bl	8000c04 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003044:	f7fd fdde 	bl	8000c04 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e157      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003056:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x38c>
 8003062:	e015      	b.n	8003090 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003064:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7fd fdcb 	bl	8000c04 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003072:	f7fd fdc7 	bl	8000c04 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e140      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003084:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80b5 	beq.w	8003208 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a2:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10d      	bne.n	80030ca <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	4b37      	ldr	r3, [pc, #220]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	4a36      	ldr	r2, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6253      	str	r3, [r2, #36]	; 0x24
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_RCC_OscConfig+0x4ec>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_RCC_OscConfig+0x4ec>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <HAL_RCC_OscConfig+0x4ec>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7fd fd8f 	bl	8000c04 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fd fd8b 	bl	8000c04 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b64      	cmp	r3, #100	; 0x64
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e104      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCC_OscConfig+0x4ec>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x466>
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311a:	6353      	str	r3, [r2, #52]	; 0x34
 800311c:	e02d      	b.n	800317a <HAL_RCC_OscConfig+0x4c2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x488>
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 800312c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003130:	6353      	str	r3, [r2, #52]	; 0x34
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800313c:	6353      	str	r3, [r2, #52]	; 0x34
 800313e:	e01c      	b.n	800317a <HAL_RCC_OscConfig+0x4c2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x4aa>
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	4a0f      	ldr	r2, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 800314e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003152:	6353      	str	r3, [r2, #52]	; 0x34
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315e:	6353      	str	r3, [r2, #52]	; 0x34
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0x4c2>
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800316c:	6353      	str	r3, [r2, #52]	; 0x34
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	4a06      	ldr	r2, [pc, #24]	; (800318c <HAL_RCC_OscConfig+0x4d4>)
 8003174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003178:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d024      	beq.n	80031cc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003182:	f7fd fd3f 	bl	8000c04 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003188:	e019      	b.n	80031be <HAL_RCC_OscConfig+0x506>
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	080098a0 	.word	0x080098a0
 8003194:	20000000 	.word	0x20000000
 8003198:	20000004 	.word	0x20000004
 800319c:	42470020 	.word	0x42470020
 80031a0:	42470680 	.word	0x42470680
 80031a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fd fd2c 	bl	8000c04 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e0a3      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0ee      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4f0>
 80031ca:	e014      	b.n	80031f6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031cc:	f7fd fd1a 	bl	8000c04 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fd fd16 	bl	8000c04 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e08d      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031ea:	4b49      	ldr	r3, [pc, #292]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 80031ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ee      	bne.n	80031d4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fc:	4b44      	ldr	r3, [pc, #272]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	4a43      	ldr	r2, [pc, #268]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 8003202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003206:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d079      	beq.n	8003304 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d056      	beq.n	80032c4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b02      	cmp	r3, #2
 800321c:	d13b      	bne.n	8003296 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_OscConfig+0x65c>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fd fcee 	bl	8000c04 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322c:	f7fd fcea 	bl	8000c04 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e063      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800323e:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	4319      	orrs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	430b      	orrs	r3, r1
 8003262:	492b      	ldr	r1, [pc, #172]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCC_OscConfig+0x65c>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fd fcc9 	bl	8000c04 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003276:	f7fd fcc5 	bl	8000c04 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e03e      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x5be>
 8003294:	e036      	b.n	8003304 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <HAL_RCC_OscConfig+0x65c>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fd fcb2 	bl	8000c04 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fd fcae 	bl	8000c04 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e027      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5ec>
 80032c2:	e01f      	b.n	8003304 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e01a      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCC_OscConfig+0x658>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d10d      	bne.n	8003300 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d106      	bne.n	8003300 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	42470060 	.word	0x42470060

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e11a      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b8f      	ldr	r3, [pc, #572]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d919      	bls.n	800336e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <HAL_RCC_ClockConfig+0x34>
 8003340:	4b8a      	ldr	r3, [pc, #552]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a89      	ldr	r2, [pc, #548]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b87      	ldr	r3, [pc, #540]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 0201 	bic.w	r2, r3, #1
 8003354:	4985      	ldr	r1, [pc, #532]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335c:	4b83      	ldr	r3, [pc, #524]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0f9      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337a:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	497a      	ldr	r1, [pc, #488]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 808e 	beq.w	80034b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033a2:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d121      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0d7      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ba:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d115      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0cb      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d2:	4b67      	ldr	r3, [pc, #412]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0bf      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033e2:	4b63      	ldr	r3, [pc, #396]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e0b7      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	495c      	ldr	r1, [pc, #368]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fd fbfe 	bl	8000c04 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d112      	bne.n	8003438 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003412:	e00a      	b.n	800342a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003414:	f7fd fbf6 	bl	8000c04 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e09b      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b08      	cmp	r3, #8
 8003434:	d1ee      	bne.n	8003414 <HAL_RCC_ClockConfig+0xfc>
 8003436:	e03e      	b.n	80034b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d112      	bne.n	8003466 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003442:	f7fd fbdf 	bl	8000c04 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e084      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003458:	4b45      	ldr	r3, [pc, #276]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d1ee      	bne.n	8003442 <HAL_RCC_ClockConfig+0x12a>
 8003464:	e027      	b.n	80034b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d11d      	bne.n	80034aa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fd fbc8 	bl	8000c04 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e06d      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003486:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b04      	cmp	r3, #4
 8003490:	d1ee      	bne.n	8003470 <HAL_RCC_ClockConfig+0x158>
 8003492:	e010      	b.n	80034b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fd fbb6 	bl	8000c04 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e05b      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ee      	bne.n	8003494 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d219      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x1be>
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a27      	ldr	r2, [pc, #156]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0201 	bic.w	r2, r3, #1
 80034de:	4923      	ldr	r1, [pc, #140]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_RCC_ClockConfig+0x254>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e034      	b.n	8003562 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4917      	ldr	r1, [pc, #92]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490f      	ldr	r1, [pc, #60]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003536:	f000 f823 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800353a:	4602      	mov	r2, r0
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_ClockConfig+0x258>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	490b      	ldr	r1, [pc, #44]	; (8003574 <HAL_RCC_ClockConfig+0x25c>)
 8003548:	5ccb      	ldrb	r3, [r1, r3]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x264>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fb08 	bl	8000b6c <HAL_InitTick>
 800355c:	4603      	mov	r3, r0
 800355e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003560:	7afb      	ldrb	r3, [r7, #11]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023c00 	.word	0x40023c00
 8003570:	40023800 	.word	0x40023800
 8003574:	080098a0 	.word	0x080098a0
 8003578:	20000000 	.word	0x20000000
 800357c:	20000004 	.word	0x20000004

08003580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003584:	b092      	sub	sp, #72	; 0x48
 8003586:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003588:	4b79      	ldr	r3, [pc, #484]	; (8003770 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800358e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d00d      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x34>
 8003598:	2b0c      	cmp	r3, #12
 800359a:	f200 80d5 	bhi.w	8003748 <HAL_RCC_GetSysClockFreq+0x1c8>
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x28>
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x2e>
 80035a6:	e0cf      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b72      	ldr	r3, [pc, #456]	; (8003774 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035ac:	e0da      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035ae:	4b71      	ldr	r3, [pc, #452]	; (8003774 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80035b2:	e0d7      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b6:	0c9b      	lsrs	r3, r3, #18
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	4b6e      	ldr	r3, [pc, #440]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80035be:	5c9b      	ldrb	r3, [r3, r2]
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c4:	0d9b      	lsrs	r3, r3, #22
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ce:	4b68      	ldr	r3, [pc, #416]	; (8003770 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d05d      	beq.n	8003696 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	2200      	movs	r2, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	4611      	mov	r1, r2
 80035e2:	4604      	mov	r4, r0
 80035e4:	460d      	mov	r5, r1
 80035e6:	4622      	mov	r2, r4
 80035e8:	462b      	mov	r3, r5
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0159      	lsls	r1, r3, #5
 80035f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f8:	0150      	lsls	r0, r2, #5
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4621      	mov	r1, r4
 8003600:	1a51      	subs	r1, r2, r1
 8003602:	6139      	str	r1, [r7, #16]
 8003604:	4629      	mov	r1, r5
 8003606:	eb63 0301 	sbc.w	r3, r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	018b      	lsls	r3, r1, #6
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003622:	4651      	mov	r1, sl
 8003624:	018a      	lsls	r2, r1, #6
 8003626:	46d4      	mov	ip, sl
 8003628:	ebb2 080c 	subs.w	r8, r2, ip
 800362c:	4659      	mov	r1, fp
 800362e:	eb63 0901 	sbc.w	r9, r3, r1
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003646:	4690      	mov	r8, r2
 8003648:	4699      	mov	r9, r3
 800364a:	4623      	mov	r3, r4
 800364c:	eb18 0303 	adds.w	r3, r8, r3
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	462b      	mov	r3, r5
 8003654:	eb49 0303 	adc.w	r3, r9, r3
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003666:	4629      	mov	r1, r5
 8003668:	028b      	lsls	r3, r1, #10
 800366a:	4620      	mov	r0, r4
 800366c:	4629      	mov	r1, r5
 800366e:	4604      	mov	r4, r0
 8003670:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003674:	4601      	mov	r1, r0
 8003676:	028a      	lsls	r2, r1, #10
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367e:	2200      	movs	r2, #0
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
 8003682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003688:	f7fc fd80 	bl	800018c <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
 8003694:	e055      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2200      	movs	r2, #0
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	627a      	str	r2, [r7, #36]	; 0x24
 800369e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036a2:	4642      	mov	r2, r8
 80036a4:	464b      	mov	r3, r9
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b4:	0150      	lsls	r0, r2, #5
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	46c4      	mov	ip, r8
 80036bc:	ebb2 0a0c 	subs.w	sl, r2, ip
 80036c0:	4640      	mov	r0, r8
 80036c2:	4649      	mov	r1, r9
 80036c4:	468c      	mov	ip, r1
 80036c6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036d6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036da:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036de:	ebb2 040a 	subs.w	r4, r2, sl
 80036e2:	eb63 050b 	sbc.w	r5, r3, fp
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	00eb      	lsls	r3, r5, #3
 80036f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f4:	00e2      	lsls	r2, r4, #3
 80036f6:	4614      	mov	r4, r2
 80036f8:	461d      	mov	r5, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	18e3      	adds	r3, r4, r3
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	460b      	mov	r3, r1
 8003702:	eb45 0303 	adc.w	r3, r5, r3
 8003706:	607b      	str	r3, [r7, #4]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003714:	4629      	mov	r1, r5
 8003716:	028b      	lsls	r3, r1, #10
 8003718:	4620      	mov	r0, r4
 800371a:	4629      	mov	r1, r5
 800371c:	4604      	mov	r4, r0
 800371e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003722:	4601      	mov	r1, r0
 8003724:	028a      	lsls	r2, r1, #10
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372c:	2200      	movs	r2, #0
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	61fa      	str	r2, [r7, #28]
 8003732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003736:	f7fc fd29 	bl	800018c <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4613      	mov	r3, r2
 8003740:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003744:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003746:	e00d      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	0b5b      	lsrs	r3, r3, #13
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	3301      	adds	r3, #1
 8003758:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003766:	4618      	mov	r0, r3
 8003768:	3748      	adds	r7, #72	; 0x48
 800376a:	46bd      	mov	sp, r7
 800376c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	00f42400 	.word	0x00f42400
 8003778:	08009894 	.word	0x08009894

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_RCC_GetHCLKFreq+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000000 	.word	0x20000000

08003790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003794:	f7ff fff2 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4903      	ldr	r1, [pc, #12]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40023800 	.word	0x40023800
 80037b4:	080098b0 	.word	0x080098b0

080037b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037bc:	f7ff ffde 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0adb      	lsrs	r3, r3, #11
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4903      	ldr	r1, [pc, #12]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	080098b0 	.word	0x080098b0

080037e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037ec:	4b29      	ldr	r3, [pc, #164]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d12c      	bne.n	8003852 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e016      	b.n	800383e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003810:	4b20      	ldr	r3, [pc, #128]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	4a1f      	ldr	r2, [pc, #124]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6253      	str	r3, [r2, #36]	; 0x24
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003830:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003832:	4b18      	ldr	r3, [pc, #96]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	4a17      	ldr	r2, [pc, #92]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003844:	d105      	bne.n	8003852 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800384c:	d101      	bne.n	8003852 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800384e:	2301      	movs	r3, #1
 8003850:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0f      	ldr	r2, [pc, #60]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 0201 	bic.w	r2, r3, #1
 800386c:	490b      	ldr	r1, [pc, #44]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	429a      	cmp	r2, r3
 8003880:	d001      	beq.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
 800389c:	40023c00 	.word	0x40023c00

080038a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06e      	b.n	8003990 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c2:	d009      	beq.n	80038d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	61da      	str	r2, [r3, #28]
 80038ca:	e005      	b.n	80038d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd f806 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	ea42 0103 	orr.w	r1, r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	0c1a      	lsrs	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f002 0204 	and.w	r2, r2, #4
 800397e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_SPI_Transmit+0x22>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e126      	b.n	8003c08 <HAL_SPI_Transmit+0x270>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039c2:	f7fd f91f 	bl	8000c04 <HAL_GetTick>
 80039c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d002      	beq.n	80039de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039dc:	e10b      	b.n	8003bf6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_SPI_Transmit+0x52>
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039ee:	e102      	b.n	8003bf6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2203      	movs	r2, #3
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	d10f      	bne.n	8003a58 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d007      	beq.n	8003a76 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7e:	d14b      	bne.n	8003b18 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_Transmit+0xf6>
 8003a88:	8afb      	ldrh	r3, [r7, #22]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d13e      	bne.n	8003b0c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	881a      	ldrh	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ab2:	e02b      	b.n	8003b0c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d112      	bne.n	8003ae8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	1c9a      	adds	r2, r3, #2
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ae6:	e011      	b.n	8003b0c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae8:	f7fd f88c 	bl	8000c04 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d803      	bhi.n	8003b00 <HAL_SPI_Transmit+0x168>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d102      	bne.n	8003b06 <HAL_SPI_Transmit+0x16e>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b0a:	e074      	b.n	8003bf6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ce      	bne.n	8003ab4 <HAL_SPI_Transmit+0x11c>
 8003b16:	e04c      	b.n	8003bb2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_SPI_Transmit+0x18e>
 8003b20:	8afb      	ldrh	r3, [r7, #22]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d140      	bne.n	8003ba8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b4c:	e02c      	b.n	8003ba8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d113      	bne.n	8003b84 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b82:	e011      	b.n	8003ba8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b84:	f7fd f83e 	bl	8000c04 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d803      	bhi.n	8003b9c <HAL_SPI_Transmit+0x204>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_Transmit+0x20a>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ba6:	e026      	b.n	8003bf6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cd      	bne.n	8003b4e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f8b2 	bl	8003d20 <SPI_EndRxTxTransaction>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e000      	b.n	8003bf6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003bf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c20:	f7fc fff0 	bl	8000c04 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c30:	f7fc ffe8 	bl	8000c04 <HAL_GetTick>
 8003c34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c36:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	015b      	lsls	r3, r3, #5
 8003c3c:	0d1b      	lsrs	r3, r3, #20
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c46:	e054      	b.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d050      	beq.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c50:	f7fc ffd8 	bl	8000c04 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d13d      	bne.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c7e:	d111      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c88:	d004      	beq.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c92:	d107      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cac:	d10f      	bne.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e017      	b.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d19b      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000000 	.word	0x20000000

08003d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <SPI_EndRxTxTransaction+0x7c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <SPI_EndRxTxTransaction+0x80>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0d5b      	lsrs	r3, r3, #21
 8003d38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d4a:	d112      	bne.n	8003d72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff ff5a 	bl	8003c10 <SPI_WaitFlagStateUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e00f      	b.n	8003d92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d0f2      	beq.n	8003d72 <SPI_EndRxTxTransaction+0x52>
 8003d8c:	e000      	b.n	8003d90 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d8e:	bf00      	nop
  }

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	165e9f81 	.word	0x165e9f81

08003da4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e047      	b.n	8003e46 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc fdde 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f90d 	bl	8004008 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0208 	orr.w	r2, r2, #8
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08a      	sub	sp, #40	; 0x28
 8003e52:	af02      	add	r7, sp, #8
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d17c      	bne.n	8003f68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_UART_Transmit+0x2c>
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e075      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_UART_Transmit+0x3e>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e06e      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2221      	movs	r2, #33	; 0x21
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea2:	f7fc feaf 	bl	8000c04 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	88fa      	ldrh	r2, [r7, #6]
 8003eb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_UART_Transmit+0x82>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e003      	b.n	8003ed8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ee0:	e02a      	b.n	8003f38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f840 	bl	8003f72 <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e036      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	3302      	adds	r3, #2
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e007      	b.n	8003f2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1cf      	bne.n	8003ee2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2140      	movs	r1, #64	; 0x40
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f810 	bl	8003f72 <UART_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e006      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f82:	e02c      	b.n	8003fde <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d028      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f92:	f7fc fe37 	bl	8000c04 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d21d      	bcs.n	8003fde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fb0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e00f      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	bf0c      	ite	eq
 8003fee:	2301      	moveq	r3, #1
 8003ff0:	2300      	movne	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d0c3      	beq.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	4313      	orrs	r3, r2
 800403c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004048:	f023 030c 	bic.w	r3, r3, #12
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	430b      	orrs	r3, r1
 8004054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a55      	ldr	r2, [pc, #340]	; (80041c8 <UART_SetConfig+0x1c0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d103      	bne.n	800407e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004076:	f7ff fb9f 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	e002      	b.n	8004084 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800407e:	f7ff fb87 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 8004082:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	d14c      	bne.n	8004128 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009a      	lsls	r2, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	4a49      	ldr	r2, [pc, #292]	; (80041cc <UART_SetConfig+0x1c4>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	0119      	lsls	r1, r3, #4
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009a      	lsls	r2, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c4:	4b41      	ldr	r3, [pc, #260]	; (80041cc <UART_SetConfig+0x1c4>)
 80040c6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2064      	movs	r0, #100	; 0x64
 80040ce:	fb00 f303 	mul.w	r3, r0, r3
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	3332      	adds	r3, #50	; 0x32
 80040d8:	4a3c      	ldr	r2, [pc, #240]	; (80041cc <UART_SetConfig+0x1c4>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040e6:	4419      	add	r1, r3
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	009a      	lsls	r2, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80040fe:	4b33      	ldr	r3, [pc, #204]	; (80041cc <UART_SetConfig+0x1c4>)
 8004100:	fba3 0302 	umull	r0, r3, r3, r2
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	2064      	movs	r0, #100	; 0x64
 8004108:	fb00 f303 	mul.w	r3, r0, r3
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	3332      	adds	r3, #50	; 0x32
 8004112:	4a2e      	ldr	r2, [pc, #184]	; (80041cc <UART_SetConfig+0x1c4>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	f003 0207 	and.w	r2, r3, #7
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	440a      	add	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004126:	e04a      	b.n	80041be <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	009a      	lsls	r2, r3, #2
 8004132:	441a      	add	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	4a23      	ldr	r2, [pc, #140]	; (80041cc <UART_SetConfig+0x1c4>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	0119      	lsls	r1, r3, #4
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009a      	lsls	r2, r3, #2
 8004152:	441a      	add	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	fbb2 f2f3 	udiv	r2, r2, r3
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <UART_SetConfig+0x1c4>)
 8004160:	fba3 0302 	umull	r0, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2064      	movs	r0, #100	; 0x64
 8004168:	fb00 f303 	mul.w	r3, r0, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	3332      	adds	r3, #50	; 0x32
 8004172:	4a16      	ldr	r2, [pc, #88]	; (80041cc <UART_SetConfig+0x1c4>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417e:	4419      	add	r1, r3
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	009a      	lsls	r2, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	fbb2 f2f3 	udiv	r2, r2, r3
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <UART_SetConfig+0x1c4>)
 8004198:	fba3 0302 	umull	r0, r3, r3, r2
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	2064      	movs	r0, #100	; 0x64
 80041a0:	fb00 f303 	mul.w	r3, r0, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	3332      	adds	r3, #50	; 0x32
 80041aa:	4a08      	ldr	r2, [pc, #32]	; (80041cc <UART_SetConfig+0x1c4>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	f003 020f 	and.w	r2, r3, #15
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	440a      	add	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40013800 	.word	0x40013800
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004204:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004208:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	b29b      	uxth	r3, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	b29b      	uxth	r3, r3
 800421a:	4013      	ands	r3, r2
 800421c:	b29a      	uxth	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004230:	b084      	sub	sp, #16
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	f107 0014 	add.w	r0, r7, #20
 800423e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	b004      	add	sp, #16
 800426e:	4770      	bx	lr

08004270 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004270:	b480      	push	{r7}
 8004272:	b09b      	sub	sp, #108	; 0x6c
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	78db      	ldrb	r3, [r3, #3]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d81f      	bhi.n	80042e2 <USB_ActivateEndpoint+0x72>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <USB_ActivateEndpoint+0x38>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042eb 	.word	0x080042eb
 80042b4:	080042c7 	.word	0x080042c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80042b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042c4:	e012      	b.n	80042ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80042c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80042ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042d2:	e00b      	b.n	80042ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042e0:	e004      	b.n	80042ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80042e8:	e000      	b.n	80042ec <USB_ActivateEndpoint+0x7c>
      break;
 80042ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	b29b      	uxth	r3, r3
 800430c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004324:	b29a      	uxth	r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	4313      	orrs	r3, r2
 800432e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	7b1b      	ldrb	r3, [r3, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f040 8149 	bne.w	80045f0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8084 	beq.w	8004470 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004372:	b29b      	uxth	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	4413      	add	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	88db      	ldrh	r3, [r3, #6]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	81fb      	strh	r3, [r7, #14]
 80043aa:	89fb      	ldrh	r3, [r7, #14]
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <USB_ActivateEndpoint+0x17c>
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	81bb      	strh	r3, [r7, #12]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	89bb      	ldrh	r3, [r7, #12]
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	78db      	ldrb	r3, [r3, #3]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d020      	beq.n	8004436 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440a:	813b      	strh	r3, [r7, #8]
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	f083 0320 	eor.w	r3, r3, #32
 8004412:	813b      	strh	r3, [r7, #8]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	893b      	ldrh	r3, [r7, #8]
 8004420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004430:	b29b      	uxth	r3, r3
 8004432:	8013      	strh	r3, [r2, #0]
 8004434:	e27f      	b.n	8004936 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800444c:	817b      	strh	r3, [r7, #10]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800445e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446a:	b29b      	uxth	r3, r3
 800446c:	8013      	strh	r3, [r2, #0]
 800446e:	e262      	b.n	8004936 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	4413      	add	r3, r2
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	011a      	lsls	r2, r3, #4
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	4413      	add	r3, r2
 800448e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	88db      	ldrh	r3, [r3, #6]
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	b29b      	uxth	r3, r3
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	4413      	add	r3, r2
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	011a      	lsls	r2, r3, #4
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	4413      	add	r3, r2
 80044c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d112      	bne.n	80044f6 <USB_ActivateEndpoint+0x286>
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044da:	b29a      	uxth	r2, r3
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	e02f      	b.n	8004556 <USB_ActivateEndpoint+0x2e6>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b3e      	cmp	r3, #62	; 0x3e
 80044fc:	d813      	bhi.n	8004526 <USB_ActivateEndpoint+0x2b6>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	663b      	str	r3, [r7, #96]	; 0x60
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <USB_ActivateEndpoint+0x2a8>
 8004512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004514:	3301      	adds	r3, #1
 8004516:	663b      	str	r3, [r7, #96]	; 0x60
 8004518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451a:	b29b      	uxth	r3, r3
 800451c:	029b      	lsls	r3, r3, #10
 800451e:	b29a      	uxth	r2, r3
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	e017      	b.n	8004556 <USB_ActivateEndpoint+0x2e6>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	663b      	str	r3, [r7, #96]	; 0x60
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <USB_ActivateEndpoint+0x2d0>
 800453a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800453c:	3b01      	subs	r3, #1
 800453e:	663b      	str	r3, [r7, #96]	; 0x60
 8004540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004542:	b29b      	uxth	r3, r3
 8004544:	029b      	lsls	r3, r3, #10
 8004546:	b29b      	uxth	r3, r3
 8004548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004550:	b29a      	uxth	r2, r3
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	83fb      	strh	r3, [r7, #30]
 8004564:	8bfb      	ldrh	r3, [r7, #30]
 8004566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01b      	beq.n	80045a6 <USB_ActivateEndpoint+0x336>
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004584:	83bb      	strh	r3, [r7, #28]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	8bbb      	ldrh	r3, [r7, #28]
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	837b      	strh	r3, [r7, #26]
 80045be:	8b7b      	ldrh	r3, [r7, #26]
 80045c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045c4:	837b      	strh	r3, [r7, #26]
 80045c6:	8b7b      	ldrh	r3, [r7, #26]
 80045c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045cc:	837b      	strh	r3, [r7, #26]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	8b7b      	ldrh	r3, [r7, #26]
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]
 80045ee:	e1a2      	b.n	8004936 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	441a      	add	r2, r3
 8004614:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004620:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004628:	b29b      	uxth	r3, r3
 800462a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004636:	b29b      	uxth	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800463c:	4413      	add	r3, r2
 800463e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	011a      	lsls	r2, r3, #4
 8004646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004648:	4413      	add	r3, r2
 800464a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464e:	657b      	str	r3, [r7, #84]	; 0x54
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	891b      	ldrh	r3, [r3, #8]
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	b29b      	uxth	r3, r3
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	653b      	str	r3, [r7, #80]	; 0x50
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004670:	4413      	add	r3, r2
 8004672:	653b      	str	r3, [r7, #80]	; 0x50
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	011a      	lsls	r2, r3, #4
 800467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467c:	4413      	add	r3, r2
 800467e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	895b      	ldrh	r3, [r3, #10]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f040 8091 	bne.w	80047c0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80046ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01b      	beq.n	80046ee <USB_ActivateEndpoint+0x47e>
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	873b      	strh	r3, [r7, #56]	; 0x38
 80046fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01b      	beq.n	800473e <USB_ActivateEndpoint+0x4ce>
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800472a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004736:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473a:	b29b      	uxth	r3, r3
 800473c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004756:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004758:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800475c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800475e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004760:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004764:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479c:	867b      	strh	r3, [r7, #50]	; 0x32
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	441a      	add	r2, r3
 80047a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80047aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	8013      	strh	r3, [r2, #0]
 80047be:	e0ba      	b.n	8004936 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01d      	beq.n	8004818 <USB_ActivateEndpoint+0x5a8>
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	441a      	add	r2, r3
 8004800:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004814:	b29b      	uxth	r3, r3
 8004816:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004828:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01d      	beq.n	8004870 <USB_ActivateEndpoint+0x600>
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800485c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004868:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800486c:	b29b      	uxth	r3, r3
 800486e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	78db      	ldrb	r3, [r3, #3]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d024      	beq.n	80048c2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004892:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004896:	f083 0320 	eor.w	r3, r3, #32
 800489a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]
 80048c0:	e01d      	b.n	80048fe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004914:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004936:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800493a:	4618      	mov	r0, r3
 800493c:	376c      	adds	r7, #108	; 0x6c
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004944:	b480      	push	{r7}
 8004946:	b08d      	sub	sp, #52	; 0x34
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	7b1b      	ldrb	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 808e 	bne.w	8004a74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d044      	beq.n	80049ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	81bb      	strh	r3, [r7, #12]
 800496e:	89bb      	ldrh	r3, [r7, #12]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <USB_DeactivateEndpoint+0x6c>
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	817b      	strh	r3, [r7, #10]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	897b      	ldrh	r3, [r7, #10]
 800499c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c6:	813b      	strh	r3, [r7, #8]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	893b      	ldrh	r3, [r7, #8]
 80049d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8013      	strh	r3, [r2, #0]
 80049e8:	e192      	b.n	8004d10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	827b      	strh	r3, [r7, #18]
 80049f8:	8a7b      	ldrh	r3, [r7, #18]
 80049fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01b      	beq.n	8004a3a <USB_DeactivateEndpoint+0xf6>
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	823b      	strh	r3, [r7, #16]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8a3b      	ldrh	r3, [r7, #16]
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a50:	81fb      	strh	r3, [r7, #14]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	441a      	add	r2, r3
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]
 8004a72:	e14d      	b.n	8004d10 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 80a5 	bne.w	8004bc8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	843b      	strh	r3, [r7, #32]
 8004a8c:	8c3b      	ldrh	r3, [r7, #32]
 8004a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <USB_DeactivateEndpoint+0x18a>
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	83fb      	strh	r3, [r7, #30]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8bfb      	ldrh	r3, [r7, #30]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	83bb      	strh	r3, [r7, #28]
 8004adc:	8bbb      	ldrh	r3, [r7, #28]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01b      	beq.n	8004b1e <USB_DeactivateEndpoint+0x1da>
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afc:	837b      	strh	r3, [r7, #26]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	8b7b      	ldrh	r3, [r7, #26]
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b34:	833b      	strh	r3, [r7, #24]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	8b3b      	ldrh	r3, [r7, #24]
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	82fb      	strh	r3, [r7, #22]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	8afb      	ldrh	r3, [r7, #22]
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba4:	82bb      	strh	r3, [r7, #20]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	8abb      	ldrh	r3, [r7, #20]
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]
 8004bc6:	e0a3      	b.n	8004d10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <USB_DeactivateEndpoint+0x2d4>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <USB_DeactivateEndpoint+0x324>
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3734      	adds	r7, #52	; 0x34
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b0cc      	sub	sp, #304	; 0x130
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d2a:	6018      	str	r0, [r3, #0]
 8004d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d34:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	f041 817d 	bne.w	8006042 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d908      	bls.n	8004d76 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d74:	e007      	b.n	8004d86 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	7b1b      	ldrb	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d152      	bne.n	8004e3c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6959      	ldr	r1, [r3, #20]
 8004da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	88da      	ldrh	r2, [r3, #6]
 8004dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004db8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	f001 ff0e 	bl	8006bde <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004dca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004df0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004df4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	011a      	lsls	r2, r3, #4
 8004e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	801a      	strh	r2, [r3, #0]
 8004e38:	f001 b8b5 	b.w	8005fa6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	78db      	ldrb	r3, [r3, #3]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	f040 84c6 	bne.w	80057da <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	f240 8443 	bls.w	80056f2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed8:	1ad2      	subs	r2, r2, r3
 8004eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 823e 	beq.w	800538a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f1a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 809a 	bne.w	8005068 <USB_EPStartXfer+0x34c>
 8004f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f40:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f66:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d122      	bne.n	8004fe6 <USB_EPStartXfer+0x2ca>
 8004fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	e079      	b.n	80050da <USB_EPStartXfer+0x3be>
 8004fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fea:	2b3e      	cmp	r3, #62	; 0x3e
 8004fec:	d81b      	bhi.n	8005026 <USB_EPStartXfer+0x30a>
 8004fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <USB_EPStartXfer+0x2f2>
 8005004:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005008:	3301      	adds	r3, #1
 800500a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800500e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005012:	b29b      	uxth	r3, r3
 8005014:	029b      	lsls	r3, r3, #10
 8005016:	b29a      	uxth	r2, r3
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e059      	b.n	80050da <USB_EPStartXfer+0x3be>
 8005026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <USB_EPStartXfer+0x32a>
 800503c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005040:	3b01      	subs	r3, #1
 8005042:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800504a:	b29b      	uxth	r3, r3
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005058:	b29a      	uxth	r2, r3
 800505a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	801a      	strh	r2, [r3, #0]
 8005066:	e038      	b.n	80050da <USB_EPStartXfer+0x3be>
 8005068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d130      	bne.n	80050da <USB_EPStartXfer+0x3be>
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	4619      	mov	r1, r3
 800508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005092:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005096:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	440a      	add	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	011a      	lsls	r2, r3, #4
 80050ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4413      	add	r3, r2
 80050ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80050be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	895b      	ldrh	r3, [r3, #10]
 80050e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6959      	ldr	r1, [r3, #20]
 80050f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005100:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005104:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005108:	6800      	ldr	r0, [r0, #0]
 800510a:	f001 fd68 	bl	8006bde <USB_WritePMA>
            ep->xfer_buff += len;
 800510e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695a      	ldr	r2, [r3, #20]
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511e:	441a      	add	r2, r3
 8005120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800512c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	429a      	cmp	r2, r3
 8005146:	d90f      	bls.n	8005168 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005158:	1ad2      	subs	r2, r2, r3
 800515a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	621a      	str	r2, [r3, #32]
 8005166:	e00e      	b.n	8005186 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	f040 809a 	bne.w	80052cc <USB_EPStartXfer+0x5b0>
 8005198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4619      	mov	r1, r3
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ca:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	440a      	add	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	011a      	lsls	r2, r3, #4
 80051e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4413      	add	r3, r2
 80051ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d122      	bne.n	800524a <USB_EPStartXfer+0x52e>
 8005204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005208:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005216:	b29a      	uxth	r2, r3
 8005218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005228:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523a:	b29a      	uxth	r2, r3
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	e083      	b.n	8005352 <USB_EPStartXfer+0x636>
 800524a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524e:	2b3e      	cmp	r3, #62	; 0x3e
 8005250:	d81b      	bhi.n	800528a <USB_EPStartXfer+0x56e>
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800525c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <USB_EPStartXfer+0x556>
 8005268:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800526c:	3301      	adds	r3, #1
 800526e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005272:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005276:	b29b      	uxth	r3, r3
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	b29a      	uxth	r2, r3
 800527c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005280:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	e063      	b.n	8005352 <USB_EPStartXfer+0x636>
 800528a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <USB_EPStartXfer+0x58e>
 80052a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052a4:	3b01      	subs	r3, #1
 80052a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	029b      	lsls	r3, r3, #10
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	e042      	b.n	8005352 <USB_EPStartXfer+0x636>
 80052cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d13a      	bne.n	8005352 <USB_EPStartXfer+0x636>
 80052dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fe:	b29b      	uxth	r3, r3
 8005300:	4619      	mov	r1, r3
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800530a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800530e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	440a      	add	r2, r1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	011a      	lsls	r2, r3, #4
 8005326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4413      	add	r3, r2
 8005332:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005344:	b29a      	uxth	r2, r3
 8005346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	891b      	ldrh	r3, [r3, #8]
 800535e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6959      	ldr	r1, [r3, #20]
 800536e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005372:	b29b      	uxth	r3, r3
 8005374:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005378:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800537c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005380:	6800      	ldr	r0, [r0, #0]
 8005382:	f001 fc2c 	bl	8006bde <USB_WritePMA>
 8005386:	f000 be0e 	b.w	8005fa6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d16d      	bne.n	8005476 <USB_EPStartXfer+0x75a>
 800539a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ba:	4413      	add	r3, r2
 80053bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80053be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	011a      	lsls	r2, r3, #4
 80053cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ce:	4413      	add	r3, r2
 80053d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053d4:	647b      	str	r3, [r7, #68]	; 0x44
 80053d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d112      	bne.n	8005404 <USB_EPStartXfer+0x6e8>
 80053de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	e063      	b.n	80054cc <USB_EPStartXfer+0x7b0>
 8005404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005408:	2b3e      	cmp	r3, #62	; 0x3e
 800540a:	d817      	bhi.n	800543c <USB_EPStartXfer+0x720>
 800540c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <USB_EPStartXfer+0x710>
 8005422:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005426:	3301      	adds	r3, #1
 8005428:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800542c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005430:	b29b      	uxth	r3, r3
 8005432:	029b      	lsls	r3, r3, #10
 8005434:	b29a      	uxth	r2, r3
 8005436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e047      	b.n	80054cc <USB_EPStartXfer+0x7b0>
 800543c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <USB_EPStartXfer+0x740>
 8005452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005456:	3b01      	subs	r3, #1
 8005458:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800545c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005460:	b29b      	uxth	r3, r3
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546e:	b29a      	uxth	r2, r3
 8005470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	e02a      	b.n	80054cc <USB_EPStartXfer+0x7b0>
 8005476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d122      	bne.n	80054cc <USB_EPStartXfer+0x7b0>
 8005486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	653b      	str	r3, [r7, #80]	; 0x50
 8005492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005496:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a6:	4413      	add	r3, r2
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
 80054aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	011a      	lsls	r2, r3, #4
 80054b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ba:	4413      	add	r3, r2
 80054bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	891b      	ldrh	r3, [r3, #8]
 80054d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6959      	ldr	r1, [r3, #20]
 80054e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	f001 fb6f 	bl	8006bde <USB_WritePMA>
            ep->xfer_buff += len;
 8005500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695a      	ldr	r2, [r3, #20]
 800550c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005510:	441a      	add	r2, r3
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800551e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	429a      	cmp	r2, r3
 8005538:	d90f      	bls.n	800555a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800553a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554a:	1ad2      	subs	r2, r2, r3
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	621a      	str	r2, [r3, #32]
 8005558:	e00e      	b.n	8005578 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800556a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2200      	movs	r2, #0
 8005576:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	643b      	str	r3, [r7, #64]	; 0x40
 8005584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d16d      	bne.n	8005670 <USB_EPStartXfer+0x954>
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	4413      	add	r3, r2
 80055b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	011a      	lsls	r2, r3, #4
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
 80055d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d112      	bne.n	80055fe <USB_EPStartXfer+0x8e2>
 80055d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	801a      	strh	r2, [r3, #0]
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e05d      	b.n	80056ba <USB_EPStartXfer+0x99e>
 80055fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005602:	2b3e      	cmp	r3, #62	; 0x3e
 8005604:	d817      	bhi.n	8005636 <USB_EPStartXfer+0x91a>
 8005606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <USB_EPStartXfer+0x90a>
 800561c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005620:	3301      	adds	r3, #1
 8005622:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005626:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800562a:	b29b      	uxth	r3, r3
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	b29a      	uxth	r2, r3
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	e041      	b.n	80056ba <USB_EPStartXfer+0x99e>
 8005636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <USB_EPStartXfer+0x93a>
 800564c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005650:	3b01      	subs	r3, #1
 8005652:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005656:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800565a:	b29b      	uxth	r3, r3
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29a      	uxth	r2, r3
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e024      	b.n	80056ba <USB_EPStartXfer+0x99e>
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d11c      	bne.n	80056ba <USB_EPStartXfer+0x99e>
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005694:	4413      	add	r3, r2
 8005696:	643b      	str	r3, [r7, #64]	; 0x40
 8005698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	011a      	lsls	r2, r3, #4
 80056a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a8:	4413      	add	r3, r2
 80056aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	895b      	ldrh	r3, [r3, #10]
 80056c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6959      	ldr	r1, [r3, #20]
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056e8:	6800      	ldr	r0, [r0, #0]
 80056ea:	f001 fa78 	bl	8006bde <USB_WritePMA>
 80056ee:	f000 bc5a 	b.w	8005fa6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005706:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800572c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	441a      	add	r2, r3
 8005746:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800574a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575a:	b29b      	uxth	r3, r3
 800575c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005778:	b29b      	uxth	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577e:	4413      	add	r3, r2
 8005780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	011a      	lsls	r2, r3, #4
 8005790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005792:	4413      	add	r3, r2
 8005794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005798:	65bb      	str	r3, [r7, #88]	; 0x58
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	891b      	ldrh	r3, [r3, #8]
 80057b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6959      	ldr	r1, [r3, #20]
 80057c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057ce:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057d2:	6800      	ldr	r0, [r0, #0]
 80057d4:	f001 fa03 	bl	8006bde <USB_WritePMA>
 80057d8:	e3e5      	b.n	8005fa6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005800:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800582e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005832:	b29b      	uxth	r3, r3
 8005834:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005846:	1ad2      	subs	r2, r2, r3
 8005848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005858:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 81bc 	beq.w	8005bf4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800587c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d16d      	bne.n	8005976 <USB_EPStartXfer+0xc5a>
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ba:	4413      	add	r3, r2
 80058bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	011a      	lsls	r2, r3, #4
 80058cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ce:	4413      	add	r3, r2
 80058d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058d4:	677b      	str	r3, [r7, #116]	; 0x74
 80058d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d112      	bne.n	8005904 <USB_EPStartXfer+0xbe8>
 80058de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e060      	b.n	80059c6 <USB_EPStartXfer+0xcaa>
 8005904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005908:	2b3e      	cmp	r3, #62	; 0x3e
 800590a:	d817      	bhi.n	800593c <USB_EPStartXfer+0xc20>
 800590c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <USB_EPStartXfer+0xc10>
 8005922:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005926:	3301      	adds	r3, #1
 8005928:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800592c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005930:	b29b      	uxth	r3, r3
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	b29a      	uxth	r2, r3
 8005936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005938:	801a      	strh	r2, [r3, #0]
 800593a:	e044      	b.n	80059c6 <USB_EPStartXfer+0xcaa>
 800593c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <USB_EPStartXfer+0xc40>
 8005952:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005956:	3b01      	subs	r3, #1
 8005958:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800595c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005960:	b29b      	uxth	r3, r3
 8005962:	029b      	lsls	r3, r3, #10
 8005964:	b29b      	uxth	r3, r3
 8005966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596e:	b29a      	uxth	r2, r3
 8005970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e027      	b.n	80059c6 <USB_EPStartXfer+0xcaa>
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d11f      	bne.n	80059c6 <USB_EPStartXfer+0xcaa>
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800599c:	4413      	add	r3, r2
 800599e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	011a      	lsls	r2, r3, #4
 80059b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059b4:	4413      	add	r3, r2
 80059b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	895b      	ldrh	r3, [r3, #10]
 80059d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6959      	ldr	r1, [r3, #20]
 80059e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059f4:	6800      	ldr	r0, [r0, #0]
 80059f6:	f001 f8f2 	bl	8006bde <USB_WritePMA>
          ep->xfer_buff += len;
 80059fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	441a      	add	r2, r3
 8005a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6a1a      	ldr	r2, [r3, #32]
 8005a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d90f      	bls.n	8005a54 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a44:	1ad2      	subs	r2, r2, r3
 8005a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	621a      	str	r2, [r3, #32]
 8005a52:	e00e      	b.n	8005a72 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8295 	beq.w	8005fa6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d16d      	bne.n	8005b68 <USB_EPStartXfer+0xe4c>
 8005a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aac:	4413      	add	r3, r2
 8005aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	011a      	lsls	r2, r3, #4
 8005abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8005ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d112      	bne.n	8005af6 <USB_EPStartXfer+0xdda>
 8005ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af2:	801a      	strh	r2, [r3, #0]
 8005af4:	e063      	b.n	8005bbe <USB_EPStartXfer+0xea2>
 8005af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005afa:	2b3e      	cmp	r3, #62	; 0x3e
 8005afc:	d817      	bhi.n	8005b2e <USB_EPStartXfer+0xe12>
 8005afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <USB_EPStartXfer+0xe02>
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	029b      	lsls	r3, r3, #10
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	e047      	b.n	8005bbe <USB_EPStartXfer+0xea2>
 8005b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <USB_EPStartXfer+0xe32>
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	029b      	lsls	r3, r3, #10
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	e02a      	b.n	8005bbe <USB_EPStartXfer+0xea2>
 8005b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d122      	bne.n	8005bbe <USB_EPStartXfer+0xea2>
 8005b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	673b      	str	r3, [r7, #112]	; 0x70
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b98:	4413      	add	r3, r2
 8005b9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	011a      	lsls	r2, r3, #4
 8005baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bac:	4413      	add	r3, r2
 8005bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	891b      	ldrh	r3, [r3, #8]
 8005bca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6959      	ldr	r1, [r3, #20]
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005be4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005be8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bec:	6800      	ldr	r0, [r0, #0]
 8005bee:	f000 fff6 	bl	8006bde <USB_WritePMA>
 8005bf2:	e1d8      	b.n	8005fa6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d178      	bne.n	8005cf6 <USB_EPStartXfer+0xfda>
 8005c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c28:	4413      	add	r3, r2
 8005c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	011a      	lsls	r2, r3, #4
 8005c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c40:	4413      	add	r3, r2
 8005c42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d116      	bne.n	8005c80 <USB_EPStartXfer+0xf64>
 8005c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	e06b      	b.n	8005d58 <USB_EPStartXfer+0x103c>
 8005c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c84:	2b3e      	cmp	r3, #62	; 0x3e
 8005c86:	d818      	bhi.n	8005cba <USB_EPStartXfer+0xf9e>
 8005c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8c:	085b      	lsrs	r3, r3, #1
 8005c8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d004      	beq.n	8005ca8 <USB_EPStartXfer+0xf8c>
 8005c9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ca8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	029b      	lsls	r3, r3, #10
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e04e      	b.n	8005d58 <USB_EPStartXfer+0x103c>
 8005cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <USB_EPStartXfer+0xfbe>
 8005cd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	029b      	lsls	r3, r3, #10
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	e030      	b.n	8005d58 <USB_EPStartXfer+0x103c>
 8005cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d128      	bne.n	8005d58 <USB_EPStartXfer+0x103c>
 8005d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	011a      	lsls	r2, r3, #4
 8005d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d42:	4413      	add	r3, r2
 8005d44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	891b      	ldrh	r3, [r3, #8]
 8005d64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6959      	ldr	r1, [r3, #20]
 8005d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d7e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d82:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d86:	6800      	ldr	r0, [r0, #0]
 8005d88:	f000 ff29 	bl	8006bde <USB_WritePMA>
          ep->xfer_buff += len;
 8005d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9c:	441a      	add	r2, r3
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6a1a      	ldr	r2, [r3, #32]
 8005db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d90f      	bls.n	8005de6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a1a      	ldr	r2, [r3, #32]
 8005dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	621a      	str	r2, [r3, #32]
 8005de4:	e00e      	b.n	8005e04 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2200      	movs	r2, #0
 8005e02:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80cc 	beq.w	8005fa6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d178      	bne.n	8005f1e <USB_EPStartXfer+0x1202>
 8005e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e50:	4413      	add	r3, r2
 8005e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	011a      	lsls	r2, r3, #4
 8005e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e68:	4413      	add	r3, r2
 8005e6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d116      	bne.n	8005ea8 <USB_EPStartXfer+0x118c>
 8005e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	e064      	b.n	8005f72 <USB_EPStartXfer+0x1256>
 8005ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eac:	2b3e      	cmp	r3, #62	; 0x3e
 8005eae:	d818      	bhi.n	8005ee2 <USB_EPStartXfer+0x11c6>
 8005eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d004      	beq.n	8005ed0 <USB_EPStartXfer+0x11b4>
 8005ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eca:	3301      	adds	r3, #1
 8005ecc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	029b      	lsls	r3, r3, #10
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e047      	b.n	8005f72 <USB_EPStartXfer+0x1256>
 8005ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d104      	bne.n	8005f02 <USB_EPStartXfer+0x11e6>
 8005ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efc:	3b01      	subs	r3, #1
 8005efe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	029b      	lsls	r3, r3, #10
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	e029      	b.n	8005f72 <USB_EPStartXfer+0x1256>
 8005f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d121      	bne.n	8005f72 <USB_EPStartXfer+0x1256>
 8005f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f44:	4413      	add	r3, r2
 8005f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	011a      	lsls	r2, r3, #4
 8005f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	895b      	ldrh	r3, [r3, #10]
 8005f7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6959      	ldr	r1, [r3, #20]
 8005f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005fa0:	6800      	ldr	r0, [r0, #0]
 8005fa2:	f000 fe1c 	bl	8006bde <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fc8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd4:	8013      	strh	r3, [r2, #0]
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005fde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fe2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005fe6:	8812      	ldrh	r2, [r2, #0]
 8005fe8:	f082 0210 	eor.w	r2, r2, #16
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ff6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ffa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ffe:	8812      	ldrh	r2, [r2, #0]
 8006000:	f082 0220 	eor.w	r2, r2, #32
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006024:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
 800603e:	f000 bc9f 	b.w	8006980 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	7b1b      	ldrb	r3, [r3, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f040 80ae 	bne.w	80061b0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	429a      	cmp	r2, r3
 800606e:	d917      	bls.n	80060a0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	619a      	str	r2, [r3, #24]
 800609e:	e00e      	b.n	80060be <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80060a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060da:	b29b      	uxth	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060e2:	4413      	add	r3, r2
 80060e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	011a      	lsls	r2, r3, #4
 80060f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060fa:	4413      	add	r3, r2
 80060fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d116      	bne.n	800613a <USB_EPStartXfer+0x141e>
 800610c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006118:	b29a      	uxth	r2, r3
 800611a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800611e:	801a      	strh	r2, [r3, #0]
 8006120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006130:	b29a      	uxth	r2, r3
 8006132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e3e8      	b.n	800690c <USB_EPStartXfer+0x1bf0>
 800613a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613e:	2b3e      	cmp	r3, #62	; 0x3e
 8006140:	d818      	bhi.n	8006174 <USB_EPStartXfer+0x1458>
 8006142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800614c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <USB_EPStartXfer+0x1446>
 8006158:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800615c:	3301      	adds	r3, #1
 800615e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006162:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006166:	b29b      	uxth	r3, r3
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	b29a      	uxth	r2, r3
 800616c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	e3cb      	b.n	800690c <USB_EPStartXfer+0x1bf0>
 8006174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800617e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2b00      	cmp	r3, #0
 8006188:	d104      	bne.n	8006194 <USB_EPStartXfer+0x1478>
 800618a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800618e:	3b01      	subs	r3, #1
 8006190:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006194:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006198:	b29b      	uxth	r3, r3
 800619a:	029b      	lsls	r3, r3, #10
 800619c:	b29b      	uxth	r3, r3
 800619e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	e3ad      	b.n	800690c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80061b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	78db      	ldrb	r3, [r3, #3]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	f040 8200 	bne.w	80065c2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 8091 	bne.w	80062f6 <USB_EPStartXfer+0x15da>
 80061d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061f8:	4413      	add	r3, r2
 80061fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	011a      	lsls	r2, r3, #4
 800620c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006210:	4413      	add	r3, r2
 8006212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006216:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800621a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d116      	bne.n	8006258 <USB_EPStartXfer+0x153c>
 800622a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006236:	b29a      	uxth	r2, r3
 8006238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	e083      	b.n	8006360 <USB_EPStartXfer+0x1644>
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b3e      	cmp	r3, #62	; 0x3e
 8006266:	d820      	bhi.n	80062aa <USB_EPStartXfer+0x158e>
 8006268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800627a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d004      	beq.n	8006298 <USB_EPStartXfer+0x157c>
 800628e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006292:	3301      	adds	r3, #1
 8006294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629c:	b29b      	uxth	r3, r3
 800629e:	029b      	lsls	r3, r3, #10
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e05a      	b.n	8006360 <USB_EPStartXfer+0x1644>
 80062aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <USB_EPStartXfer+0x15be>
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d4:	3b01      	subs	r3, #1
 80062d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062de:	b29b      	uxth	r3, r3
 80062e0:	029b      	lsls	r3, r3, #10
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	e034      	b.n	8006360 <USB_EPStartXfer+0x1644>
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d12c      	bne.n	8006360 <USB_EPStartXfer+0x1644>
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006318:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006322:	b29b      	uxth	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632a:	4413      	add	r3, r2
 800632c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	011a      	lsls	r2, r3, #4
 800633e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006342:	4413      	add	r3, r2
 8006344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	b29a      	uxth	r2, r3
 800635a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 8091 	bne.w	80064a2 <USB_EPStartXfer+0x1786>
 8006380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006384:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639c:	b29b      	uxth	r3, r3
 800639e:	461a      	mov	r2, r3
 80063a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063a4:	4413      	add	r3, r2
 80063a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	011a      	lsls	r2, r3, #4
 80063b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063bc:	4413      	add	r3, r2
 80063be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d116      	bne.n	8006404 <USB_EPStartXfer+0x16e8>
 80063d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	e07c      	b.n	80064fe <USB_EPStartXfer+0x17e2>
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b3e      	cmp	r3, #62	; 0x3e
 8006412:	d820      	bhi.n	8006456 <USB_EPStartXfer+0x173a>
 8006414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <USB_EPStartXfer+0x1728>
 800643a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800643e:	3301      	adds	r3, #1
 8006440:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006444:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006448:	b29b      	uxth	r3, r3
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	b29a      	uxth	r2, r3
 800644e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	e053      	b.n	80064fe <USB_EPStartXfer+0x17e2>
 8006456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <USB_EPStartXfer+0x176a>
 800647c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006480:	3b01      	subs	r3, #1
 8006482:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006486:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800648a:	b29b      	uxth	r3, r3
 800648c:	029b      	lsls	r3, r3, #10
 800648e:	b29b      	uxth	r3, r3
 8006490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	e02d      	b.n	80064fe <USB_EPStartXfer+0x17e2>
 80064a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d125      	bne.n	80064fe <USB_EPStartXfer+0x17e2>
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064c8:	4413      	add	r3, r2
 80064ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	011a      	lsls	r2, r3, #4
 80064dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064e0:	4413      	add	r3, r2
 80064e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064fc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 81fe 	beq.w	800690c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006530:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <USB_EPStartXfer+0x182c>
 800653c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10d      	bne.n	8006564 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006548:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800654c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 81db 	bne.w	800690c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006556:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 81d4 	bne.w	800690c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800658e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80065ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065bc:	b29b      	uxth	r3, r3
 80065be:	8013      	strh	r3, [r2, #0]
 80065c0:	e1a4      	b.n	800690c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	f040 819a 	bne.w	8006908 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80065d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d917      	bls.n	8006620 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	619a      	str	r2, [r3, #24]
 800661e:	e00e      	b.n	800663e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d178      	bne.n	8006740 <USB_EPStartXfer+0x1a24>
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666a:	b29b      	uxth	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006672:	4413      	add	r3, r2
 8006674:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	011a      	lsls	r2, r3, #4
 8006686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800668a:	4413      	add	r3, r2
 800668c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006690:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d116      	bne.n	80066ca <USB_EPStartXfer+0x19ae>
 800669c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e06b      	b.n	80067a2 <USB_EPStartXfer+0x1a86>
 80066ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ce:	2b3e      	cmp	r3, #62	; 0x3e
 80066d0:	d818      	bhi.n	8006704 <USB_EPStartXfer+0x19e8>
 80066d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <USB_EPStartXfer+0x19d6>
 80066e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ec:	3301      	adds	r3, #1
 80066ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e04e      	b.n	80067a2 <USB_EPStartXfer+0x1a86>
 8006704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800670e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <USB_EPStartXfer+0x1a08>
 800671a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800671e:	3b01      	subs	r3, #1
 8006720:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006728:	b29b      	uxth	r3, r3
 800672a:	029b      	lsls	r3, r3, #10
 800672c:	b29b      	uxth	r3, r3
 800672e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006736:	b29a      	uxth	r2, r3
 8006738:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	e030      	b.n	80067a2 <USB_EPStartXfer+0x1a86>
 8006740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d128      	bne.n	80067a2 <USB_EPStartXfer+0x1a86>
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800675e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676c:	b29b      	uxth	r3, r3
 800676e:	461a      	mov	r2, r3
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006774:	4413      	add	r3, r2
 8006776:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800677a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	011a      	lsls	r2, r3, #4
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678c:	4413      	add	r3, r2
 800678e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006792:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d178      	bne.n	80068b2 <USB_EPStartXfer+0x1b96>
 80067c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067dc:	b29b      	uxth	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e4:	4413      	add	r3, r2
 80067e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	011a      	lsls	r2, r3, #4
 80067f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fc:	4413      	add	r3, r2
 80067fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d116      	bne.n	800683c <USB_EPStartXfer+0x1b20>
 800680e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800681a:	b29a      	uxth	r2, r3
 800681c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e067      	b.n	800690c <USB_EPStartXfer+0x1bf0>
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	2b3e      	cmp	r3, #62	; 0x3e
 8006842:	d818      	bhi.n	8006876 <USB_EPStartXfer+0x1b5a>
 8006844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800684e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <USB_EPStartXfer+0x1b48>
 800685a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800685e:	3301      	adds	r3, #1
 8006860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006864:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006868:	b29b      	uxth	r3, r3
 800686a:	029b      	lsls	r3, r3, #10
 800686c:	b29a      	uxth	r2, r3
 800686e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e04a      	b.n	800690c <USB_EPStartXfer+0x1bf0>
 8006876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <USB_EPStartXfer+0x1b7a>
 800688c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006890:	3b01      	subs	r3, #1
 8006892:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800689a:	b29b      	uxth	r3, r3
 800689c:	029b      	lsls	r3, r3, #10
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	e02c      	b.n	800690c <USB_EPStartXfer+0x1bf0>
 80068b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	785b      	ldrb	r3, [r3, #1]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d124      	bne.n	800690c <USB_EPStartXfer+0x1bf0>
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d8:	4413      	add	r3, r2
 80068da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	011a      	lsls	r2, r3, #4
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f0:	4413      	add	r3, r2
 80068f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fe:	b29a      	uxth	r2, r3
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	e001      	b.n	800690c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e03a      	b.n	8006982 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006936:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800693a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800693e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006942:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800694a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	441a      	add	r2, r3
 8006968:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d020      	beq.n	80069e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b4:	81bb      	strh	r3, [r7, #12]
 80069b6:	89bb      	ldrh	r3, [r7, #12]
 80069b8:	f083 0310 	eor.w	r3, r3, #16
 80069bc:	81bb      	strh	r3, [r7, #12]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	441a      	add	r2, r3
 80069c8:	89bb      	ldrh	r3, [r7, #12]
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
 80069de:	e01f      	b.n	8006a20 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f6:	81fb      	strh	r3, [r7, #14]
 80069f8:	89fb      	ldrh	r3, [r7, #14]
 80069fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069fe:	81fb      	strh	r3, [r7, #14]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	441a      	add	r2, r3
 8006a0a:	89fb      	ldrh	r3, [r7, #14]
 8006a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	7b1b      	ldrb	r3, [r3, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 809d 	bne.w	8006b7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d04c      	beq.n	8006ae2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	823b      	strh	r3, [r7, #16]
 8006a56:	8a3b      	ldrh	r3, [r7, #16]
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01b      	beq.n	8006a98 <USB_EPClearStall+0x6c>
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	81fb      	strh	r3, [r7, #14]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	441a      	add	r2, r3
 8006a82:	89fb      	ldrh	r3, [r7, #14]
 8006a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	78db      	ldrb	r3, [r3, #3]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d06c      	beq.n	8006b7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab6:	81bb      	strh	r3, [r7, #12]
 8006ab8:	89bb      	ldrh	r3, [r7, #12]
 8006aba:	f083 0320 	eor.w	r3, r3, #32
 8006abe:	81bb      	strh	r3, [r7, #12]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	89bb      	ldrh	r3, [r7, #12]
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]
 8006ae0:	e04b      	b.n	8006b7a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	82fb      	strh	r3, [r7, #22]
 8006af0:	8afb      	ldrh	r3, [r7, #22]
 8006af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01b      	beq.n	8006b32 <USB_EPClearStall+0x106>
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b10:	82bb      	strh	r3, [r7, #20]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	8abb      	ldrh	r3, [r7, #20]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b48:	827b      	strh	r3, [r7, #18]
 8006b4a:	8a7b      	ldrh	r3, [r7, #18]
 8006b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b50:	827b      	strh	r3, [r7, #18]
 8006b52:	8a7b      	ldrh	r3, [r7, #18]
 8006b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b58:	827b      	strh	r3, [r7, #18]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	8a7b      	ldrh	r3, [r7, #18]
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr

08006b86 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d103      	bne.n	8006ba0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2280      	movs	r2, #128	; 0x80
 8006b9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr

08006bac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b08d      	sub	sp, #52	; 0x34
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	4611      	mov	r1, r2
 8006bea:	461a      	mov	r2, r3
 8006bec:	460b      	mov	r3, r1
 8006bee:	80fb      	strh	r3, [r7, #6]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bf4:	88bb      	ldrh	r3, [r7, #4]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	005a      	lsls	r2, r3, #1
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c16:	e01e      	b.n	8006c56 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	3301      	adds	r3, #1
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	3302      	adds	r3, #2
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	3302      	adds	r3, #2
 8006c48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	3b01      	subs	r3, #1
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1dd      	bne.n	8006c18 <USB_WritePMA+0x3a>
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	3734      	adds	r7, #52	; 0x34
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b08b      	sub	sp, #44	; 0x2c
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4611      	mov	r1, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	460b      	mov	r3, r1
 8006c78:	80fb      	strh	r3, [r7, #6]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c7e:	88bb      	ldrh	r3, [r7, #4]
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	005a      	lsls	r2, r3, #1
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c9a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca0:	e01b      	b.n	8006cda <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	3302      	adds	r3, #2
 8006cae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e0      	bne.n	8006ca2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ce0:	88bb      	ldrh	r3, [r7, #4]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	701a      	strb	r2, [r3, #0]
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	372c      	adds	r7, #44	; 0x2c
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr

08006d06 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7c1b      	ldrb	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d115      	bne.n	8006d4a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d22:	2202      	movs	r2, #2
 8006d24:	2181      	movs	r1, #129	; 0x81
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 ff5b 	bl	8008be2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d36:	2202      	movs	r2, #2
 8006d38:	2101      	movs	r1, #1
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 ff51 	bl	8008be2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006d48:	e012      	b.n	8006d70 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	2181      	movs	r1, #129	; 0x81
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 ff46 	bl	8008be2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	2202      	movs	r2, #2
 8006d60:	2101      	movs	r1, #1
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 ff3d 	bl	8008be2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d70:	2308      	movs	r3, #8
 8006d72:	2203      	movs	r2, #3
 8006d74:	2182      	movs	r1, #130	; 0x82
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 ff33 	bl	8008be2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006d82:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d86:	f002 f853 	bl	8008e30 <USBD_static_malloc>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
 8006da0:	e026      	b.n	8006df0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006da8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7c1b      	ldrb	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d109      	bne.n	8006de0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fff3 	bl	8008dc4 <USBD_LL_PrepareReceive>
 8006dde:	e007      	b.n	8006df0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006de6:	2340      	movs	r3, #64	; 0x40
 8006de8:	2101      	movs	r1, #1
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 ffea 	bl	8008dc4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e0a:	2181      	movs	r1, #129	; 0x81
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 ff0e 	bl	8008c2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e18:	2101      	movs	r1, #1
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 ff07 	bl	8008c2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e28:	2182      	movs	r1, #130	; 0x82
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 feff 	bl	8008c2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00e      	beq.n	8006e5e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 fff9 	bl	8008e48 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d039      	beq.n	8006f06 <USBD_CDC_Setup+0x9e>
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d17f      	bne.n	8006f96 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d029      	beq.n	8006ef2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b25b      	sxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	da11      	bge.n	8006ecc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006eb4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	88d2      	ldrh	r2, [r2, #6]
 8006eba:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ebc:	6939      	ldr	r1, [r7, #16]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 f994 	bl	80081f2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006eca:	e06b      	b.n	8006fa4 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	785a      	ldrb	r2, [r3, #1]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	88db      	ldrh	r3, [r3, #6]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ee2:	6939      	ldr	r1, [r7, #16]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f9af 	bl	800824e <USBD_CtlPrepareRx>
    break;
 8006ef0:	e058      	b.n	8006fa4 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	7850      	ldrb	r0, [r2, #1]
 8006efe:	2200      	movs	r2, #0
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	4798      	blx	r3
    break;
 8006f04:	e04e      	b.n	8006fa4 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	2b0b      	cmp	r3, #11
 8006f0c:	d02e      	beq.n	8006f6c <USBD_CDC_Setup+0x104>
 8006f0e:	2b0b      	cmp	r3, #11
 8006f10:	dc38      	bgt.n	8006f84 <USBD_CDC_Setup+0x11c>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <USBD_CDC_Setup+0xb4>
 8006f16:	2b0a      	cmp	r3, #10
 8006f18:	d014      	beq.n	8006f44 <USBD_CDC_Setup+0xdc>
 8006f1a:	e033      	b.n	8006f84 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d107      	bne.n	8006f36 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f26:	f107 030c 	add.w	r3, r7, #12
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 f95f 	bl	80081f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006f34:	e02e      	b.n	8006f94 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 f8f0 	bl	800811e <USBD_CtlError>
			  ret = USBD_FAIL;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	75fb      	strb	r3, [r7, #23]
      break;
 8006f42:	e027      	b.n	8006f94 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d107      	bne.n	8006f5e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006f4e:	f107 030f 	add.w	r3, r7, #15
 8006f52:	2201      	movs	r2, #1
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f94b 	bl	80081f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006f5c:	e01a      	b.n	8006f94 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 f8dc 	bl	800811e <USBD_CtlError>
			  ret = USBD_FAIL;
 8006f66:	2302      	movs	r3, #2
 8006f68:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6a:	e013      	b.n	8006f94 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d00d      	beq.n	8006f92 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f8d0 	bl	800811e <USBD_CtlError>
			  ret = USBD_FAIL;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006f82:	e006      	b.n	8006f92 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f8c9 	bl	800811e <USBD_CtlError>
      ret = USBD_FAIL;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f90:	e000      	b.n	8006f94 <USBD_CDC_Setup+0x12c>
      break;
 8006f92:	bf00      	nop
    }
    break;
 8006f94:	e006      	b.n	8006fa4 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 f8c0 	bl	800811e <USBD_CtlError>
    ret = USBD_FAIL;
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	75fb      	strb	r3, [r7, #23]
    break;
 8006fa2:	bf00      	nop
  }

  return ret;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fc0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006fc8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d03a      	beq.n	800704a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	331c      	adds	r3, #28
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d029      	beq.n	800703e <USBD_CDC_DataIn+0x90>
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	331c      	adds	r3, #28
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	78f9      	ldrb	r1, [r7, #3]
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	460b      	mov	r3, r1
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	4403      	add	r3, r0
 800700a:	3338      	adds	r3, #56	; 0x38
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d110      	bne.n	800703e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	331c      	adds	r3, #28
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007030:	78f9      	ldrb	r1, [r7, #3]
 8007032:	2300      	movs	r3, #0
 8007034:	2200      	movs	r2, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fea1 	bl	8008d7e <USBD_LL_Transmit>
 800703c:	e003      	b.n	8007046 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e000      	b.n	800704c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800704a:	2302      	movs	r3, #2
  }
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007066:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 fecc 	bl	8008e0a <USBD_LL_GetRxDataSize>
 8007072:	4602      	mov	r2, r0
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00d      	beq.n	80070a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007098:	4611      	mov	r1, r2
 800709a:	4798      	blx	r3

    return USBD_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e000      	b.n	80070a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80070a0:	2302      	movs	r3, #2
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070b8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d015      	beq.n	80070f0 <USBD_CDC_EP0_RxReady+0x46>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070ca:	2bff      	cmp	r3, #255	; 0xff
 80070cc:	d010      	beq.n	80070f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80070dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070e4:	b292      	uxth	r2, r2
 80070e6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	22ff      	movs	r2, #255	; 0xff
 80070ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2243      	movs	r2, #67	; 0x43
 8007108:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800710a:	4b03      	ldr	r3, [pc, #12]	; (8007118 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000094 	.word	0x20000094

0800711c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2243      	movs	r2, #67	; 0x43
 8007128:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800712a:	4b03      	ldr	r3, [pc, #12]	; (8007138 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000050 	.word	0x20000050

0800713c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2243      	movs	r2, #67	; 0x43
 8007148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800714a:	4b03      	ldr	r3, [pc, #12]	; (8007158 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	200000d8 	.word	0x200000d8

0800715c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	220a      	movs	r2, #10
 8007168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800716a:	4b03      	ldr	r3, [pc, #12]	; (8007178 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	2000000c 	.word	0x2000000c

0800717c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007186:	2302      	movs	r3, #2
 8007188:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr

080071a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071c6:	88fa      	ldrh	r2, [r7, #6]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr

080071da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800720e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01c      	beq.n	8007254 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007220:	2b00      	cmp	r3, #0
 8007222:	d115      	bne.n	8007250 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007242:	b29b      	uxth	r3, r3
 8007244:	2181      	movs	r1, #129	; 0x81
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fd99 	bl	8008d7e <USBD_LL_Transmit>

      return USBD_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	e002      	b.n	8007256 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007254:	2302      	movs	r3, #2
  }
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800726c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007274:	2b00      	cmp	r3, #0
 8007276:	d017      	beq.n	80072a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7c1b      	ldrb	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728a:	2101      	movs	r1, #1
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fd99 	bl	8008dc4 <USBD_LL_PrepareReceive>
 8007292:	e007      	b.n	80072a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800729a:	2340      	movs	r3, #64	; 0x40
 800729c:	2101      	movs	r1, #1
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 fd90 	bl	8008dc4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	e000      	b.n	80072aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80072a8:	2302      	movs	r3, #2
  }
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	4613      	mov	r3, r2
 80072be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072c6:	2302      	movs	r3, #2
 80072c8:	e01a      	b.n	8007300 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	79fa      	ldrb	r2, [r7, #7]
 80072f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 fbfd 	bl	8008af8 <USBD_LL_Init>

  return USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
 8007328:	e001      	b.n	800732e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800732a:	2302      	movs	r3, #2
 800732c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	bc80      	pop	{r7}
 8007338:	4770      	bx	lr

0800733a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fc32 	bl	8008bac <USBD_LL_Start>

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007372:	2302      	movs	r3, #2
 8007374:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	4611      	mov	r1, r2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	4611      	mov	r1, r2
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	4798      	blx	r3
  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fe62 	bl	80080a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80073f0:	461a      	mov	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	2b02      	cmp	r3, #2
 8007404:	d016      	beq.n	8007434 <USBD_LL_SetupStage+0x6a>
 8007406:	2b02      	cmp	r3, #2
 8007408:	d81c      	bhi.n	8007444 <USBD_LL_SetupStage+0x7a>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <USBD_LL_SetupStage+0x4a>
 800740e:	2b01      	cmp	r3, #1
 8007410:	d008      	beq.n	8007424 <USBD_LL_SetupStage+0x5a>
 8007412:	e017      	b.n	8007444 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f9c5 	bl	80077ac <USBD_StdDevReq>
    break;
 8007422:	e01a      	b.n	800745a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa27 	bl	8007880 <USBD_StdItfReq>
    break;
 8007432:	e012      	b.n	800745a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fa67 	bl	8007910 <USBD_StdEPReq>
    break;
 8007442:	e00a      	b.n	800745a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800744a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800744e:	b2db      	uxtb	r3, r3
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 fc0a 	bl	8008c6c <USBD_LL_StallEP>
    break;
 8007458:	bf00      	nop
  }

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	460b      	mov	r3, r1
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007472:	7afb      	ldrb	r3, [r7, #11]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d14b      	bne.n	8007510 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800747e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007486:	2b03      	cmp	r3, #3
 8007488:	d134      	bne.n	80074f4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	429a      	cmp	r2, r3
 8007494:	d919      	bls.n	80074ca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d203      	bcs.n	80074b8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	e002      	b.n	80074be <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80074bc:	b29b      	uxth	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fee1 	bl	800828a <USBD_CtlContinueRx>
 80074c8:	e038      	b.n	800753c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d105      	bne.n	80074ec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fede 	bl	80082ae <USBD_CtlSendStatus>
 80074f2:	e023      	b.n	800753c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d11e      	bne.n	800753c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007506:	2100      	movs	r1, #0
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 fbaf 	bl	8008c6c <USBD_LL_StallEP>
 800750e:	e015      	b.n	800753c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007522:	2b03      	cmp	r3, #3
 8007524:	d108      	bne.n	8007538 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	7afa      	ldrb	r2, [r7, #11]
 8007530:	4611      	mov	r1, r2
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	4798      	blx	r3
 8007536:	e001      	b.n	800753c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007538:	2302      	movs	r3, #2
 800753a:	e000      	b.n	800753e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b086      	sub	sp, #24
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	460b      	mov	r3, r1
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d17f      	bne.n	800765a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3314      	adds	r3, #20
 800755e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007566:	2b02      	cmp	r3, #2
 8007568:	d15c      	bne.n	8007624 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	429a      	cmp	r2, r3
 8007574:	d915      	bls.n	80075a2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	b29b      	uxth	r3, r3
 800758a:	461a      	mov	r2, r3
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fe4b 	bl	800822a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007594:	2300      	movs	r3, #0
 8007596:	2200      	movs	r2, #0
 8007598:	2100      	movs	r1, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f001 fc12 	bl	8008dc4 <USBD_LL_PrepareReceive>
 80075a0:	e04e      	b.n	8007640 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	6912      	ldr	r2, [r2, #16]
 80075aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80075ae:	fb01 f202 	mul.w	r2, r1, r2
 80075b2:	1a9b      	subs	r3, r3, r2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11c      	bne.n	80075f2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d316      	bcc.n	80075f2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d20f      	bcs.n	80075f2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075d2:	2200      	movs	r2, #0
 80075d4:	2100      	movs	r1, #0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fe27 	bl	800822a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80075e4:	2300      	movs	r3, #0
 80075e6:	2200      	movs	r2, #0
 80075e8:	2100      	movs	r1, #0
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f001 fbea 	bl	8008dc4 <USBD_LL_PrepareReceive>
 80075f0:	e026      	b.n	8007640 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007604:	2b03      	cmp	r3, #3
 8007606:	d105      	bne.n	8007614 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007614:	2180      	movs	r1, #128	; 0x80
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f001 fb28 	bl	8008c6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fe59 	bl	80082d4 <USBD_CtlReceiveStatus>
 8007622:	e00d      	b.n	8007640 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800762a:	2b04      	cmp	r3, #4
 800762c:	d004      	beq.n	8007638 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007638:	2180      	movs	r1, #128	; 0x80
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f001 fb16 	bl	8008c6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007646:	2b01      	cmp	r3, #1
 8007648:	d11d      	bne.n	8007686 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fe81 	bl	8007352 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007658:	e015      	b.n	8007686 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00d      	beq.n	8007682 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800766c:	2b03      	cmp	r3, #3
 800766e:	d108      	bne.n	8007682 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	7afa      	ldrb	r2, [r7, #11]
 800767a:	4611      	mov	r1, r2
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	4798      	blx	r3
 8007680:	e001      	b.n	8007686 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007682:	2302      	movs	r3, #2
 8007684:	e000      	b.n	8007688 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007698:	2340      	movs	r3, #64	; 0x40
 800769a:	2200      	movs	r2, #0
 800769c:	2100      	movs	r1, #0
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fa9f 	bl	8008be2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2240      	movs	r2, #64	; 0x40
 80076b0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076b4:	2340      	movs	r3, #64	; 0x40
 80076b6:	2200      	movs	r2, #0
 80076b8:	2180      	movs	r1, #128	; 0x80
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fa91 	bl	8008be2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2240      	movs	r2, #64	; 0x40
 80076ca:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d009      	beq.n	8007708 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6852      	ldr	r2, [r2, #4]
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	4611      	mov	r1, r2
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
  }

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr

08007730 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2204      	movs	r2, #4
 8007748:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007786:	2b03      	cmp	r3, #3
 8007788:	d10b      	bne.n	80077a2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d005      	beq.n	80077d2 <USBD_StdDevReq+0x26>
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d84f      	bhi.n	800786a <USBD_StdDevReq+0xbe>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <USBD_StdDevReq+0x36>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d14b      	bne.n	800786a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
    break;
 80077e0:	e048      	b.n	8007874 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b09      	cmp	r3, #9
 80077e8:	d839      	bhi.n	800785e <USBD_StdDevReq+0xb2>
 80077ea:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <USBD_StdDevReq+0x44>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007841 	.word	0x08007841
 80077f4:	08007855 	.word	0x08007855
 80077f8:	0800785f 	.word	0x0800785f
 80077fc:	0800784b 	.word	0x0800784b
 8007800:	0800785f 	.word	0x0800785f
 8007804:	08007823 	.word	0x08007823
 8007808:	08007819 	.word	0x08007819
 800780c:	0800785f 	.word	0x0800785f
 8007810:	08007837 	.word	0x08007837
 8007814:	0800782d 	.word	0x0800782d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9da 	bl	8007bd4 <USBD_GetDescriptor>
      break;
 8007820:	e022      	b.n	8007868 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 facf 	bl	8007dc8 <USBD_SetAddress>
      break;
 800782a:	e01d      	b.n	8007868 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fb0e 	bl	8007e50 <USBD_SetConfig>
      break;
 8007834:	e018      	b.n	8007868 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fb97 	bl	8007f6c <USBD_GetConfig>
      break;
 800783e:	e013      	b.n	8007868 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fbc7 	bl	8007fd6 <USBD_GetStatus>
      break;
 8007848:	e00e      	b.n	8007868 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fbf5 	bl	800803c <USBD_SetFeature>
      break;
 8007852:	e009      	b.n	8007868 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fc04 	bl	8008064 <USBD_ClrFeature>
      break;
 800785c:	e004      	b.n	8007868 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc5c 	bl	800811e <USBD_CtlError>
      break;
 8007866:	bf00      	nop
    }
    break;
 8007868:	e004      	b.n	8007874 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fc56 	bl	800811e <USBD_CtlError>
    break;
 8007872:	bf00      	nop
  }

  return ret;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop

08007880 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d005      	beq.n	80078a6 <USBD_StdItfReq+0x26>
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d82e      	bhi.n	80078fc <USBD_StdItfReq+0x7c>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <USBD_StdItfReq+0x26>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d12a      	bne.n	80078fc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078ac:	3b01      	subs	r3, #1
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d81d      	bhi.n	80078ee <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	889b      	ldrh	r3, [r3, #4]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d813      	bhi.n	80078e4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	88db      	ldrh	r3, [r3, #6]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d110      	bne.n	80078f8 <USBD_StdItfReq+0x78>
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10d      	bne.n	80078f8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fce6 	bl	80082ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80078e2:	e009      	b.n	80078f8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fc19 	bl	800811e <USBD_CtlError>
      break;
 80078ec:	e004      	b.n	80078f8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc14 	bl	800811e <USBD_CtlError>
      break;
 80078f6:	e000      	b.n	80078fa <USBD_StdItfReq+0x7a>
      break;
 80078f8:	bf00      	nop
    }
    break;
 80078fa:	e004      	b.n	8007906 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fc0d 	bl	800811e <USBD_CtlError>
    break;
 8007904:	bf00      	nop
  }

  return USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	889b      	ldrh	r3, [r3, #4]
 8007922:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800792c:	2b40      	cmp	r3, #64	; 0x40
 800792e:	d007      	beq.n	8007940 <USBD_StdEPReq+0x30>
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	f200 8144 	bhi.w	8007bbe <USBD_StdEPReq+0x2ae>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <USBD_StdEPReq+0x40>
 800793a:	2b20      	cmp	r3, #32
 800793c:	f040 813f 	bne.w	8007bbe <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
    break;
 800794e:	e13b      	b.n	8007bc8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007958:	2b20      	cmp	r3, #32
 800795a:	d10a      	bne.n	8007972 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	e12b      	b.n	8007bca <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	2b03      	cmp	r3, #3
 8007978:	d007      	beq.n	800798a <USBD_StdEPReq+0x7a>
 800797a:	2b03      	cmp	r3, #3
 800797c:	f300 8119 	bgt.w	8007bb2 <USBD_StdEPReq+0x2a2>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d072      	beq.n	8007a6a <USBD_StdEPReq+0x15a>
 8007984:	2b01      	cmp	r3, #1
 8007986:	d03a      	beq.n	80079fe <USBD_StdEPReq+0xee>
 8007988:	e113      	b.n	8007bb2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007990:	2b02      	cmp	r3, #2
 8007992:	d002      	beq.n	800799a <USBD_StdEPReq+0x8a>
 8007994:	2b03      	cmp	r3, #3
 8007996:	d015      	beq.n	80079c4 <USBD_StdEPReq+0xb4>
 8007998:	e02b      	b.n	80079f2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00c      	beq.n	80079ba <USBD_StdEPReq+0xaa>
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b80      	cmp	r3, #128	; 0x80
 80079a4:	d009      	beq.n	80079ba <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 f95e 	bl	8008c6c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 f95a 	bl	8008c6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079b8:	e020      	b.n	80079fc <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fbae 	bl	800811e <USBD_CtlError>
        break;
 80079c2:	e01b      	b.n	80079fc <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10e      	bne.n	80079ea <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00b      	beq.n	80079ea <USBD_StdEPReq+0xda>
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	d008      	beq.n	80079ea <USBD_StdEPReq+0xda>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	88db      	ldrh	r3, [r3, #6]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f941 	bl	8008c6c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fc5f 	bl	80082ae <USBD_CtlSendStatus>

        break;
 80079f0:	e004      	b.n	80079fc <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fb92 	bl	800811e <USBD_CtlError>
        break;
 80079fa:	bf00      	nop
      }
      break;
 80079fc:	e0de      	b.n	8007bbc <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d002      	beq.n	8007a0e <USBD_StdEPReq+0xfe>
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d015      	beq.n	8007a38 <USBD_StdEPReq+0x128>
 8007a0c:	e026      	b.n	8007a5c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00c      	beq.n	8007a2e <USBD_StdEPReq+0x11e>
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b80      	cmp	r3, #128	; 0x80
 8007a18:	d009      	beq.n	8007a2e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 f924 	bl	8008c6c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007a24:	2180      	movs	r1, #128	; 0x80
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 f920 	bl	8008c6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a2c:	e01c      	b.n	8007a68 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fb74 	bl	800811e <USBD_CtlError>
        break;
 8007a36:	e017      	b.n	8007a68 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	885b      	ldrh	r3, [r3, #2]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d112      	bne.n	8007a66 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f92b 	bl	8008caa <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fc2a 	bl	80082ae <USBD_CtlSendStatus>
        }
        break;
 8007a5a:	e004      	b.n	8007a66 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fb5d 	bl	800811e <USBD_CtlError>
        break;
 8007a64:	e000      	b.n	8007a68 <USBD_StdEPReq+0x158>
        break;
 8007a66:	bf00      	nop
      }
      break;
 8007a68:	e0a8      	b.n	8007bbc <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d002      	beq.n	8007a7a <USBD_StdEPReq+0x16a>
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d031      	beq.n	8007adc <USBD_StdEPReq+0x1cc>
 8007a78:	e095      	b.n	8007ba6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <USBD_StdEPReq+0x180>
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	2b80      	cmp	r3, #128	; 0x80
 8007a84:	d004      	beq.n	8007a90 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fb48 	bl	800811e <USBD_CtlError>
          break;
 8007a8e:	e08f      	b.n	8007bb0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da0b      	bge.n	8007ab0 <USBD_StdEPReq+0x1a0>
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	3310      	adds	r3, #16
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	e00a      	b.n	8007ac6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb8c 	bl	80081f2 <USBD_CtlSendData>
          break;
 8007ada:	e069      	b.n	8007bb0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da11      	bge.n	8007b08 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	f003 020f 	and.w	r2, r3, #15
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	3318      	adds	r3, #24
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d117      	bne.n	8007b2e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fb0c 	bl	800811e <USBD_CtlError>
            break;
 8007b06:	e053      	b.n	8007bb0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	f003 020f 	and.w	r2, r3, #15
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 faf9 	bl	800811e <USBD_CtlError>
            break;
 8007b2c:	e040      	b.n	8007bb0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da0b      	bge.n	8007b4e <USBD_StdEPReq+0x23e>
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	3310      	adds	r3, #16
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	e00a      	b.n	8007b64 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4413      	add	r3, r2
 8007b64:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <USBD_StdEPReq+0x262>
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b80      	cmp	r3, #128	; 0x80
 8007b70:	d103      	bne.n	8007b7a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e00e      	b.n	8007b98 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 f8b2 	bl	8008ce8 <USBD_LL_IsStallEP>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e002      	b.n	8007b98 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fb27 	bl	80081f2 <USBD_CtlSendData>
          break;
 8007ba4:	e004      	b.n	8007bb0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fab8 	bl	800811e <USBD_CtlError>
        break;
 8007bae:	bf00      	nop
      }
      break;
 8007bb0:	e004      	b.n	8007bbc <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fab2 	bl	800811e <USBD_CtlError>
      break;
 8007bba:	bf00      	nop
    }
    break;
 8007bbc:	e004      	b.n	8007bc8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 faac 	bl	800811e <USBD_CtlError>
    break;
 8007bc6:	bf00      	nop
  }

  return ret;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	885b      	ldrh	r3, [r3, #2]
 8007be2:	0a1b      	lsrs	r3, r3, #8
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	2b06      	cmp	r3, #6
 8007bea:	f200 80c9 	bhi.w	8007d80 <USBD_GetDescriptor+0x1ac>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <USBD_GetDescriptor+0x20>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c29 	.word	0x08007c29
 8007bfc:	08007c69 	.word	0x08007c69
 8007c00:	08007d81 	.word	0x08007d81
 8007c04:	08007d81 	.word	0x08007d81
 8007c08:	08007d2d 	.word	0x08007d2d
 8007c0c:	08007d53 	.word	0x08007d53
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 010a 	add.w	r1, r7, #10
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
    break;
 8007c26:	e0b0      	b.n	8007d8a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7c1b      	ldrb	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10d      	bne.n	8007c4c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	f107 020a 	add.w	r2, r7, #10
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	2202      	movs	r2, #2
 8007c48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007c4a:	e09e      	b.n	8007d8a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	f107 020a 	add.w	r2, r7, #10
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	2202      	movs	r2, #2
 8007c64:	701a      	strb	r2, [r3, #0]
    break;
 8007c66:	e090      	b.n	8007d8a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	885b      	ldrh	r3, [r3, #2]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	d856      	bhi.n	8007d20 <USBD_GetDescriptor+0x14c>
 8007c72:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <USBD_GetDescriptor+0xa4>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007c91 	.word	0x08007c91
 8007c7c:	08007ca9 	.word	0x08007ca9
 8007c80:	08007cc1 	.word	0x08007cc1
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007cf1 	.word	0x08007cf1
 8007c8c:	08007d09 	.word	0x08007d09
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 010a 	add.w	r1, r7, #10
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
      break;
 8007ca6:	e040      	b.n	8007d2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	7c12      	ldrb	r2, [r2, #16]
 8007cb4:	f107 010a 	add.w	r1, r7, #10
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	60f8      	str	r0, [r7, #12]
      break;
 8007cbe:	e034      	b.n	8007d2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 010a 	add.w	r1, r7, #10
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
      break;
 8007cd6:	e028      	b.n	8007d2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	7c12      	ldrb	r2, [r2, #16]
 8007ce4:	f107 010a 	add.w	r1, r7, #10
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
      break;
 8007cee:	e01c      	b.n	8007d2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	f107 010a 	add.w	r1, r7, #10
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
      break;
 8007d06:	e010      	b.n	8007d2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 010a 	add.w	r1, r7, #10
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
      break;
 8007d1e:	e004      	b.n	8007d2a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9fb 	bl	800811e <USBD_CtlError>
      return;
 8007d28:	e04b      	b.n	8007dc2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007d2a:	e02e      	b.n	8007d8a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7c1b      	ldrb	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d109      	bne.n	8007d48 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3c:	f107 020a 	add.w	r2, r7, #10
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
      break;
 8007d46:	e020      	b.n	8007d8a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f9e7 	bl	800811e <USBD_CtlError>
      return;
 8007d50:	e037      	b.n	8007dc2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	7c1b      	ldrb	r3, [r3, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10d      	bne.n	8007d76 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	f107 020a 	add.w	r2, r7, #10
 8007d66:	4610      	mov	r0, r2
 8007d68:	4798      	blx	r3
 8007d6a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	2207      	movs	r2, #7
 8007d72:	701a      	strb	r2, [r3, #0]
      break;
 8007d74:	e009      	b.n	8007d8a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f9d0 	bl	800811e <USBD_CtlError>
      return;
 8007d7e:	e020      	b.n	8007dc2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9cb 	bl	800811e <USBD_CtlError>
    return;
 8007d88:	e01b      	b.n	8007dc2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007d8a:	897b      	ldrh	r3, [r7, #10]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d011      	beq.n	8007db4 <USBD_GetDescriptor+0x1e0>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	88db      	ldrh	r3, [r3, #6]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00d      	beq.n	8007db4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	88da      	ldrh	r2, [r3, #6]
 8007d9c:	897b      	ldrh	r3, [r7, #10]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	bf28      	it	cs
 8007da2:	4613      	movcs	r3, r2
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007da8:	897b      	ldrh	r3, [r7, #10]
 8007daa:	461a      	mov	r2, r3
 8007dac:	68f9      	ldr	r1, [r7, #12]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa1f 	bl	80081f2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	88db      	ldrh	r3, [r3, #6]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d102      	bne.n	8007dc2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fa76 	bl	80082ae <USBD_CtlSendStatus>
  }
}
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	889b      	ldrh	r3, [r3, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d130      	bne.n	8007e3c <USBD_SetAddress+0x74>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	88db      	ldrh	r3, [r3, #6]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d12c      	bne.n	8007e3c <USBD_SetAddress+0x74>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	885b      	ldrh	r3, [r3, #2]
 8007de6:	2b7f      	cmp	r3, #127	; 0x7f
 8007de8:	d828      	bhi.n	8007e3c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d104      	bne.n	8007e0a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f98b 	bl	800811e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e08:	e01d      	b.n	8007e46 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7bfa      	ldrb	r2, [r7, #15]
 8007e0e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 ff92 	bl	8008d40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa46 	bl	80082ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e30:	e009      	b.n	8007e46 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3a:	e004      	b.n	8007e46 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f96d 	bl	800811e <USBD_CtlError>
  }
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	4b41      	ldr	r3, [pc, #260]	; (8007f68 <USBD_SetConfig+0x118>)
 8007e62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e64:	4b40      	ldr	r3, [pc, #256]	; (8007f68 <USBD_SetConfig+0x118>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d904      	bls.n	8007e76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f955 	bl	800811e <USBD_CtlError>
 8007e74:	e075      	b.n	8007f62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d002      	beq.n	8007e86 <USBD_SetConfig+0x36>
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d023      	beq.n	8007ecc <USBD_SetConfig+0x7c>
 8007e84:	e062      	b.n	8007f4c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007e86:	4b38      	ldr	r3, [pc, #224]	; (8007f68 <USBD_SetConfig+0x118>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01a      	beq.n	8007ec4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007e8e:	4b36      	ldr	r3, [pc, #216]	; (8007f68 <USBD_SetConfig+0x118>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ea0:	4b31      	ldr	r3, [pc, #196]	; (8007f68 <USBD_SetConfig+0x118>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff fa5d 	bl	8007366 <USBD_SetClassConfig>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d104      	bne.n	8007ebc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f932 	bl	800811e <USBD_CtlError>
          return;
 8007eba:	e052      	b.n	8007f62 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f9f6 	bl	80082ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007ec2:	e04e      	b.n	8007f62 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9f2 	bl	80082ae <USBD_CtlSendStatus>
      break;
 8007eca:	e04a      	b.n	8007f62 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ecc:	4b26      	ldr	r3, [pc, #152]	; (8007f68 <USBD_SetConfig+0x118>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d112      	bne.n	8007efa <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007edc:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <USBD_SetConfig+0x118>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ee6:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <USBD_SetConfig+0x118>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff fa59 	bl	80073a4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9db 	bl	80082ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007ef8:	e033      	b.n	8007f62 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <USBD_SetConfig+0x118>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d01d      	beq.n	8007f44 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff fa47 	bl	80073a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f16:	4b14      	ldr	r3, [pc, #80]	; (8007f68 <USBD_SetConfig+0x118>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f20:	4b11      	ldr	r3, [pc, #68]	; (8007f68 <USBD_SetConfig+0x118>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fa1d 	bl	8007366 <USBD_SetClassConfig>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d104      	bne.n	8007f3c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f8f2 	bl	800811e <USBD_CtlError>
          return;
 8007f3a:	e012      	b.n	8007f62 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f9b6 	bl	80082ae <USBD_CtlSendStatus>
      break;
 8007f42:	e00e      	b.n	8007f62 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f9b2 	bl	80082ae <USBD_CtlSendStatus>
      break;
 8007f4a:	e00a      	b.n	8007f62 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8e5 	bl	800811e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <USBD_SetConfig+0x118>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff fa22 	bl	80073a4 <USBD_ClrClassConfig>
      break;
 8007f60:	bf00      	nop
    }
  }
}
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	200002f4 	.word	0x200002f4

08007f6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	88db      	ldrh	r3, [r3, #6]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d004      	beq.n	8007f88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f8cc 	bl	800811e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007f86:	e022      	b.n	8007fce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	dc02      	bgt.n	8007f98 <USBD_GetConfig+0x2c>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dc03      	bgt.n	8007f9e <USBD_GetConfig+0x32>
 8007f96:	e015      	b.n	8007fc4 <USBD_GetConfig+0x58>
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d00b      	beq.n	8007fb4 <USBD_GetConfig+0x48>
 8007f9c:	e012      	b.n	8007fc4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	2201      	movs	r2, #1
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f920 	bl	80081f2 <USBD_CtlSendData>
      break;
 8007fb2:	e00c      	b.n	8007fce <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	2201      	movs	r2, #1
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f918 	bl	80081f2 <USBD_CtlSendData>
      break;
 8007fc2:	e004      	b.n	8007fce <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f8a9 	bl	800811e <USBD_CtlError>
      break;
 8007fcc:	bf00      	nop
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d81e      	bhi.n	800802a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	88db      	ldrh	r3, [r3, #6]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d004      	beq.n	8007ffe <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f891 	bl	800811e <USBD_CtlError>
      break;
 8007ffc:	e01a      	b.n	8008034 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f043 0202 	orr.w	r2, r3, #2
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	330c      	adds	r3, #12
 800801e:	2202      	movs	r2, #2
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f8e5 	bl	80081f2 <USBD_CtlSendData>
    break;
 8008028:	e004      	b.n	8008034 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f876 	bl	800811e <USBD_CtlError>
    break;
 8008032:	bf00      	nop
  }
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	885b      	ldrh	r3, [r3, #2]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d106      	bne.n	800805c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f929 	bl	80082ae <USBD_CtlSendStatus>
  }

}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008074:	3b01      	subs	r3, #1
 8008076:	2b02      	cmp	r3, #2
 8008078:	d80b      	bhi.n	8008092 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d10c      	bne.n	800809c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f90f 	bl	80082ae <USBD_CtlSendStatus>
    }
    break;
 8008090:	e004      	b.n	800809c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f842 	bl	800811e <USBD_CtlError>
    break;
 800809a:	e000      	b.n	800809e <USBD_ClrFeature+0x3a>
    break;
 800809c:	bf00      	nop
  }
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	785a      	ldrb	r2, [r3, #1]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	3302      	adds	r3, #2
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	3303      	adds	r3, #3
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4413      	add	r3, r2
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	3304      	adds	r3, #4
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	3305      	adds	r3, #5
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	4413      	add	r3, r2
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	3306      	adds	r3, #6
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	3307      	adds	r3, #7
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	b29b      	uxth	r3, r3
 800810c:	4413      	add	r3, r2
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	80da      	strh	r2, [r3, #6]

}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr

0800811e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008128:	2180      	movs	r1, #128	; 0x80
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fd9e 	bl	8008c6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fd9a 	bl	8008c6c <USBD_LL_StallEP>
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d032      	beq.n	80081bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 f834 	bl	80081c4 <USBD_GetLen>
 800815c:	4603      	mov	r3, r0
 800815e:	3301      	adds	r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	b29a      	uxth	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	75fa      	strb	r2, [r7, #23]
 8008170:	461a      	mov	r2, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	4413      	add	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	75fa      	strb	r2, [r7, #23]
 8008182:	461a      	mov	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4413      	add	r3, r2
 8008188:	2203      	movs	r2, #3
 800818a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800818c:	e012      	b.n	80081b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	60fa      	str	r2, [r7, #12]
 8008194:	7dfa      	ldrb	r2, [r7, #23]
 8008196:	1c51      	adds	r1, r2, #1
 8008198:	75f9      	strb	r1, [r7, #23]
 800819a:	4611      	mov	r1, r2
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	440a      	add	r2, r1
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	75fa      	strb	r2, [r7, #23]
 80081aa:	461a      	mov	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4413      	add	r3, r2
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e8      	bne.n	800818e <USBD_GetString+0x4e>
    }
  }
}
 80081bc:	bf00      	nop
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80081d0:	e005      	b.n	80081de <USBD_GetLen+0x1a>
    {
        len++;
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	3301      	adds	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3301      	adds	r3, #1
 80081dc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1f5      	bne.n	80081d2 <USBD_GetLen+0xe>
    }

    return len;
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr

080081f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	4613      	mov	r3, r2
 80081fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2202      	movs	r2, #2
 8008204:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008208:	88fa      	ldrh	r2, [r7, #6]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800820e:	88fa      	ldrh	r2, [r7, #6]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008214:	88fb      	ldrh	r3, [r7, #6]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	2100      	movs	r1, #0
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fdaf 	bl	8008d7e <USBD_LL_Transmit>

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	4613      	mov	r3, r2
 8008236:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008238:	88fb      	ldrh	r3, [r7, #6]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	2100      	movs	r1, #0
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 fd9d 	bl	8008d7e <USBD_LL_Transmit>

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	4613      	mov	r3, r2
 800825a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2203      	movs	r2, #3
 8008260:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	2100      	movs	r1, #0
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fda2 	bl	8008dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	4613      	mov	r3, r2
 8008296:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	2100      	movs	r1, #0
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fd90 	bl	8008dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2204      	movs	r2, #4
 80082ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082be:	2300      	movs	r3, #0
 80082c0:	2200      	movs	r2, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fd5a 	bl	8008d7e <USBD_LL_Transmit>

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2205      	movs	r2, #5
 80082e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80082e4:	2300      	movs	r3, #0
 80082e6:	2200      	movs	r2, #0
 80082e8:	2100      	movs	r1, #0
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fd6a 	bl	8008dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8008306:	f7f8 fc7d 	bl	8000c04 <HAL_GetTick>
 800830a:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 800830c:	e009      	b.n	8008322 <WaitWhileBusy+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 800830e:	f7f8 fc79 	bl	8000c04 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	429a      	cmp	r2, r3
 800831c:	d901      	bls.n	8008322 <WaitWhileBusy+0x26>
		{
			return(LoRa_TIMEOUT);
 800831e:	2302      	movs	r3, #2
 8008320:	e008      	b.n	8008334 <WaitWhileBusy+0x38>
	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8008322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008326:	4805      	ldr	r0, [pc, #20]	; (800833c <WaitWhileBusy+0x40>)
 8008328:	f7f8 ff26 	bl	8001178 <HAL_GPIO_ReadPin>
 800832c:	4603      	mov	r3, r0
 800832e:	2b01      	cmp	r3, #1
 8008330:	d0ed      	beq.n	800830e <WaitWhileBusy+0x12>
		}
	}

	return(LoRa_OK);
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	40020000 	.word	0x40020000

08008340 <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	807b      	strh	r3, [r7, #2]
 800834c:	4613      	mov	r3, r2
 800834e:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 8008350:	200a      	movs	r0, #10
 8008352:	f7ff ffd3 	bl	80082fc <WaitWhileBusy>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 800835c:	2301      	movs	r3, #1
 800835e:	e01c      	b.n	800839a <SPI_Send+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8008360:	2200      	movs	r2, #0
 8008362:	2110      	movs	r1, #16
 8008364:	480f      	ldr	r0, [pc, #60]	; (80083a4 <SPI_Send+0x64>)
 8008366:	f7f8 ff1e 	bl	80011a6 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, buffer, numBytes, 100) != HAL_OK)
 800836a:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <SPI_Send+0x68>)
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	887a      	ldrh	r2, [r7, #2]
 8008370:	2364      	movs	r3, #100	; 0x64
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	f7fb fb10 	bl	8003998 <HAL_SPI_Transmit>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <SPI_Send+0x42>
	{
		return(LoRa_ERROR);
 800837e:	2301      	movs	r3, #1
 8008380:	e00b      	b.n	800839a <SPI_Send+0x5a>
	}

	if(moreToCome != true)
 8008382:	787b      	ldrb	r3, [r7, #1]
 8008384:	f083 0301 	eor.w	r3, r3, #1
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <SPI_Send+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 800838e:	2201      	movs	r2, #1
 8008390:	2110      	movs	r1, #16
 8008392:	4804      	ldr	r0, [pc, #16]	; (80083a4 <SPI_Send+0x64>)
 8008394:	f7f8 ff07 	bl	80011a6 <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40020000 	.word	0x40020000
 80083a8:	200002f8 	.word	0x200002f8

080083ac <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SPI_HandleTypeDef *hspiPtr)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[10];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 80083b4:	4a65      	ldr	r2, [pc, #404]	; (800854c <LoRa_Init+0x1a0>)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6013      	str	r3, [r2, #0]

  /* Set NSS high */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 80083ba:	2201      	movs	r2, #1
 80083bc:	2110      	movs	r1, #16
 80083be:	4864      	ldr	r0, [pc, #400]	; (8008550 <LoRa_Init+0x1a4>)
 80083c0:	f7f8 fef1 	bl	80011a6 <HAL_GPIO_WritePin>

  /* Reset SX1262 chip */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET); 	/* Pull NRST low */
 80083c4:	2200      	movs	r2, #0
 80083c6:	2101      	movs	r1, #1
 80083c8:	4861      	ldr	r0, [pc, #388]	; (8008550 <LoRa_Init+0x1a4>)
 80083ca:	f7f8 feec 	bl	80011a6 <HAL_GPIO_WritePin>
  HAL_Delay(1); 															/* delay 1mS */
 80083ce:	2001      	movs	r0, #1
 80083d0:	f7f8 fc22 	bl	8000c18 <HAL_Delay>
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);		/* Set NRST high */
 80083d4:	2201      	movs	r2, #1
 80083d6:	2101      	movs	r1, #1
 80083d8:	485d      	ldr	r0, [pc, #372]	; (8008550 <LoRa_Init+0x1a4>)
 80083da:	f7f8 fee4 	bl	80011a6 <HAL_GPIO_WritePin>

  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 80083de:	2380      	movs	r3, #128	; 0x80
 80083e0:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_STDBY_RC;
 80083e2:	2300      	movs	r3, #0
 80083e4:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	2200      	movs	r2, #0
 80083ec:	2102      	movs	r1, #2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff ffa6 	bl	8008340 <SPI_Send>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <LoRa_Init+0x52>
  {
	  return(LoRa_ERROR);
 80083fa:	2301      	movs	r3, #1
 80083fc:	e0a2      	b.n	8008544 <LoRa_Init+0x198>
  }

  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 80083fe:	238a      	movs	r3, #138	; 0x8a
 8008400:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 8008402:	2301      	movs	r3, #1
 8008404:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8008406:	f107 030c 	add.w	r3, r7, #12
 800840a:	2200      	movs	r2, #0
 800840c:	2102      	movs	r1, #2
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff ff96 	bl	8008340 <SPI_Send>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <LoRa_Init+0x72>
  {
	  return(LoRa_ERROR);
 800841a:	2301      	movs	r3, #1
 800841c:	e092      	b.n	8008544 <LoRa_Init+0x198>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 800841e:	2386      	movs	r3, #134	; 0x86
 8008420:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x39;
 8008422:	2339      	movs	r3, #57	; 0x39
 8008424:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x30;
 8008426:	2330      	movs	r3, #48	; 0x30
 8008428:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x00;
 800842e:	2300      	movs	r3, #0
 8008430:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	2200      	movs	r2, #0
 8008438:	2105      	movs	r1, #5
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff ff80 	bl	8008340 <SPI_Send>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <LoRa_Init+0x9e>
  {
	  return(LoRa_ERROR);
 8008446:	2301      	movs	r3, #1
 8008448:	e07c      	b.n	8008544 <LoRa_Init+0x198>
  }

  /* Set the power amplifier configuration */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 800844a:	2395      	movs	r3, #149	; 0x95
 800844c:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 800844e:	2304      	movs	r3, #4
 8008450:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x07; /* hpMax */
 8008452:	2307      	movs	r3, #7
 8008454:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00; /* devSel */
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x01; /* paLut */
 800845a:	2301      	movs	r3, #1
 800845c:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 800845e:	f107 030c 	add.w	r3, r7, #12
 8008462:	2200      	movs	r2, #0
 8008464:	2105      	movs	r1, #5
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff ff6a 	bl	8008340 <SPI_Send>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <LoRa_Init+0xca>
  {
	  return(LoRa_ERROR);
 8008472:	2301      	movs	r3, #1
 8008474:	e066      	b.n	8008544 <LoRa_Init+0x198>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 8008476:	238e      	movs	r3, #142	; 0x8e
 8008478:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 800847a:	2316      	movs	r3, #22
 800847c:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = LORA_STANDARD_RAMPTIME;
 800847e:	2304      	movs	r3, #4
 8008480:	73bb      	strb	r3, [r7, #14]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 8008482:	f107 030c 	add.w	r3, r7, #12
 8008486:	2200      	movs	r2, #0
 8008488:	2103      	movs	r1, #3
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff ff58 	bl	8008340 <SPI_Send>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <LoRa_Init+0xee>
  {
	  return(LoRa_ERROR);
 8008496:	2301      	movs	r3, #1
 8008498:	e054      	b.n	8008544 <LoRa_Init+0x198>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 800849a:	239d      	movs	r3, #157	; 0x9d
 800849c:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* enable */
 800849e:	2301      	movs	r3, #1
 80084a0:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80084a2:	f107 030c 	add.w	r3, r7, #12
 80084a6:	2200      	movs	r2, #0
 80084a8:	2102      	movs	r1, #2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff ff48 	bl	8008340 <SPI_Send>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <LoRa_Init+0x10e>
  {
	  return(LoRa_ERROR);
 80084b6:	2301      	movs	r3, #1
 80084b8:	e044      	b.n	8008544 <LoRa_Init+0x198>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 80084ba:	2396      	movs	r3, #150	; 0x96
 80084bc:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 80084be:	2301      	movs	r3, #1
 80084c0:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 80084c2:	f107 030c 	add.w	r3, r7, #12
 80084c6:	2200      	movs	r2, #0
 80084c8:	2102      	movs	r1, #2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff ff38 	bl	8008340 <SPI_Send>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <LoRa_Init+0x12e>
  {
	  return(LoRa_ERROR);
 80084d6:	2301      	movs	r3, #1
 80084d8:	e034      	b.n	8008544 <LoRa_Init+0x198>
  }

  /* Set LoRa modulation parameters */
  xmitBuffer[0] = LORA_SET_MODULATION_PARAMS_OPCODE;
 80084da:	238b      	movs	r3, #139	; 0x8b
 80084dc:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 7; 		/* Spreading factor */
 80084de:	2307      	movs	r3, #7
 80084e0:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x04; 	/* BW = 125 KHz */
 80084e2:	2304      	movs	r3, #4
 80084e4:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x01;		/* Coding Rate = 4/5 */
 80084e6:	2301      	movs	r3, #1
 80084e8:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0;		/* Low data rate optimization off */
 80084ea:	2300      	movs	r3, #0
 80084ec:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 80084ee:	f107 030c 	add.w	r3, r7, #12
 80084f2:	2200      	movs	r2, #0
 80084f4:	2105      	movs	r1, #5
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff ff22 	bl	8008340 <SPI_Send>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <LoRa_Init+0x15a>
  {
	  return(LoRa_ERROR);
 8008502:	2301      	movs	r3, #1
 8008504:	e01e      	b.n	8008544 <LoRa_Init+0x198>
  }

  /* Set DIO IRQ parameters */
  xmitBuffer[0] = LORA_SET_DIO_IRQ_PARAMS_OPCODE;
 8008506:	2308      	movs	r3, #8
 8008508:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x02;	/* Enable timeout interrupt */
 800850a:	2302      	movs	r3, #2
 800850c:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x02;	/* Enable RX done interrupt */
 800850e:	2302      	movs	r3, #2
 8008510:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x02;	/* Map timeout to DIO1 */
 8008512:	2302      	movs	r3, #2
 8008514:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x02; /* Map RX done to DIO1 */
 8008516:	2302      	movs	r3, #2
 8008518:	743b      	strb	r3, [r7, #16]
  xmitBuffer[5] = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	747b      	strb	r3, [r7, #17]
  xmitBuffer[6] = 0;	/* No interrupts to DIO2 */
 800851e:	2300      	movs	r3, #0
 8008520:	74bb      	strb	r3, [r7, #18]
  xmitBuffer[7]	= 0;
 8008522:	2300      	movs	r3, #0
 8008524:	74fb      	strb	r3, [r7, #19]
  xmitBuffer[8]	= 0;	/* No interrupts to DIO3 */
 8008526:	2300      	movs	r3, #0
 8008528:	753b      	strb	r3, [r7, #20]
  if(SPI_Send(xmitBuffer, 9, false) != LoRa_OK)
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	2200      	movs	r2, #0
 8008530:	2109      	movs	r1, #9
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff ff04 	bl	8008340 <SPI_Send>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <LoRa_Init+0x196>
  {
	  return(LoRa_ERROR);
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <LoRa_Init+0x198>
  }

  return(LoRa_OK);
 8008542:	2300      	movs	r3, #0

}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	200002f8 	.word	0x200002f8
 8008550:	40020000 	.word	0x40020000

08008554 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008558:	2200      	movs	r2, #0
 800855a:	4912      	ldr	r1, [pc, #72]	; (80085a4 <MX_USB_DEVICE_Init+0x50>)
 800855c:	4812      	ldr	r0, [pc, #72]	; (80085a8 <MX_USB_DEVICE_Init+0x54>)
 800855e:	f7fe fea8 	bl	80072b2 <USBD_Init>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008568:	f7f8 f954 	bl	8000814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800856c:	490f      	ldr	r1, [pc, #60]	; (80085ac <MX_USB_DEVICE_Init+0x58>)
 800856e:	480e      	ldr	r0, [pc, #56]	; (80085a8 <MX_USB_DEVICE_Init+0x54>)
 8008570:	f7fe feca 	bl	8007308 <USBD_RegisterClass>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800857a:	f7f8 f94b 	bl	8000814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800857e:	490c      	ldr	r1, [pc, #48]	; (80085b0 <MX_USB_DEVICE_Init+0x5c>)
 8008580:	4809      	ldr	r0, [pc, #36]	; (80085a8 <MX_USB_DEVICE_Init+0x54>)
 8008582:	f7fe fdfb 	bl	800717c <USBD_CDC_RegisterInterface>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800858c:	f7f8 f942 	bl	8000814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008590:	4805      	ldr	r0, [pc, #20]	; (80085a8 <MX_USB_DEVICE_Init+0x54>)
 8008592:	f7fe fed2 	bl	800733a <USBD_Start>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800859c:	f7f8 f93a 	bl	8000814 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085a0:	bf00      	nop
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	2000012c 	.word	0x2000012c
 80085a8:	200002fc 	.word	0x200002fc
 80085ac:	20000018 	.word	0x20000018
 80085b0:	2000011c 	.word	0x2000011c

080085b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085b8:	2200      	movs	r2, #0
 80085ba:	4905      	ldr	r1, [pc, #20]	; (80085d0 <CDC_Init_FS+0x1c>)
 80085bc:	4805      	ldr	r0, [pc, #20]	; (80085d4 <CDC_Init_FS+0x20>)
 80085be:	f7fe fdf3 	bl	80071a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085c2:	4905      	ldr	r1, [pc, #20]	; (80085d8 <CDC_Init_FS+0x24>)
 80085c4:	4803      	ldr	r0, [pc, #12]	; (80085d4 <CDC_Init_FS+0x20>)
 80085c6:	f7fe fe08 	bl	80071da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20000998 	.word	0x20000998
 80085d4:	200002fc 	.word	0x200002fc
 80085d8:	20000598 	.word	0x20000598

080085dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr
	...

080085ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
 80085f8:	4613      	mov	r3, r2
 80085fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b23      	cmp	r3, #35	; 0x23
 8008600:	d84a      	bhi.n	8008698 <CDC_Control_FS+0xac>
 8008602:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <CDC_Control_FS+0x1c>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008699 	.word	0x08008699
 800860c:	08008699 	.word	0x08008699
 8008610:	08008699 	.word	0x08008699
 8008614:	08008699 	.word	0x08008699
 8008618:	08008699 	.word	0x08008699
 800861c:	08008699 	.word	0x08008699
 8008620:	08008699 	.word	0x08008699
 8008624:	08008699 	.word	0x08008699
 8008628:	08008699 	.word	0x08008699
 800862c:	08008699 	.word	0x08008699
 8008630:	08008699 	.word	0x08008699
 8008634:	08008699 	.word	0x08008699
 8008638:	08008699 	.word	0x08008699
 800863c:	08008699 	.word	0x08008699
 8008640:	08008699 	.word	0x08008699
 8008644:	08008699 	.word	0x08008699
 8008648:	08008699 	.word	0x08008699
 800864c:	08008699 	.word	0x08008699
 8008650:	08008699 	.word	0x08008699
 8008654:	08008699 	.word	0x08008699
 8008658:	08008699 	.word	0x08008699
 800865c:	08008699 	.word	0x08008699
 8008660:	08008699 	.word	0x08008699
 8008664:	08008699 	.word	0x08008699
 8008668:	08008699 	.word	0x08008699
 800866c:	08008699 	.word	0x08008699
 8008670:	08008699 	.word	0x08008699
 8008674:	08008699 	.word	0x08008699
 8008678:	08008699 	.word	0x08008699
 800867c:	08008699 	.word	0x08008699
 8008680:	08008699 	.word	0x08008699
 8008684:	08008699 	.word	0x08008699
 8008688:	08008699 	.word	0x08008699
 800868c:	08008699 	.word	0x08008699
 8008690:	08008699 	.word	0x08008699
 8008694:	08008699 	.word	0x08008699
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008698:	bf00      	nop
  }

  return (USBD_OK);
 800869a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop

080086a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4805      	ldr	r0, [pc, #20]	; (80086cc <CDC_Receive_FS+0x24>)
 80086b6:	f7fe fd90 	bl	80071da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086ba:	4804      	ldr	r0, [pc, #16]	; (80086cc <CDC_Receive_FS+0x24>)
 80086bc:	f7fe fdcf 	bl	800725e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	200002fc 	.word	0x200002fc

080086d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086e0:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <CDC_Transmit_FS+0x48>)
 80086e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e00b      	b.n	800870e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086f6:	887b      	ldrh	r3, [r7, #2]
 80086f8:	461a      	mov	r2, r3
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4806      	ldr	r0, [pc, #24]	; (8008718 <CDC_Transmit_FS+0x48>)
 80086fe:	f7fe fd53 	bl	80071a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008702:	4805      	ldr	r0, [pc, #20]	; (8008718 <CDC_Transmit_FS+0x48>)
 8008704:	f7fe fd7c 	bl	8007200 <USBD_CDC_TransmitPacket>
 8008708:	4603      	mov	r3, r0
 800870a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200002fc 	.word	0x200002fc

0800871c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2212      	movs	r2, #18
 800872c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800872e:	4b03      	ldr	r3, [pc, #12]	; (800873c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	bc80      	pop	{r7}
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000148 	.word	0x20000148

08008740 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2204      	movs	r2, #4
 8008750:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008752:	4b03      	ldr	r3, [pc, #12]	; (8008760 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	2000015c 	.word	0x2000015c

08008764 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d105      	bne.n	8008782 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	4907      	ldr	r1, [pc, #28]	; (8008798 <USBD_FS_ProductStrDescriptor+0x34>)
 800877a:	4808      	ldr	r0, [pc, #32]	; (800879c <USBD_FS_ProductStrDescriptor+0x38>)
 800877c:	f7ff fce0 	bl	8008140 <USBD_GetString>
 8008780:	e004      	b.n	800878c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	4904      	ldr	r1, [pc, #16]	; (8008798 <USBD_FS_ProductStrDescriptor+0x34>)
 8008786:	4805      	ldr	r0, [pc, #20]	; (800879c <USBD_FS_ProductStrDescriptor+0x38>)
 8008788:	f7ff fcda 	bl	8008140 <USBD_GetString>
  }
  return USBD_StrDesc;
 800878c:	4b02      	ldr	r3, [pc, #8]	; (8008798 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800878e:	4618      	mov	r0, r3
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20000d98 	.word	0x20000d98
 800879c:	0800984c 	.word	0x0800984c

080087a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	4904      	ldr	r1, [pc, #16]	; (80087c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087b0:	4804      	ldr	r0, [pc, #16]	; (80087c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087b2:	f7ff fcc5 	bl	8008140 <USBD_GetString>
  return USBD_StrDesc;
 80087b6:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20000d98 	.word	0x20000d98
 80087c4:	08009864 	.word	0x08009864

080087c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	221a      	movs	r2, #26
 80087d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087da:	f000 f843 	bl	8008864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087de:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20000160 	.word	0x20000160

080087ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4907      	ldr	r1, [pc, #28]	; (8008820 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008802:	4808      	ldr	r0, [pc, #32]	; (8008824 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008804:	f7ff fc9c 	bl	8008140 <USBD_GetString>
 8008808:	e004      	b.n	8008814 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4904      	ldr	r1, [pc, #16]	; (8008820 <USBD_FS_ConfigStrDescriptor+0x34>)
 800880e:	4805      	ldr	r0, [pc, #20]	; (8008824 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008810:	f7ff fc96 	bl	8008140 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000d98 	.word	0x20000d98
 8008824:	08009878 	.word	0x08009878

08008828 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d105      	bne.n	8008846 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4907      	ldr	r1, [pc, #28]	; (800885c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800883e:	4808      	ldr	r0, [pc, #32]	; (8008860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008840:	f7ff fc7e 	bl	8008140 <USBD_GetString>
 8008844:	e004      	b.n	8008850 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4904      	ldr	r1, [pc, #16]	; (800885c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800884a:	4805      	ldr	r0, [pc, #20]	; (8008860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800884c:	f7ff fc78 	bl	8008140 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008850:	4b02      	ldr	r3, [pc, #8]	; (800885c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20000d98 	.word	0x20000d98
 8008860:	08009884 	.word	0x08009884

08008864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800886a:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <Get_SerialNum+0x44>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <Get_SerialNum+0x48>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008876:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <Get_SerialNum+0x4c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800888a:	2208      	movs	r2, #8
 800888c:	4909      	ldr	r1, [pc, #36]	; (80088b4 <Get_SerialNum+0x50>)
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f814 	bl	80088bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008894:	2204      	movs	r2, #4
 8008896:	4908      	ldr	r1, [pc, #32]	; (80088b8 <Get_SerialNum+0x54>)
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f000 f80f 	bl	80088bc <IntToUnicode>
  }
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	1ff80050 	.word	0x1ff80050
 80088ac:	1ff80054 	.word	0x1ff80054
 80088b0:	1ff80058 	.word	0x1ff80058
 80088b4:	20000162 	.word	0x20000162
 80088b8:	20000172 	.word	0x20000172

080088bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]
 80088d2:	e027      	b.n	8008924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	0f1b      	lsrs	r3, r3, #28
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d80b      	bhi.n	80088f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	0f1b      	lsrs	r3, r3, #28
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	4619      	mov	r1, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	440b      	add	r3, r1
 80088ec:	3230      	adds	r2, #48	; 0x30
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	e00a      	b.n	800890a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	0f1b      	lsrs	r3, r3, #28
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	4619      	mov	r1, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	440b      	add	r3, r1
 8008904:	3237      	adds	r2, #55	; 0x37
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	3301      	adds	r3, #1
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	4413      	add	r3, r2
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	3301      	adds	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
 8008924:	7dfa      	ldrb	r2, [r7, #23]
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	429a      	cmp	r2, r3
 800892a:	d3d3      	bcc.n	80088d4 <IntToUnicode+0x18>
  }
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	bc80      	pop	{r7}
 8008936:	4770      	bx	lr

08008938 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d106      	bne.n	8008958 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <HAL_PCDEx_SetConnectionState+0x38>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4a08      	ldr	r2, [pc, #32]	; (8008970 <HAL_PCDEx_SetConnectionState+0x38>)
 8008950:	f043 0301 	orr.w	r3, r3, #1
 8008954:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008956:	e005      	b.n	8008964 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <HAL_PCDEx_SetConnectionState+0x38>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	4a04      	ldr	r2, [pc, #16]	; (8008970 <HAL_PCDEx_SetConnectionState+0x38>)
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	6053      	str	r3, [r2, #4]
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	bc80      	pop	{r7}
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	40010000 	.word	0x40010000

08008974 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0d      	ldr	r2, [pc, #52]	; (80089b8 <HAL_PCD_MspInit+0x44>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d113      	bne.n	80089ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008986:	4b0d      	ldr	r3, [pc, #52]	; (80089bc <HAL_PCD_MspInit+0x48>)
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	4a0c      	ldr	r2, [pc, #48]	; (80089bc <HAL_PCD_MspInit+0x48>)
 800898c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008990:	6253      	str	r3, [r2, #36]	; 0x24
 8008992:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <HAL_PCD_MspInit+0x48>)
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800899e:	2200      	movs	r2, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	2014      	movs	r0, #20
 80089a4:	f7f8 fa31 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80089a8:	2014      	movs	r0, #20
 80089aa:	f7f8 fa4a 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	40005c00 	.word	0x40005c00
 80089bc:	40023800 	.word	0x40023800

080089c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80089d4:	4619      	mov	r1, r3
 80089d6:	4610      	mov	r0, r2
 80089d8:	f7fe fcf7 	bl	80073ca <USBD_LL_SetupStage>
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	00db      	lsls	r3, r3, #3
 8008a02:	440b      	add	r3, r1
 8008a04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	f7fe fd29 	bl	8007464 <USBD_LL_DataOutStage>
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	460b      	mov	r3, r1
 8008a24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	440b      	add	r3, r1
 8008a3a:	333c      	adds	r3, #60	; 0x3c
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	4619      	mov	r1, r3
 8008a42:	f7fe fd80 	bl	8007546 <USBD_LL_DataInStage>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe fe8b 	bl	8007778 <USBD_LL_SOF>
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a72:	2301      	movs	r3, #1
 8008a74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d001      	beq.n	8008a82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a7e:	f7f7 fec9 	bl	8000814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a88:	7bfa      	ldrb	r2, [r7, #15]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe fe40 	bl	8007712 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe fdf9 	bl	8007690 <USBD_LL_Reset>
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fe3a 	bl	8007730 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <HAL_PCD_SuspendCallback+0x30>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	4a03      	ldr	r2, [pc, #12]	; (8008ad8 <HAL_PCD_SuspendCallback+0x30>)
 8008aca:	f043 0306 	orr.w	r3, r3, #6
 8008ace:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fe34 	bl	8007758 <USBD_LL_Resume>
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b00:	4a28      	ldr	r2, [pc, #160]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a26      	ldr	r2, [pc, #152]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008b10:	4b24      	ldr	r3, [pc, #144]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b12:	4a25      	ldr	r2, [pc, #148]	; (8008ba8 <USBD_LL_Init+0xb0>)
 8008b14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b16:	4b23      	ldr	r3, [pc, #140]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b18:	2208      	movs	r2, #8
 8008b1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b1c:	4b21      	ldr	r3, [pc, #132]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b1e:	2202      	movs	r2, #2
 8008b20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b22:	4b20      	ldr	r3, [pc, #128]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b24:	2202      	movs	r2, #2
 8008b26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b28:	4b1e      	ldr	r3, [pc, #120]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b34:	481b      	ldr	r0, [pc, #108]	; (8008ba4 <USBD_LL_Init+0xac>)
 8008b36:	f7f8 fc93 	bl	8001460 <HAL_PCD_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008b40:	f7f7 fe68 	bl	8000814 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008b4a:	2318      	movs	r3, #24
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f7fa f870 	bl	8002c34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008b5a:	2358      	movs	r3, #88	; 0x58
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2180      	movs	r1, #128	; 0x80
 8008b60:	f7fa f868 	bl	8002c34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008b6a:	23c0      	movs	r3, #192	; 0xc0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2181      	movs	r1, #129	; 0x81
 8008b70:	f7fa f860 	bl	8002c34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008b7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2101      	movs	r1, #1
 8008b82:	f7fa f857 	bl	8002c34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b90:	2200      	movs	r2, #0
 8008b92:	2182      	movs	r1, #130	; 0x82
 8008b94:	f7fa f84e 	bl	8002c34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000f98 	.word	0x20000f98
 8008ba8:	40005c00 	.word	0x40005c00

08008bac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f8 fd2a 	bl	800161c <HAL_PCD_Start>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f944 	bl	8008e5c <USBD_Get_USB_Status>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	4608      	mov	r0, r1
 8008bec:	4611      	mov	r1, r2
 8008bee:	461a      	mov	r2, r3
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	70fb      	strb	r3, [r7, #3]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70bb      	strb	r3, [r7, #2]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008c0a:	78bb      	ldrb	r3, [r7, #2]
 8008c0c:	883a      	ldrh	r2, [r7, #0]
 8008c0e:	78f9      	ldrb	r1, [r7, #3]
 8008c10:	f7f8 fe46 	bl	80018a0 <HAL_PCD_EP_Open>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 f91e 	bl	8008e5c <USBD_Get_USB_Status>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7f8 fe8d 	bl	800196c <HAL_PCD_EP_Close>
 8008c52:	4603      	mov	r3, r0
 8008c54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 f8ff 	bl	8008e5c <USBD_Get_USB_Status>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008c86:	78fa      	ldrb	r2, [r7, #3]
 8008c88:	4611      	mov	r1, r2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7f8 ff4d 	bl	8001b2a <HAL_PCD_EP_SetStall>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 f8e0 	bl	8008e5c <USBD_Get_USB_Status>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7f8 ff80 	bl	8001bce <HAL_PCD_EP_ClrStall>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 f8c1 	bl	8008e5c <USBD_Get_USB_Status>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008cfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da0c      	bge.n	8008d1e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0a:	68f9      	ldr	r1, [r7, #12]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	440b      	add	r3, r1
 8008d18:	3302      	adds	r3, #2
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	e00b      	b.n	8008d36 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d24:	68f9      	ldr	r1, [r7, #12]
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	440b      	add	r3, r1
 8008d30:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008d34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bc80      	pop	{r7}
 8008d3e:	4770      	bx	lr

08008d40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7f8 fd79 	bl	8001856 <HAL_PCD_SetAddress>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 f876 	bl	8008e5c <USBD_Get_USB_Status>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	72fb      	strb	r3, [r7, #11]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008da0:	893b      	ldrh	r3, [r7, #8]
 8008da2:	7af9      	ldrb	r1, [r7, #11]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	f7f8 fe7d 	bl	8001aa4 <HAL_PCD_EP_Transmit>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 f853 	bl	8008e5c <USBD_Get_USB_Status>
 8008db6:	4603      	mov	r3, r0
 8008db8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dba:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	607a      	str	r2, [r7, #4]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	72fb      	strb	r3, [r7, #11]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008de6:	893b      	ldrh	r3, [r7, #8]
 8008de8:	7af9      	ldrb	r1, [r7, #11]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	f7f8 fe06 	bl	80019fc <HAL_PCD_EP_Receive>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f830 	bl	8008e5c <USBD_Get_USB_Status>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e00:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e1c:	78fa      	ldrb	r2, [r7, #3]
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7f8 fe28 	bl	8001a76 <HAL_PCD_EP_GetRxCount>
 8008e26:	4603      	mov	r3, r0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <USBD_static_malloc+0x14>)
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr
 8008e44:	20001284 	.word	0x20001284

08008e48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]

}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr
	...

08008e5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d817      	bhi.n	8008ea0 <USBD_Get_USB_Status+0x44>
 8008e70:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <USBD_Get_USB_Status+0x1c>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008e89 	.word	0x08008e89
 8008e7c:	08008e8f 	.word	0x08008e8f
 8008e80:	08008e95 	.word	0x08008e95
 8008e84:	08008e9b 	.word	0x08008e9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e8c:	e00b      	b.n	8008ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e8e:	2302      	movs	r3, #2
 8008e90:	73fb      	strb	r3, [r7, #15]
    break;
 8008e92:	e008      	b.n	8008ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e94:	2301      	movs	r3, #1
 8008e96:	73fb      	strb	r3, [r7, #15]
    break;
 8008e98:	e005      	b.n	8008ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e9e:	e002      	b.n	8008ea6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ea4:	bf00      	nop
  }
  return usb_status;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop

08008eb4 <__errno>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	; (8008ebc <__errno+0x8>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	2000017c 	.word	0x2000017c

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	2600      	movs	r6, #0
 8008ec4:	4d0c      	ldr	r5, [pc, #48]	; (8008ef8 <__libc_init_array+0x38>)
 8008ec6:	4c0d      	ldr	r4, [pc, #52]	; (8008efc <__libc_init_array+0x3c>)
 8008ec8:	1b64      	subs	r4, r4, r5
 8008eca:	10a4      	asrs	r4, r4, #2
 8008ecc:	42a6      	cmp	r6, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	f000 fc9c 	bl	800980c <_init>
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	4d0a      	ldr	r5, [pc, #40]	; (8008f00 <__libc_init_array+0x40>)
 8008ed8:	4c0a      	ldr	r4, [pc, #40]	; (8008f04 <__libc_init_array+0x44>)
 8008eda:	1b64      	subs	r4, r4, r5
 8008edc:	10a4      	asrs	r4, r4, #2
 8008ede:	42a6      	cmp	r6, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee8:	4798      	blx	r3
 8008eea:	3601      	adds	r6, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef2:	4798      	blx	r3
 8008ef4:	3601      	adds	r6, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	080098f4 	.word	0x080098f4
 8008efc:	080098f4 	.word	0x080098f4
 8008f00:	080098f4 	.word	0x080098f4
 8008f04:	080098f8 	.word	0x080098f8

08008f08 <memset>:
 8008f08:	4603      	mov	r3, r0
 8008f0a:	4402      	add	r2, r0
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d100      	bne.n	8008f12 <memset+0xa>
 8008f10:	4770      	bx	lr
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	e7f9      	b.n	8008f0c <memset+0x4>

08008f18 <siprintf>:
 8008f18:	b40e      	push	{r1, r2, r3}
 8008f1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f1e:	b500      	push	{lr}
 8008f20:	b09c      	sub	sp, #112	; 0x70
 8008f22:	ab1d      	add	r3, sp, #116	; 0x74
 8008f24:	9002      	str	r0, [sp, #8]
 8008f26:	9006      	str	r0, [sp, #24]
 8008f28:	9107      	str	r1, [sp, #28]
 8008f2a:	9104      	str	r1, [sp, #16]
 8008f2c:	4808      	ldr	r0, [pc, #32]	; (8008f50 <siprintf+0x38>)
 8008f2e:	4909      	ldr	r1, [pc, #36]	; (8008f54 <siprintf+0x3c>)
 8008f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f34:	9105      	str	r1, [sp, #20]
 8008f36:	6800      	ldr	r0, [r0, #0]
 8008f38:	a902      	add	r1, sp, #8
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	f000 f868 	bl	8009010 <_svfiprintf_r>
 8008f40:	2200      	movs	r2, #0
 8008f42:	9b02      	ldr	r3, [sp, #8]
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	b01c      	add	sp, #112	; 0x70
 8008f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f4c:	b003      	add	sp, #12
 8008f4e:	4770      	bx	lr
 8008f50:	2000017c 	.word	0x2000017c
 8008f54:	ffff0208 	.word	0xffff0208

08008f58 <__ssputs_r>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	688e      	ldr	r6, [r1, #8]
 8008f5e:	4682      	mov	sl, r0
 8008f60:	429e      	cmp	r6, r3
 8008f62:	460c      	mov	r4, r1
 8008f64:	4690      	mov	r8, r2
 8008f66:	461f      	mov	r7, r3
 8008f68:	d838      	bhi.n	8008fdc <__ssputs_r+0x84>
 8008f6a:	898a      	ldrh	r2, [r1, #12]
 8008f6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f70:	d032      	beq.n	8008fd8 <__ssputs_r+0x80>
 8008f72:	6825      	ldr	r5, [r4, #0]
 8008f74:	6909      	ldr	r1, [r1, #16]
 8008f76:	3301      	adds	r3, #1
 8008f78:	eba5 0901 	sub.w	r9, r5, r1
 8008f7c:	6965      	ldr	r5, [r4, #20]
 8008f7e:	444b      	add	r3, r9
 8008f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f88:	106d      	asrs	r5, r5, #1
 8008f8a:	429d      	cmp	r5, r3
 8008f8c:	bf38      	it	cc
 8008f8e:	461d      	movcc	r5, r3
 8008f90:	0553      	lsls	r3, r2, #21
 8008f92:	d531      	bpl.n	8008ff8 <__ssputs_r+0xa0>
 8008f94:	4629      	mov	r1, r5
 8008f96:	f000 fb6f 	bl	8009678 <_malloc_r>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	b950      	cbnz	r0, 8008fb4 <__ssputs_r+0x5c>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	f8ca 3000 	str.w	r3, [sl]
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fae:	81a3      	strh	r3, [r4, #12]
 8008fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb4:	464a      	mov	r2, r9
 8008fb6:	6921      	ldr	r1, [r4, #16]
 8008fb8:	f000 face 	bl	8009558 <memcpy>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc6:	81a3      	strh	r3, [r4, #12]
 8008fc8:	6126      	str	r6, [r4, #16]
 8008fca:	444e      	add	r6, r9
 8008fcc:	6026      	str	r6, [r4, #0]
 8008fce:	463e      	mov	r6, r7
 8008fd0:	6165      	str	r5, [r4, #20]
 8008fd2:	eba5 0509 	sub.w	r5, r5, r9
 8008fd6:	60a5      	str	r5, [r4, #8]
 8008fd8:	42be      	cmp	r6, r7
 8008fda:	d900      	bls.n	8008fde <__ssputs_r+0x86>
 8008fdc:	463e      	mov	r6, r7
 8008fde:	4632      	mov	r2, r6
 8008fe0:	4641      	mov	r1, r8
 8008fe2:	6820      	ldr	r0, [r4, #0]
 8008fe4:	f000 fac6 	bl	8009574 <memmove>
 8008fe8:	68a3      	ldr	r3, [r4, #8]
 8008fea:	2000      	movs	r0, #0
 8008fec:	1b9b      	subs	r3, r3, r6
 8008fee:	60a3      	str	r3, [r4, #8]
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	4433      	add	r3, r6
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	e7db      	b.n	8008fb0 <__ssputs_r+0x58>
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	f000 fbb1 	bl	8009760 <_realloc_r>
 8008ffe:	4606      	mov	r6, r0
 8009000:	2800      	cmp	r0, #0
 8009002:	d1e1      	bne.n	8008fc8 <__ssputs_r+0x70>
 8009004:	4650      	mov	r0, sl
 8009006:	6921      	ldr	r1, [r4, #16]
 8009008:	f000 face 	bl	80095a8 <_free_r>
 800900c:	e7c7      	b.n	8008f9e <__ssputs_r+0x46>
	...

08009010 <_svfiprintf_r>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	4698      	mov	r8, r3
 8009016:	898b      	ldrh	r3, [r1, #12]
 8009018:	4607      	mov	r7, r0
 800901a:	061b      	lsls	r3, r3, #24
 800901c:	460d      	mov	r5, r1
 800901e:	4614      	mov	r4, r2
 8009020:	b09d      	sub	sp, #116	; 0x74
 8009022:	d50e      	bpl.n	8009042 <_svfiprintf_r+0x32>
 8009024:	690b      	ldr	r3, [r1, #16]
 8009026:	b963      	cbnz	r3, 8009042 <_svfiprintf_r+0x32>
 8009028:	2140      	movs	r1, #64	; 0x40
 800902a:	f000 fb25 	bl	8009678 <_malloc_r>
 800902e:	6028      	str	r0, [r5, #0]
 8009030:	6128      	str	r0, [r5, #16]
 8009032:	b920      	cbnz	r0, 800903e <_svfiprintf_r+0x2e>
 8009034:	230c      	movs	r3, #12
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	e0d1      	b.n	80091e2 <_svfiprintf_r+0x1d2>
 800903e:	2340      	movs	r3, #64	; 0x40
 8009040:	616b      	str	r3, [r5, #20]
 8009042:	2300      	movs	r3, #0
 8009044:	9309      	str	r3, [sp, #36]	; 0x24
 8009046:	2320      	movs	r3, #32
 8009048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800904c:	2330      	movs	r3, #48	; 0x30
 800904e:	f04f 0901 	mov.w	r9, #1
 8009052:	f8cd 800c 	str.w	r8, [sp, #12]
 8009056:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80091fc <_svfiprintf_r+0x1ec>
 800905a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800905e:	4623      	mov	r3, r4
 8009060:	469a      	mov	sl, r3
 8009062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009066:	b10a      	cbz	r2, 800906c <_svfiprintf_r+0x5c>
 8009068:	2a25      	cmp	r2, #37	; 0x25
 800906a:	d1f9      	bne.n	8009060 <_svfiprintf_r+0x50>
 800906c:	ebba 0b04 	subs.w	fp, sl, r4
 8009070:	d00b      	beq.n	800908a <_svfiprintf_r+0x7a>
 8009072:	465b      	mov	r3, fp
 8009074:	4622      	mov	r2, r4
 8009076:	4629      	mov	r1, r5
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff ff6d 	bl	8008f58 <__ssputs_r>
 800907e:	3001      	adds	r0, #1
 8009080:	f000 80aa 	beq.w	80091d8 <_svfiprintf_r+0x1c8>
 8009084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009086:	445a      	add	r2, fp
 8009088:	9209      	str	r2, [sp, #36]	; 0x24
 800908a:	f89a 3000 	ldrb.w	r3, [sl]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80a2 	beq.w	80091d8 <_svfiprintf_r+0x1c8>
 8009094:	2300      	movs	r3, #0
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800909e:	f10a 0a01 	add.w	sl, sl, #1
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	9307      	str	r3, [sp, #28]
 80090a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090aa:	931a      	str	r3, [sp, #104]	; 0x68
 80090ac:	4654      	mov	r4, sl
 80090ae:	2205      	movs	r2, #5
 80090b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b4:	4851      	ldr	r0, [pc, #324]	; (80091fc <_svfiprintf_r+0x1ec>)
 80090b6:	f000 fa41 	bl	800953c <memchr>
 80090ba:	9a04      	ldr	r2, [sp, #16]
 80090bc:	b9d8      	cbnz	r0, 80090f6 <_svfiprintf_r+0xe6>
 80090be:	06d0      	lsls	r0, r2, #27
 80090c0:	bf44      	itt	mi
 80090c2:	2320      	movmi	r3, #32
 80090c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c8:	0711      	lsls	r1, r2, #28
 80090ca:	bf44      	itt	mi
 80090cc:	232b      	movmi	r3, #43	; 0x2b
 80090ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d2:	f89a 3000 	ldrb.w	r3, [sl]
 80090d6:	2b2a      	cmp	r3, #42	; 0x2a
 80090d8:	d015      	beq.n	8009106 <_svfiprintf_r+0xf6>
 80090da:	4654      	mov	r4, sl
 80090dc:	2000      	movs	r0, #0
 80090de:	f04f 0c0a 	mov.w	ip, #10
 80090e2:	9a07      	ldr	r2, [sp, #28]
 80090e4:	4621      	mov	r1, r4
 80090e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ea:	3b30      	subs	r3, #48	; 0x30
 80090ec:	2b09      	cmp	r3, #9
 80090ee:	d94e      	bls.n	800918e <_svfiprintf_r+0x17e>
 80090f0:	b1b0      	cbz	r0, 8009120 <_svfiprintf_r+0x110>
 80090f2:	9207      	str	r2, [sp, #28]
 80090f4:	e014      	b.n	8009120 <_svfiprintf_r+0x110>
 80090f6:	eba0 0308 	sub.w	r3, r0, r8
 80090fa:	fa09 f303 	lsl.w	r3, r9, r3
 80090fe:	4313      	orrs	r3, r2
 8009100:	46a2      	mov	sl, r4
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	e7d2      	b.n	80090ac <_svfiprintf_r+0x9c>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	1d19      	adds	r1, r3, #4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	9103      	str	r1, [sp, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfbb      	ittet	lt
 8009112:	425b      	neglt	r3, r3
 8009114:	f042 0202 	orrlt.w	r2, r2, #2
 8009118:	9307      	strge	r3, [sp, #28]
 800911a:	9307      	strlt	r3, [sp, #28]
 800911c:	bfb8      	it	lt
 800911e:	9204      	strlt	r2, [sp, #16]
 8009120:	7823      	ldrb	r3, [r4, #0]
 8009122:	2b2e      	cmp	r3, #46	; 0x2e
 8009124:	d10c      	bne.n	8009140 <_svfiprintf_r+0x130>
 8009126:	7863      	ldrb	r3, [r4, #1]
 8009128:	2b2a      	cmp	r3, #42	; 0x2a
 800912a:	d135      	bne.n	8009198 <_svfiprintf_r+0x188>
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	3402      	adds	r4, #2
 8009130:	1d1a      	adds	r2, r3, #4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	9203      	str	r2, [sp, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfb8      	it	lt
 800913a:	f04f 33ff 	movlt.w	r3, #4294967295
 800913e:	9305      	str	r3, [sp, #20]
 8009140:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009200 <_svfiprintf_r+0x1f0>
 8009144:	2203      	movs	r2, #3
 8009146:	4650      	mov	r0, sl
 8009148:	7821      	ldrb	r1, [r4, #0]
 800914a:	f000 f9f7 	bl	800953c <memchr>
 800914e:	b140      	cbz	r0, 8009162 <_svfiprintf_r+0x152>
 8009150:	2340      	movs	r3, #64	; 0x40
 8009152:	eba0 000a 	sub.w	r0, r0, sl
 8009156:	fa03 f000 	lsl.w	r0, r3, r0
 800915a:	9b04      	ldr	r3, [sp, #16]
 800915c:	3401      	adds	r4, #1
 800915e:	4303      	orrs	r3, r0
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009166:	2206      	movs	r2, #6
 8009168:	4826      	ldr	r0, [pc, #152]	; (8009204 <_svfiprintf_r+0x1f4>)
 800916a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800916e:	f000 f9e5 	bl	800953c <memchr>
 8009172:	2800      	cmp	r0, #0
 8009174:	d038      	beq.n	80091e8 <_svfiprintf_r+0x1d8>
 8009176:	4b24      	ldr	r3, [pc, #144]	; (8009208 <_svfiprintf_r+0x1f8>)
 8009178:	bb1b      	cbnz	r3, 80091c2 <_svfiprintf_r+0x1b2>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	3307      	adds	r3, #7
 800917e:	f023 0307 	bic.w	r3, r3, #7
 8009182:	3308      	adds	r3, #8
 8009184:	9303      	str	r3, [sp, #12]
 8009186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009188:	4433      	add	r3, r6
 800918a:	9309      	str	r3, [sp, #36]	; 0x24
 800918c:	e767      	b.n	800905e <_svfiprintf_r+0x4e>
 800918e:	460c      	mov	r4, r1
 8009190:	2001      	movs	r0, #1
 8009192:	fb0c 3202 	mla	r2, ip, r2, r3
 8009196:	e7a5      	b.n	80090e4 <_svfiprintf_r+0xd4>
 8009198:	2300      	movs	r3, #0
 800919a:	f04f 0c0a 	mov.w	ip, #10
 800919e:	4619      	mov	r1, r3
 80091a0:	3401      	adds	r4, #1
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	4620      	mov	r0, r4
 80091a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091aa:	3a30      	subs	r2, #48	; 0x30
 80091ac:	2a09      	cmp	r2, #9
 80091ae:	d903      	bls.n	80091b8 <_svfiprintf_r+0x1a8>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0c5      	beq.n	8009140 <_svfiprintf_r+0x130>
 80091b4:	9105      	str	r1, [sp, #20]
 80091b6:	e7c3      	b.n	8009140 <_svfiprintf_r+0x130>
 80091b8:	4604      	mov	r4, r0
 80091ba:	2301      	movs	r3, #1
 80091bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80091c0:	e7f0      	b.n	80091a4 <_svfiprintf_r+0x194>
 80091c2:	ab03      	add	r3, sp, #12
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	462a      	mov	r2, r5
 80091c8:	4638      	mov	r0, r7
 80091ca:	4b10      	ldr	r3, [pc, #64]	; (800920c <_svfiprintf_r+0x1fc>)
 80091cc:	a904      	add	r1, sp, #16
 80091ce:	f3af 8000 	nop.w
 80091d2:	1c42      	adds	r2, r0, #1
 80091d4:	4606      	mov	r6, r0
 80091d6:	d1d6      	bne.n	8009186 <_svfiprintf_r+0x176>
 80091d8:	89ab      	ldrh	r3, [r5, #12]
 80091da:	065b      	lsls	r3, r3, #25
 80091dc:	f53f af2c 	bmi.w	8009038 <_svfiprintf_r+0x28>
 80091e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091e2:	b01d      	add	sp, #116	; 0x74
 80091e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e8:	ab03      	add	r3, sp, #12
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	462a      	mov	r2, r5
 80091ee:	4638      	mov	r0, r7
 80091f0:	4b06      	ldr	r3, [pc, #24]	; (800920c <_svfiprintf_r+0x1fc>)
 80091f2:	a904      	add	r1, sp, #16
 80091f4:	f000 f87c 	bl	80092f0 <_printf_i>
 80091f8:	e7eb      	b.n	80091d2 <_svfiprintf_r+0x1c2>
 80091fa:	bf00      	nop
 80091fc:	080098b8 	.word	0x080098b8
 8009200:	080098be 	.word	0x080098be
 8009204:	080098c2 	.word	0x080098c2
 8009208:	00000000 	.word	0x00000000
 800920c:	08008f59 	.word	0x08008f59

08009210 <_printf_common>:
 8009210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009214:	4616      	mov	r6, r2
 8009216:	4699      	mov	r9, r3
 8009218:	688a      	ldr	r2, [r1, #8]
 800921a:	690b      	ldr	r3, [r1, #16]
 800921c:	4607      	mov	r7, r0
 800921e:	4293      	cmp	r3, r2
 8009220:	bfb8      	it	lt
 8009222:	4613      	movlt	r3, r2
 8009224:	6033      	str	r3, [r6, #0]
 8009226:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800922a:	460c      	mov	r4, r1
 800922c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009230:	b10a      	cbz	r2, 8009236 <_printf_common+0x26>
 8009232:	3301      	adds	r3, #1
 8009234:	6033      	str	r3, [r6, #0]
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	0699      	lsls	r1, r3, #26
 800923a:	bf42      	ittt	mi
 800923c:	6833      	ldrmi	r3, [r6, #0]
 800923e:	3302      	addmi	r3, #2
 8009240:	6033      	strmi	r3, [r6, #0]
 8009242:	6825      	ldr	r5, [r4, #0]
 8009244:	f015 0506 	ands.w	r5, r5, #6
 8009248:	d106      	bne.n	8009258 <_printf_common+0x48>
 800924a:	f104 0a19 	add.w	sl, r4, #25
 800924e:	68e3      	ldr	r3, [r4, #12]
 8009250:	6832      	ldr	r2, [r6, #0]
 8009252:	1a9b      	subs	r3, r3, r2
 8009254:	42ab      	cmp	r3, r5
 8009256:	dc28      	bgt.n	80092aa <_printf_common+0x9a>
 8009258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800925c:	1e13      	subs	r3, r2, #0
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	bf18      	it	ne
 8009262:	2301      	movne	r3, #1
 8009264:	0692      	lsls	r2, r2, #26
 8009266:	d42d      	bmi.n	80092c4 <_printf_common+0xb4>
 8009268:	4649      	mov	r1, r9
 800926a:	4638      	mov	r0, r7
 800926c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009270:	47c0      	blx	r8
 8009272:	3001      	adds	r0, #1
 8009274:	d020      	beq.n	80092b8 <_printf_common+0xa8>
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	68e5      	ldr	r5, [r4, #12]
 800927a:	f003 0306 	and.w	r3, r3, #6
 800927e:	2b04      	cmp	r3, #4
 8009280:	bf18      	it	ne
 8009282:	2500      	movne	r5, #0
 8009284:	6832      	ldr	r2, [r6, #0]
 8009286:	f04f 0600 	mov.w	r6, #0
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	bf08      	it	eq
 800928e:	1aad      	subeq	r5, r5, r2
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	bf08      	it	eq
 8009294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009298:	4293      	cmp	r3, r2
 800929a:	bfc4      	itt	gt
 800929c:	1a9b      	subgt	r3, r3, r2
 800929e:	18ed      	addgt	r5, r5, r3
 80092a0:	341a      	adds	r4, #26
 80092a2:	42b5      	cmp	r5, r6
 80092a4:	d11a      	bne.n	80092dc <_printf_common+0xcc>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e008      	b.n	80092bc <_printf_common+0xac>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4652      	mov	r2, sl
 80092ae:	4649      	mov	r1, r9
 80092b0:	4638      	mov	r0, r7
 80092b2:	47c0      	blx	r8
 80092b4:	3001      	adds	r0, #1
 80092b6:	d103      	bne.n	80092c0 <_printf_common+0xb0>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c0:	3501      	adds	r5, #1
 80092c2:	e7c4      	b.n	800924e <_printf_common+0x3e>
 80092c4:	2030      	movs	r0, #48	; 0x30
 80092c6:	18e1      	adds	r1, r4, r3
 80092c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092d2:	4422      	add	r2, r4
 80092d4:	3302      	adds	r3, #2
 80092d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092da:	e7c5      	b.n	8009268 <_printf_common+0x58>
 80092dc:	2301      	movs	r3, #1
 80092de:	4622      	mov	r2, r4
 80092e0:	4649      	mov	r1, r9
 80092e2:	4638      	mov	r0, r7
 80092e4:	47c0      	blx	r8
 80092e6:	3001      	adds	r0, #1
 80092e8:	d0e6      	beq.n	80092b8 <_printf_common+0xa8>
 80092ea:	3601      	adds	r6, #1
 80092ec:	e7d9      	b.n	80092a2 <_printf_common+0x92>
	...

080092f0 <_printf_i>:
 80092f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	7e0f      	ldrb	r7, [r1, #24]
 80092f6:	4691      	mov	r9, r2
 80092f8:	2f78      	cmp	r7, #120	; 0x78
 80092fa:	4680      	mov	r8, r0
 80092fc:	460c      	mov	r4, r1
 80092fe:	469a      	mov	sl, r3
 8009300:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009306:	d807      	bhi.n	8009318 <_printf_i+0x28>
 8009308:	2f62      	cmp	r7, #98	; 0x62
 800930a:	d80a      	bhi.n	8009322 <_printf_i+0x32>
 800930c:	2f00      	cmp	r7, #0
 800930e:	f000 80d9 	beq.w	80094c4 <_printf_i+0x1d4>
 8009312:	2f58      	cmp	r7, #88	; 0x58
 8009314:	f000 80a4 	beq.w	8009460 <_printf_i+0x170>
 8009318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800931c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009320:	e03a      	b.n	8009398 <_printf_i+0xa8>
 8009322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009326:	2b15      	cmp	r3, #21
 8009328:	d8f6      	bhi.n	8009318 <_printf_i+0x28>
 800932a:	a101      	add	r1, pc, #4	; (adr r1, 8009330 <_printf_i+0x40>)
 800932c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009330:	08009389 	.word	0x08009389
 8009334:	0800939d 	.word	0x0800939d
 8009338:	08009319 	.word	0x08009319
 800933c:	08009319 	.word	0x08009319
 8009340:	08009319 	.word	0x08009319
 8009344:	08009319 	.word	0x08009319
 8009348:	0800939d 	.word	0x0800939d
 800934c:	08009319 	.word	0x08009319
 8009350:	08009319 	.word	0x08009319
 8009354:	08009319 	.word	0x08009319
 8009358:	08009319 	.word	0x08009319
 800935c:	080094ab 	.word	0x080094ab
 8009360:	080093cd 	.word	0x080093cd
 8009364:	0800948d 	.word	0x0800948d
 8009368:	08009319 	.word	0x08009319
 800936c:	08009319 	.word	0x08009319
 8009370:	080094cd 	.word	0x080094cd
 8009374:	08009319 	.word	0x08009319
 8009378:	080093cd 	.word	0x080093cd
 800937c:	08009319 	.word	0x08009319
 8009380:	08009319 	.word	0x08009319
 8009384:	08009495 	.word	0x08009495
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	1d1a      	adds	r2, r3, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	602a      	str	r2, [r5, #0]
 8009390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009398:	2301      	movs	r3, #1
 800939a:	e0a4      	b.n	80094e6 <_printf_i+0x1f6>
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	6829      	ldr	r1, [r5, #0]
 80093a0:	0606      	lsls	r6, r0, #24
 80093a2:	f101 0304 	add.w	r3, r1, #4
 80093a6:	d50a      	bpl.n	80093be <_printf_i+0xce>
 80093a8:	680e      	ldr	r6, [r1, #0]
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	2e00      	cmp	r6, #0
 80093ae:	da03      	bge.n	80093b8 <_printf_i+0xc8>
 80093b0:	232d      	movs	r3, #45	; 0x2d
 80093b2:	4276      	negs	r6, r6
 80093b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b8:	230a      	movs	r3, #10
 80093ba:	485e      	ldr	r0, [pc, #376]	; (8009534 <_printf_i+0x244>)
 80093bc:	e019      	b.n	80093f2 <_printf_i+0x102>
 80093be:	680e      	ldr	r6, [r1, #0]
 80093c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	bf18      	it	ne
 80093c8:	b236      	sxthne	r6, r6
 80093ca:	e7ef      	b.n	80093ac <_printf_i+0xbc>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	6820      	ldr	r0, [r4, #0]
 80093d0:	1d19      	adds	r1, r3, #4
 80093d2:	6029      	str	r1, [r5, #0]
 80093d4:	0601      	lsls	r1, r0, #24
 80093d6:	d501      	bpl.n	80093dc <_printf_i+0xec>
 80093d8:	681e      	ldr	r6, [r3, #0]
 80093da:	e002      	b.n	80093e2 <_printf_i+0xf2>
 80093dc:	0646      	lsls	r6, r0, #25
 80093de:	d5fb      	bpl.n	80093d8 <_printf_i+0xe8>
 80093e0:	881e      	ldrh	r6, [r3, #0]
 80093e2:	2f6f      	cmp	r7, #111	; 0x6f
 80093e4:	bf0c      	ite	eq
 80093e6:	2308      	moveq	r3, #8
 80093e8:	230a      	movne	r3, #10
 80093ea:	4852      	ldr	r0, [pc, #328]	; (8009534 <_printf_i+0x244>)
 80093ec:	2100      	movs	r1, #0
 80093ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f2:	6865      	ldr	r5, [r4, #4]
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	bfa8      	it	ge
 80093f8:	6821      	ldrge	r1, [r4, #0]
 80093fa:	60a5      	str	r5, [r4, #8]
 80093fc:	bfa4      	itt	ge
 80093fe:	f021 0104 	bicge.w	r1, r1, #4
 8009402:	6021      	strge	r1, [r4, #0]
 8009404:	b90e      	cbnz	r6, 800940a <_printf_i+0x11a>
 8009406:	2d00      	cmp	r5, #0
 8009408:	d04d      	beq.n	80094a6 <_printf_i+0x1b6>
 800940a:	4615      	mov	r5, r2
 800940c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009410:	fb03 6711 	mls	r7, r3, r1, r6
 8009414:	5dc7      	ldrb	r7, [r0, r7]
 8009416:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800941a:	4637      	mov	r7, r6
 800941c:	42bb      	cmp	r3, r7
 800941e:	460e      	mov	r6, r1
 8009420:	d9f4      	bls.n	800940c <_printf_i+0x11c>
 8009422:	2b08      	cmp	r3, #8
 8009424:	d10b      	bne.n	800943e <_printf_i+0x14e>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	07de      	lsls	r6, r3, #31
 800942a:	d508      	bpl.n	800943e <_printf_i+0x14e>
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	6861      	ldr	r1, [r4, #4]
 8009430:	4299      	cmp	r1, r3
 8009432:	bfde      	ittt	le
 8009434:	2330      	movle	r3, #48	; 0x30
 8009436:	f805 3c01 	strble.w	r3, [r5, #-1]
 800943a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800943e:	1b52      	subs	r2, r2, r5
 8009440:	6122      	str	r2, [r4, #16]
 8009442:	464b      	mov	r3, r9
 8009444:	4621      	mov	r1, r4
 8009446:	4640      	mov	r0, r8
 8009448:	f8cd a000 	str.w	sl, [sp]
 800944c:	aa03      	add	r2, sp, #12
 800944e:	f7ff fedf 	bl	8009210 <_printf_common>
 8009452:	3001      	adds	r0, #1
 8009454:	d14c      	bne.n	80094f0 <_printf_i+0x200>
 8009456:	f04f 30ff 	mov.w	r0, #4294967295
 800945a:	b004      	add	sp, #16
 800945c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009460:	4834      	ldr	r0, [pc, #208]	; (8009534 <_printf_i+0x244>)
 8009462:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009466:	6829      	ldr	r1, [r5, #0]
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	f851 6b04 	ldr.w	r6, [r1], #4
 800946e:	6029      	str	r1, [r5, #0]
 8009470:	061d      	lsls	r5, r3, #24
 8009472:	d514      	bpl.n	800949e <_printf_i+0x1ae>
 8009474:	07df      	lsls	r7, r3, #31
 8009476:	bf44      	itt	mi
 8009478:	f043 0320 	orrmi.w	r3, r3, #32
 800947c:	6023      	strmi	r3, [r4, #0]
 800947e:	b91e      	cbnz	r6, 8009488 <_printf_i+0x198>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	f023 0320 	bic.w	r3, r3, #32
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	2310      	movs	r3, #16
 800948a:	e7af      	b.n	80093ec <_printf_i+0xfc>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	f043 0320 	orr.w	r3, r3, #32
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	2378      	movs	r3, #120	; 0x78
 8009496:	4828      	ldr	r0, [pc, #160]	; (8009538 <_printf_i+0x248>)
 8009498:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800949c:	e7e3      	b.n	8009466 <_printf_i+0x176>
 800949e:	0659      	lsls	r1, r3, #25
 80094a0:	bf48      	it	mi
 80094a2:	b2b6      	uxthmi	r6, r6
 80094a4:	e7e6      	b.n	8009474 <_printf_i+0x184>
 80094a6:	4615      	mov	r5, r2
 80094a8:	e7bb      	b.n	8009422 <_printf_i+0x132>
 80094aa:	682b      	ldr	r3, [r5, #0]
 80094ac:	6826      	ldr	r6, [r4, #0]
 80094ae:	1d18      	adds	r0, r3, #4
 80094b0:	6961      	ldr	r1, [r4, #20]
 80094b2:	6028      	str	r0, [r5, #0]
 80094b4:	0635      	lsls	r5, r6, #24
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	d501      	bpl.n	80094be <_printf_i+0x1ce>
 80094ba:	6019      	str	r1, [r3, #0]
 80094bc:	e002      	b.n	80094c4 <_printf_i+0x1d4>
 80094be:	0670      	lsls	r0, r6, #25
 80094c0:	d5fb      	bpl.n	80094ba <_printf_i+0x1ca>
 80094c2:	8019      	strh	r1, [r3, #0]
 80094c4:	2300      	movs	r3, #0
 80094c6:	4615      	mov	r5, r2
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	e7ba      	b.n	8009442 <_printf_i+0x152>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	2100      	movs	r1, #0
 80094d0:	1d1a      	adds	r2, r3, #4
 80094d2:	602a      	str	r2, [r5, #0]
 80094d4:	681d      	ldr	r5, [r3, #0]
 80094d6:	6862      	ldr	r2, [r4, #4]
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 f82f 	bl	800953c <memchr>
 80094de:	b108      	cbz	r0, 80094e4 <_printf_i+0x1f4>
 80094e0:	1b40      	subs	r0, r0, r5
 80094e2:	6060      	str	r0, [r4, #4]
 80094e4:	6863      	ldr	r3, [r4, #4]
 80094e6:	6123      	str	r3, [r4, #16]
 80094e8:	2300      	movs	r3, #0
 80094ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ee:	e7a8      	b.n	8009442 <_printf_i+0x152>
 80094f0:	462a      	mov	r2, r5
 80094f2:	4649      	mov	r1, r9
 80094f4:	4640      	mov	r0, r8
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	47d0      	blx	sl
 80094fa:	3001      	adds	r0, #1
 80094fc:	d0ab      	beq.n	8009456 <_printf_i+0x166>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	079b      	lsls	r3, r3, #30
 8009502:	d413      	bmi.n	800952c <_printf_i+0x23c>
 8009504:	68e0      	ldr	r0, [r4, #12]
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	4298      	cmp	r0, r3
 800950a:	bfb8      	it	lt
 800950c:	4618      	movlt	r0, r3
 800950e:	e7a4      	b.n	800945a <_printf_i+0x16a>
 8009510:	2301      	movs	r3, #1
 8009512:	4632      	mov	r2, r6
 8009514:	4649      	mov	r1, r9
 8009516:	4640      	mov	r0, r8
 8009518:	47d0      	blx	sl
 800951a:	3001      	adds	r0, #1
 800951c:	d09b      	beq.n	8009456 <_printf_i+0x166>
 800951e:	3501      	adds	r5, #1
 8009520:	68e3      	ldr	r3, [r4, #12]
 8009522:	9903      	ldr	r1, [sp, #12]
 8009524:	1a5b      	subs	r3, r3, r1
 8009526:	42ab      	cmp	r3, r5
 8009528:	dcf2      	bgt.n	8009510 <_printf_i+0x220>
 800952a:	e7eb      	b.n	8009504 <_printf_i+0x214>
 800952c:	2500      	movs	r5, #0
 800952e:	f104 0619 	add.w	r6, r4, #25
 8009532:	e7f5      	b.n	8009520 <_printf_i+0x230>
 8009534:	080098c9 	.word	0x080098c9
 8009538:	080098da 	.word	0x080098da

0800953c <memchr>:
 800953c:	4603      	mov	r3, r0
 800953e:	b510      	push	{r4, lr}
 8009540:	b2c9      	uxtb	r1, r1
 8009542:	4402      	add	r2, r0
 8009544:	4293      	cmp	r3, r2
 8009546:	4618      	mov	r0, r3
 8009548:	d101      	bne.n	800954e <memchr+0x12>
 800954a:	2000      	movs	r0, #0
 800954c:	e003      	b.n	8009556 <memchr+0x1a>
 800954e:	7804      	ldrb	r4, [r0, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	428c      	cmp	r4, r1
 8009554:	d1f6      	bne.n	8009544 <memchr+0x8>
 8009556:	bd10      	pop	{r4, pc}

08009558 <memcpy>:
 8009558:	440a      	add	r2, r1
 800955a:	4291      	cmp	r1, r2
 800955c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009560:	d100      	bne.n	8009564 <memcpy+0xc>
 8009562:	4770      	bx	lr
 8009564:	b510      	push	{r4, lr}
 8009566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956a:	4291      	cmp	r1, r2
 800956c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009570:	d1f9      	bne.n	8009566 <memcpy+0xe>
 8009572:	bd10      	pop	{r4, pc}

08009574 <memmove>:
 8009574:	4288      	cmp	r0, r1
 8009576:	b510      	push	{r4, lr}
 8009578:	eb01 0402 	add.w	r4, r1, r2
 800957c:	d902      	bls.n	8009584 <memmove+0x10>
 800957e:	4284      	cmp	r4, r0
 8009580:	4623      	mov	r3, r4
 8009582:	d807      	bhi.n	8009594 <memmove+0x20>
 8009584:	1e43      	subs	r3, r0, #1
 8009586:	42a1      	cmp	r1, r4
 8009588:	d008      	beq.n	800959c <memmove+0x28>
 800958a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800958e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009592:	e7f8      	b.n	8009586 <memmove+0x12>
 8009594:	4601      	mov	r1, r0
 8009596:	4402      	add	r2, r0
 8009598:	428a      	cmp	r2, r1
 800959a:	d100      	bne.n	800959e <memmove+0x2a>
 800959c:	bd10      	pop	{r4, pc}
 800959e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095a6:	e7f7      	b.n	8009598 <memmove+0x24>

080095a8 <_free_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4605      	mov	r5, r0
 80095ac:	2900      	cmp	r1, #0
 80095ae:	d040      	beq.n	8009632 <_free_r+0x8a>
 80095b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b4:	1f0c      	subs	r4, r1, #4
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bfb8      	it	lt
 80095ba:	18e4      	addlt	r4, r4, r3
 80095bc:	f000 f910 	bl	80097e0 <__malloc_lock>
 80095c0:	4a1c      	ldr	r2, [pc, #112]	; (8009634 <_free_r+0x8c>)
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	b933      	cbnz	r3, 80095d4 <_free_r+0x2c>
 80095c6:	6063      	str	r3, [r4, #4]
 80095c8:	6014      	str	r4, [r2, #0]
 80095ca:	4628      	mov	r0, r5
 80095cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d0:	f000 b90c 	b.w	80097ec <__malloc_unlock>
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	d908      	bls.n	80095ea <_free_r+0x42>
 80095d8:	6820      	ldr	r0, [r4, #0]
 80095da:	1821      	adds	r1, r4, r0
 80095dc:	428b      	cmp	r3, r1
 80095de:	bf01      	itttt	eq
 80095e0:	6819      	ldreq	r1, [r3, #0]
 80095e2:	685b      	ldreq	r3, [r3, #4]
 80095e4:	1809      	addeq	r1, r1, r0
 80095e6:	6021      	streq	r1, [r4, #0]
 80095e8:	e7ed      	b.n	80095c6 <_free_r+0x1e>
 80095ea:	461a      	mov	r2, r3
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	b10b      	cbz	r3, 80095f4 <_free_r+0x4c>
 80095f0:	42a3      	cmp	r3, r4
 80095f2:	d9fa      	bls.n	80095ea <_free_r+0x42>
 80095f4:	6811      	ldr	r1, [r2, #0]
 80095f6:	1850      	adds	r0, r2, r1
 80095f8:	42a0      	cmp	r0, r4
 80095fa:	d10b      	bne.n	8009614 <_free_r+0x6c>
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	4401      	add	r1, r0
 8009600:	1850      	adds	r0, r2, r1
 8009602:	4283      	cmp	r3, r0
 8009604:	6011      	str	r1, [r2, #0]
 8009606:	d1e0      	bne.n	80095ca <_free_r+0x22>
 8009608:	6818      	ldr	r0, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	4401      	add	r1, r0
 800960e:	6011      	str	r1, [r2, #0]
 8009610:	6053      	str	r3, [r2, #4]
 8009612:	e7da      	b.n	80095ca <_free_r+0x22>
 8009614:	d902      	bls.n	800961c <_free_r+0x74>
 8009616:	230c      	movs	r3, #12
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	e7d6      	b.n	80095ca <_free_r+0x22>
 800961c:	6820      	ldr	r0, [r4, #0]
 800961e:	1821      	adds	r1, r4, r0
 8009620:	428b      	cmp	r3, r1
 8009622:	bf01      	itttt	eq
 8009624:	6819      	ldreq	r1, [r3, #0]
 8009626:	685b      	ldreq	r3, [r3, #4]
 8009628:	1809      	addeq	r1, r1, r0
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	6054      	str	r4, [r2, #4]
 8009630:	e7cb      	b.n	80095ca <_free_r+0x22>
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	200014a4 	.word	0x200014a4

08009638 <sbrk_aligned>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4e0e      	ldr	r6, [pc, #56]	; (8009674 <sbrk_aligned+0x3c>)
 800963c:	460c      	mov	r4, r1
 800963e:	6831      	ldr	r1, [r6, #0]
 8009640:	4605      	mov	r5, r0
 8009642:	b911      	cbnz	r1, 800964a <sbrk_aligned+0x12>
 8009644:	f000 f8bc 	bl	80097c0 <_sbrk_r>
 8009648:	6030      	str	r0, [r6, #0]
 800964a:	4621      	mov	r1, r4
 800964c:	4628      	mov	r0, r5
 800964e:	f000 f8b7 	bl	80097c0 <_sbrk_r>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	d00a      	beq.n	800966c <sbrk_aligned+0x34>
 8009656:	1cc4      	adds	r4, r0, #3
 8009658:	f024 0403 	bic.w	r4, r4, #3
 800965c:	42a0      	cmp	r0, r4
 800965e:	d007      	beq.n	8009670 <sbrk_aligned+0x38>
 8009660:	1a21      	subs	r1, r4, r0
 8009662:	4628      	mov	r0, r5
 8009664:	f000 f8ac 	bl	80097c0 <_sbrk_r>
 8009668:	3001      	adds	r0, #1
 800966a:	d101      	bne.n	8009670 <sbrk_aligned+0x38>
 800966c:	f04f 34ff 	mov.w	r4, #4294967295
 8009670:	4620      	mov	r0, r4
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	200014a8 	.word	0x200014a8

08009678 <_malloc_r>:
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	1ccd      	adds	r5, r1, #3
 800967e:	f025 0503 	bic.w	r5, r5, #3
 8009682:	3508      	adds	r5, #8
 8009684:	2d0c      	cmp	r5, #12
 8009686:	bf38      	it	cc
 8009688:	250c      	movcc	r5, #12
 800968a:	2d00      	cmp	r5, #0
 800968c:	4607      	mov	r7, r0
 800968e:	db01      	blt.n	8009694 <_malloc_r+0x1c>
 8009690:	42a9      	cmp	r1, r5
 8009692:	d905      	bls.n	80096a0 <_malloc_r+0x28>
 8009694:	230c      	movs	r3, #12
 8009696:	2600      	movs	r6, #0
 8009698:	603b      	str	r3, [r7, #0]
 800969a:	4630      	mov	r0, r6
 800969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a0:	4e2e      	ldr	r6, [pc, #184]	; (800975c <_malloc_r+0xe4>)
 80096a2:	f000 f89d 	bl	80097e0 <__malloc_lock>
 80096a6:	6833      	ldr	r3, [r6, #0]
 80096a8:	461c      	mov	r4, r3
 80096aa:	bb34      	cbnz	r4, 80096fa <_malloc_r+0x82>
 80096ac:	4629      	mov	r1, r5
 80096ae:	4638      	mov	r0, r7
 80096b0:	f7ff ffc2 	bl	8009638 <sbrk_aligned>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	4604      	mov	r4, r0
 80096b8:	d14d      	bne.n	8009756 <_malloc_r+0xde>
 80096ba:	6834      	ldr	r4, [r6, #0]
 80096bc:	4626      	mov	r6, r4
 80096be:	2e00      	cmp	r6, #0
 80096c0:	d140      	bne.n	8009744 <_malloc_r+0xcc>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	4631      	mov	r1, r6
 80096c6:	4638      	mov	r0, r7
 80096c8:	eb04 0803 	add.w	r8, r4, r3
 80096cc:	f000 f878 	bl	80097c0 <_sbrk_r>
 80096d0:	4580      	cmp	r8, r0
 80096d2:	d13a      	bne.n	800974a <_malloc_r+0xd2>
 80096d4:	6821      	ldr	r1, [r4, #0]
 80096d6:	3503      	adds	r5, #3
 80096d8:	1a6d      	subs	r5, r5, r1
 80096da:	f025 0503 	bic.w	r5, r5, #3
 80096de:	3508      	adds	r5, #8
 80096e0:	2d0c      	cmp	r5, #12
 80096e2:	bf38      	it	cc
 80096e4:	250c      	movcc	r5, #12
 80096e6:	4638      	mov	r0, r7
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7ff ffa5 	bl	8009638 <sbrk_aligned>
 80096ee:	3001      	adds	r0, #1
 80096f0:	d02b      	beq.n	800974a <_malloc_r+0xd2>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	442b      	add	r3, r5
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	e00e      	b.n	8009718 <_malloc_r+0xa0>
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	1b52      	subs	r2, r2, r5
 80096fe:	d41e      	bmi.n	800973e <_malloc_r+0xc6>
 8009700:	2a0b      	cmp	r2, #11
 8009702:	d916      	bls.n	8009732 <_malloc_r+0xba>
 8009704:	1961      	adds	r1, r4, r5
 8009706:	42a3      	cmp	r3, r4
 8009708:	6025      	str	r5, [r4, #0]
 800970a:	bf18      	it	ne
 800970c:	6059      	strne	r1, [r3, #4]
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	bf08      	it	eq
 8009712:	6031      	streq	r1, [r6, #0]
 8009714:	5162      	str	r2, [r4, r5]
 8009716:	604b      	str	r3, [r1, #4]
 8009718:	4638      	mov	r0, r7
 800971a:	f104 060b 	add.w	r6, r4, #11
 800971e:	f000 f865 	bl	80097ec <__malloc_unlock>
 8009722:	f026 0607 	bic.w	r6, r6, #7
 8009726:	1d23      	adds	r3, r4, #4
 8009728:	1af2      	subs	r2, r6, r3
 800972a:	d0b6      	beq.n	800969a <_malloc_r+0x22>
 800972c:	1b9b      	subs	r3, r3, r6
 800972e:	50a3      	str	r3, [r4, r2]
 8009730:	e7b3      	b.n	800969a <_malloc_r+0x22>
 8009732:	6862      	ldr	r2, [r4, #4]
 8009734:	42a3      	cmp	r3, r4
 8009736:	bf0c      	ite	eq
 8009738:	6032      	streq	r2, [r6, #0]
 800973a:	605a      	strne	r2, [r3, #4]
 800973c:	e7ec      	b.n	8009718 <_malloc_r+0xa0>
 800973e:	4623      	mov	r3, r4
 8009740:	6864      	ldr	r4, [r4, #4]
 8009742:	e7b2      	b.n	80096aa <_malloc_r+0x32>
 8009744:	4634      	mov	r4, r6
 8009746:	6876      	ldr	r6, [r6, #4]
 8009748:	e7b9      	b.n	80096be <_malloc_r+0x46>
 800974a:	230c      	movs	r3, #12
 800974c:	4638      	mov	r0, r7
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	f000 f84c 	bl	80097ec <__malloc_unlock>
 8009754:	e7a1      	b.n	800969a <_malloc_r+0x22>
 8009756:	6025      	str	r5, [r4, #0]
 8009758:	e7de      	b.n	8009718 <_malloc_r+0xa0>
 800975a:	bf00      	nop
 800975c:	200014a4 	.word	0x200014a4

08009760 <_realloc_r>:
 8009760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009764:	4680      	mov	r8, r0
 8009766:	4614      	mov	r4, r2
 8009768:	460e      	mov	r6, r1
 800976a:	b921      	cbnz	r1, 8009776 <_realloc_r+0x16>
 800976c:	4611      	mov	r1, r2
 800976e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	f7ff bf81 	b.w	8009678 <_malloc_r>
 8009776:	b92a      	cbnz	r2, 8009784 <_realloc_r+0x24>
 8009778:	f7ff ff16 	bl	80095a8 <_free_r>
 800977c:	4625      	mov	r5, r4
 800977e:	4628      	mov	r0, r5
 8009780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009784:	f000 f838 	bl	80097f8 <_malloc_usable_size_r>
 8009788:	4284      	cmp	r4, r0
 800978a:	4607      	mov	r7, r0
 800978c:	d802      	bhi.n	8009794 <_realloc_r+0x34>
 800978e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009792:	d812      	bhi.n	80097ba <_realloc_r+0x5a>
 8009794:	4621      	mov	r1, r4
 8009796:	4640      	mov	r0, r8
 8009798:	f7ff ff6e 	bl	8009678 <_malloc_r>
 800979c:	4605      	mov	r5, r0
 800979e:	2800      	cmp	r0, #0
 80097a0:	d0ed      	beq.n	800977e <_realloc_r+0x1e>
 80097a2:	42bc      	cmp	r4, r7
 80097a4:	4622      	mov	r2, r4
 80097a6:	4631      	mov	r1, r6
 80097a8:	bf28      	it	cs
 80097aa:	463a      	movcs	r2, r7
 80097ac:	f7ff fed4 	bl	8009558 <memcpy>
 80097b0:	4631      	mov	r1, r6
 80097b2:	4640      	mov	r0, r8
 80097b4:	f7ff fef8 	bl	80095a8 <_free_r>
 80097b8:	e7e1      	b.n	800977e <_realloc_r+0x1e>
 80097ba:	4635      	mov	r5, r6
 80097bc:	e7df      	b.n	800977e <_realloc_r+0x1e>
	...

080097c0 <_sbrk_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	2300      	movs	r3, #0
 80097c4:	4d05      	ldr	r5, [pc, #20]	; (80097dc <_sbrk_r+0x1c>)
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f7 f954 	bl	8000a78 <_sbrk>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_sbrk_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_sbrk_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	200014ac 	.word	0x200014ac

080097e0 <__malloc_lock>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__malloc_lock+0x8>)
 80097e2:	f000 b811 	b.w	8009808 <__retarget_lock_acquire_recursive>
 80097e6:	bf00      	nop
 80097e8:	200014b0 	.word	0x200014b0

080097ec <__malloc_unlock>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__malloc_unlock+0x8>)
 80097ee:	f000 b80c 	b.w	800980a <__retarget_lock_release_recursive>
 80097f2:	bf00      	nop
 80097f4:	200014b0 	.word	0x200014b0

080097f8 <_malloc_usable_size_r>:
 80097f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fc:	1f18      	subs	r0, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bfbc      	itt	lt
 8009802:	580b      	ldrlt	r3, [r1, r0]
 8009804:	18c0      	addlt	r0, r0, r3
 8009806:	4770      	bx	lr

08009808 <__retarget_lock_acquire_recursive>:
 8009808:	4770      	bx	lr

0800980a <__retarget_lock_release_recursive>:
 800980a:	4770      	bx	lr

0800980c <_init>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	bf00      	nop
 8009810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009812:	bc08      	pop	{r3}
 8009814:	469e      	mov	lr, r3
 8009816:	4770      	bx	lr

08009818 <_fini>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	bf00      	nop
 800981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981e:	bc08      	pop	{r3}
 8009820:	469e      	mov	lr, r3
 8009822:	4770      	bx	lr
