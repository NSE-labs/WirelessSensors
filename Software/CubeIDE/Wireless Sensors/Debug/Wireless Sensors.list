
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094dc  080094dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080094dc  080094dc  000194dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e4  080094e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080094ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  200001e0  080096cc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  080096cc  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cad  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c4  00000000  00000000  00031eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00034f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00035eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a90  00000000  00000000  00036c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142f8  00000000  00000000  0004d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c39c  00000000  00000000  00061a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dddb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  000dde04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	080093fc 	.word	0x080093fc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	080093fc 	.word	0x080093fc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09a      	sub	sp, #104	; 0x68
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 faca 	bl	8000a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f84b 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f8fd 	bl	80006a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f899 	bl	80005dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8c5 	bl	8000638 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f007 fe49 	bl	8008144 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* initialize the LoRa chip */
  LoRa_Init(&hspi1);
 80004b2:	481d      	ldr	r0, [pc, #116]	; (8000528 <main+0x94>)
 80004b4:	f007 fd00 	bl	8007eb8 <LoRa_Init>

  /* Send a status message to USB port */
  uint8_t buffer[100];
  sprintf((char *)buffer, "Entering transmit loop\r\n");
 80004b8:	463b      	mov	r3, r7
 80004ba:	491c      	ldr	r1, [pc, #112]	; (800052c <main+0x98>)
 80004bc:	4618      	mov	r0, r3
 80004be:	f008 fb23 	bl	8008b08 <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004c2:	463b      	mov	r3, r7
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe59 	bl	800017c <strlen>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	463b      	mov	r3, r7
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f007 fef4 	bl	80082c0 <CDC_Transmit_FS>

  int count = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	667b      	str	r3, [r7, #100]	; 0x64

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 80004dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004de:	3301      	adds	r3, #1
 80004e0:	667b      	str	r3, [r7, #100]	; 0x64
	  sprintf((char *)buffer, "Count = %d", count);
 80004e2:	463b      	mov	r3, r7
 80004e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80004e6:	4912      	ldr	r1, [pc, #72]	; (8000530 <main+0x9c>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f008 fb0d 	bl	8008b08 <siprintf>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); /* Turn on the LED */
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	480f      	ldr	r0, [pc, #60]	; (8000534 <main+0xa0>)
 80004f6:	f000 fdd2 	bl	800109e <HAL_GPIO_WritePin>
	  LoRaTransmit(buffer, strlen((char *)buffer));
 80004fa:	463b      	mov	r3, r7
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe3d 	bl	800017c <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	463b      	mov	r3, r7
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f007 fd92 	bl	8008034 <LoRaTransmit>
	  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off the LED */
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	4807      	ldr	r0, [pc, #28]	; (8000534 <main+0xa0>)
 8000518:	f000 fdc1 	bl	800109e <HAL_GPIO_WritePin>
	  HAL_Delay (1000);   /* Delay 1 second */
 800051c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000520:	f000 faf6 	bl	8000b10 <HAL_Delay>
	  count++;
 8000524:	e7da      	b.n	80004dc <main+0x48>
 8000526:	bf00      	nop
 8000528:	20000250 	.word	0x20000250
 800052c:	08009414 	.word	0x08009414
 8000530:	08009430 	.word	0x08009430
 8000534:	40020800 	.word	0x40020800

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b092      	sub	sp, #72	; 0x48
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2234      	movs	r2, #52	; 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f008 fad6 	bl	8008af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xa0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000562:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <SystemClock_Config+0xa0>)
 8000564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000568:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800056a:	2303      	movs	r3, #3
 800056c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000584:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fb0b 	bl	8002bb0 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005a0:	f000 f8f8 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a8:	2301      	movs	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ba:	463b      	mov	r3, r7
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fe26 	bl	8003210 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ca:	f000 f8e3 	bl	8000794 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3748      	adds	r7, #72	; 0x48
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f000 fd59 	bl	80010d0 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f8b6 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200001fc 	.word	0x200001fc
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_SPI1_Init+0x60>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_SPI1_Init+0x64>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_SPI1_Init+0x60>)
 8000644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_SPI1_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_SPI1_Init+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_SPI1_Init+0x60>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_SPI1_Init+0x60>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_SPI1_Init+0x60>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_SPI1_Init+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_SPI1_Init+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_SPI1_Init+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_SPI1_Init+0x60>)
 800067e:	220a      	movs	r2, #10
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_SPI1_Init+0x60>)
 8000684:	f003 f874 	bl	8003770 <HAL_SPI_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 800068e:	f000 f881 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000250 	.word	0x20000250
 800069c:	40013000 	.word	0x40013000

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b34      	ldr	r3, [pc, #208]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a33      	ldr	r2, [pc, #204]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a2d      	ldr	r2, [pc, #180]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a27      	ldr	r2, [pc, #156]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b25      	ldr	r3, [pc, #148]	; (8000788 <MX_GPIO_Init+0xe8>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_GPIO_Init+0xe8>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a21      	ldr	r2, [pc, #132]	; (8000788 <MX_GPIO_Init+0xe8>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xe8>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071c:	481b      	ldr	r0, [pc, #108]	; (800078c <MX_GPIO_Init+0xec>)
 800071e:	f000 fcbe 	bl	800109e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2111      	movs	r1, #17
 8000726:	481a      	ldr	r0, [pc, #104]	; (8000790 <MX_GPIO_Init+0xf0>)
 8000728:	f000 fcb9 	bl	800109e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800072c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_GPIO_Init+0xec>)
 8000746:	f000 fb13 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin;
 800074a:	2311      	movs	r3, #17
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0xf0>)
 8000762:	f000 fb05 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 8000766:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_GPIO_Init+0xf0>)
 800077c:	f000 faf8 	bl	8000d70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020800 	.word	0x40020800
 8000790:	40020000 	.word	0x40020000

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_MspInit+0x58>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <HAL_MspInit+0x58>)
 80007ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b0:	6253      	str	r3, [r2, #36]	; 0x24
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_MspInit+0x58>)
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_MspInit+0x58>)
 80007c0:	6a1b      	ldr	r3, [r3, #32]
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <HAL_MspInit+0x58>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6213      	str	r3, [r2, #32]
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <HAL_MspInit+0x58>)
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_MspInit+0x58>)
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_MspInit+0x58>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6253      	str	r3, [r2, #36]	; 0x24
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_MspInit+0x58>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_I2C_MspInit+0x7c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d127      	bne.n	800086e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <HAL_I2C_MspInit+0x80>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <HAL_I2C_MspInit+0x80>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_I2C_MspInit+0x80>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000836:	23c0      	movs	r3, #192	; 0xc0
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	2312      	movs	r3, #18
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000846:	2304      	movs	r3, #4
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <HAL_I2C_MspInit+0x84>)
 8000852:	f000 fa8d 	bl	8000d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_I2C_MspInit+0x80>)
 8000858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_I2C_MspInit+0x80>)
 800085c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000860:	6253      	str	r3, [r2, #36]	; 0x24
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_I2C_MspInit+0x80>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40005400 	.word	0x40005400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400

08000884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_SPI_MspInit+0x7c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d127      	bne.n	80008f6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008a8:	6a1b      	ldr	r3, [r3, #32]
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b0:	6213      	str	r3, [r2, #32]
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008b4:	6a1b      	ldr	r3, [r3, #32]
 80008b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008d6:	23e0      	movs	r3, #224	; 0xe0
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e6:	2305      	movs	r3, #5
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_SPI_MspInit+0x84>)
 80008f2:	f000 fa3d 	bl	8000d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40013000 	.word	0x40013000
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f8c1 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <USB_LP_IRQHandler+0x10>)
 8000962:	f000 fdfd 	bl	8001560 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000f54 	.word	0x20000f54

08000970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000978:	4a14      	ldr	r2, [pc, #80]	; (80009cc <_sbrk+0x5c>)
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <_sbrk+0x60>)
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <_sbrk+0x64>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <_sbrk+0x68>)
 8000990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	429a      	cmp	r2, r3
 800099e:	d207      	bcs.n	80009b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a0:	f008 f880 	bl	8008aa4 <__errno>
 80009a4:	4603      	mov	r3, r0
 80009a6:	220c      	movs	r2, #12
 80009a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295
 80009ae:	e009      	b.n	80009c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <_sbrk+0x64>)
 80009c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20002800 	.word	0x20002800
 80009d0:	00000400 	.word	0x00000400
 80009d4:	200002a8 	.word	0x200002a8
 80009d8:	20001470 	.word	0x20001470

080009dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	; (8000a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0e:	f7ff ffe5 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f008 f84d 	bl	8008ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff fd3d 	bl	8000494 <main>
  bx lr
 8000a1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a24:	080094ec 	.word	0x080094ec
  ldr r2, =_sbss
 8000a28:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a2c:	20001470 	.word	0x20001470

08000a30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_IRQHandler>

08000a32 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f955 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 f80e 	bl	8000a64 <HAL_InitTick>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	e001      	b.n	8000a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a54:	f7ff fea4 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a58:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_InitTick+0x68>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d022      	beq.n	8000abe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_InitTick+0x6c>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_InitTick+0x68>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f962 	bl	8000d56 <HAL_SYSTICK_Config>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d10f      	bne.n	8000ab8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b0f      	cmp	r3, #15
 8000a9c:	d809      	bhi.n	8000ab2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa6:	f000 f92c 	bl	8000d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_InitTick+0x70>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	e007      	b.n	8000ac2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	73fb      	strb	r3, [r7, #15]
 8000ab6:	e004      	b.n	8000ac2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e001      	b.n	8000ac2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x20>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ae8:	6013      	str	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200002ac 	.word	0x200002ac
 8000af8:	20000008 	.word	0x20000008

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	200002ac 	.word	0x200002ac

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff fff0 	bl	8000afc <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d004      	beq.n	8000b34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_Delay+0x40>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b34:	bf00      	nop
 8000b36:	f7ff ffe1 	bl	8000afc <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d8f7      	bhi.n	8000b36 <HAL_Delay+0x26>
  {
  }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000008 	.word	0x20000008

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4906      	ldr	r1, [pc, #24]	; (8000bec <__NVIC_EnableIRQ+0x34>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff90 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff2d 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff42 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff90 	bl	8000c44 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5f 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff35 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa2 	bl	8000ca8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d86:	e154      	b.n	8001032 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 8146 	beq.w	800102c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d130      	bne.n	8000e1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000dee:	2201      	movs	r2, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	f003 0201 	and.w	r2, r3, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d017      	beq.n	8000e56 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	6939      	ldr	r1, [r7, #16]
 8000ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0203 	and.w	r2, r3, #3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80a0 	beq.w	800102c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	4b58      	ldr	r3, [pc, #352]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	4a57      	ldr	r2, [pc, #348]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6213      	str	r3, [r2, #32]
 8000ef8:	4b55      	ldr	r3, [pc, #340]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f04:	4a53      	ldr	r2, [pc, #332]	; (8001054 <HAL_GPIO_Init+0x2e4>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a4b      	ldr	r2, [pc, #300]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d019      	beq.n	8000f64 <HAL_GPIO_Init+0x1f4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a4a      	ldr	r2, [pc, #296]	; (800105c <HAL_GPIO_Init+0x2ec>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d013      	beq.n	8000f60 <HAL_GPIO_Init+0x1f0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a49      	ldr	r2, [pc, #292]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00d      	beq.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a48      	ldr	r2, [pc, #288]	; (8001064 <HAL_GPIO_Init+0x2f4>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d007      	beq.n	8000f58 <HAL_GPIO_Init+0x1e8>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a47      	ldr	r2, [pc, #284]	; (8001068 <HAL_GPIO_Init+0x2f8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d101      	bne.n	8000f54 <HAL_GPIO_Init+0x1e4>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e008      	b.n	8000f66 <HAL_GPIO_Init+0x1f6>
 8000f54:	2305      	movs	r3, #5
 8000f56:	e006      	b.n	8000f66 <HAL_GPIO_Init+0x1f6>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e004      	b.n	8000f66 <HAL_GPIO_Init+0x1f6>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0x1f6>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <HAL_GPIO_Init+0x1f6>
 8000f64:	2300      	movs	r3, #0
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	f002 0203 	and.w	r2, r2, #3
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	4093      	lsls	r3, r2
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f76:	4937      	ldr	r1, [pc, #220]	; (8001054 <HAL_GPIO_Init+0x2e4>)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f84:	4b39      	ldr	r3, [pc, #228]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fa8:	4a30      	ldr	r2, [pc, #192]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd2:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	f47f aea3 	bne.w	8000d88 <HAL_GPIO_Init+0x18>
  }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40010000 	.word	0x40010000
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e001      	b.n	8001092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	807b      	strh	r3, [r7, #2]
 80010aa:	4613      	mov	r3, r2
 80010ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ae:	787b      	ldrb	r3, [r7, #1]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010ba:	e003      	b.n	80010c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	041a      	lsls	r2, r3, #16
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e12b      	b.n	800133a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fb80 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001134:	f002 faa8 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8001138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4a81      	ldr	r2, [pc, #516]	; (8001344 <HAL_I2C_Init+0x274>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d807      	bhi.n	8001154 <HAL_I2C_Init+0x84>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a80      	ldr	r2, [pc, #512]	; (8001348 <HAL_I2C_Init+0x278>)
 8001148:	4293      	cmp	r3, r2
 800114a:	bf94      	ite	ls
 800114c:	2301      	movls	r3, #1
 800114e:	2300      	movhi	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	e006      	b.n	8001162 <HAL_I2C_Init+0x92>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a7d      	ldr	r2, [pc, #500]	; (800134c <HAL_I2C_Init+0x27c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	bf94      	ite	ls
 800115c:	2301      	movls	r3, #1
 800115e:	2300      	movhi	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e0e7      	b.n	800133a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4a78      	ldr	r2, [pc, #480]	; (8001350 <HAL_I2C_Init+0x280>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9b      	lsrs	r3, r3, #18
 8001174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	430a      	orrs	r2, r1
 8001188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a6a      	ldr	r2, [pc, #424]	; (8001344 <HAL_I2C_Init+0x274>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d802      	bhi.n	80011a4 <HAL_I2C_Init+0xd4>
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3301      	adds	r3, #1
 80011a2:	e009      	b.n	80011b8 <HAL_I2C_Init+0xe8>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	4a69      	ldr	r2, [pc, #420]	; (8001354 <HAL_I2C_Init+0x284>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	099b      	lsrs	r3, r3, #6
 80011b6:	3301      	adds	r3, #1
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	430b      	orrs	r3, r1
 80011be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	495c      	ldr	r1, [pc, #368]	; (8001344 <HAL_I2C_Init+0x274>)
 80011d4:	428b      	cmp	r3, r1
 80011d6:	d819      	bhi.n	800120c <HAL_I2C_Init+0x13c>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1e59      	subs	r1, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e6:	1c59      	adds	r1, r3, #1
 80011e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011ec:	400b      	ands	r3, r1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00a      	beq.n	8001208 <HAL_I2C_Init+0x138>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1e59      	subs	r1, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001200:	3301      	adds	r3, #1
 8001202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001206:	e051      	b.n	80012ac <HAL_I2C_Init+0x1dc>
 8001208:	2304      	movs	r3, #4
 800120a:	e04f      	b.n	80012ac <HAL_I2C_Init+0x1dc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d111      	bne.n	8001238 <HAL_I2C_Init+0x168>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1e58      	subs	r0, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6859      	ldr	r1, [r3, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	440b      	add	r3, r1
 8001222:	fbb0 f3f3 	udiv	r3, r0, r3
 8001226:	3301      	adds	r3, #1
 8001228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	e012      	b.n	800125e <HAL_I2C_Init+0x18e>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1e58      	subs	r0, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6859      	ldr	r1, [r3, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	0099      	lsls	r1, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	fbb0 f3f3 	udiv	r3, r0, r3
 800124e:	3301      	adds	r3, #1
 8001250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001254:	2b00      	cmp	r3, #0
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_Init+0x196>
 8001262:	2301      	movs	r3, #1
 8001264:	e022      	b.n	80012ac <HAL_I2C_Init+0x1dc>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10e      	bne.n	800128c <HAL_I2C_Init+0x1bc>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1e58      	subs	r0, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6859      	ldr	r1, [r3, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	440b      	add	r3, r1
 800127c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001280:	3301      	adds	r3, #1
 8001282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128a:	e00f      	b.n	80012ac <HAL_I2C_Init+0x1dc>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1e58      	subs	r0, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	0099      	lsls	r1, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	6809      	ldr	r1, [r1, #0]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69da      	ldr	r2, [r3, #28]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6911      	ldr	r1, [r2, #16]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68d2      	ldr	r2, [r2, #12]
 80012e6:	4311      	orrs	r1, r2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	430b      	orrs	r3, r1
 80012ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2220      	movs	r2, #32
 8001326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	000186a0 	.word	0x000186a0
 8001348:	001e847f 	.word	0x001e847f
 800134c:	003d08ff 	.word	0x003d08ff
 8001350:	431bde83 	.word	0x431bde83
 8001354:	10624dd3 	.word	0x10624dd3

08001358 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	b08b      	sub	sp, #44	; 0x2c
 800135c:	af06      	add	r7, sp, #24
 800135e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0d0      	b.n	800150c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f007 f8f0 	bl	8008564 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2203      	movs	r2, #3
 8001388:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fc85 	bl	8003ca0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e04c      	b.n	8001436 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	440b      	add	r3, r1
 80013ac:	3301      	adds	r3, #1
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	b298      	uxth	r0, r3
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	3336      	adds	r3, #54	; 0x36
 80013da:	4602      	mov	r2, r0
 80013dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	3303      	adds	r3, #3
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	3338      	adds	r3, #56	; 0x38
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	333c      	adds	r3, #60	; 0x3c
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3340      	adds	r3, #64	; 0x40
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3ad      	bcc.n	800139c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e044      	b.n	80014d0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3b5      	bcc.n	8001446 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	687e      	ldr	r6, [r7, #4]
 80014e2:	466d      	mov	r5, sp
 80014e4:	f106 0410 	add.w	r4, r6, #16
 80014e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	602b      	str	r3, [r5, #0]
 80014f0:	1d33      	adds	r3, r6, #4
 80014f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f002 fbed 	bl	8003cd4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001514 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_PCD_Start+0x16>
 8001526:	2302      	movs	r3, #2
 8001528:	e016      	b.n	8001558 <HAL_PCD_Start+0x44>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fb9c 	bl	8003c74 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800153c:	2101      	movs	r1, #1
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f006 fff2 	bl	8008528 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f005 f881 	bl	8006650 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f005 f879 	bl	8006664 <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800157c:	d102      	bne.n	8001584 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 faf5 	bl	8001b6e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f005 f86b 	bl	8006664 <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001598:	d112      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ac:	b292      	uxth	r2, r2
 80015ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f007 f851 	bl	800865a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015b8:	2100      	movs	r1, #0
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8c7 	bl	800174e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f005 f84d 	bl	8006664 <USB_ReadInterrupts>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015d4:	d10b      	bne.n	80015ee <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015e8:	b292      	uxth	r2, r2
 80015ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 f836 	bl	8006664 <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001602:	d10b      	bne.n	800161c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160c:	b29a      	uxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001616:	b292      	uxth	r2, r2
 8001618:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f005 f81f 	bl	8006664 <USB_ReadInterrupts>
 8001626:	4603      	mov	r3, r0
 8001628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001630:	d126      	bne.n	8001680 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0204 	bic.w	r2, r2, #4
 8001644:	b292      	uxth	r2, r2
 8001646:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001652:	b29a      	uxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0208 	bic.w	r2, r2, #8
 800165c:	b292      	uxth	r2, r2
 800165e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f007 f832 	bl	80086cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800167a:	b292      	uxth	r2, r2
 800167c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f004 ffed 	bl	8006664 <USB_ReadInterrupts>
 800168a:	4603      	mov	r3, r0
 800168c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001694:	d126      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800169e:	b29a      	uxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0208 	orr.w	r2, r2, #8
 80016a8:	b292      	uxth	r2, r2
 80016aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0204 	orr.w	r2, r2, #4
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f006 ffda 	bl	8008698 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 ffbb 	bl	8006664 <USB_ReadInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f8:	d10e      	bne.n	8001718 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800170c:	b292      	uxth	r2, r2
 800170e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f006 ff93 	bl	800863e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f004 ffa1 	bl	8006664 <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800172c:	d10b      	bne.n	8001746 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_PCD_SetAddress+0x1a>
 8001764:	2302      	movs	r3, #2
 8001766:	e013      	b.n	8001790 <HAL_PCD_SetAddress+0x42>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f004 ff52 	bl	800662a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	70fb      	strb	r3, [r7, #3]
 80017aa:	460b      	mov	r3, r1
 80017ac:	803b      	strh	r3, [r7, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da0e      	bge.n	80017dc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	705a      	strb	r2, [r3, #1]
 80017da:	e00e      	b.n	80017fa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0207 	and.w	r2, r3, #7
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001806:	883a      	ldrh	r2, [r7, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	78ba      	ldrb	r2, [r7, #2]
 8001810:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	785b      	ldrb	r3, [r3, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d102      	bne.n	8001830 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_PCD_EP_Open+0xa6>
 800183a:	2302      	movs	r3, #2
 800183c:	e00e      	b.n	800185c <HAL_PCD_EP_Open+0xc4>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fa61 	bl	8003d14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800185a:	7afb      	ldrb	r3, [r7, #11]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da0e      	bge.n	8001896 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	705a      	strb	r2, [r3, #1]
 8001894:	e00e      	b.n	80018b4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	f003 0207 	and.w	r2, r3, #7
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_PCD_EP_Close+0x6a>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e00e      	b.n	80018ec <HAL_PCD_EP_Close+0x88>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fd83 	bl	80043e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	460b      	mov	r3, r1
 8001902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	f003 0207 	and.w	r2, r3, #7
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2200      	movs	r2, #0
 8001932:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	b2da      	uxtb	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6979      	ldr	r1, [r7, #20]
 8001950:	4618      	mov	r0, r3
 8001952:	f002 ff35 	bl	80047c0 <USB_EPStartXfer>
 8001956:	e005      	b.n	8001964 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6979      	ldr	r1, [r7, #20]
 800195e:	4618      	mov	r0, r3
 8001960:	f002 ff2e 	bl	80047c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 0207 	and.w	r2, r3, #7
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001990:	681b      	ldr	r3, [r3, #0]
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2201      	movs	r2, #1
 80019e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6979      	ldr	r1, [r7, #20]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fedb 	bl	80047c0 <USB_EPStartXfer>
 8001a0a:	e005      	b.n	8001a18 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6979      	ldr	r1, [r7, #20]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 fed4 	bl	80047c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	f003 0207 	and.w	r2, r3, #7
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d901      	bls.n	8001a40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e03e      	b.n	8001abe <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da0e      	bge.n	8001a66 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	705a      	strb	r2, [r3, #1]
 8001a64:	e00c      	b.n	8001a80 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_PCD_EP_SetStall+0x7e>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e00e      	b.n	8001abe <HAL_PCD_EP_SetStall+0x9c>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fcbe 	bl	8006430 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 020f 	and.w	r2, r3, #15
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d901      	bls.n	8001ae4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e040      	b.n	8001b66 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da0e      	bge.n	8001b0a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	705a      	strb	r2, [r3, #1]
 8001b08:	e00e      	b.n	8001b28 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0207 	and.w	r2, r3, #7
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_PCD_EP_ClrStall+0x82>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e00e      	b.n	8001b66 <HAL_PCD_EP_ClrStall+0xa0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 fcba 	bl	80064d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b08e      	sub	sp, #56	; 0x38
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b76:	e2ec      	b.n	8002152 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b80:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8161 	bne.w	8001e5a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d152      	bne.n	8001c48 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb2:	81fb      	strh	r3, [r7, #14]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3328      	adds	r3, #40	; 0x28
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	3302      	adds	r3, #2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	441a      	add	r2, r3
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c06:	2100      	movs	r1, #0
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f006 fcfe 	bl	800860a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 829b 	beq.w	8002152 <PCD_EP_ISR_Handler+0x5e4>
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 8296 	bne.w	8002152 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c46:	e284      	b.n	8002152 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d034      	beq.n	8001ccc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	3306      	adds	r3, #6
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f004 fd33 	bl	800670c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	823b      	strh	r3, [r7, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	8a3a      	ldrh	r2, [r7, #16]
 8001cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cc0:	b292      	uxth	r2, r2
 8001cc2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f006 fc73 	bl	80085b0 <HAL_PCD_SetupStageCallback>
 8001cca:	e242      	b.n	8002152 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ccc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f280 823e 	bge.w	8002152 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	83bb      	strh	r3, [r7, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	8bba      	ldrh	r2, [r7, #28]
 8001cec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	3306      	adds	r3, #6
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d019      	beq.n	8001d5c <PCD_EP_ISR_Handler+0x1ee>
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d015      	beq.n	8001d5c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	6959      	ldr	r1, [r3, #20]
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f004 fce3 	bl	800670c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	441a      	add	r2, r3
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d54:	2100      	movs	r1, #0
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f006 fc3c 	bl	80085d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f040 81f2 	bne.w	8002152 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	4413      	add	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d112      	bne.n	8001dbc <PCD_EP_ISR_Handler+0x24e>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	e02f      	b.n	8001e1c <PCD_EP_ISR_Handler+0x2ae>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b3e      	cmp	r3, #62	; 0x3e
 8001dc2:	d813      	bhi.n	8001dec <PCD_EP_ISR_Handler+0x27e>
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <PCD_EP_ISR_Handler+0x270>
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	3301      	adds	r3, #1
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	e017      	b.n	8001e1c <PCD_EP_ISR_Handler+0x2ae>
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <PCD_EP_ISR_Handler+0x298>
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e02:	3b01      	subs	r3, #1
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	029b      	lsls	r3, r3, #10
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2c:	827b      	strh	r3, [r7, #18]
 8001e2e:	8a7b      	ldrh	r3, [r7, #18]
 8001e30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e34:	827b      	strh	r3, [r7, #18]
 8001e36:	8a7b      	ldrh	r3, [r7, #18]
 8001e38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e3c:	827b      	strh	r3, [r7, #18]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	8a7b      	ldrh	r3, [r7, #18]
 8001e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	8013      	strh	r3, [r2, #0]
 8001e58:	e17b      	b.n	8002152 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f280 80ea 	bge.w	800204a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ea8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	7b1b      	ldrb	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d122      	bne.n	8001f0c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3306      	adds	r3, #6
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eee:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ef0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8087 	beq.w	8002006 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	6959      	ldr	r1, [r3, #20]
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	88da      	ldrh	r2, [r3, #6]
 8001f04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f06:	f004 fc01 	bl	800670c <USB_ReadPMA>
 8001f0a:	e07c      	b.n	8002006 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	78db      	ldrb	r3, [r3, #3]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d108      	bne.n	8001f26 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f16:	461a      	mov	r2, r3
 8001f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f927 	bl	800216e <HAL_PCD_EP_DB_Receive>
 8001f20:	4603      	mov	r3, r0
 8001f22:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f24:	e06f      	b.n	8002006 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f40:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	441a      	add	r2, r3
 8001f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d021      	beq.n	8001fc4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	3302      	adds	r3, #2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001faa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d02a      	beq.n	8002006 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	6959      	ldr	r1, [r3, #20]
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	891a      	ldrh	r2, [r3, #8]
 8001fbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fbe:	f004 fba5 	bl	800670c <USB_ReadPMA>
 8001fc2:	e020      	b.n	8002006 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3306      	adds	r3, #6
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	6959      	ldr	r1, [r3, #20]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	895a      	ldrh	r2, [r3, #10]
 8002000:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002002:	f004 fb83 	bl	800670c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800200c:	441a      	add	r2, r3
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002018:	441a      	add	r2, r3
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <PCD_EP_ISR_Handler+0x4c2>
 8002026:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d206      	bcs.n	800203e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f006 facc 	bl	80085d4 <HAL_PCD_DataOutStageCallback>
 800203c:	e005      	b.n	800204a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002044:	4618      	mov	r0, r3
 8002046:	f002 fbbb 	bl	80047c0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800204a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	2b00      	cmp	r3, #0
 8002052:	d07e      	beq.n	8002152 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002054:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	843b      	strh	r3, [r7, #32]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	8c3b      	ldrh	r3, [r7, #32]
 8002094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800209c:	b29b      	uxth	r3, r3
 800209e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	78db      	ldrb	r3, [r3, #3]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d00c      	beq.n	80020c2 <PCD_EP_ISR_Handler+0x554>
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	78db      	ldrb	r3, [r3, #3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d146      	bne.n	8002146 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d141      	bne.n	8002146 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	3302      	adds	r3, #2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ea:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	8bfb      	ldrh	r3, [r7, #30]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d906      	bls.n	8002104 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	8bfb      	ldrh	r3, [r7, #30]
 80020fc:	1ad2      	subs	r2, r2, r3
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	619a      	str	r2, [r3, #24]
 8002102:	e002      	b.n	800210a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f006 fa76 	bl	800860a <HAL_PCD_DataInStageCallback>
 800211e:	e018      	b.n	8002152 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	8bfb      	ldrh	r3, [r7, #30]
 8002126:	441a      	add	r2, r3
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	8bfb      	ldrh	r3, [r7, #30]
 8002132:	441a      	add	r2, r3
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fb3e 	bl	80047c0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002144:	e005      	b.n	8002152 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002146:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002148:	461a      	mov	r2, r3
 800214a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f91b 	bl	8002388 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800215a:	b29b      	uxth	r3, r3
 800215c:	b21b      	sxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f6ff ad0a 	blt.w	8001b78 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3738      	adds	r7, #56	; 0x38
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b088      	sub	sp, #32
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	4613      	mov	r3, r2
 800217a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d07e      	beq.n	8002284 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	3302      	adds	r3, #2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	8b7b      	ldrh	r3, [r7, #26]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d306      	bcc.n	80021c8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	8b7b      	ldrh	r3, [r7, #26]
 80021c0:	1ad2      	subs	r2, r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	619a      	str	r2, [r3, #24]
 80021c6:	e002      	b.n	80021ce <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2200      	movs	r2, #0
 80021cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d123      	bne.n	800221e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f0:	833b      	strh	r3, [r7, #24]
 80021f2:	8b3b      	ldrh	r3, [r7, #24]
 80021f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021f8:	833b      	strh	r3, [r7, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	441a      	add	r2, r3
 8002208:	8b3b      	ldrh	r3, [r7, #24]
 800220a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800220e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221a:	b29b      	uxth	r3, r3
 800221c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01f      	beq.n	8002268 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800223e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002242:	82fb      	strh	r3, [r7, #22]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	441a      	add	r2, r3
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800225c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002264:	b29b      	uxth	r3, r3
 8002266:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002268:	8b7b      	ldrh	r3, [r7, #26]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8087 	beq.w	800237e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6959      	ldr	r1, [r3, #20]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	891a      	ldrh	r2, [r3, #8]
 800227c:	8b7b      	ldrh	r3, [r7, #26]
 800227e:	f004 fa45 	bl	800670c <USB_ReadPMA>
 8002282:	e07c      	b.n	800237e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228c:	b29b      	uxth	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	3306      	adds	r3, #6
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	8b7b      	ldrh	r3, [r7, #26]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d306      	bcc.n	80022c6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	8b7b      	ldrh	r3, [r7, #26]
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	619a      	str	r2, [r3, #24]
 80022c4:	e002      	b.n	80022cc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d123      	bne.n	800231c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ee:	83fb      	strh	r3, [r7, #30]
 80022f0:	8bfb      	ldrh	r3, [r7, #30]
 80022f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022f6:	83fb      	strh	r3, [r7, #30]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	8bfb      	ldrh	r3, [r7, #30]
 8002308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800230c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	b29b      	uxth	r3, r3
 800231a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11f      	bne.n	8002366 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	83bb      	strh	r3, [r7, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	441a      	add	r2, r3
 8002350:	8bbb      	ldrh	r3, [r7, #28]
 8002352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800235a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002362:	b29b      	uxth	r3, r3
 8002364:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002366:	8b7b      	ldrh	r3, [r7, #26]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	6959      	ldr	r1, [r3, #20]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	895a      	ldrh	r2, [r3, #10]
 8002378:	8b7b      	ldrh	r3, [r7, #26]
 800237a:	f004 f9c7 	bl	800670c <USB_ReadPMA>
    }
  }

  return count;
 800237e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0a2      	sub	sp, #136	; 0x88
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 81c7 	beq.w	8002730 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	3302      	adds	r3, #2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d907      	bls.n	80023ea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e2:	1ad2      	subs	r2, r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	619a      	str	r2, [r3, #24]
 80023e8:	e002      	b.n	80023f0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 80b9 	bne.w	800256c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d126      	bne.n	8002450 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002410:	b29b      	uxth	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	4413      	add	r3, r2
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	011a      	lsls	r2, r3, #4
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	4413      	add	r3, r2
 8002424:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002434:	b29a      	uxth	r2, r3
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	801a      	strh	r2, [r3, #0]
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002448:	b29a      	uxth	r2, r3
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	801a      	strh	r2, [r3, #0]
 800244e:	e01a      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d116      	bne.n	8002486 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002466:	b29b      	uxth	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	4413      	add	r3, r2
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	011a      	lsls	r2, r3, #4
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	4413      	add	r3, r2
 800247a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	2200      	movs	r2, #0
 8002484:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d126      	bne.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	011a      	lsls	r2, r3, #4
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	801a      	strh	r2, [r3, #0]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024da:	b29a      	uxth	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	e017      	b.n	8002512 <HAL_PCD_EP_DB_Transmit+0x18a>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d113      	bne.n	8002512 <HAL_PCD_EP_DB_Transmit+0x18a>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	4413      	add	r3, r2
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	011a      	lsls	r2, r3, #4
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	4413      	add	r3, r2
 8002506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2200      	movs	r2, #0
 8002510:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f006 f876 	bl	800860a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 82d4 	beq.w	8002ad2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002544:	827b      	strh	r3, [r7, #18]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	441a      	add	r2, r3
 8002554:	8a7b      	ldrh	r3, [r7, #18]
 8002556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800255a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002566:	b29b      	uxth	r3, r3
 8002568:	8013      	strh	r3, [r2, #0]
 800256a:	e2b2      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d021      	beq.n	80025ba <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800258c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002590:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	441a      	add	r2, r3
 80025a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f040 8286 	bne.w	8002ad2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ce:	441a      	add	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025dc:	441a      	add	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d309      	bcc.n	8002602 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	621a      	str	r2, [r3, #32]
 8002600:	e015      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d107      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800260a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002618:	e009      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d155      	bne.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	63bb      	str	r3, [r7, #56]	; 0x38
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	4413      	add	r3, r2
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	011a      	lsls	r2, r3, #4
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	4413      	add	r3, r2
 8002658:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
 800265e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002660:	2b00      	cmp	r3, #0
 8002662:	d112      	bne.n	800268a <HAL_PCD_EP_DB_Transmit+0x302>
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800266e:	b29a      	uxth	r2, r3
 8002670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002672:	801a      	strh	r2, [r3, #0]
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800267e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002682:	b29a      	uxth	r2, r3
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	e047      	b.n	800271a <HAL_PCD_EP_DB_Transmit+0x392>
 800268a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268c:	2b3e      	cmp	r3, #62	; 0x3e
 800268e:	d811      	bhi.n	80026b4 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
 8002696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80026a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a2:	3301      	adds	r3, #1
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	029b      	lsls	r3, r3, #10
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	e032      	b.n	800271a <HAL_PCD_EP_DB_Transmit+0x392>
 80026b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_PCD_EP_DB_Transmit+0x342>
 80026c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c6:	3b01      	subs	r3, #1
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	029b      	lsls	r3, r3, #10
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026da:	b29a      	uxth	r2, r3
 80026dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	e01b      	b.n	800271a <HAL_PCD_EP_DB_Transmit+0x392>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d117      	bne.n	800271a <HAL_PCD_EP_DB_Transmit+0x392>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fe:	4413      	add	r3, r2
 8002700:	643b      	str	r3, [r7, #64]	; 0x40
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	011a      	lsls	r2, r3, #4
 8002708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270a:	4413      	add	r3, r2
 800270c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002714:	b29a      	uxth	r2, r3
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002718:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6959      	ldr	r1, [r3, #20]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	891a      	ldrh	r2, [r3, #8]
 8002726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	f003 ffaa 	bl	8006682 <USB_WritePMA>
 800272e:	e1d0      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	3306      	adds	r3, #6
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002764:	429a      	cmp	r2, r3
 8002766:	d307      	bcc.n	8002778 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002770:	1ad2      	subs	r2, r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	e002      	b.n	800277e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80c4 	bne.w	8002910 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d126      	bne.n	80027de <HAL_PCD_EP_DB_Transmit+0x456>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a4:	4413      	add	r3, r2
 80027a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	011a      	lsls	r2, r3, #4
 80027ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b0:	4413      	add	r3, r2
 80027b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	e01a      	b.n	8002814 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d116      	bne.n	8002814 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	677b      	str	r3, [r7, #116]	; 0x74
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fa:	4413      	add	r3, r2
 80027fc:	677b      	str	r3, [r7, #116]	; 0x74
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	011a      	lsls	r2, r3, #4
 8002804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002806:	4413      	add	r3, r2
 8002808:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800280c:	673b      	str	r3, [r7, #112]	; 0x70
 800280e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002810:	2200      	movs	r2, #0
 8002812:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	67bb      	str	r3, [r7, #120]	; 0x78
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d12f      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800283a:	4413      	add	r3, r2
 800283c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	011a      	lsls	r2, r3, #4
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284a:	4413      	add	r3, r2
 800284c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002860:	b29a      	uxth	r2, r3
 8002862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002866:	801a      	strh	r2, [r3, #0]
 8002868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002878:	b29a      	uxth	r2, r3
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	e017      	b.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d113      	bne.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x52a>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002898:	4413      	add	r3, r2
 800289a:	67bb      	str	r3, [r7, #120]	; 0x78
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	011a      	lsls	r2, r3, #4
 80028a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a4:	4413      	add	r3, r2
 80028a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ae:	2200      	movs	r2, #0
 80028b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f005 fea6 	bl	800860a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 8104 	bne.w	8002ad2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	441a      	add	r2, r3
 80028f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]
 800290e:	e0e0      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d121      	bne.n	800295e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800294a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800294e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295a:	b29b      	uxth	r3, r3
 800295c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002964:	2b01      	cmp	r3, #1
 8002966:	f040 80b4 	bne.w	8002ad2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002972:	441a      	add	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002980:	441a      	add	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6a1a      	ldr	r2, [r3, #32]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	429a      	cmp	r2, r3
 8002990:	d309      	bcc.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6a1a      	ldr	r2, [r3, #32]
 800299c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299e:	1ad2      	subs	r2, r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	621a      	str	r2, [r3, #32]
 80029a4:	e015      	b.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80029ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029bc:	e009      	b.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	667b      	str	r3, [r7, #100]	; 0x64
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d155      	bne.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x704>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f4:	4413      	add	r3, r2
 80029f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	011a      	lsls	r2, r3, #4
 80029fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a00:	4413      	add	r3, r2
 8002a02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a06:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d112      	bne.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1c:	801a      	strh	r2, [r3, #0]
 8002a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	e044      	b.n	8002abe <HAL_PCD_EP_DB_Transmit+0x736>
 8002a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a36:	2b3e      	cmp	r3, #62	; 0x3e
 8002a38:	d811      	bhi.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	e02f      	b.n	8002abe <HAL_PCD_EP_DB_Transmit+0x736>
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
 8002a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	3b01      	subs	r3, #1
 8002a72:	657b      	str	r3, [r7, #84]	; 0x54
 8002a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	029b      	lsls	r3, r3, #10
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	e018      	b.n	8002abe <HAL_PCD_EP_DB_Transmit+0x736>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d114      	bne.n	8002abe <HAL_PCD_EP_DB_Transmit+0x736>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aa2:	4413      	add	r3, r2
 8002aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	011a      	lsls	r2, r3, #4
 8002aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aae:	4413      	add	r3, r2
 8002ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ab4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6959      	ldr	r1, [r3, #20]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	895a      	ldrh	r2, [r3, #10]
 8002aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f003 fdd8 	bl	8006682 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aec:	823b      	strh	r3, [r7, #16]
 8002aee:	8a3b      	ldrh	r3, [r7, #16]
 8002af0:	f083 0310 	eor.w	r3, r3, #16
 8002af4:	823b      	strh	r3, [r7, #16]
 8002af6:	8a3b      	ldrh	r3, [r7, #16]
 8002af8:	f083 0320 	eor.w	r3, r3, #32
 8002afc:	823b      	strh	r3, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	8a3b      	ldrh	r3, [r7, #16]
 8002b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3788      	adds	r7, #136	; 0x88
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	817b      	strh	r3, [r7, #10]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e009      	b.n	8002b76 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b62:	897a      	ldrh	r2, [r7, #10]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	80da      	strh	r2, [r3, #6]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e31d      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc2:	4b94      	ldr	r3, [pc, #592]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bcc:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d07b      	beq.n	8002cda <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d006      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x5e>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d10b      	bne.n	8002c0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf6:	4b87      	ldr	r3, [pc, #540]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d06a      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x128>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d166      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e2f7      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x74>
 8002c16:	4b7f      	ldr	r3, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7e      	ldr	r2, [pc, #504]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e02d      	b.n	8002c80 <HAL_RCC_OscConfig+0xd0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x96>
 8002c2c:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a75      	ldr	r2, [pc, #468]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e01c      	b.n	8002c80 <HAL_RCC_OscConfig+0xd0>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xb8>
 8002c4e:	4b71      	ldr	r3, [pc, #452]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a70      	ldr	r2, [pc, #448]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6e      	ldr	r3, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6d      	ldr	r2, [pc, #436]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xd0>
 8002c68:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a69      	ldr	r2, [pc, #420]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a66      	ldr	r2, [pc, #408]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fd ff38 	bl	8000afc <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fd ff34 	bl	8000afc <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2ad      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ca2:	4b5c      	ldr	r3, [pc, #368]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fd ff24 	bl	8000afc <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fd ff20 	bl	8000afc <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e299      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cca:	4b52      	ldr	r3, [pc, #328]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x108>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d05a      	beq.n	8002d9c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d119      	bne.n	8002d26 <HAL_RCC_OscConfig+0x176>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d116      	bne.n	8002d26 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x160>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e276      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	493d      	ldr	r1, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d24:	e03a      	b.n	8002d9c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d020      	beq.n	8002d70 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCC_OscConfig+0x268>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fd fee2 	bl	8000afc <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fd fede 	bl	8000afc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e257      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	492a      	ldr	r1, [pc, #168]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
 8002d6e:	e015      	b.n	8002d9c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d70:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <HAL_RCC_OscConfig+0x268>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fd fec1 	bl	8000afc <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fd febd 	bl	8000afc <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e236      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d90:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80b8 	beq.w	8002f1a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d170      	bne.n	8002e92 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002db0:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x218>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e21a      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1a      	ldr	r2, [r3, #32]
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d921      	bls.n	8002e1c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fc67 	bl	80036b0 <RCC_SetFlashLatencyFromMSIRange>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e208      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4906      	ldr	r1, [pc, #24]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	4901      	ldr	r1, [pc, #4]	; (8002e14 <HAL_RCC_OscConfig+0x264>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
 8002e12:	e020      	b.n	8002e56 <HAL_RCC_OscConfig+0x2a6>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1c:	4b99      	ldr	r3, [pc, #612]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4996      	ldr	r1, [pc, #600]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2e:	4b95      	ldr	r3, [pc, #596]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	4991      	ldr	r1, [pc, #580]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fc32 	bl	80036b0 <RCC_SetFlashLatencyFromMSIRange>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1d3      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	0b5b      	lsrs	r3, r3, #13
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e66:	4a87      	ldr	r2, [pc, #540]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	0912      	lsrs	r2, r2, #4
 8002e6c:	f002 020f 	and.w	r2, r2, #15
 8002e70:	4985      	ldr	r1, [pc, #532]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002e72:	5c8a      	ldrb	r2, [r1, r2]
 8002e74:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e76:	4a85      	ldr	r2, [pc, #532]	; (800308c <HAL_RCC_OscConfig+0x4dc>)
 8002e78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e7a:	4b85      	ldr	r3, [pc, #532]	; (8003090 <HAL_RCC_OscConfig+0x4e0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fdf0 	bl	8000a64 <HAL_InitTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d045      	beq.n	8002f1a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	e1b5      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d029      	beq.n	8002eee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e9a:	4b7e      	ldr	r3, [pc, #504]	; (8003094 <HAL_RCC_OscConfig+0x4e4>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fd fe2c 	bl	8000afc <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea8:	f7fd fe28 	bl	8000afc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1a1      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eba:	4b72      	ldr	r3, [pc, #456]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	496c      	ldr	r1, [pc, #432]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	4967      	ldr	r1, [pc, #412]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eee:	4b69      	ldr	r3, [pc, #420]	; (8003094 <HAL_RCC_OscConfig+0x4e4>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fd fe02 	bl	8000afc <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002efc:	f7fd fdfe 	bl	8000afc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e177      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f0e:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d030      	beq.n	8002f88 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d016      	beq.n	8002f5c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2e:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <HAL_RCC_OscConfig+0x4e8>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f34:	f7fd fde2 	bl	8000afc <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fd fdde 	bl	8000afc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e157      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f4e:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x38c>
 8002f5a:	e015      	b.n	8002f88 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5c:	4b4e      	ldr	r3, [pc, #312]	; (8003098 <HAL_RCC_OscConfig+0x4e8>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fd fdcb 	bl	8000afc <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fd fdc7 	bl	8000afc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e140      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f7c:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80b5 	beq.w	8003100 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	4a36      	ldr	r2, [pc, #216]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6253      	str	r3, [r2, #36]	; 0x24
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCC_OscConfig+0x4ec>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_RCC_OscConfig+0x4ec>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a32      	ldr	r2, [pc, #200]	; (800309c <HAL_RCC_OscConfig+0x4ec>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fd fd8f 	bl	8000afc <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fd fd8b 	bl	8000afc <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	; 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e104      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_RCC_OscConfig+0x4ec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x466>
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6353      	str	r3, [r2, #52]	; 0x34
 8003014:	e02d      	b.n	8003072 <HAL_RCC_OscConfig+0x4c2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x488>
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	4a18      	ldr	r2, [pc, #96]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8003024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003028:	6353      	str	r3, [r2, #52]	; 0x34
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	4a15      	ldr	r2, [pc, #84]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8003030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003034:	6353      	str	r3, [r2, #52]	; 0x34
 8003036:	e01c      	b.n	8003072 <HAL_RCC_OscConfig+0x4c2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b05      	cmp	r3, #5
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x4aa>
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8003046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304a:	6353      	str	r3, [r2, #52]	; 0x34
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6353      	str	r3, [r2, #52]	; 0x34
 8003058:	e00b      	b.n	8003072 <HAL_RCC_OscConfig+0x4c2>
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8003060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003064:	6353      	str	r3, [r2, #52]	; 0x34
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 800306c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003070:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d024      	beq.n	80030c4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fd fd3f 	bl	8000afc <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003080:	e019      	b.n	80030b6 <HAL_RCC_OscConfig+0x506>
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	08009490 	.word	0x08009490
 800308c:	20000000 	.word	0x20000000
 8003090:	20000004 	.word	0x20000004
 8003094:	42470020 	.word	0x42470020
 8003098:	42470680 	.word	0x42470680
 800309c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fd fd2c 	bl	8000afc <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0a3      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030b6:	4b54      	ldr	r3, [pc, #336]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ee      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4f0>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fd fd1a 	bl	8000afc <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fd fd16 	bl	8000afc <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e08d      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030e2:	4b49      	ldr	r3, [pc, #292]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ee      	bne.n	80030cc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ee:	7ffb      	ldrb	r3, [r7, #31]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	4a43      	ldr	r2, [pc, #268]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	2b00      	cmp	r3, #0
 8003106:	d079      	beq.n	80031fc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d056      	beq.n	80031bc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b02      	cmp	r3, #2
 8003114:	d13b      	bne.n	800318e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <HAL_RCC_OscConfig+0x65c>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fd fcee 	bl	8000afc <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003124:	f7fd fcea 	bl	8000afc <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e063      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	4319      	orrs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	430b      	orrs	r3, r1
 800315a:	492b      	ldr	r1, [pc, #172]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <HAL_RCC_OscConfig+0x65c>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fd fcc9 	bl	8000afc <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316e:	f7fd fcc5 	bl	8000afc <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e03e      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x5be>
 800318c:	e036      	b.n	80031fc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_RCC_OscConfig+0x65c>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fd fcb2 	bl	8000afc <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319c:	f7fd fcae 	bl	8000afc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e027      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x5ec>
 80031ba:	e01f      	b.n	80031fc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e01a      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031c8:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <HAL_RCC_OscConfig+0x658>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	429a      	cmp	r2, r3
 80031da:	d10d      	bne.n	80031f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d106      	bne.n	80031f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	42470060 	.word	0x42470060

08003210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e11a      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d919      	bls.n	8003266 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_ClockConfig+0x34>
 8003238:	4b8a      	ldr	r3, [pc, #552]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a89      	ldr	r2, [pc, #548]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b87      	ldr	r3, [pc, #540]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 0201 	bic.w	r2, r3, #1
 800324c:	4985      	ldr	r1, [pc, #532]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003254:	4b83      	ldr	r3, [pc, #524]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0f9      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003272:	4b7d      	ldr	r3, [pc, #500]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	497a      	ldr	r1, [pc, #488]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 808e 	beq.w	80033ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800329a:	4b73      	ldr	r3, [pc, #460]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d121      	bne.n	80032ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0d7      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b2:	4b6d      	ldr	r3, [pc, #436]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0cb      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032ca:	4b67      	ldr	r3, [pc, #412]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0bf      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032da:	4b63      	ldr	r3, [pc, #396]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0b7      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	495c      	ldr	r1, [pc, #368]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fd fbfe 	bl	8000afc <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d112      	bne.n	8003330 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f7fd fbf6 	bl	8000afc <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e09b      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003322:	4b51      	ldr	r3, [pc, #324]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d1ee      	bne.n	800330c <HAL_RCC_ClockConfig+0xfc>
 800332e:	e03e      	b.n	80033ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d112      	bne.n	800335e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333a:	f7fd fbdf 	bl	8000afc <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e084      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003350:	4b45      	ldr	r3, [pc, #276]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d1ee      	bne.n	800333a <HAL_RCC_ClockConfig+0x12a>
 800335c:	e027      	b.n	80033ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d11d      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003366:	e00a      	b.n	800337e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003368:	f7fd fbc8 	bl	8000afc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e06d      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800337e:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_ClockConfig+0x158>
 800338a:	e010      	b.n	80033ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fd fbb6 	bl	8000afc <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e05b      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ee      	bne.n	800338c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ae:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d219      	bcs.n	80033f0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_RCC_ClockConfig+0x1be>
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a27      	ldr	r2, [pc, #156]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	4923      	ldr	r1, [pc, #140]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_RCC_ClockConfig+0x254>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e034      	b.n	800345a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4917      	ldr	r1, [pc, #92]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	490f      	ldr	r1, [pc, #60]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800342e:	f000 f823 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_RCC_ClockConfig+0x258>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	490b      	ldr	r1, [pc, #44]	; (800346c <HAL_RCC_ClockConfig+0x25c>)
 8003440:	5ccb      	ldrb	r3, [r1, r3]
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x260>)
 8003448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_RCC_ClockConfig+0x264>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fb08 	bl	8000a64 <HAL_InitTick>
 8003454:	4603      	mov	r3, r0
 8003456:	72fb      	strb	r3, [r7, #11]

  return status;
 8003458:	7afb      	ldrb	r3, [r7, #11]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023c00 	.word	0x40023c00
 8003468:	40023800 	.word	0x40023800
 800346c:	08009490 	.word	0x08009490
 8003470:	20000000 	.word	0x20000000
 8003474:	20000004 	.word	0x20000004

08003478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800347c:	b092      	sub	sp, #72	; 0x48
 800347e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003480:	4b79      	ldr	r3, [pc, #484]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d00d      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x34>
 8003490:	2b0c      	cmp	r3, #12
 8003492:	f200 80d5 	bhi.w	8003640 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003496:	2b04      	cmp	r3, #4
 8003498:	d002      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28>
 800349a:	2b08      	cmp	r3, #8
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x2e>
 800349e:	e0cf      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b72      	ldr	r3, [pc, #456]	; (800366c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034a2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034a4:	e0da      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034a6:	4b71      	ldr	r3, [pc, #452]	; (800366c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034a8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034aa:	e0d7      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ae:	0c9b      	lsrs	r3, r3, #18
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	4b6e      	ldr	r3, [pc, #440]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034bc:	0d9b      	lsrs	r3, r3, #22
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	3301      	adds	r3, #1
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c6:	4b68      	ldr	r3, [pc, #416]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d05d      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d4:	2200      	movs	r2, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	4611      	mov	r1, r2
 80034da:	4604      	mov	r4, r0
 80034dc:	460d      	mov	r5, r1
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	6139      	str	r1, [r7, #16]
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003510:	4659      	mov	r1, fp
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4651      	mov	r1, sl
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4651      	mov	r1, sl
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	46d4      	mov	ip, sl
 8003520:	ebb2 080c 	subs.w	r8, r2, ip
 8003524:	4659      	mov	r1, fp
 8003526:	eb63 0901 	sbc.w	r9, r3, r1
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800353a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353e:	4690      	mov	r8, r2
 8003540:	4699      	mov	r9, r3
 8003542:	4623      	mov	r3, r4
 8003544:	eb18 0303 	adds.w	r3, r8, r3
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	462b      	mov	r3, r5
 800354c:	eb49 0303 	adc.w	r3, r9, r3
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4620      	mov	r0, r4
 8003564:	4629      	mov	r1, r5
 8003566:	4604      	mov	r4, r0
 8003568:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800356c:	4601      	mov	r1, r0
 800356e:	028a      	lsls	r2, r1, #10
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	2200      	movs	r2, #0
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
 800357a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800357c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003580:	f7fc fe04 	bl	800018c <__aeabi_uldivmod>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4613      	mov	r3, r2
 800358a:	647b      	str	r3, [r7, #68]	; 0x44
 800358c:	e055      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	2200      	movs	r2, #0
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	627a      	str	r2, [r7, #36]	; 0x24
 8003596:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800359a:	4642      	mov	r2, r8
 800359c:	464b      	mov	r3, r9
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	0159      	lsls	r1, r3, #5
 80035a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ac:	0150      	lsls	r0, r2, #5
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	46c4      	mov	ip, r8
 80035b4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80035b8:	4640      	mov	r0, r8
 80035ba:	4649      	mov	r1, r9
 80035bc:	468c      	mov	ip, r1
 80035be:	eb63 0b0c 	sbc.w	fp, r3, ip
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035ce:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035d6:	ebb2 040a 	subs.w	r4, r2, sl
 80035da:	eb63 050b 	sbc.w	r5, r3, fp
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	00eb      	lsls	r3, r5, #3
 80035e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ec:	00e2      	lsls	r2, r4, #3
 80035ee:	4614      	mov	r4, r2
 80035f0:	461d      	mov	r5, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	18e3      	adds	r3, r4, r3
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	460b      	mov	r3, r1
 80035fa:	eb45 0303 	adc.w	r3, r5, r3
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360c:	4629      	mov	r1, r5
 800360e:	028b      	lsls	r3, r1, #10
 8003610:	4620      	mov	r0, r4
 8003612:	4629      	mov	r1, r5
 8003614:	4604      	mov	r4, r0
 8003616:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800361a:	4601      	mov	r1, r0
 800361c:	028a      	lsls	r2, r1, #10
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	2200      	movs	r2, #0
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	61fa      	str	r2, [r7, #28]
 800362a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362e:	f7fc fdad 	bl	800018c <__aeabi_uldivmod>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4613      	mov	r3, r2
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800363a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800363c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800363e:	e00d      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0b5b      	lsrs	r3, r3, #13
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	3301      	adds	r3, #1
 8003650:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800365a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800365e:	4618      	mov	r0, r3
 8003660:	3748      	adds	r7, #72	; 0x48
 8003662:	46bd      	mov	sp, r7
 8003664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	00f42400 	.word	0x00f42400
 8003670:	08009484 	.word	0x08009484

08003674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b02      	ldr	r3, [pc, #8]	; (8003684 <HAL_RCC_GetHCLKFreq+0x10>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800368c:	f7ff fff2 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	080094a0 	.word	0x080094a0

080036b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036bc:	4b29      	ldr	r3, [pc, #164]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d12c      	bne.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e016      	b.n	800370e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b20      	ldr	r3, [pc, #128]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6253      	str	r3, [r2, #36]	; 0x24
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003700:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b18      	ldr	r3, [pc, #96]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	4a17      	ldr	r2, [pc, #92]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003714:	d105      	bne.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800371c:	d101      	bne.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800371e:	2301      	movs	r3, #1
 8003720:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0f      	ldr	r2, [pc, #60]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 0201 	bic.w	r2, r3, #1
 800373c:	490b      	ldr	r1, [pc, #44]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	40007000 	.word	0x40007000
 800376c:	40023c00 	.word	0x40023c00

08003770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06e      	b.n	8003860 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d108      	bne.n	800379c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003792:	d009      	beq.n	80037a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	61da      	str	r2, [r3, #28]
 800379a:	e005      	b.n	80037a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd f85e 	bl	8000884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	ea42 0103 	orr.w	r1, r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	0c1a      	lsrs	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f002 0204 	and.w	r2, r2, #4
 800384e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_SPI_Transmit+0x22>
 8003886:	2302      	movs	r3, #2
 8003888:	e126      	b.n	8003ad8 <HAL_SPI_Transmit+0x270>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003892:	f7fd f933 	bl	8000afc <HAL_GetTick>
 8003896:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ac:	e10b      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_SPI_Transmit+0x52>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038be:	e102      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003906:	d10f      	bne.n	8003928 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003916:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003926:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d007      	beq.n	8003946 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d14b      	bne.n	80039e8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_SPI_Transmit+0xf6>
 8003958:	8afb      	ldrh	r3, [r7, #22]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d13e      	bne.n	80039dc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	881a      	ldrh	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003982:	e02b      	b.n	80039dc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d112      	bne.n	80039b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039b6:	e011      	b.n	80039dc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b8:	f7fd f8a0 	bl	8000afc <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d803      	bhi.n	80039d0 <HAL_SPI_Transmit+0x168>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d102      	bne.n	80039d6 <HAL_SPI_Transmit+0x16e>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039da:	e074      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ce      	bne.n	8003984 <HAL_SPI_Transmit+0x11c>
 80039e6:	e04c      	b.n	8003a82 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_SPI_Transmit+0x18e>
 80039f0:	8afb      	ldrh	r3, [r7, #22]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d140      	bne.n	8003a78 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a1c:	e02c      	b.n	8003a78 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d113      	bne.n	8003a54 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a52:	e011      	b.n	8003a78 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a54:	f7fd f852 	bl	8000afc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d803      	bhi.n	8003a6c <HAL_SPI_Transmit+0x204>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d102      	bne.n	8003a72 <HAL_SPI_Transmit+0x20a>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a76:	e026      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1cd      	bne.n	8003a1e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8b2 	bl	8003bf0 <SPI_EndRxTxTransaction>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e000      	b.n	8003ac6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ac4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003af0:	f7fd f804 	bl	8000afc <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b00:	f7fc fffc 	bl	8000afc <HAL_GetTick>
 8003b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b06:	4b39      	ldr	r3, [pc, #228]	; (8003bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	015b      	lsls	r3, r3, #5
 8003b0c:	0d1b      	lsrs	r3, r3, #20
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b16:	e054      	b.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d050      	beq.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b20:	f7fc ffec 	bl	8000afc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d902      	bls.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d13d      	bne.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4e:	d111      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d004      	beq.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b62:	d107      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d10f      	bne.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e017      	b.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d19b      	bne.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000000 	.word	0x20000000

08003bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <SPI_EndRxTxTransaction+0x7c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <SPI_EndRxTxTransaction+0x80>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0d5b      	lsrs	r3, r3, #21
 8003c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d112      	bne.n	8003c42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff ff5a 	bl	8003ae0 <SPI_WaitFlagStateUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f043 0220 	orr.w	r2, r3, #32
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e00f      	b.n	8003c62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d0f2      	beq.n	8003c42 <SPI_EndRxTxTransaction+0x52>
 8003c5c:	e000      	b.n	8003c60 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c5e:	bf00      	nop
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	165e9f81 	.word	0x165e9f81

08003c74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ca8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	f107 0014 	add.w	r0, r7, #20
 8003ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	b004      	add	sp, #16
 8003d12:	4770      	bx	lr

08003d14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b09b      	sub	sp, #108	; 0x6c
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	78db      	ldrb	r3, [r3, #3]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d81f      	bhi.n	8003d86 <USB_ActivateEndpoint+0x72>
 8003d46:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <USB_ActivateEndpoint+0x38>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d8f 	.word	0x08003d8f
 8003d58:	08003d6b 	.word	0x08003d6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d68:	e012      	b.n	8003d90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d6e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d76:	e00b      	b.n	8003d90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d80:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d84:	e004      	b.n	8003d90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003d8c:	e000      	b.n	8003d90 <USB_ActivateEndpoint+0x7c>
      break;
 8003d8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	441a      	add	r2, r3
 8003d9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	441a      	add	r2, r3
 8003de0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	7b1b      	ldrb	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 8149 	bne.w	8004094 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	785b      	ldrb	r3, [r3, #1]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8084 	beq.w	8003f14 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	011a      	lsls	r2, r3, #4
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	88db      	ldrh	r3, [r3, #6]
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	81fb      	strh	r3, [r7, #14]
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <USB_ActivateEndpoint+0x17c>
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	81bb      	strh	r3, [r7, #12]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	89bb      	ldrh	r3, [r7, #12]
 8003e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	78db      	ldrb	r3, [r3, #3]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d020      	beq.n	8003eda <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eae:	813b      	strh	r3, [r7, #8]
 8003eb0:	893b      	ldrh	r3, [r7, #8]
 8003eb2:	f083 0320 	eor.w	r3, r3, #32
 8003eb6:	813b      	strh	r3, [r7, #8]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	893b      	ldrh	r3, [r7, #8]
 8003ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	8013      	strh	r3, [r2, #0]
 8003ed8:	e27f      	b.n	80043da <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	817b      	strh	r3, [r7, #10]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	897b      	ldrh	r3, [r7, #10]
 8003efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]
 8003f12:	e262      	b.n	80043da <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	4413      	add	r3, r2
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	011a      	lsls	r2, r3, #4
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	88db      	ldrh	r3, [r3, #6]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	4413      	add	r3, r2
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	011a      	lsls	r2, r3, #4
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	4413      	add	r3, r2
 8003f66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d112      	bne.n	8003f9a <USB_ActivateEndpoint+0x286>
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	e02f      	b.n	8003ffa <USB_ActivateEndpoint+0x2e6>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa0:	d813      	bhi.n	8003fca <USB_ActivateEndpoint+0x2b6>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <USB_ActivateEndpoint+0x2a8>
 8003fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb8:	3301      	adds	r3, #1
 8003fba:	663b      	str	r3, [r7, #96]	; 0x60
 8003fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	029b      	lsls	r3, r3, #10
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	801a      	strh	r2, [r3, #0]
 8003fc8:	e017      	b.n	8003ffa <USB_ActivateEndpoint+0x2e6>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <USB_ActivateEndpoint+0x2d0>
 8003fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	663b      	str	r3, [r7, #96]	; 0x60
 8003fe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	83fb      	strh	r3, [r7, #30]
 8004008:	8bfb      	ldrh	r3, [r7, #30]
 800400a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01b      	beq.n	800404a <USB_ActivateEndpoint+0x336>
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004028:	83bb      	strh	r3, [r7, #28]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	441a      	add	r2, r3
 8004034:	8bbb      	ldrh	r3, [r7, #28]
 8004036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004046:	b29b      	uxth	r3, r3
 8004048:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	837b      	strh	r3, [r7, #26]
 8004062:	8b7b      	ldrh	r3, [r7, #26]
 8004064:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004068:	837b      	strh	r3, [r7, #26]
 800406a:	8b7b      	ldrh	r3, [r7, #26]
 800406c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004070:	837b      	strh	r3, [r7, #26]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	441a      	add	r2, r3
 800407c:	8b7b      	ldrh	r3, [r7, #26]
 800407e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408e:	b29b      	uxth	r3, r3
 8004090:	8013      	strh	r3, [r2, #0]
 8004092:	e1a2      	b.n	80043da <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e0:	4413      	add	r3, r2
 80040e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	011a      	lsls	r2, r3, #4
 80040ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f2:	657b      	str	r3, [r7, #84]	; 0x54
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	891b      	ldrh	r3, [r3, #8]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004102:	801a      	strh	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	653b      	str	r3, [r7, #80]	; 0x50
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004114:	4413      	add	r3, r2
 8004116:	653b      	str	r3, [r7, #80]	; 0x50
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004120:	4413      	add	r3, r2
 8004122:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	895b      	ldrh	r3, [r3, #10]
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	b29b      	uxth	r3, r3
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004136:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f040 8091 	bne.w	8004264 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004150:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01b      	beq.n	8004192 <USB_ActivateEndpoint+0x47e>
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004170:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	441a      	add	r2, r3
 800417c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800417e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800418a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418e:	b29b      	uxth	r3, r3
 8004190:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	873b      	strh	r3, [r7, #56]	; 0x38
 80041a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01b      	beq.n	80041e2 <USB_ActivateEndpoint+0x4ce>
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004200:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004202:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004204:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004208:	86bb      	strh	r3, [r7, #52]	; 0x34
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	441a      	add	r2, r3
 8004214:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004226:	b29b      	uxth	r3, r3
 8004228:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004240:	867b      	strh	r3, [r7, #50]	; 0x32
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800424e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425e:	b29b      	uxth	r3, r3
 8004260:	8013      	strh	r3, [r2, #0]
 8004262:	e0ba      	b.n	80043da <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004274:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01d      	beq.n	80042bc <USB_ActivateEndpoint+0x5a8>
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01d      	beq.n	8004314 <USB_ActivateEndpoint+0x600>
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	78db      	ldrb	r3, [r3, #3]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d024      	beq.n	8004366 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004332:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004336:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800433a:	f083 0320 	eor.w	r3, r3, #32
 800433e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]
 8004364:	e01d      	b.n	80043a2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800438e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439e:	b29b      	uxth	r3, r3
 80043a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80043da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043de:	4618      	mov	r0, r3
 80043e0:	376c      	adds	r7, #108	; 0x6c
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b08d      	sub	sp, #52	; 0x34
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	7b1b      	ldrb	r3, [r3, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 808e 	bne.w	8004518 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d044      	beq.n	800448e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	81bb      	strh	r3, [r7, #12]
 8004412:	89bb      	ldrh	r3, [r7, #12]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01b      	beq.n	8004454 <USB_DeactivateEndpoint+0x6c>
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	817b      	strh	r3, [r7, #10]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	897b      	ldrh	r3, [r7, #10]
 8004440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004450:	b29b      	uxth	r3, r3
 8004452:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446a:	813b      	strh	r3, [r7, #8]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	893b      	ldrh	r3, [r7, #8]
 8004478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004488:	b29b      	uxth	r3, r3
 800448a:	8013      	strh	r3, [r2, #0]
 800448c:	e192      	b.n	80047b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	827b      	strh	r3, [r7, #18]
 800449c:	8a7b      	ldrh	r3, [r7, #18]
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01b      	beq.n	80044de <USB_DeactivateEndpoint+0xf6>
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	823b      	strh	r3, [r7, #16]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	441a      	add	r2, r3
 80044c8:	8a3b      	ldrh	r3, [r7, #16]
 80044ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044da:	b29b      	uxth	r3, r3
 80044dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f4:	81fb      	strh	r3, [r7, #14]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800450e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004512:	b29b      	uxth	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]
 8004516:	e14d      	b.n	80047b4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 80a5 	bne.w	800466c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	843b      	strh	r3, [r7, #32]
 8004530:	8c3b      	ldrh	r3, [r7, #32]
 8004532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01b      	beq.n	8004572 <USB_DeactivateEndpoint+0x18a>
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	83fb      	strh	r3, [r7, #30]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	8bfb      	ldrh	r3, [r7, #30]
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800456a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	83bb      	strh	r3, [r7, #28]
 8004580:	8bbb      	ldrh	r3, [r7, #28]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01b      	beq.n	80045c2 <USB_DeactivateEndpoint+0x1da>
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	837b      	strh	r3, [r7, #26]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	441a      	add	r2, r3
 80045ac:	8b7b      	ldrh	r3, [r7, #26]
 80045ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d8:	833b      	strh	r3, [r7, #24]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	441a      	add	r2, r3
 80045e4:	8b3b      	ldrh	r3, [r7, #24]
 80045e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800460c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004610:	82fb      	strh	r3, [r7, #22]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004648:	82bb      	strh	r3, [r7, #20]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	441a      	add	r2, r3
 8004654:	8abb      	ldrh	r3, [r7, #20]
 8004656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]
 800466a:	e0a3      	b.n	80047b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800467a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800467c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <USB_DeactivateEndpoint+0x2d4>
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <USB_DeactivateEndpoint+0x324>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	441a      	add	r2, r3
 800472e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800473c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004740:	b29b      	uxth	r3, r3
 8004742:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	847b      	strh	r3, [r7, #34]	; 0x22
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3734      	adds	r7, #52	; 0x34
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b0cc      	sub	sp, #304	; 0x130
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ce:	6018      	str	r0, [r3, #0]
 80047d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	f041 817d 	bne.w	8005ae6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80047ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	429a      	cmp	r2, r3
 8004806:	d908      	bls.n	800481a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004818:	e007      	b.n	800482a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800481a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800482a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800482e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	7b1b      	ldrb	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d152      	bne.n	80048e0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800483a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6959      	ldr	r1, [r3, #20]
 8004846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	88da      	ldrh	r2, [r3, #6]
 8004852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004856:	b29b      	uxth	r3, r3
 8004858:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800485c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004860:	6800      	ldr	r0, [r0, #0]
 8004862:	f001 ff0e 	bl	8006682 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800486e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004872:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004888:	b29b      	uxth	r3, r3
 800488a:	4619      	mov	r1, r3
 800488c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004890:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004894:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004898:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	440a      	add	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	011a      	lsls	r2, r3, #4
 80048b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4413      	add	r3, r2
 80048bc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	f001 b8b5 	b.w	8005a4a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	78db      	ldrb	r3, [r3, #3]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	f040 84c6 	bne.w	800527e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80048f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	429a      	cmp	r2, r3
 800490c:	f240 8443 	bls.w	8005196 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800493a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800493e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004960:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800496c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800497c:	1ad2      	subs	r2, r2, r3
 800497e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800498a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 823e 	beq.w	8004e2e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	785b      	ldrb	r3, [r3, #1]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 809a 	bne.w	8004b0c <USB_EPStartXfer+0x34c>
 80049d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049e4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	4619      	mov	r1, r3
 80049fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a0a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	440a      	add	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	011a      	lsls	r2, r3, #4
 8004a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d122      	bne.n	8004a8a <USB_EPStartXfer+0x2ca>
 8004a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	801a      	strh	r2, [r3, #0]
 8004a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	e079      	b.n	8004b7e <USB_EPStartXfer+0x3be>
 8004a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a90:	d81b      	bhi.n	8004aca <USB_EPStartXfer+0x30a>
 8004a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <USB_EPStartXfer+0x2f2>
 8004aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aac:	3301      	adds	r3, #1
 8004aae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	029b      	lsls	r3, r3, #10
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	e059      	b.n	8004b7e <USB_EPStartXfer+0x3be>
 8004aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <USB_EPStartXfer+0x32a>
 8004ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	029b      	lsls	r3, r3, #10
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	e038      	b.n	8004b7e <USB_EPStartXfer+0x3be>
 8004b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d130      	bne.n	8004b7e <USB_EPStartXfer+0x3be>
 8004b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b3a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	440a      	add	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	011a      	lsls	r2, r3, #4
 8004b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b56:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	895b      	ldrh	r3, [r3, #10]
 8004b8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6959      	ldr	r1, [r3, #20]
 8004b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ba4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ba8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f001 fd68 	bl	8006682 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695a      	ldr	r2, [r3, #20]
 8004bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc2:	441a      	add	r2, r3
 8004bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d90f      	bls.n	8004c0c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a1a      	ldr	r2, [r3, #32]
 8004bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bfc:	1ad2      	subs	r2, r2, r3
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	621a      	str	r2, [r3, #32]
 8004c0a:	e00e      	b.n	8004c2a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f040 809a 	bne.w	8004d70 <USB_EPStartXfer+0x5b0>
 8004c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c48:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4619      	mov	r1, r3
 8004c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c6e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	440a      	add	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	011a      	lsls	r2, r3, #4
 8004c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4413      	add	r3, r2
 8004c92:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d122      	bne.n	8004cee <USB_EPStartXfer+0x52e>
 8004ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	801a      	strh	r2, [r3, #0]
 8004cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ccc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e083      	b.n	8004df6 <USB_EPStartXfer+0x636>
 8004cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf2:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf4:	d81b      	bhi.n	8004d2e <USB_EPStartXfer+0x56e>
 8004cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <USB_EPStartXfer+0x556>
 8004d0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d10:	3301      	adds	r3, #1
 8004d12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	029b      	lsls	r3, r3, #10
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	e063      	b.n	8004df6 <USB_EPStartXfer+0x636>
 8004d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <USB_EPStartXfer+0x58e>
 8004d44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d4e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	029b      	lsls	r3, r3, #10
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	e042      	b.n	8004df6 <USB_EPStartXfer+0x636>
 8004d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d13a      	bne.n	8004df6 <USB_EPStartXfer+0x636>
 8004d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d8c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	4619      	mov	r1, r3
 8004da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004daa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004db2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	440a      	add	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	011a      	lsls	r2, r3, #4
 8004dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	891b      	ldrh	r3, [r3, #8]
 8004e02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6959      	ldr	r1, [r3, #20]
 8004e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e24:	6800      	ldr	r0, [r0, #0]
 8004e26:	f001 fc2c 	bl	8006682 <USB_WritePMA>
 8004e2a:	f000 be0e 	b.w	8005a4a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d16d      	bne.n	8004f1a <USB_EPStartXfer+0x75a>
 8004e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	4413      	add	r3, r2
 8004e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	011a      	lsls	r2, r3, #4
 8004e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e72:	4413      	add	r3, r2
 8004e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e78:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d112      	bne.n	8004ea8 <USB_EPStartXfer+0x6e8>
 8004e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	e063      	b.n	8004f70 <USB_EPStartXfer+0x7b0>
 8004ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eac:	2b3e      	cmp	r3, #62	; 0x3e
 8004eae:	d817      	bhi.n	8004ee0 <USB_EPStartXfer+0x720>
 8004eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <USB_EPStartXfer+0x710>
 8004ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ed0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	029b      	lsls	r3, r3, #10
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e047      	b.n	8004f70 <USB_EPStartXfer+0x7b0>
 8004ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d104      	bne.n	8004f00 <USB_EPStartXfer+0x740>
 8004ef6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004efa:	3b01      	subs	r3, #1
 8004efc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	029b      	lsls	r3, r3, #10
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	e02a      	b.n	8004f70 <USB_EPStartXfer+0x7b0>
 8004f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d122      	bne.n	8004f70 <USB_EPStartXfer+0x7b0>
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	653b      	str	r3, [r7, #80]	; 0x50
 8004f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4a:	4413      	add	r3, r2
 8004f4c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	011a      	lsls	r2, r3, #4
 8004f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5e:	4413      	add	r3, r2
 8004f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	891b      	ldrh	r3, [r3, #8]
 8004f7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6959      	ldr	r1, [r3, #20]
 8004f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f96:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f9a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f9e:	6800      	ldr	r0, [r0, #0]
 8004fa0:	f001 fb6f 	bl	8006682 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb4:	441a      	add	r2, r3
 8004fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d90f      	bls.n	8004ffe <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	621a      	str	r2, [r3, #32]
 8004ffc:	e00e      	b.n	800501c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800500e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2200      	movs	r2, #0
 800501a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800501c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	643b      	str	r3, [r7, #64]	; 0x40
 8005028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d16d      	bne.n	8005114 <USB_EPStartXfer+0x954>
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38
 8005044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005048:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005052:	b29b      	uxth	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	4413      	add	r3, r2
 800505a:	63bb      	str	r3, [r7, #56]	; 0x38
 800505c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	011a      	lsls	r2, r3, #4
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	4413      	add	r3, r2
 800506e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
 8005074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d112      	bne.n	80050a2 <USB_EPStartXfer+0x8e2>
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005086:	b29a      	uxth	r2, r3
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509a:	b29a      	uxth	r2, r3
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	801a      	strh	r2, [r3, #0]
 80050a0:	e05d      	b.n	800515e <USB_EPStartXfer+0x99e>
 80050a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a6:	2b3e      	cmp	r3, #62	; 0x3e
 80050a8:	d817      	bhi.n	80050da <USB_EPStartXfer+0x91a>
 80050aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <USB_EPStartXfer+0x90a>
 80050c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050c4:	3301      	adds	r3, #1
 80050c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	029b      	lsls	r3, r3, #10
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	e041      	b.n	800515e <USB_EPStartXfer+0x99e>
 80050da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <USB_EPStartXfer+0x93a>
 80050f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050f4:	3b01      	subs	r3, #1
 80050f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050fe:	b29b      	uxth	r3, r3
 8005100:	029b      	lsls	r3, r3, #10
 8005102:	b29b      	uxth	r3, r3
 8005104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510c:	b29a      	uxth	r2, r3
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	e024      	b.n	800515e <USB_EPStartXfer+0x99e>
 8005114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d11c      	bne.n	800515e <USB_EPStartXfer+0x99e>
 8005124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005132:	b29b      	uxth	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005138:	4413      	add	r3, r2
 800513a:	643b      	str	r3, [r7, #64]	; 0x40
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	011a      	lsls	r2, r3, #4
 800514a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514c:	4413      	add	r3, r2
 800514e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005158:	b29a      	uxth	r2, r3
 800515a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800515e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	895b      	ldrh	r3, [r3, #10]
 800516a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6959      	ldr	r1, [r3, #20]
 800517a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800517e:	b29b      	uxth	r3, r3
 8005180:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005184:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005188:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800518c:	6800      	ldr	r0, [r0, #0]
 800518e:	f001 fa78 	bl	8006682 <USB_WritePMA>
 8005192:	f000 bc5a 	b.w	8005a4a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80051d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80051ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fe:	b29b      	uxth	r3, r3
 8005200:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005212:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800521c:	b29b      	uxth	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005222:	4413      	add	r3, r2
 8005224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	011a      	lsls	r2, r3, #4
 8005234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005236:	4413      	add	r3, r2
 8005238:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800523c:	65bb      	str	r3, [r7, #88]	; 0x58
 800523e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005242:	b29a      	uxth	r2, r3
 8005244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005246:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	891b      	ldrh	r3, [r3, #8]
 8005254:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6959      	ldr	r1, [r3, #20]
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	b29b      	uxth	r3, r3
 800526a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800526e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005272:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005276:	6800      	ldr	r0, [r0, #0]
 8005278:	f001 fa03 	bl	8006682 <USB_WritePMA>
 800527c:	e3e5      	b.n	8005a4a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80052a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	441a      	add	r2, r3
 80052c2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80052c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 81bc 	beq.w	8005698 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005324:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800532e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d16d      	bne.n	800541a <USB_EPStartXfer+0xc5a>
 800533e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	67bb      	str	r3, [r7, #120]	; 0x78
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800535e:	4413      	add	r3, r2
 8005360:	67bb      	str	r3, [r7, #120]	; 0x78
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	011a      	lsls	r2, r3, #4
 8005370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005372:	4413      	add	r3, r2
 8005374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005378:	677b      	str	r3, [r7, #116]	; 0x74
 800537a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d112      	bne.n	80053a8 <USB_EPStartXfer+0xbe8>
 8005382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800538c:	b29a      	uxth	r2, r3
 800538e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	e060      	b.n	800546a <USB_EPStartXfer+0xcaa>
 80053a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ac:	2b3e      	cmp	r3, #62	; 0x3e
 80053ae:	d817      	bhi.n	80053e0 <USB_EPStartXfer+0xc20>
 80053b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <USB_EPStartXfer+0xc10>
 80053c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053ca:	3301      	adds	r3, #1
 80053cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	029b      	lsls	r3, r3, #10
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	e044      	b.n	800546a <USB_EPStartXfer+0xcaa>
 80053e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <USB_EPStartXfer+0xc40>
 80053f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053fa:	3b01      	subs	r3, #1
 80053fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005400:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005404:	b29b      	uxth	r3, r3
 8005406:	029b      	lsls	r3, r3, #10
 8005408:	b29b      	uxth	r3, r3
 800540a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800540e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005412:	b29a      	uxth	r2, r3
 8005414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005416:	801a      	strh	r2, [r3, #0]
 8005418:	e027      	b.n	800546a <USB_EPStartXfer+0xcaa>
 800541a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d11f      	bne.n	800546a <USB_EPStartXfer+0xcaa>
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005440:	4413      	add	r3, r2
 8005442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	011a      	lsls	r2, r3, #4
 8005454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005458:	4413      	add	r3, r2
 800545a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800545e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005464:	b29a      	uxth	r2, r3
 8005466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005468:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800546a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	895b      	ldrh	r3, [r3, #10]
 8005476:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800547a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6959      	ldr	r1, [r3, #20]
 8005486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548a:	b29b      	uxth	r3, r3
 800548c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005490:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005494:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005498:	6800      	ldr	r0, [r0, #0]
 800549a:	f001 f8f2 	bl	8006682 <USB_WritePMA>
          ep->xfer_buff += len;
 800549e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ae:	441a      	add	r2, r3
 80054b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d90f      	bls.n	80054f8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80054d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e8:	1ad2      	subs	r2, r2, r3
 80054ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	621a      	str	r2, [r3, #32]
 80054f6:	e00e      	b.n	8005516 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80054f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8295 	beq.w	8005a4a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d16d      	bne.n	800560c <USB_EPStartXfer+0xe4c>
 8005530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	66bb      	str	r3, [r7, #104]	; 0x68
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005550:	4413      	add	r3, r2
 8005552:	66bb      	str	r3, [r7, #104]	; 0x68
 8005554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	011a      	lsls	r2, r3, #4
 8005562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005564:	4413      	add	r3, r2
 8005566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800556a:	667b      	str	r3, [r7, #100]	; 0x64
 800556c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d112      	bne.n	800559a <USB_EPStartXfer+0xdda>
 8005574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800557e:	b29a      	uxth	r2, r3
 8005580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005592:	b29a      	uxth	r2, r3
 8005594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	e063      	b.n	8005662 <USB_EPStartXfer+0xea2>
 800559a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559e:	2b3e      	cmp	r3, #62	; 0x3e
 80055a0:	d817      	bhi.n	80055d2 <USB_EPStartXfer+0xe12>
 80055a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <USB_EPStartXfer+0xe02>
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	3301      	adds	r3, #1
 80055be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	029b      	lsls	r3, r3, #10
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ce:	801a      	strh	r2, [r3, #0]
 80055d0:	e047      	b.n	8005662 <USB_EPStartXfer+0xea2>
 80055d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <USB_EPStartXfer+0xe32>
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ec:	3b01      	subs	r3, #1
 80055ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	029b      	lsls	r3, r3, #10
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005604:	b29a      	uxth	r2, r3
 8005606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	e02a      	b.n	8005662 <USB_EPStartXfer+0xea2>
 800560c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d122      	bne.n	8005662 <USB_EPStartXfer+0xea2>
 800561c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	673b      	str	r3, [r7, #112]	; 0x70
 8005628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005636:	b29b      	uxth	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800563c:	4413      	add	r3, r2
 800563e:	673b      	str	r3, [r7, #112]	; 0x70
 8005640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	011a      	lsls	r2, r3, #4
 800564e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005650:	4413      	add	r3, r2
 8005652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005656:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800565c:	b29a      	uxth	r2, r3
 800565e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005660:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	891b      	ldrh	r3, [r3, #8]
 800566e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6959      	ldr	r1, [r3, #20]
 800567e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005682:	b29b      	uxth	r3, r3
 8005684:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005688:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800568c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005690:	6800      	ldr	r0, [r0, #0]
 8005692:	f000 fff6 	bl	8006682 <USB_WritePMA>
 8005696:	e1d8      	b.n	8005a4a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d178      	bne.n	800579a <USB_EPStartXfer+0xfda>
 80056a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056cc:	4413      	add	r3, r2
 80056ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	011a      	lsls	r2, r3, #4
 80056e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e4:	4413      	add	r3, r2
 80056e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <USB_EPStartXfer+0xf64>
 80056f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005702:	b29a      	uxth	r2, r3
 8005704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571a:	b29a      	uxth	r2, r3
 800571c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	e06b      	b.n	80057fc <USB_EPStartXfer+0x103c>
 8005724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005728:	2b3e      	cmp	r3, #62	; 0x3e
 800572a:	d818      	bhi.n	800575e <USB_EPStartXfer+0xf9e>
 800572c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <USB_EPStartXfer+0xf8c>
 8005742:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005746:	3301      	adds	r3, #1
 8005748:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800574c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005750:	b29b      	uxth	r3, r3
 8005752:	029b      	lsls	r3, r3, #10
 8005754:	b29a      	uxth	r2, r3
 8005756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	e04e      	b.n	80057fc <USB_EPStartXfer+0x103c>
 800575e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <USB_EPStartXfer+0xfbe>
 8005774:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005778:	3b01      	subs	r3, #1
 800577a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800577e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005782:	b29b      	uxth	r3, r3
 8005784:	029b      	lsls	r3, r3, #10
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005790:	b29a      	uxth	r2, r3
 8005792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e030      	b.n	80057fc <USB_EPStartXfer+0x103c>
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	785b      	ldrb	r3, [r3, #1]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d128      	bne.n	80057fc <USB_EPStartXfer+0x103c>
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057ce:	4413      	add	r3, r2
 80057d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	011a      	lsls	r2, r3, #4
 80057e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057e6:	4413      	add	r3, r2
 80057e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	891b      	ldrh	r3, [r3, #8]
 8005808:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800580c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6959      	ldr	r1, [r3, #20]
 8005818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581c:	b29b      	uxth	r3, r3
 800581e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005822:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005826:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	f000 ff29 	bl	8006682 <USB_WritePMA>
          ep->xfer_buff += len;
 8005830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005840:	441a      	add	r2, r3
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800584e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6a1a      	ldr	r2, [r3, #32]
 800585a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	429a      	cmp	r2, r3
 8005868:	d90f      	bls.n	800588a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	621a      	str	r2, [r3, #32]
 8005888:	e00e      	b.n	80058a8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2200      	movs	r2, #0
 80058a6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80058a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80cc 	beq.w	8005a4a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d178      	bne.n	80059c2 <USB_EPStartXfer+0x1202>
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058f4:	4413      	add	r3, r2
 80058f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	011a      	lsls	r2, r3, #4
 8005908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800590c:	4413      	add	r3, r2
 800590e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d116      	bne.n	800594c <USB_EPStartXfer+0x118c>
 800591e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800592a:	b29a      	uxth	r2, r3
 800592c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005942:	b29a      	uxth	r2, r3
 8005944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e064      	b.n	8005a16 <USB_EPStartXfer+0x1256>
 800594c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005950:	2b3e      	cmp	r3, #62	; 0x3e
 8005952:	d818      	bhi.n	8005986 <USB_EPStartXfer+0x11c6>
 8005954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800595e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <USB_EPStartXfer+0x11b4>
 800596a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596e:	3301      	adds	r3, #1
 8005970:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005978:	b29b      	uxth	r3, r3
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	b29a      	uxth	r2, r3
 800597e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e047      	b.n	8005a16 <USB_EPStartXfer+0x1256>
 8005986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <USB_EPStartXfer+0x11e6>
 800599c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a0:	3b01      	subs	r3, #1
 80059a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	029b      	lsls	r3, r3, #10
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e029      	b.n	8005a16 <USB_EPStartXfer+0x1256>
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d121      	bne.n	8005a16 <USB_EPStartXfer+0x1256>
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059e8:	4413      	add	r3, r2
 80059ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	011a      	lsls	r2, r3, #4
 80059fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a00:	4413      	add	r3, r2
 8005a02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	895b      	ldrh	r3, [r3, #10]
 8005a22:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6959      	ldr	r1, [r3, #20]
 8005a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a3c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a40:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a44:	6800      	ldr	r0, [r0, #0]
 8005a46:	f000 fe1c 	bl	8006682 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a6c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a78:	8013      	strh	r3, [r2, #0]
 8005a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005a82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a86:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a8a:	8812      	ldrh	r2, [r2, #0]
 8005a8c:	f082 0210 	eor.w	r2, r2, #16
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a96:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005a9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a9e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005aa2:	8812      	ldrh	r2, [r2, #0]
 8005aa4:	f082 0220 	eor.w	r2, r2, #32
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8013      	strh	r3, [r2, #0]
 8005ae2:	f000 bc9f 	b.w	8006424 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	7b1b      	ldrb	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f040 80ae 	bne.w	8005c54 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699a      	ldr	r2, [r3, #24]
 8005b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d917      	bls.n	8005b44 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b34:	1ad2      	subs	r2, r2, r3
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	619a      	str	r2, [r3, #24]
 8005b42:	e00e      	b.n	8005b62 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b86:	4413      	add	r3, r2
 8005b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	011a      	lsls	r2, r3, #4
 8005b9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d116      	bne.n	8005bde <USB_EPStartXfer+0x141e>
 8005bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	e3e8      	b.n	80063b0 <USB_EPStartXfer+0x1bf0>
 8005bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be2:	2b3e      	cmp	r3, #62	; 0x3e
 8005be4:	d818      	bhi.n	8005c18 <USB_EPStartXfer+0x1458>
 8005be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <USB_EPStartXfer+0x1446>
 8005bfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c00:	3301      	adds	r3, #1
 8005c02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	029b      	lsls	r3, r3, #10
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e3cb      	b.n	80063b0 <USB_EPStartXfer+0x1bf0>
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <USB_EPStartXfer+0x1478>
 8005c2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c32:	3b01      	subs	r3, #1
 8005c34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	e3ad      	b.n	80063b0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	78db      	ldrb	r3, [r3, #3]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f040 8200 	bne.w	8006066 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	785b      	ldrb	r3, [r3, #1]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f040 8091 	bne.w	8005d9a <USB_EPStartXfer+0x15da>
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	011a      	lsls	r2, r3, #4
 8005cb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d116      	bne.n	8005cfc <USB_EPStartXfer+0x153c>
 8005cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e083      	b.n	8005e04 <USB_EPStartXfer+0x1644>
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b3e      	cmp	r3, #62	; 0x3e
 8005d0a:	d820      	bhi.n	8005d4e <USB_EPStartXfer+0x158e>
 8005d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	085b      	lsrs	r3, r3, #1
 8005d1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <USB_EPStartXfer+0x157c>
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d36:	3301      	adds	r3, #1
 8005d38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	029b      	lsls	r3, r3, #10
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e05a      	b.n	8005e04 <USB_EPStartXfer+0x1644>
 8005d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <USB_EPStartXfer+0x15be>
 8005d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e034      	b.n	8005e04 <USB_EPStartXfer+0x1644>
 8005d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d12c      	bne.n	8005e04 <USB_EPStartXfer+0x1644>
 8005daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dce:	4413      	add	r3, r2
 8005dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	011a      	lsls	r2, r3, #4
 8005de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 8091 	bne.w	8005f46 <USB_EPStartXfer+0x1786>
 8005e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e48:	4413      	add	r3, r2
 8005e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	011a      	lsls	r2, r3, #4
 8005e5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d116      	bne.n	8005ea8 <USB_EPStartXfer+0x16e8>
 8005e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	e07c      	b.n	8005fa2 <USB_EPStartXfer+0x17e2>
 8005ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b3e      	cmp	r3, #62	; 0x3e
 8005eb6:	d820      	bhi.n	8005efa <USB_EPStartXfer+0x173a>
 8005eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d004      	beq.n	8005ee8 <USB_EPStartXfer+0x1728>
 8005ede:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ee8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	029b      	lsls	r3, r3, #10
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	e053      	b.n	8005fa2 <USB_EPStartXfer+0x17e2>
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <USB_EPStartXfer+0x176a>
 8005f20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f24:	3b01      	subs	r3, #1
 8005f26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	029b      	lsls	r3, r3, #10
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e02d      	b.n	8005fa2 <USB_EPStartXfer+0x17e2>
 8005f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d125      	bne.n	8005fa2 <USB_EPStartXfer+0x17e2>
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	011a      	lsls	r2, r3, #4
 8005f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f84:	4413      	add	r3, r2
 8005f86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fa0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 81fe 	beq.w	80063b0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fd4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <USB_EPStartXfer+0x182c>
 8005fe0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10d      	bne.n	8006008 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 81db 	bne.w	80063b0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ffa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 81d4 	bne.w	80063b0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	441a      	add	r2, r3
 800604c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]
 8006064:	e1a4      	b.n	80063b0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	78db      	ldrb	r3, [r3, #3]
 8006072:	2b01      	cmp	r3, #1
 8006074:	f040 819a 	bne.w	80063ac <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	429a      	cmp	r2, r3
 8006092:	d917      	bls.n	80060c4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b4:	1ad2      	subs	r2, r2, r3
 80060b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	619a      	str	r2, [r3, #24]
 80060c2:	e00e      	b.n	80060e2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80060c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2200      	movs	r2, #0
 80060e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d178      	bne.n	80061e4 <USB_EPStartXfer+0x1a24>
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006104:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610e:	b29b      	uxth	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006116:	4413      	add	r3, r2
 8006118:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	011a      	lsls	r2, r3, #4
 800612a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800612e:	4413      	add	r3, r2
 8006130:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006134:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d116      	bne.n	800616e <USB_EPStartXfer+0x19ae>
 8006140:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800614c:	b29a      	uxth	r2, r3
 800614e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006164:	b29a      	uxth	r2, r3
 8006166:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	e06b      	b.n	8006246 <USB_EPStartXfer+0x1a86>
 800616e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006172:	2b3e      	cmp	r3, #62	; 0x3e
 8006174:	d818      	bhi.n	80061a8 <USB_EPStartXfer+0x19e8>
 8006176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <USB_EPStartXfer+0x19d6>
 800618c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006190:	3301      	adds	r3, #1
 8006192:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619a:	b29b      	uxth	r3, r3
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	b29a      	uxth	r2, r3
 80061a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e04e      	b.n	8006246 <USB_EPStartXfer+0x1a86>
 80061a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <USB_EPStartXfer+0x1a08>
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	3b01      	subs	r3, #1
 80061c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	029b      	lsls	r3, r3, #10
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e030      	b.n	8006246 <USB_EPStartXfer+0x1a86>
 80061e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d128      	bne.n	8006246 <USB_EPStartXfer+0x1a86>
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006210:	b29b      	uxth	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	4413      	add	r3, r2
 800621a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800621e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	011a      	lsls	r2, r3, #4
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	4413      	add	r3, r2
 8006232:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006236:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800623a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623e:	b29a      	uxth	r2, r3
 8006240:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d178      	bne.n	8006356 <USB_EPStartXfer+0x1b96>
 8006264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006280:	b29b      	uxth	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006288:	4413      	add	r3, r2
 800628a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800628e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	011a      	lsls	r2, r3, #4
 800629c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a0:	4413      	add	r3, r2
 80062a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d116      	bne.n	80062e0 <USB_EPStartXfer+0x1b20>
 80062b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e067      	b.n	80063b0 <USB_EPStartXfer+0x1bf0>
 80062e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e4:	2b3e      	cmp	r3, #62	; 0x3e
 80062e6:	d818      	bhi.n	800631a <USB_EPStartXfer+0x1b5a>
 80062e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <USB_EPStartXfer+0x1b48>
 80062fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006302:	3301      	adds	r3, #1
 8006304:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800630c:	b29b      	uxth	r3, r3
 800630e:	029b      	lsls	r3, r3, #10
 8006310:	b29a      	uxth	r2, r3
 8006312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	e04a      	b.n	80063b0 <USB_EPStartXfer+0x1bf0>
 800631a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <USB_EPStartXfer+0x1b7a>
 8006330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006334:	3b01      	subs	r3, #1
 8006336:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800633a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800633e:	b29b      	uxth	r3, r3
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	e02c      	b.n	80063b0 <USB_EPStartXfer+0x1bf0>
 8006356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d124      	bne.n	80063b0 <USB_EPStartXfer+0x1bf0>
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006374:	b29b      	uxth	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637c:	4413      	add	r3, r2
 800637e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	011a      	lsls	r2, r3, #4
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006394:	4413      	add	r3, r2
 8006396:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800639a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800639e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e001      	b.n	80063b0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e03a      	b.n	8006426 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063da:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063e6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006420:	b29b      	uxth	r3, r3
 8006422:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d020      	beq.n	8006484 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006458:	81bb      	strh	r3, [r7, #12]
 800645a:	89bb      	ldrh	r3, [r7, #12]
 800645c:	f083 0310 	eor.w	r3, r3, #16
 8006460:	81bb      	strh	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	89bb      	ldrh	r3, [r7, #12]
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]
 8006482:	e01f      	b.n	80064c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	81fb      	strh	r3, [r7, #14]
 800649c:	89fb      	ldrh	r3, [r7, #14]
 800649e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064a2:	81fb      	strh	r3, [r7, #14]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	89fb      	ldrh	r3, [r7, #14]
 80064b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	7b1b      	ldrb	r3, [r3, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f040 809d 	bne.w	800661e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	785b      	ldrb	r3, [r3, #1]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d04c      	beq.n	8006586 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	823b      	strh	r3, [r7, #16]
 80064fa:	8a3b      	ldrh	r3, [r7, #16]
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01b      	beq.n	800653c <USB_EPClearStall+0x6c>
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	81fb      	strh	r3, [r7, #14]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	89fb      	ldrh	r3, [r7, #14]
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	78db      	ldrb	r3, [r3, #3]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d06c      	beq.n	800661e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655a:	81bb      	strh	r3, [r7, #12]
 800655c:	89bb      	ldrh	r3, [r7, #12]
 800655e:	f083 0320 	eor.w	r3, r3, #32
 8006562:	81bb      	strh	r3, [r7, #12]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	89bb      	ldrh	r3, [r7, #12]
 8006570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006580:	b29b      	uxth	r3, r3
 8006582:	8013      	strh	r3, [r2, #0]
 8006584:	e04b      	b.n	800661e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	82fb      	strh	r3, [r7, #22]
 8006594:	8afb      	ldrh	r3, [r7, #22]
 8006596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01b      	beq.n	80065d6 <USB_EPClearStall+0x106>
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b4:	82bb      	strh	r3, [r7, #20]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	8abb      	ldrh	r3, [r7, #20]
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	827b      	strh	r3, [r7, #18]
 80065ee:	8a7b      	ldrh	r3, [r7, #18]
 80065f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065f4:	827b      	strh	r3, [r7, #18]
 80065f6:	8a7b      	ldrh	r3, [r7, #18]
 80065f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065fc:	827b      	strh	r3, [r7, #18]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	441a      	add	r2, r3
 8006608:	8a7b      	ldrh	r3, [r7, #18]
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2280      	movs	r2, #128	; 0x80
 8006640:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr

08006650 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr

08006664 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006672:	b29b      	uxth	r3, r3
 8006674:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006676:	68fb      	ldr	r3, [r7, #12]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr

08006682 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006682:	b480      	push	{r7}
 8006684:	b08d      	sub	sp, #52	; 0x34
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	4611      	mov	r1, r2
 800668e:	461a      	mov	r2, r3
 8006690:	460b      	mov	r3, r1
 8006692:	80fb      	strh	r3, [r7, #6]
 8006694:	4613      	mov	r3, r2
 8006696:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006698:	88bb      	ldrh	r3, [r7, #4]
 800669a:	3301      	adds	r3, #1
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	005a      	lsls	r2, r3, #1
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ba:	e01e      	b.n	80066fa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	3301      	adds	r3, #1
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	b29a      	uxth	r2, r3
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	3302      	adds	r3, #2
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	3302      	adds	r3, #2
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	3301      	adds	r3, #1
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	3b01      	subs	r3, #1
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1dd      	bne.n	80066bc <USB_WritePMA+0x3a>
  }
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	3734      	adds	r7, #52	; 0x34
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800670c:	b480      	push	{r7}
 800670e:	b08b      	sub	sp, #44	; 0x2c
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	4611      	mov	r1, r2
 8006718:	461a      	mov	r2, r3
 800671a:	460b      	mov	r3, r1
 800671c:	80fb      	strh	r3, [r7, #6]
 800671e:	4613      	mov	r3, r2
 8006720:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006722:	88bb      	ldrh	r3, [r7, #4]
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	b29b      	uxth	r3, r3
 8006728:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	005a      	lsls	r2, r3, #1
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
 8006744:	e01b      	b.n	800677e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	3302      	adds	r3, #2
 8006752:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	0a1b      	lsrs	r3, r3, #8
 8006766:	b2da      	uxtb	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	3301      	adds	r3, #1
 8006770:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	3302      	adds	r3, #2
 8006776:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	3b01      	subs	r3, #1
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e0      	bne.n	8006746 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006784:	88bb      	ldrh	r3, [r7, #4]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	701a      	strb	r2, [r3, #0]
  }
}
 80067a0:	bf00      	nop
 80067a2:	372c      	adds	r7, #44	; 0x2c
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	7c1b      	ldrb	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d115      	bne.n	80067ee <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c6:	2202      	movs	r2, #2
 80067c8:	2181      	movs	r1, #129	; 0x81
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f002 f801 	bl	80087d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067da:	2202      	movs	r2, #2
 80067dc:	2101      	movs	r1, #1
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fff7 	bl	80087d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80067ec:	e012      	b.n	8006814 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067ee:	2340      	movs	r3, #64	; 0x40
 80067f0:	2202      	movs	r2, #2
 80067f2:	2181      	movs	r1, #129	; 0x81
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 ffec 	bl	80087d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006800:	2340      	movs	r3, #64	; 0x40
 8006802:	2202      	movs	r2, #2
 8006804:	2101      	movs	r1, #1
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 ffe3 	bl	80087d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006814:	2308      	movs	r3, #8
 8006816:	2203      	movs	r2, #3
 8006818:	2182      	movs	r1, #130	; 0x82
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 ffd9 	bl	80087d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006826:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800682a:	f002 f8f9 	bl	8008a20 <USBD_static_malloc>
 800682e:	4602      	mov	r2, r0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
 8006844:	e026      	b.n	8006894 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800684c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7c1b      	ldrb	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d109      	bne.n	8006884 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687a:	2101      	movs	r1, #1
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f002 f899 	bl	80089b4 <USBD_LL_PrepareReceive>
 8006882:	e007      	b.n	8006894 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800688a:	2340      	movs	r3, #64	; 0x40
 800688c:	2101      	movs	r1, #1
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f002 f890 	bl	80089b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068ae:	2181      	movs	r1, #129	; 0x81
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 ffb4 	bl	800881e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068bc:	2101      	movs	r1, #1
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 ffad 	bl	800881e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068cc:	2182      	movs	r1, #130	; 0x82
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 ffa5 	bl	800881e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068f4:	4618      	mov	r0, r3
 80068f6:	f002 f89f 	bl	8008a38 <USBD_static_free>
    pdev->pClassData = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800691c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006932:	2b00      	cmp	r3, #0
 8006934:	d039      	beq.n	80069aa <USBD_CDC_Setup+0x9e>
 8006936:	2b20      	cmp	r3, #32
 8006938:	d17f      	bne.n	8006a3a <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	88db      	ldrh	r3, [r3, #6]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d029      	beq.n	8006996 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b25b      	sxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	da11      	bge.n	8006970 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006958:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	88d2      	ldrh	r2, [r2, #6]
 800695e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006960:	6939      	ldr	r1, [r7, #16]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	461a      	mov	r2, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 f994 	bl	8007c96 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800696e:	e06b      	b.n	8006a48 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785a      	ldrb	r2, [r3, #1]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	88db      	ldrh	r3, [r3, #6]
 800697e:	b2da      	uxtb	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006986:	6939      	ldr	r1, [r7, #16]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	88db      	ldrh	r3, [r3, #6]
 800698c:	461a      	mov	r2, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 f9af 	bl	8007cf2 <USBD_CtlPrepareRx>
    break;
 8006994:	e058      	b.n	8006a48 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	7850      	ldrb	r0, [r2, #1]
 80069a2:	2200      	movs	r2, #0
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	4798      	blx	r3
    break;
 80069a8:	e04e      	b.n	8006a48 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b0b      	cmp	r3, #11
 80069b0:	d02e      	beq.n	8006a10 <USBD_CDC_Setup+0x104>
 80069b2:	2b0b      	cmp	r3, #11
 80069b4:	dc38      	bgt.n	8006a28 <USBD_CDC_Setup+0x11c>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <USBD_CDC_Setup+0xb4>
 80069ba:	2b0a      	cmp	r3, #10
 80069bc:	d014      	beq.n	80069e8 <USBD_CDC_Setup+0xdc>
 80069be:	e033      	b.n	8006a28 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d107      	bne.n	80069da <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80069ca:	f107 030c 	add.w	r3, r7, #12
 80069ce:	2202      	movs	r2, #2
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 f95f 	bl	8007c96 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80069d8:	e02e      	b.n	8006a38 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 f8f0 	bl	8007bc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80069e2:	2302      	movs	r3, #2
 80069e4:	75fb      	strb	r3, [r7, #23]
      break;
 80069e6:	e027      	b.n	8006a38 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d107      	bne.n	8006a02 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80069f2:	f107 030f 	add.w	r3, r7, #15
 80069f6:	2201      	movs	r2, #1
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 f94b 	bl	8007c96 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006a00:	e01a      	b.n	8006a38 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 f8dc 	bl	8007bc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0e:	e013      	b.n	8006a38 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d00d      	beq.n	8006a36 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f8d0 	bl	8007bc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a22:	2302      	movs	r3, #2
 8006a24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a26:	e006      	b.n	8006a36 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 f8c9 	bl	8007bc2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a30:	2302      	movs	r3, #2
 8006a32:	75fb      	strb	r3, [r7, #23]
      break;
 8006a34:	e000      	b.n	8006a38 <USBD_CDC_Setup+0x12c>
      break;
 8006a36:	bf00      	nop
    }
    break;
 8006a38:	e006      	b.n	8006a48 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 f8c0 	bl	8007bc2 <USBD_CtlError>
    ret = USBD_FAIL;
 8006a42:	2302      	movs	r3, #2
 8006a44:	75fb      	strb	r3, [r7, #23]
    break;
 8006a46:	bf00      	nop
  }

  return ret;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a64:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a6c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d03a      	beq.n	8006aee <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a78:	78fa      	ldrb	r2, [r7, #3]
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	331c      	adds	r3, #28
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d029      	beq.n	8006ae2 <USBD_CDC_DataIn+0x90>
 8006a8e:	78fa      	ldrb	r2, [r7, #3]
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	331c      	adds	r3, #28
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	78f9      	ldrb	r1, [r7, #3]
 8006aa2:	68b8      	ldr	r0, [r7, #8]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	4403      	add	r3, r0
 8006aae:	3338      	adds	r3, #56	; 0x38
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d110      	bne.n	8006ae2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	331c      	adds	r3, #28
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006ad4:	78f9      	ldrb	r1, [r7, #3]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2200      	movs	r2, #0
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 ff47 	bl	800896e <USBD_LL_Transmit>
 8006ae0:	e003      	b.n	8006aea <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e000      	b.n	8006af0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006aee:	2302      	movs	r3, #2
  }
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 ff72 	bl	80089fa <USBD_LL_GetRxDataSize>
 8006b16:	4602      	mov	r2, r0
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	4798      	blx	r3

    return USBD_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e000      	b.n	8006b46 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b44:	2302      	movs	r3, #2
  }
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b5c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d015      	beq.n	8006b94 <USBD_CDC_EP0_RxReady+0x46>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b6e:	2bff      	cmp	r3, #255	; 0xff
 8006b70:	d010      	beq.n	8006b94 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b88:	b292      	uxth	r2, r2
 8006b8a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	22ff      	movs	r2, #255	; 0xff
 8006b90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2243      	movs	r2, #67	; 0x43
 8006bac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006bae:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	20000094 	.word	0x20000094

08006bc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2243      	movs	r2, #67	; 0x43
 8006bcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006bce:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	20000050 	.word	0x20000050

08006be0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2243      	movs	r2, #67	; 0x43
 8006bec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006bee:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	200000d8 	.word	0x200000d8

08006c00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	220a      	movs	r2, #10
 8006c0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c0e:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	2000000c 	.word	0x2000000c

08006c20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr

08006c4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cb2:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01c      	beq.n	8006cf8 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d115      	bne.n	8006cf4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2181      	movs	r1, #129	; 0x81
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fe3f 	bl	800896e <USBD_LL_Transmit>

      return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e002      	b.n	8006cfa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d017      	beq.n	8006d4c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7c1b      	ldrb	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d109      	bne.n	8006d38 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fe3f 	bl	80089b4 <USBD_LL_PrepareReceive>
 8006d36:	e007      	b.n	8006d48 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	2101      	movs	r1, #1
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 fe36 	bl	80089b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e000      	b.n	8006d4e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d4c:	2302      	movs	r3, #2
  }
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	4613      	mov	r3, r2
 8006d62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e01a      	b.n	8006da4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	79fa      	ldrb	r2, [r7, #7]
 8006d9a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f001 fca3 	bl	80086e8 <USBD_LL_Init>

  return USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]
 8006dcc:	e001      	b.n	8006dd2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fcd8 	bl	800879c <USBD_LL_Start>

  return USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr

08006e0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006e16:	2302      	movs	r3, #2
 8006e18:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00c      	beq.n	8006e3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	78fa      	ldrb	r2, [r7, #3]
 8006e2e:	4611      	mov	r1, r2
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	78fa      	ldrb	r2, [r7, #3]
 8006e5e:	4611      	mov	r1, r2
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
  return USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fe62 	bl	8007b4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006e94:	461a      	mov	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d016      	beq.n	8006ed8 <USBD_LL_SetupStage+0x6a>
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d81c      	bhi.n	8006ee8 <USBD_LL_SetupStage+0x7a>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <USBD_LL_SetupStage+0x4a>
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d008      	beq.n	8006ec8 <USBD_LL_SetupStage+0x5a>
 8006eb6:	e017      	b.n	8006ee8 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9c5 	bl	8007250 <USBD_StdDevReq>
    break;
 8006ec6:	e01a      	b.n	8006efe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa27 	bl	8007324 <USBD_StdItfReq>
    break;
 8006ed6:	e012      	b.n	8006efe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fa67 	bl	80073b4 <USBD_StdEPReq>
    break;
 8006ee6:	e00a      	b.n	8006efe <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006eee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fcb0 	bl	800885c <USBD_LL_StallEP>
    break;
 8006efc:	bf00      	nop
  }

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	460b      	mov	r3, r1
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d14b      	bne.n	8006fb4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006f22:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d134      	bne.n	8006f98 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d919      	bls.n	8006f6e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	1ad2      	subs	r2, r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d203      	bcs.n	8006f5c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	e002      	b.n	8006f62 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fee1 	bl	8007d2e <USBD_CtlContinueRx>
 8006f6c:	e038      	b.n	8006fe0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d105      	bne.n	8006f90 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fede 	bl	8007d52 <USBD_CtlSendStatus>
 8006f96:	e023      	b.n	8006fe0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d11e      	bne.n	8006fe0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006faa:	2100      	movs	r1, #0
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f001 fc55 	bl	800885c <USBD_LL_StallEP>
 8006fb2:	e015      	b.n	8006fe0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00d      	beq.n	8006fdc <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d108      	bne.n	8006fdc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	7afa      	ldrb	r2, [r7, #11]
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	4798      	blx	r3
 8006fda:	e001      	b.n	8006fe0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e000      	b.n	8006fe2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b086      	sub	sp, #24
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d17f      	bne.n	80070fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3314      	adds	r3, #20
 8007002:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800700a:	2b02      	cmp	r3, #2
 800700c:	d15c      	bne.n	80070c8 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	429a      	cmp	r2, r3
 8007018:	d915      	bls.n	8007046 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	1ad2      	subs	r2, r2, r3
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	b29b      	uxth	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fe4b 	bl	8007cce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007038:	2300      	movs	r3, #0
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f001 fcb8 	bl	80089b4 <USBD_LL_PrepareReceive>
 8007044:	e04e      	b.n	80070e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	6912      	ldr	r2, [r2, #16]
 800704e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007052:	fb01 f202 	mul.w	r2, r1, r2
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d11c      	bne.n	8007096 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007064:	429a      	cmp	r2, r3
 8007066:	d316      	bcc.n	8007096 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007072:	429a      	cmp	r2, r3
 8007074:	d20f      	bcs.n	8007096 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007076:	2200      	movs	r2, #0
 8007078:	2100      	movs	r1, #0
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fe27 	bl	8007cce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007088:	2300      	movs	r3, #0
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f001 fc90 	bl	80089b4 <USBD_LL_PrepareReceive>
 8007094:	e026      	b.n	80070e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d105      	bne.n	80070b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80070b8:	2180      	movs	r1, #128	; 0x80
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f001 fbce 	bl	800885c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fe59 	bl	8007d78 <USBD_CtlReceiveStatus>
 80070c6:	e00d      	b.n	80070e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d004      	beq.n	80070dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d103      	bne.n	80070e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f001 fbbc 	bl	800885c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d11d      	bne.n	800712a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fe81 	bl	8006df6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80070fc:	e015      	b.n	800712a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00d      	beq.n	8007126 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007110:	2b03      	cmp	r3, #3
 8007112:	d108      	bne.n	8007126 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	7afa      	ldrb	r2, [r7, #11]
 800711e:	4611      	mov	r1, r2
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	4798      	blx	r3
 8007124:	e001      	b.n	800712a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007126:	2302      	movs	r3, #2
 8007128:	e000      	b.n	800712c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	2200      	movs	r2, #0
 8007140:	2100      	movs	r1, #0
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fb45 	bl	80087d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007158:	2340      	movs	r3, #64	; 0x40
 800715a:	2200      	movs	r2, #0
 800715c:	2180      	movs	r1, #128	; 0x80
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fb37 	bl	80087d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2240      	movs	r2, #64	; 0x40
 800716e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007194:	2b00      	cmp	r3, #0
 8007196:	d009      	beq.n	80071ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6852      	ldr	r2, [r2, #4]
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	4611      	mov	r1, r2
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
  }

  return USBD_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	78fa      	ldrb	r2, [r7, #3]
 80071c6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2204      	movs	r2, #4
 80071ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800722a:	2b03      	cmp	r3, #3
 800722c:	d10b      	bne.n	8007246 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007266:	2b40      	cmp	r3, #64	; 0x40
 8007268:	d005      	beq.n	8007276 <USBD_StdDevReq+0x26>
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d84f      	bhi.n	800730e <USBD_StdDevReq+0xbe>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <USBD_StdDevReq+0x36>
 8007272:	2b20      	cmp	r3, #32
 8007274:	d14b      	bne.n	800730e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
    break;
 8007284:	e048      	b.n	8007318 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b09      	cmp	r3, #9
 800728c:	d839      	bhi.n	8007302 <USBD_StdDevReq+0xb2>
 800728e:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <USBD_StdDevReq+0x44>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072e5 	.word	0x080072e5
 8007298:	080072f9 	.word	0x080072f9
 800729c:	08007303 	.word	0x08007303
 80072a0:	080072ef 	.word	0x080072ef
 80072a4:	08007303 	.word	0x08007303
 80072a8:	080072c7 	.word	0x080072c7
 80072ac:	080072bd 	.word	0x080072bd
 80072b0:	08007303 	.word	0x08007303
 80072b4:	080072db 	.word	0x080072db
 80072b8:	080072d1 	.word	0x080072d1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f9da 	bl	8007678 <USBD_GetDescriptor>
      break;
 80072c4:	e022      	b.n	800730c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 facf 	bl	800786c <USBD_SetAddress>
      break;
 80072ce:	e01d      	b.n	800730c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fb0e 	bl	80078f4 <USBD_SetConfig>
      break;
 80072d8:	e018      	b.n	800730c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fb97 	bl	8007a10 <USBD_GetConfig>
      break;
 80072e2:	e013      	b.n	800730c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fbc7 	bl	8007a7a <USBD_GetStatus>
      break;
 80072ec:	e00e      	b.n	800730c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fbf5 	bl	8007ae0 <USBD_SetFeature>
      break;
 80072f6:	e009      	b.n	800730c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fc04 	bl	8007b08 <USBD_ClrFeature>
      break;
 8007300:	e004      	b.n	800730c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fc5c 	bl	8007bc2 <USBD_CtlError>
      break;
 800730a:	bf00      	nop
    }
    break;
 800730c:	e004      	b.n	8007318 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc56 	bl	8007bc2 <USBD_CtlError>
    break;
 8007316:	bf00      	nop
  }

  return ret;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop

08007324 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d005      	beq.n	800734a <USBD_StdItfReq+0x26>
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d82e      	bhi.n	80073a0 <USBD_StdItfReq+0x7c>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <USBD_StdItfReq+0x26>
 8007346:	2b20      	cmp	r3, #32
 8007348:	d12a      	bne.n	80073a0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007350:	3b01      	subs	r3, #1
 8007352:	2b02      	cmp	r3, #2
 8007354:	d81d      	bhi.n	8007392 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	889b      	ldrh	r3, [r3, #4]
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d813      	bhi.n	8007388 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	88db      	ldrh	r3, [r3, #6]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d110      	bne.n	800739c <USBD_StdItfReq+0x78>
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10d      	bne.n	800739c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fce6 	bl	8007d52 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007386:	e009      	b.n	800739c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fc19 	bl	8007bc2 <USBD_CtlError>
      break;
 8007390:	e004      	b.n	800739c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc14 	bl	8007bc2 <USBD_CtlError>
      break;
 800739a:	e000      	b.n	800739e <USBD_StdItfReq+0x7a>
      break;
 800739c:	bf00      	nop
    }
    break;
 800739e:	e004      	b.n	80073aa <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fc0d 	bl	8007bc2 <USBD_CtlError>
    break;
 80073a8:	bf00      	nop
  }

  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	889b      	ldrh	r3, [r3, #4]
 80073c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073d0:	2b40      	cmp	r3, #64	; 0x40
 80073d2:	d007      	beq.n	80073e4 <USBD_StdEPReq+0x30>
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	f200 8144 	bhi.w	8007662 <USBD_StdEPReq+0x2ae>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <USBD_StdEPReq+0x40>
 80073de:	2b20      	cmp	r3, #32
 80073e0:	f040 813f 	bne.w	8007662 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	4798      	blx	r3
    break;
 80073f2:	e13b      	b.n	800766c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d10a      	bne.n	8007416 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
 800740e:	4603      	mov	r3, r0
 8007410:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	e12b      	b.n	800766e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	785b      	ldrb	r3, [r3, #1]
 800741a:	2b03      	cmp	r3, #3
 800741c:	d007      	beq.n	800742e <USBD_StdEPReq+0x7a>
 800741e:	2b03      	cmp	r3, #3
 8007420:	f300 8119 	bgt.w	8007656 <USBD_StdEPReq+0x2a2>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d072      	beq.n	800750e <USBD_StdEPReq+0x15a>
 8007428:	2b01      	cmp	r3, #1
 800742a:	d03a      	beq.n	80074a2 <USBD_StdEPReq+0xee>
 800742c:	e113      	b.n	8007656 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007434:	2b02      	cmp	r3, #2
 8007436:	d002      	beq.n	800743e <USBD_StdEPReq+0x8a>
 8007438:	2b03      	cmp	r3, #3
 800743a:	d015      	beq.n	8007468 <USBD_StdEPReq+0xb4>
 800743c:	e02b      	b.n	8007496 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <USBD_StdEPReq+0xaa>
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d009      	beq.n	800745e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fa04 	bl	800885c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007454:	2180      	movs	r1, #128	; 0x80
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 fa00 	bl	800885c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800745c:	e020      	b.n	80074a0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fbae 	bl	8007bc2 <USBD_CtlError>
        break;
 8007466:	e01b      	b.n	80074a0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	885b      	ldrh	r3, [r3, #2]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10e      	bne.n	800748e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <USBD_StdEPReq+0xda>
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	2b80      	cmp	r3, #128	; 0x80
 800747a:	d008      	beq.n	800748e <USBD_StdEPReq+0xda>
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	88db      	ldrh	r3, [r3, #6]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 f9e7 	bl	800885c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fc5f 	bl	8007d52 <USBD_CtlSendStatus>

        break;
 8007494:	e004      	b.n	80074a0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fb92 	bl	8007bc2 <USBD_CtlError>
        break;
 800749e:	bf00      	nop
      }
      break;
 80074a0:	e0de      	b.n	8007660 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d002      	beq.n	80074b2 <USBD_StdEPReq+0xfe>
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d015      	beq.n	80074dc <USBD_StdEPReq+0x128>
 80074b0:	e026      	b.n	8007500 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00c      	beq.n	80074d2 <USBD_StdEPReq+0x11e>
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	2b80      	cmp	r3, #128	; 0x80
 80074bc:	d009      	beq.n	80074d2 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f9ca 	bl	800885c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80074c8:	2180      	movs	r1, #128	; 0x80
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 f9c6 	bl	800885c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80074d0:	e01c      	b.n	800750c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb74 	bl	8007bc2 <USBD_CtlError>
        break;
 80074da:	e017      	b.n	800750c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	885b      	ldrh	r3, [r3, #2]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d112      	bne.n	800750a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d004      	beq.n	80074f8 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 f9d1 	bl	800889a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc2a 	bl	8007d52 <USBD_CtlSendStatus>
        }
        break;
 80074fe:	e004      	b.n	800750a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fb5d 	bl	8007bc2 <USBD_CtlError>
        break;
 8007508:	e000      	b.n	800750c <USBD_StdEPReq+0x158>
        break;
 800750a:	bf00      	nop
      }
      break;
 800750c:	e0a8      	b.n	8007660 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007514:	2b02      	cmp	r3, #2
 8007516:	d002      	beq.n	800751e <USBD_StdEPReq+0x16a>
 8007518:	2b03      	cmp	r3, #3
 800751a:	d031      	beq.n	8007580 <USBD_StdEPReq+0x1cc>
 800751c:	e095      	b.n	800764a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <USBD_StdEPReq+0x180>
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b80      	cmp	r3, #128	; 0x80
 8007528:	d004      	beq.n	8007534 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fb48 	bl	8007bc2 <USBD_CtlError>
          break;
 8007532:	e08f      	b.n	8007654 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007538:	2b00      	cmp	r3, #0
 800753a:	da0b      	bge.n	8007554 <USBD_StdEPReq+0x1a0>
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	3310      	adds	r3, #16
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	3304      	adds	r3, #4
 8007552:	e00a      	b.n	800756a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2202      	movs	r2, #2
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fb8c 	bl	8007c96 <USBD_CtlSendData>
          break;
 800757e:	e069      	b.n	8007654 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da11      	bge.n	80075ac <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	f003 020f 	and.w	r2, r3, #15
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	3318      	adds	r3, #24
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d117      	bne.n	80075d2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fb0c 	bl	8007bc2 <USBD_CtlError>
            break;
 80075aa:	e053      	b.n	8007654 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	f003 020f 	and.w	r2, r3, #15
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 faf9 	bl	8007bc2 <USBD_CtlError>
            break;
 80075d0:	e040      	b.n	8007654 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80075d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	da0b      	bge.n	80075f2 <USBD_StdEPReq+0x23e>
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	3310      	adds	r3, #16
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	3304      	adds	r3, #4
 80075f0:	e00a      	b.n	8007608 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4413      	add	r3, r2
 8007608:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <USBD_StdEPReq+0x262>
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	2b80      	cmp	r3, #128	; 0x80
 8007614:	d103      	bne.n	800761e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	e00e      	b.n	800763c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 f958 	bl	80088d8 <USBD_LL_IsStallEP>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2201      	movs	r2, #1
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	e002      	b.n	800763c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2202      	movs	r2, #2
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fb27 	bl	8007c96 <USBD_CtlSendData>
          break;
 8007648:	e004      	b.n	8007654 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fab8 	bl	8007bc2 <USBD_CtlError>
        break;
 8007652:	bf00      	nop
      }
      break;
 8007654:	e004      	b.n	8007660 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fab2 	bl	8007bc2 <USBD_CtlError>
      break;
 800765e:	bf00      	nop
    }
    break;
 8007660:	e004      	b.n	800766c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 faac 	bl	8007bc2 <USBD_CtlError>
    break;
 800766a:	bf00      	nop
  }

  return ret;
 800766c:	7bfb      	ldrb	r3, [r7, #15]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	885b      	ldrh	r3, [r3, #2]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	2b06      	cmp	r3, #6
 800768e:	f200 80c9 	bhi.w	8007824 <USBD_GetDescriptor+0x1ac>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <USBD_GetDescriptor+0x20>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076b5 	.word	0x080076b5
 800769c:	080076cd 	.word	0x080076cd
 80076a0:	0800770d 	.word	0x0800770d
 80076a4:	08007825 	.word	0x08007825
 80076a8:	08007825 	.word	0x08007825
 80076ac:	080077d1 	.word	0x080077d1
 80076b0:	080077f7 	.word	0x080077f7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7c12      	ldrb	r2, [r2, #16]
 80076c0:	f107 010a 	add.w	r1, r7, #10
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
    break;
 80076ca:	e0b0      	b.n	800782e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7c1b      	ldrb	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10d      	bne.n	80076f0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	f107 020a 	add.w	r2, r7, #10
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	2202      	movs	r2, #2
 80076ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80076ee:	e09e      	b.n	800782e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	f107 020a 	add.w	r2, r7, #10
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	2202      	movs	r2, #2
 8007708:	701a      	strb	r2, [r3, #0]
    break;
 800770a:	e090      	b.n	800782e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b05      	cmp	r3, #5
 8007714:	d856      	bhi.n	80077c4 <USBD_GetDescriptor+0x14c>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <USBD_GetDescriptor+0xa4>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007735 	.word	0x08007735
 8007720:	0800774d 	.word	0x0800774d
 8007724:	08007765 	.word	0x08007765
 8007728:	0800777d 	.word	0x0800777d
 800772c:	08007795 	.word	0x08007795
 8007730:	080077ad 	.word	0x080077ad
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 010a 	add.w	r1, r7, #10
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
      break;
 800774a:	e040      	b.n	80077ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	7c12      	ldrb	r2, [r2, #16]
 8007758:	f107 010a 	add.w	r1, r7, #10
 800775c:	4610      	mov	r0, r2
 800775e:	4798      	blx	r3
 8007760:	60f8      	str	r0, [r7, #12]
      break;
 8007762:	e034      	b.n	80077ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	7c12      	ldrb	r2, [r2, #16]
 8007770:	f107 010a 	add.w	r1, r7, #10
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
 8007778:	60f8      	str	r0, [r7, #12]
      break;
 800777a:	e028      	b.n	80077ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7c12      	ldrb	r2, [r2, #16]
 8007788:	f107 010a 	add.w	r1, r7, #10
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
      break;
 8007792:	e01c      	b.n	80077ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7c12      	ldrb	r2, [r2, #16]
 80077a0:	f107 010a 	add.w	r1, r7, #10
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	60f8      	str	r0, [r7, #12]
      break;
 80077aa:	e010      	b.n	80077ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7c12      	ldrb	r2, [r2, #16]
 80077b8:	f107 010a 	add.w	r1, r7, #10
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	60f8      	str	r0, [r7, #12]
      break;
 80077c2:	e004      	b.n	80077ce <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f9fb 	bl	8007bc2 <USBD_CtlError>
      return;
 80077cc:	e04b      	b.n	8007866 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80077ce:	e02e      	b.n	800782e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7c1b      	ldrb	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e0:	f107 020a 	add.w	r2, r7, #10
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
      break;
 80077ea:	e020      	b.n	800782e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9e7 	bl	8007bc2 <USBD_CtlError>
      return;
 80077f4:	e037      	b.n	8007866 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7c1b      	ldrb	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10d      	bne.n	800781a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	f107 020a 	add.w	r2, r7, #10
 800780a:	4610      	mov	r0, r2
 800780c:	4798      	blx	r3
 800780e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3301      	adds	r3, #1
 8007814:	2207      	movs	r2, #7
 8007816:	701a      	strb	r2, [r3, #0]
      break;
 8007818:	e009      	b.n	800782e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9d0 	bl	8007bc2 <USBD_CtlError>
      return;
 8007822:	e020      	b.n	8007866 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f9cb 	bl	8007bc2 <USBD_CtlError>
    return;
 800782c:	e01b      	b.n	8007866 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800782e:	897b      	ldrh	r3, [r7, #10]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d011      	beq.n	8007858 <USBD_GetDescriptor+0x1e0>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	88db      	ldrh	r3, [r3, #6]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00d      	beq.n	8007858 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	88da      	ldrh	r2, [r3, #6]
 8007840:	897b      	ldrh	r3, [r7, #10]
 8007842:	4293      	cmp	r3, r2
 8007844:	bf28      	it	cs
 8007846:	4613      	movcs	r3, r2
 8007848:	b29b      	uxth	r3, r3
 800784a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800784c:	897b      	ldrh	r3, [r7, #10]
 800784e:	461a      	mov	r2, r3
 8007850:	68f9      	ldr	r1, [r7, #12]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa1f 	bl	8007c96 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	88db      	ldrh	r3, [r3, #6]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa76 	bl	8007d52 <USBD_CtlSendStatus>
  }
}
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	889b      	ldrh	r3, [r3, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d130      	bne.n	80078e0 <USBD_SetAddress+0x74>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d12c      	bne.n	80078e0 <USBD_SetAddress+0x74>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	885b      	ldrh	r3, [r3, #2]
 800788a:	2b7f      	cmp	r3, #127	; 0x7f
 800788c:	d828      	bhi.n	80078e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	885b      	ldrh	r3, [r3, #2]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d104      	bne.n	80078ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f98b 	bl	8007bc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ac:	e01d      	b.n	80078ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7bfa      	ldrb	r2, [r7, #15]
 80078b2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f001 f838 	bl	8008930 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa46 	bl	8007d52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d004      	beq.n	80078d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d4:	e009      	b.n	80078ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	e004      	b.n	80078ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f96d 	bl	8007bc2 <USBD_CtlError>
  }
}
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	885b      	ldrh	r3, [r3, #2]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	4b41      	ldr	r3, [pc, #260]	; (8007a0c <USBD_SetConfig+0x118>)
 8007906:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007908:	4b40      	ldr	r3, [pc, #256]	; (8007a0c <USBD_SetConfig+0x118>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d904      	bls.n	800791a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f955 	bl	8007bc2 <USBD_CtlError>
 8007918:	e075      	b.n	8007a06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007920:	2b02      	cmp	r3, #2
 8007922:	d002      	beq.n	800792a <USBD_SetConfig+0x36>
 8007924:	2b03      	cmp	r3, #3
 8007926:	d023      	beq.n	8007970 <USBD_SetConfig+0x7c>
 8007928:	e062      	b.n	80079f0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800792a:	4b38      	ldr	r3, [pc, #224]	; (8007a0c <USBD_SetConfig+0x118>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01a      	beq.n	8007968 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007932:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <USBD_SetConfig+0x118>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2203      	movs	r2, #3
 8007940:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007944:	4b31      	ldr	r3, [pc, #196]	; (8007a0c <USBD_SetConfig+0x118>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff fa5d 	bl	8006e0a <USBD_SetClassConfig>
 8007950:	4603      	mov	r3, r0
 8007952:	2b02      	cmp	r3, #2
 8007954:	d104      	bne.n	8007960 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f932 	bl	8007bc2 <USBD_CtlError>
          return;
 800795e:	e052      	b.n	8007a06 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f9f6 	bl	8007d52 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007966:	e04e      	b.n	8007a06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9f2 	bl	8007d52 <USBD_CtlSendStatus>
      break;
 800796e:	e04a      	b.n	8007a06 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007970:	4b26      	ldr	r3, [pc, #152]	; (8007a0c <USBD_SetConfig+0x118>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d112      	bne.n	800799e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007980:	4b22      	ldr	r3, [pc, #136]	; (8007a0c <USBD_SetConfig+0x118>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <USBD_SetConfig+0x118>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fa59 	bl	8006e48 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9db 	bl	8007d52 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800799c:	e033      	b.n	8007a06 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800799e:	4b1b      	ldr	r3, [pc, #108]	; (8007a0c <USBD_SetConfig+0x118>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d01d      	beq.n	80079e8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fa47 	bl	8006e48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ba:	4b14      	ldr	r3, [pc, #80]	; (8007a0c <USBD_SetConfig+0x118>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079c4:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <USBD_SetConfig+0x118>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff fa1d 	bl	8006e0a <USBD_SetClassConfig>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d104      	bne.n	80079e0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8f2 	bl	8007bc2 <USBD_CtlError>
          return;
 80079de:	e012      	b.n	8007a06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f9b6 	bl	8007d52 <USBD_CtlSendStatus>
      break;
 80079e6:	e00e      	b.n	8007a06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f9b2 	bl	8007d52 <USBD_CtlSendStatus>
      break;
 80079ee:	e00a      	b.n	8007a06 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f8e5 	bl	8007bc2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <USBD_SetConfig+0x118>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fa22 	bl	8006e48 <USBD_ClrClassConfig>
      break;
 8007a04:	bf00      	nop
    }
  }
}
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	200002b0 	.word	0x200002b0

08007a10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d004      	beq.n	8007a2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f8cc 	bl	8007bc2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007a2a:	e022      	b.n	8007a72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	dc02      	bgt.n	8007a3c <USBD_GetConfig+0x2c>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dc03      	bgt.n	8007a42 <USBD_GetConfig+0x32>
 8007a3a:	e015      	b.n	8007a68 <USBD_GetConfig+0x58>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d00b      	beq.n	8007a58 <USBD_GetConfig+0x48>
 8007a40:	e012      	b.n	8007a68 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f920 	bl	8007c96 <USBD_CtlSendData>
      break;
 8007a56:	e00c      	b.n	8007a72 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f918 	bl	8007c96 <USBD_CtlSendData>
      break;
 8007a66:	e004      	b.n	8007a72 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f8a9 	bl	8007bc2 <USBD_CtlError>
      break;
 8007a70:	bf00      	nop
}
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d81e      	bhi.n	8007ace <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d004      	beq.n	8007aa2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f891 	bl	8007bc2 <USBD_CtlError>
      break;
 8007aa0:	e01a      	b.n	8007ad8 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f043 0202 	orr.w	r2, r3, #2
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f8e5 	bl	8007c96 <USBD_CtlSendData>
    break;
 8007acc:	e004      	b.n	8007ad8 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f876 	bl	8007bc2 <USBD_CtlError>
    break;
 8007ad6:	bf00      	nop
  }
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d106      	bne.n	8007b00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f929 	bl	8007d52 <USBD_CtlSendStatus>
  }

}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d80b      	bhi.n	8007b36 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	885b      	ldrh	r3, [r3, #2]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d10c      	bne.n	8007b40 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f90f 	bl	8007d52 <USBD_CtlSendStatus>
    }
    break;
 8007b34:	e004      	b.n	8007b40 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f842 	bl	8007bc2 <USBD_CtlError>
    break;
 8007b3e:	e000      	b.n	8007b42 <USBD_ClrFeature+0x3a>
    break;
 8007b40:	bf00      	nop
  }
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781a      	ldrb	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	785a      	ldrb	r2, [r3, #1]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	3302      	adds	r3, #2
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	3303      	adds	r3, #3
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	4413      	add	r3, r2
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	3304      	adds	r3, #4
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	3305      	adds	r3, #5
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4413      	add	r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	3306      	adds	r3, #6
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	3307      	adds	r3, #7
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	80da      	strh	r2, [r3, #6]

}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr

08007bc2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007bcc:	2180      	movs	r1, #128	; 0x80
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fe44 	bl	800885c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fe40 	bl	800885c <USBD_LL_StallEP>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d032      	beq.n	8007c60 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f834 	bl	8007c68 <USBD_GetLen>
 8007c00:	4603      	mov	r3, r0
 8007c02:	3301      	adds	r3, #1
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	75fa      	strb	r2, [r7, #23]
 8007c14:	461a      	mov	r2, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4413      	add	r3, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	7812      	ldrb	r2, [r2, #0]
 8007c1e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	75fa      	strb	r2, [r7, #23]
 8007c26:	461a      	mov	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c30:	e012      	b.n	8007c58 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	60fa      	str	r2, [r7, #12]
 8007c38:	7dfa      	ldrb	r2, [r7, #23]
 8007c3a:	1c51      	adds	r1, r2, #1
 8007c3c:	75f9      	strb	r1, [r7, #23]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	440a      	add	r2, r1
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	75fa      	strb	r2, [r7, #23]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4413      	add	r3, r2
 8007c54:	2200      	movs	r2, #0
 8007c56:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e8      	bne.n	8007c32 <USBD_GetString+0x4e>
    }
  }
}
 8007c60:	bf00      	nop
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007c74:	e005      	b.n	8007c82 <USBD_GetLen+0x1a>
    {
        len++;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f5      	bne.n	8007c76 <USBD_GetLen+0xe>
    }

    return len;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc80      	pop	{r7}
 8007c94:	4770      	bx	lr

08007c96 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007cac:	88fa      	ldrh	r2, [r7, #6]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cb2:	88fa      	ldrh	r2, [r7, #6]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007cb8:	88fb      	ldrh	r3, [r7, #6]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fe55 	bl	800896e <USBD_LL_Transmit>

  return USBD_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fe43 	bl	800896e <USBD_LL_Transmit>

  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2203      	movs	r2, #3
 8007d04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007d10:	88fa      	ldrh	r2, [r7, #6]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 fe48 	bl	80089b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	2100      	movs	r1, #0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 fe36 	bl	80089b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d62:	2300      	movs	r3, #0
 8007d64:	2200      	movs	r2, #0
 8007d66:	2100      	movs	r1, #0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fe00 	bl	800896e <USBD_LL_Transmit>

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2205      	movs	r2, #5
 8007d84:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fe10 	bl	80089b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8007daa:	f7f8 fea7 	bl	8000afc <HAL_GetTick>
 8007dae:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8007db0:	e009      	b.n	8007dc6 <WaitWhileBusy+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 8007db2:	f7f8 fea3 	bl	8000afc <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	1ad2      	subs	r2, r2, r3
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d901      	bls.n	8007dc6 <WaitWhileBusy+0x26>
		{
			return(LoRa_TIMEOUT);
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e008      	b.n	8007dd8 <WaitWhileBusy+0x38>
	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8007dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dca:	4805      	ldr	r0, [pc, #20]	; (8007de0 <WaitWhileBusy+0x40>)
 8007dcc:	f7f9 f950 	bl	8001070 <HAL_GPIO_ReadPin>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d0ed      	beq.n	8007db2 <WaitWhileBusy+0x12>
		}
	}

	return(LoRa_OK);
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40020000 	.word	0x40020000

08007de4 <WaitWhileTransmit>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileTransmit(uint16_t timeout)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8007dee:	f7f8 fe85 	bl	8000afc <HAL_GetTick>
 8007df2:	60f8      	str	r0, [r7, #12]

	/* wait for DIO2 to go high */
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_RESET)
 8007df4:	e009      	b.n	8007e0a <WaitWhileTransmit+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 8007df6:	f7f8 fe81 	bl	8000afc <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	88fb      	ldrh	r3, [r7, #6]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d901      	bls.n	8007e0a <WaitWhileTransmit+0x26>
		{
			return(LoRa_TIMEOUT);
 8007e06:	2302      	movs	r3, #2
 8007e08:	e019      	b.n	8007e3e <WaitWhileTransmit+0x5a>
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_RESET)
 8007e0a:	2104      	movs	r1, #4
 8007e0c:	480e      	ldr	r0, [pc, #56]	; (8007e48 <WaitWhileTransmit+0x64>)
 8007e0e:	f7f9 f92f 	bl	8001070 <HAL_GPIO_ReadPin>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0ee      	beq.n	8007df6 <WaitWhileTransmit+0x12>
		}
	}

	/* Now wait for DIO2 to go low indicating finished transmitting */
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_SET)
 8007e18:	e009      	b.n	8007e2e <WaitWhileTransmit+0x4a>
	{
		if((HAL_GetTick() - startTime) > timeout)
 8007e1a:	f7f8 fe6f 	bl	8000afc <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	1ad2      	subs	r2, r2, r3
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d901      	bls.n	8007e2e <WaitWhileTransmit+0x4a>
		{
			return(LoRa_TIMEOUT);
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e007      	b.n	8007e3e <WaitWhileTransmit+0x5a>
	while(HAL_GPIO_ReadPin(LoRa_DIO2_GPIO_Port, LoRa_DIO2_Pin) == GPIO_PIN_SET)
 8007e2e:	2104      	movs	r1, #4
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <WaitWhileTransmit+0x64>)
 8007e32:	f7f9 f91d 	bl	8001070 <HAL_GPIO_ReadPin>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d0ee      	beq.n	8007e1a <WaitWhileTransmit+0x36>
		}
	}

	return(LoRa_OK);
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40020000 	.word	0x40020000

08007e4c <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 8007e5c:	200a      	movs	r0, #10
 8007e5e:	f7ff ff9f 	bl	8007da0 <WaitWhileBusy>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e01c      	b.n	8007ea6 <SPI_Send+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2110      	movs	r1, #16
 8007e70:	480f      	ldr	r0, [pc, #60]	; (8007eb0 <SPI_Send+0x64>)
 8007e72:	f7f9 f914 	bl	800109e <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, buffer, numBytes, 100) != HAL_OK)
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <SPI_Send+0x68>)
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	887a      	ldrh	r2, [r7, #2]
 8007e7c:	2364      	movs	r3, #100	; 0x64
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	f7fb fcf2 	bl	8003868 <HAL_SPI_Transmit>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <SPI_Send+0x42>
	{
		return(LoRa_ERROR);
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e00b      	b.n	8007ea6 <SPI_Send+0x5a>
	}

	if(moreToCome != true)
 8007e8e:	787b      	ldrb	r3, [r7, #1]
 8007e90:	f083 0301 	eor.w	r3, r3, #1
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <SPI_Send+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	2110      	movs	r1, #16
 8007e9e:	4804      	ldr	r0, [pc, #16]	; (8007eb0 <SPI_Send+0x64>)
 8007ea0:	f7f9 f8fd 	bl	800109e <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	40020000 	.word	0x40020000
 8007eb4:	200002b4 	.word	0x200002b4

08007eb8 <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SPI_HandleTypeDef *hspiPtr)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[6];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 8007ec0:	4a5a      	ldr	r2, [pc, #360]	; (800802c <LoRa_Init+0x174>)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6013      	str	r3, [r2, #0]

  /* Set NSS high */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	2110      	movs	r1, #16
 8007eca:	4859      	ldr	r0, [pc, #356]	; (8008030 <LoRa_Init+0x178>)
 8007ecc:	f7f9 f8e7 	bl	800109e <HAL_GPIO_WritePin>

  /* Reset SX1262 chip */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET); 	/* Pull NRST low */
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	4856      	ldr	r0, [pc, #344]	; (8008030 <LoRa_Init+0x178>)
 8007ed6:	f7f9 f8e2 	bl	800109e <HAL_GPIO_WritePin>
  HAL_Delay(1); 															/* delay 1mS */
 8007eda:	2001      	movs	r0, #1
 8007edc:	f7f8 fe18 	bl	8000b10 <HAL_Delay>
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);		/* Set NRST high */
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	4852      	ldr	r0, [pc, #328]	; (8008030 <LoRa_Init+0x178>)
 8007ee6:	f7f9 f8da 	bl	800109e <HAL_GPIO_WritePin>

  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 8007eea:	2380      	movs	r3, #128	; 0x80
 8007eec:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = LORA_STDBY_RC;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007ef2:	f107 0308 	add.w	r3, r7, #8
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2102      	movs	r1, #2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff ffa6 	bl	8007e4c <SPI_Send>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <LoRa_Init+0x52>
  {
	  return(LoRa_ERROR);
 8007f06:	2301      	movs	r3, #1
 8007f08:	e08c      	b.n	8008024 <LoRa_Init+0x16c>
  }

  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 8007f0a:	238a      	movs	r3, #138	; 0x8a
 8007f0c:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007f12:	f107 0308 	add.w	r3, r7, #8
 8007f16:	2200      	movs	r2, #0
 8007f18:	2102      	movs	r1, #2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff ff96 	bl	8007e4c <SPI_Send>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <LoRa_Init+0x72>
  {
	  return(LoRa_ERROR);
 8007f26:	2301      	movs	r3, #1
 8007f28:	e07c      	b.n	8008024 <LoRa_Init+0x16c>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 8007f2a:	2386      	movs	r3, #134	; 0x86
 8007f2c:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 0x39;
 8007f2e:	2339      	movs	r3, #57	; 0x39
 8007f30:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x30;
 8007f32:	2330      	movs	r3, #48	; 0x30
 8007f34:	72bb      	strb	r3, [r7, #10]
  xmitBuffer[3] = 0x00;
 8007f36:	2300      	movs	r3, #0
 8007f38:	72fb      	strb	r3, [r7, #11]
  xmitBuffer[4] = 0x00;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	733b      	strb	r3, [r7, #12]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	2200      	movs	r2, #0
 8007f44:	2105      	movs	r1, #5
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff ff80 	bl	8007e4c <SPI_Send>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <LoRa_Init+0x9e>
  {
	  return(LoRa_ERROR);
 8007f52:	2301      	movs	r3, #1
 8007f54:	e066      	b.n	8008024 <LoRa_Init+0x16c>
  }

  /* Set the power amplifier configuration */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 8007f56:	2395      	movs	r3, #149	; 0x95
 8007f58:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 8007f5a:	2304      	movs	r3, #4
 8007f5c:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x07; /* hpMax */
 8007f5e:	2307      	movs	r3, #7
 8007f60:	72bb      	strb	r3, [r7, #10]
  xmitBuffer[3] = 0x00; /* devSel */
 8007f62:	2300      	movs	r3, #0
 8007f64:	72fb      	strb	r3, [r7, #11]
  xmitBuffer[4] = 0x01; /* paLut */
 8007f66:	2301      	movs	r3, #1
 8007f68:	733b      	strb	r3, [r7, #12]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8007f6a:	f107 0308 	add.w	r3, r7, #8
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2105      	movs	r1, #5
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff ff6a 	bl	8007e4c <SPI_Send>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <LoRa_Init+0xca>
  {
	  return(LoRa_ERROR);
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e050      	b.n	8008024 <LoRa_Init+0x16c>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 8007f82:	238e      	movs	r3, #142	; 0x8e
 8007f84:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 8007f86:	2316      	movs	r3, #22
 8007f88:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = LORA_STANDARD_RAMPTIME;
 8007f8a:	2304      	movs	r3, #4
 8007f8c:	72bb      	strb	r3, [r7, #10]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 8007f8e:	f107 0308 	add.w	r3, r7, #8
 8007f92:	2200      	movs	r2, #0
 8007f94:	2103      	movs	r1, #3
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff ff58 	bl	8007e4c <SPI_Send>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <LoRa_Init+0xee>
  {
	  return(LoRa_ERROR);
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e03e      	b.n	8008024 <LoRa_Init+0x16c>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 8007fa6:	239d      	movs	r3, #157	; 0x9d
 8007fa8:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 1; /* enable */
 8007faa:	2301      	movs	r3, #1
 8007fac:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff ff48 	bl	8007e4c <SPI_Send>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <LoRa_Init+0x10e>
  {
	  return(LoRa_ERROR);
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e02e      	b.n	8008024 <LoRa_Init+0x16c>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 8007fc6:	2396      	movs	r3, #150	; 0x96
 8007fc8:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 8007fca:	2301      	movs	r3, #1
 8007fcc:	727b      	strb	r3, [r7, #9]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007fce:	f107 0308 	add.w	r3, r7, #8
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2102      	movs	r1, #2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff ff38 	bl	8007e4c <SPI_Send>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <LoRa_Init+0x12e>
  {
	  return(LoRa_ERROR);
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e01e      	b.n	8008024 <LoRa_Init+0x16c>
  }

  /* Set LoRa modulation parameters */
  xmitBuffer[0] = LORA_SET_MODULATION_PARAMS_OPCODE;
 8007fe6:	238b      	movs	r3, #139	; 0x8b
 8007fe8:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 7; 		/* Spreading factor */
 8007fea:	2307      	movs	r3, #7
 8007fec:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x04; 	/* BW = 125 KHz */
 8007fee:	2304      	movs	r3, #4
 8007ff0:	72bb      	strb	r3, [r7, #10]
  xmitBuffer[3] = 0x01;		/* Coding Rate = 4/5 */
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	72fb      	strb	r3, [r7, #11]
  xmitBuffer[4] = 0;		/* Low data rate optimization off */
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	733b      	strb	r3, [r7, #12]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8007ffa:	f107 0308 	add.w	r3, r7, #8
 8007ffe:	2200      	movs	r2, #0
 8008000:	2105      	movs	r1, #5
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff ff22 	bl	8007e4c <SPI_Send>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <LoRa_Init+0x15a>
  {
	  return(LoRa_ERROR);
 800800e:	2301      	movs	r3, #1
 8008010:	e008      	b.n	8008024 <LoRa_Init+0x16c>
  }

  /* Set LoRa packet parameters */
  xmitBuffer[0] = LORA_SET_PACKET_PARAMS_OPCODE;
 8008012:	238c      	movs	r3, #140	; 0x8c
 8008014:	723b      	strb	r3, [r7, #8]
  xmitBuffer[1] = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	727b      	strb	r3, [r7, #9]
  xmitBuffer[2] = 0x08;	/* Preamble length (2 bytes) */
 800801a:	2308      	movs	r3, #8
 800801c:	72bb      	strb	r3, [r7, #10]
  xmitBuffer[3] = 0;	/* Variable length packet */
 800801e:	2300      	movs	r3, #0
 8008020:	72fb      	strb	r3, [r7, #11]


  return(LoRa_OK);
 8008022:	2300      	movs	r3, #0

}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	200002b4 	.word	0x200002b4
 8008030:	40020000 	.word	0x40020000

08008034 <LoRaTransmit>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRaTransmit(uint8_t *msg, uint8_t numBytes)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b0a4      	sub	sp, #144	; 0x90
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
	uint8_t xmitBuffer[128];
	uint8_t i;

	if(numBytes > 127) return(LoRa_ERROR);
 8008040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008044:	2b00      	cmp	r3, #0
 8008046:	da01      	bge.n	800804c <LoRaTransmit+0x18>
 8008048:	2301      	movs	r3, #1
 800804a:	e077      	b.n	800813c <LoRaTransmit+0x108>

	/* Set base address of transmit and receive buffer */
	xmitBuffer[0] = LORA_SET_BUFFER_BASE_ADDRESS_OPCODE;
 800804c:	238f      	movs	r3, #143	; 0x8f
 800804e:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0; /* Transmit buffer start address */
 8008050:	2300      	movs	r3, #0
 8008052:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0; /* Receive buffer start address */
 8008054:	2300      	movs	r3, #0
 8008056:	73bb      	strb	r3, [r7, #14]
	if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 8008058:	f107 030c 	add.w	r3, r7, #12
 800805c:	2200      	movs	r2, #0
 800805e:	2103      	movs	r1, #3
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff fef3 	bl	8007e4c <SPI_Send>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <LoRaTransmit+0x3c>
	{
		return(LoRa_ERROR);
 800806c:	2301      	movs	r3, #1
 800806e:	e065      	b.n	800813c <LoRaTransmit+0x108>
	}

	/* Write the message to the transmit buffer on the SX1262 chip*/
	xmitBuffer[0] = LORA_WRITE_BUFFER_OPCODE;
 8008070:	230e      	movs	r3, #14
 8008072:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0; 		/* Offset of transmit buffer */
 8008074:	2300      	movs	r3, #0
 8008076:	737b      	strb	r3, [r7, #13]
	for(i=2; i <= (numBytes+1); i++)
 8008078:	2302      	movs	r3, #2
 800807a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800807e:	e010      	b.n	80080a2 <LoRaTransmit+0x6e>
	{
		xmitBuffer[i] = *msg++;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800808a:	7819      	ldrb	r1, [r3, #0]
 800808c:	f102 0390 	add.w	r3, r2, #144	; 0x90
 8008090:	443b      	add	r3, r7
 8008092:	460a      	mov	r2, r1
 8008094:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(i=2; i <= (numBytes+1); i++)
 8008098:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800809c:	3301      	adds	r3, #1
 800809e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80080a2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	3301      	adds	r3, #1
 80080aa:	429a      	cmp	r2, r3
 80080ac:	dde8      	ble.n	8008080 <LoRaTransmit+0x4c>
	}
	if(SPI_Send(xmitBuffer, numBytes+2, false) != LoRa_OK)
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3302      	adds	r3, #2
 80080b4:	b299      	uxth	r1, r3
 80080b6:	f107 030c 	add.w	r3, r7, #12
 80080ba:	2200      	movs	r2, #0
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff fec5 	bl	8007e4c <SPI_Send>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <LoRaTransmit+0x98>
	{
		return(LoRa_ERROR);
 80080c8:	2301      	movs	r3, #1
 80080ca:	e037      	b.n	800813c <LoRaTransmit+0x108>
	}

	/* Set LoRa packet parameters */
	xmitBuffer[0] = LORA_SET_PACKET_PARAMS_OPCODE;
 80080cc:	238c      	movs	r3, #140	; 0x8c
 80080ce:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0x08;		/* Preamble length (2 bytes) */
 80080d4:	2308      	movs	r3, #8
 80080d6:	73bb      	strb	r3, [r7, #14]
	xmitBuffer[3] = 0;			/* Variable length packet */
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]
	xmitBuffer[4] = numBytes; 	/* Size of message */
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	743b      	strb	r3, [r7, #16]
	xmitBuffer[5] = 0;			/* CRC off */
 80080e0:	2300      	movs	r3, #0
 80080e2:	747b      	strb	r3, [r7, #17]
	xmitBuffer[6] = 0;			/* Standard IQ setup */
 80080e4:	2300      	movs	r3, #0
 80080e6:	74bb      	strb	r3, [r7, #18]
	if(SPI_Send(xmitBuffer, 7, false) != LoRa_OK)
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	2200      	movs	r2, #0
 80080ee:	2107      	movs	r1, #7
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff feab 	bl	8007e4c <SPI_Send>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <LoRaTransmit+0xcc>
	{
		return(LoRa_ERROR);
 80080fc:	2301      	movs	r3, #1
 80080fe:	e01d      	b.n	800813c <LoRaTransmit+0x108>
	}

	/* Put the chip in transmit mode to send the message */
	xmitBuffer[0] = LORA_SET_TX_OPCODE;
 8008100:	2383      	movs	r3, #131	; 0x83
 8008102:	733b      	strb	r3, [r7, #12]
	xmitBuffer[1] = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	737b      	strb	r3, [r7, #13]
	xmitBuffer[2] = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	73bb      	strb	r3, [r7, #14]
	xmitBuffer[3] = 0; 	/* timeout value (3 bytes) set to zero for no timeout */
 800810c:	2300      	movs	r3, #0
 800810e:	73fb      	strb	r3, [r7, #15]
	if(SPI_Send(xmitBuffer, 4, false) != LoRa_OK)
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	2200      	movs	r2, #0
 8008116:	2104      	movs	r1, #4
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff fe97 	bl	8007e4c <SPI_Send>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <LoRaTransmit+0xf4>
	{
		return(LoRa_ERROR);
 8008124:	2301      	movs	r3, #1
 8008126:	e009      	b.n	800813c <LoRaTransmit+0x108>
	}

	if(WaitWhileTransmit(500) != LoRa_OK)
 8008128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800812c:	f7ff fe5a 	bl	8007de4 <WaitWhileTransmit>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <LoRaTransmit+0x106>
	{
		return(LoRa_ERROR);
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <LoRaTransmit+0x108>
	}

	return(LoRa_OK);
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3790      	adds	r7, #144	; 0x90
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008148:	2200      	movs	r2, #0
 800814a:	4912      	ldr	r1, [pc, #72]	; (8008194 <MX_USB_DEVICE_Init+0x50>)
 800814c:	4812      	ldr	r0, [pc, #72]	; (8008198 <MX_USB_DEVICE_Init+0x54>)
 800814e:	f7fe fe02 	bl	8006d56 <USBD_Init>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008158:	f7f8 fb1c 	bl	8000794 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800815c:	490f      	ldr	r1, [pc, #60]	; (800819c <MX_USB_DEVICE_Init+0x58>)
 800815e:	480e      	ldr	r0, [pc, #56]	; (8008198 <MX_USB_DEVICE_Init+0x54>)
 8008160:	f7fe fe24 	bl	8006dac <USBD_RegisterClass>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800816a:	f7f8 fb13 	bl	8000794 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800816e:	490c      	ldr	r1, [pc, #48]	; (80081a0 <MX_USB_DEVICE_Init+0x5c>)
 8008170:	4809      	ldr	r0, [pc, #36]	; (8008198 <MX_USB_DEVICE_Init+0x54>)
 8008172:	f7fe fd55 	bl	8006c20 <USBD_CDC_RegisterInterface>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800817c:	f7f8 fb0a 	bl	8000794 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008180:	4805      	ldr	r0, [pc, #20]	; (8008198 <MX_USB_DEVICE_Init+0x54>)
 8008182:	f7fe fe2c 	bl	8006dde <USBD_Start>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800818c:	f7f8 fb02 	bl	8000794 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008190:	bf00      	nop
 8008192:	bd80      	pop	{r7, pc}
 8008194:	2000012c 	.word	0x2000012c
 8008198:	200002b8 	.word	0x200002b8
 800819c:	20000018 	.word	0x20000018
 80081a0:	2000011c 	.word	0x2000011c

080081a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081a8:	2200      	movs	r2, #0
 80081aa:	4905      	ldr	r1, [pc, #20]	; (80081c0 <CDC_Init_FS+0x1c>)
 80081ac:	4805      	ldr	r0, [pc, #20]	; (80081c4 <CDC_Init_FS+0x20>)
 80081ae:	f7fe fd4d 	bl	8006c4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081b2:	4905      	ldr	r1, [pc, #20]	; (80081c8 <CDC_Init_FS+0x24>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <CDC_Init_FS+0x20>)
 80081b6:	f7fe fd62 	bl	8006c7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081bc:	4618      	mov	r0, r3
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	20000954 	.word	0x20000954
 80081c4:	200002b8 	.word	0x200002b8
 80081c8:	20000554 	.word	0x20000554

080081cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr
	...

080081dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
 80081e8:	4613      	mov	r3, r2
 80081ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b23      	cmp	r3, #35	; 0x23
 80081f0:	d84a      	bhi.n	8008288 <CDC_Control_FS+0xac>
 80081f2:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <CDC_Control_FS+0x1c>)
 80081f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f8:	08008289 	.word	0x08008289
 80081fc:	08008289 	.word	0x08008289
 8008200:	08008289 	.word	0x08008289
 8008204:	08008289 	.word	0x08008289
 8008208:	08008289 	.word	0x08008289
 800820c:	08008289 	.word	0x08008289
 8008210:	08008289 	.word	0x08008289
 8008214:	08008289 	.word	0x08008289
 8008218:	08008289 	.word	0x08008289
 800821c:	08008289 	.word	0x08008289
 8008220:	08008289 	.word	0x08008289
 8008224:	08008289 	.word	0x08008289
 8008228:	08008289 	.word	0x08008289
 800822c:	08008289 	.word	0x08008289
 8008230:	08008289 	.word	0x08008289
 8008234:	08008289 	.word	0x08008289
 8008238:	08008289 	.word	0x08008289
 800823c:	08008289 	.word	0x08008289
 8008240:	08008289 	.word	0x08008289
 8008244:	08008289 	.word	0x08008289
 8008248:	08008289 	.word	0x08008289
 800824c:	08008289 	.word	0x08008289
 8008250:	08008289 	.word	0x08008289
 8008254:	08008289 	.word	0x08008289
 8008258:	08008289 	.word	0x08008289
 800825c:	08008289 	.word	0x08008289
 8008260:	08008289 	.word	0x08008289
 8008264:	08008289 	.word	0x08008289
 8008268:	08008289 	.word	0x08008289
 800826c:	08008289 	.word	0x08008289
 8008270:	08008289 	.word	0x08008289
 8008274:	08008289 	.word	0x08008289
 8008278:	08008289 	.word	0x08008289
 800827c:	08008289 	.word	0x08008289
 8008280:	08008289 	.word	0x08008289
 8008284:	08008289 	.word	0x08008289
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008288:	bf00      	nop
  }

  return (USBD_OK);
 800828a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop

08008298 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4805      	ldr	r0, [pc, #20]	; (80082bc <CDC_Receive_FS+0x24>)
 80082a6:	f7fe fcea 	bl	8006c7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082aa:	4804      	ldr	r0, [pc, #16]	; (80082bc <CDC_Receive_FS+0x24>)
 80082ac:	f7fe fd29 	bl	8006d02 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	200002b8 	.word	0x200002b8

080082c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80082d0:	4b0d      	ldr	r3, [pc, #52]	; (8008308 <CDC_Transmit_FS+0x48>)
 80082d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e00b      	b.n	80082fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80082e6:	887b      	ldrh	r3, [r7, #2]
 80082e8:	461a      	mov	r2, r3
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	4806      	ldr	r0, [pc, #24]	; (8008308 <CDC_Transmit_FS+0x48>)
 80082ee:	f7fe fcad 	bl	8006c4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80082f2:	4805      	ldr	r0, [pc, #20]	; (8008308 <CDC_Transmit_FS+0x48>)
 80082f4:	f7fe fcd6 	bl	8006ca4 <USBD_CDC_TransmitPacket>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	200002b8 	.word	0x200002b8

0800830c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2212      	movs	r2, #18
 800831c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800831e:	4b03      	ldr	r3, [pc, #12]	; (800832c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	bc80      	pop	{r7}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	20000148 	.word	0x20000148

08008330 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2204      	movs	r2, #4
 8008340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008342:	4b03      	ldr	r3, [pc, #12]	; (8008350 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	2000015c 	.word	0x2000015c

08008354 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	6039      	str	r1, [r7, #0]
 800835e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d105      	bne.n	8008372 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	4907      	ldr	r1, [pc, #28]	; (8008388 <USBD_FS_ProductStrDescriptor+0x34>)
 800836a:	4808      	ldr	r0, [pc, #32]	; (800838c <USBD_FS_ProductStrDescriptor+0x38>)
 800836c:	f7ff fc3a 	bl	8007be4 <USBD_GetString>
 8008370:	e004      	b.n	800837c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	4904      	ldr	r1, [pc, #16]	; (8008388 <USBD_FS_ProductStrDescriptor+0x34>)
 8008376:	4805      	ldr	r0, [pc, #20]	; (800838c <USBD_FS_ProductStrDescriptor+0x38>)
 8008378:	f7ff fc34 	bl	8007be4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000d54 	.word	0x20000d54
 800838c:	0800943c 	.word	0x0800943c

08008390 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	4904      	ldr	r1, [pc, #16]	; (80083b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083a0:	4804      	ldr	r0, [pc, #16]	; (80083b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083a2:	f7ff fc1f 	bl	8007be4 <USBD_GetString>
  return USBD_StrDesc;
 80083a6:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000d54 	.word	0x20000d54
 80083b4:	08009454 	.word	0x08009454

080083b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	221a      	movs	r2, #26
 80083c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083ca:	f000 f843 	bl	8008454 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083ce:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20000160 	.word	0x20000160

080083dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d105      	bne.n	80083fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	4907      	ldr	r1, [pc, #28]	; (8008410 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083f2:	4808      	ldr	r0, [pc, #32]	; (8008414 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083f4:	f7ff fbf6 	bl	8007be4 <USBD_GetString>
 80083f8:	e004      	b.n	8008404 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	4904      	ldr	r1, [pc, #16]	; (8008410 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083fe:	4805      	ldr	r0, [pc, #20]	; (8008414 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008400:	f7ff fbf0 	bl	8007be4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008404:	4b02      	ldr	r3, [pc, #8]	; (8008410 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000d54 	.word	0x20000d54
 8008414:	08009468 	.word	0x08009468

08008418 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d105      	bne.n	8008436 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	4907      	ldr	r1, [pc, #28]	; (800844c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800842e:	4808      	ldr	r0, [pc, #32]	; (8008450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008430:	f7ff fbd8 	bl	8007be4 <USBD_GetString>
 8008434:	e004      	b.n	8008440 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	4904      	ldr	r1, [pc, #16]	; (800844c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800843a:	4805      	ldr	r0, [pc, #20]	; (8008450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800843c:	f7ff fbd2 	bl	8007be4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008440:	4b02      	ldr	r3, [pc, #8]	; (800844c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000d54 	.word	0x20000d54
 8008450:	08009474 	.word	0x08009474

08008454 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800845a:	4b0f      	ldr	r3, [pc, #60]	; (8008498 <Get_SerialNum+0x44>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008460:	4b0e      	ldr	r3, [pc, #56]	; (800849c <Get_SerialNum+0x48>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008466:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <Get_SerialNum+0x4c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d009      	beq.n	800848e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800847a:	2208      	movs	r2, #8
 800847c:	4909      	ldr	r1, [pc, #36]	; (80084a4 <Get_SerialNum+0x50>)
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 f814 	bl	80084ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008484:	2204      	movs	r2, #4
 8008486:	4908      	ldr	r1, [pc, #32]	; (80084a8 <Get_SerialNum+0x54>)
 8008488:	68b8      	ldr	r0, [r7, #8]
 800848a:	f000 f80f 	bl	80084ac <IntToUnicode>
  }
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	1ff80050 	.word	0x1ff80050
 800849c:	1ff80054 	.word	0x1ff80054
 80084a0:	1ff80058 	.word	0x1ff80058
 80084a4:	20000162 	.word	0x20000162
 80084a8:	20000172 	.word	0x20000172

080084ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	4613      	mov	r3, r2
 80084b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084be:	2300      	movs	r3, #0
 80084c0:	75fb      	strb	r3, [r7, #23]
 80084c2:	e027      	b.n	8008514 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	0f1b      	lsrs	r3, r3, #28
 80084c8:	2b09      	cmp	r3, #9
 80084ca:	d80b      	bhi.n	80084e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	0f1b      	lsrs	r3, r3, #28
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	4619      	mov	r1, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	440b      	add	r3, r1
 80084dc:	3230      	adds	r2, #48	; 0x30
 80084de:	b2d2      	uxtb	r2, r2
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e00a      	b.n	80084fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	0f1b      	lsrs	r3, r3, #28
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	4619      	mov	r1, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	440b      	add	r3, r1
 80084f4:	3237      	adds	r2, #55	; 0x37
 80084f6:	b2d2      	uxtb	r2, r2
 80084f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	3301      	adds	r3, #1
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	4413      	add	r3, r2
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	3301      	adds	r3, #1
 8008512:	75fb      	strb	r3, [r7, #23]
 8008514:	7dfa      	ldrb	r2, [r7, #23]
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	429a      	cmp	r2, r3
 800851a:	d3d3      	bcc.n	80084c4 <IntToUnicode+0x18>
  }
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d106      	bne.n	8008548 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800853a:	4b09      	ldr	r3, [pc, #36]	; (8008560 <HAL_PCDEx_SetConnectionState+0x38>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	4a08      	ldr	r2, [pc, #32]	; (8008560 <HAL_PCDEx_SetConnectionState+0x38>)
 8008540:	f043 0301 	orr.w	r3, r3, #1
 8008544:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008546:	e005      	b.n	8008554 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <HAL_PCDEx_SetConnectionState+0x38>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4a04      	ldr	r2, [pc, #16]	; (8008560 <HAL_PCDEx_SetConnectionState+0x38>)
 800854e:	f023 0301 	bic.w	r3, r3, #1
 8008552:	6053      	str	r3, [r2, #4]
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40010000 	.word	0x40010000

08008564 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a0d      	ldr	r2, [pc, #52]	; (80085a8 <HAL_PCD_MspInit+0x44>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d113      	bne.n	800859e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008576:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <HAL_PCD_MspInit+0x48>)
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	4a0c      	ldr	r2, [pc, #48]	; (80085ac <HAL_PCD_MspInit+0x48>)
 800857c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008580:	6253      	str	r3, [r2, #36]	; 0x24
 8008582:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <HAL_PCD_MspInit+0x48>)
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	2014      	movs	r0, #20
 8008594:	f7f8 fbb5 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008598:	2014      	movs	r0, #20
 800859a:	f7f8 fbce 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	40005c00 	.word	0x40005c00
 80085ac:	40023800 	.word	0x40023800

080085b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f7fe fc51 	bl	8006e6e <USBD_LL_SetupStage>
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80085e6:	78fa      	ldrb	r2, [r7, #3]
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	440b      	add	r3, r1
 80085f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f7fe fc83 	bl	8006f08 <USBD_LL_DataOutStage>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800861c:	78fa      	ldrb	r2, [r7, #3]
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	440b      	add	r3, r1
 800862a:	333c      	adds	r3, #60	; 0x3c
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	4619      	mov	r1, r3
 8008632:	f7fe fcda 	bl	8006fea <USBD_LL_DataInStage>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800864c:	4618      	mov	r0, r3
 800864e:	f7fe fde5 	bl	800721c <USBD_LL_SOF>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008662:	2301      	movs	r3, #1
 8008664:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b02      	cmp	r3, #2
 800866c:	d001      	beq.n	8008672 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800866e:	f7f8 f891 	bl	8000794 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008678:	7bfa      	ldrb	r2, [r7, #15]
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f7fe fd9a 	bl	80071b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fd53 	bl	8007134 <USBD_LL_Reset>
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fe fd94 	bl	80071d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <HAL_PCD_SuspendCallback+0x30>)
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	4a03      	ldr	r2, [pc, #12]	; (80086c8 <HAL_PCD_SuspendCallback+0x30>)
 80086ba:	f043 0306 	orr.w	r3, r3, #6
 80086be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	e000ed00 	.word	0xe000ed00

080086cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fd8e 	bl	80071fc <USBD_LL_Resume>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80086f0:	4a28      	ldr	r2, [pc, #160]	; (8008794 <USBD_LL_Init+0xac>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a26      	ldr	r2, [pc, #152]	; (8008794 <USBD_LL_Init+0xac>)
 80086fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008700:	4b24      	ldr	r3, [pc, #144]	; (8008794 <USBD_LL_Init+0xac>)
 8008702:	4a25      	ldr	r2, [pc, #148]	; (8008798 <USBD_LL_Init+0xb0>)
 8008704:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008706:	4b23      	ldr	r3, [pc, #140]	; (8008794 <USBD_LL_Init+0xac>)
 8008708:	2208      	movs	r2, #8
 800870a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800870c:	4b21      	ldr	r3, [pc, #132]	; (8008794 <USBD_LL_Init+0xac>)
 800870e:	2202      	movs	r2, #2
 8008710:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008712:	4b20      	ldr	r3, [pc, #128]	; (8008794 <USBD_LL_Init+0xac>)
 8008714:	2202      	movs	r2, #2
 8008716:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008718:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <USBD_LL_Init+0xac>)
 800871a:	2200      	movs	r2, #0
 800871c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800871e:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <USBD_LL_Init+0xac>)
 8008720:	2200      	movs	r2, #0
 8008722:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008724:	481b      	ldr	r0, [pc, #108]	; (8008794 <USBD_LL_Init+0xac>)
 8008726:	f7f8 fe17 	bl	8001358 <HAL_PCD_Init>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008730:	f7f8 f830 	bl	8000794 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800873a:	2318      	movs	r3, #24
 800873c:	2200      	movs	r2, #0
 800873e:	2100      	movs	r1, #0
 8008740:	f7fa f9f4 	bl	8002b2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800874a:	2358      	movs	r3, #88	; 0x58
 800874c:	2200      	movs	r2, #0
 800874e:	2180      	movs	r1, #128	; 0x80
 8008750:	f7fa f9ec 	bl	8002b2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800875a:	23c0      	movs	r3, #192	; 0xc0
 800875c:	2200      	movs	r2, #0
 800875e:	2181      	movs	r1, #129	; 0x81
 8008760:	f7fa f9e4 	bl	8002b2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800876a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800876e:	2200      	movs	r2, #0
 8008770:	2101      	movs	r1, #1
 8008772:	f7fa f9db 	bl	8002b2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800877c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008780:	2200      	movs	r2, #0
 8008782:	2182      	movs	r1, #130	; 0x82
 8008784:	f7fa f9d2 	bl	8002b2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000f54 	.word	0x20000f54
 8008798:	40005c00 	.word	0x40005c00

0800879c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7f8 feae 	bl	8001514 <HAL_PCD_Start>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 f944 	bl	8008a4c <USBD_Get_USB_Status>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	461a      	mov	r2, r3
 80087e0:	4603      	mov	r3, r0
 80087e2:	70fb      	strb	r3, [r7, #3]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70bb      	strb	r3, [r7, #2]
 80087e8:	4613      	mov	r3, r2
 80087ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087fa:	78bb      	ldrb	r3, [r7, #2]
 80087fc:	883a      	ldrh	r2, [r7, #0]
 80087fe:	78f9      	ldrb	r1, [r7, #3]
 8008800:	f7f8 ffca 	bl	8001798 <HAL_PCD_EP_Open>
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	4618      	mov	r0, r3
 800880c:	f000 f91e 	bl	8008a4c <USBD_Get_USB_Status>
 8008810:	4603      	mov	r3, r0
 8008812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008814:	7bbb      	ldrb	r3, [r7, #14]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008838:	78fa      	ldrb	r2, [r7, #3]
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7f9 f811 	bl	8001864 <HAL_PCD_EP_Close>
 8008842:	4603      	mov	r3, r0
 8008844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 f8ff 	bl	8008a4c <USBD_Get_USB_Status>
 800884e:	4603      	mov	r3, r0
 8008850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008852:	7bbb      	ldrb	r3, [r7, #14]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	4611      	mov	r1, r2
 800887a:	4618      	mov	r0, r3
 800887c:	f7f9 f8d1 	bl	8001a22 <HAL_PCD_EP_SetStall>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f8e0 	bl	8008a4c <USBD_Get_USB_Status>
 800888c:	4603      	mov	r3, r0
 800888e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008890:	7bbb      	ldrb	r3, [r7, #14]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7f9 f904 	bl	8001ac6 <HAL_PCD_EP_ClrStall>
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f8c1 	bl	8008a4c <USBD_Get_USB_Status>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da0c      	bge.n	800890e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	440b      	add	r3, r1
 8008908:	3302      	adds	r3, #2
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	e00b      	b.n	8008926 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008914:	68f9      	ldr	r1, [r7, #12]
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	440b      	add	r3, r1
 8008920:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008924:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	4611      	mov	r1, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f7f8 fefd 	bl	800174e <HAL_PCD_SetAddress>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f876 	bl	8008a4c <USBD_Get_USB_Status>
 8008960:	4603      	mov	r3, r0
 8008962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008964:	7bbb      	ldrb	r3, [r7, #14]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b086      	sub	sp, #24
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	461a      	mov	r2, r3
 800897a:	460b      	mov	r3, r1
 800897c:	72fb      	strb	r3, [r7, #11]
 800897e:	4613      	mov	r3, r2
 8008980:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008990:	893b      	ldrh	r3, [r7, #8]
 8008992:	7af9      	ldrb	r1, [r7, #11]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	f7f9 f801 	bl	800199c <HAL_PCD_EP_Transmit>
 800899a:	4603      	mov	r3, r0
 800899c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 f853 	bl	8008a4c <USBD_Get_USB_Status>
 80089a6:	4603      	mov	r3, r0
 80089a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	607a      	str	r2, [r7, #4]
 80089be:	461a      	mov	r2, r3
 80089c0:	460b      	mov	r3, r1
 80089c2:	72fb      	strb	r3, [r7, #11]
 80089c4:	4613      	mov	r3, r2
 80089c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80089d6:	893b      	ldrh	r3, [r7, #8]
 80089d8:	7af9      	ldrb	r1, [r7, #11]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	f7f8 ff8a 	bl	80018f4 <HAL_PCD_EP_Receive>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f830 	bl	8008a4c <USBD_Get_USB_Status>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f8 ffac 	bl	800196e <HAL_PCD_EP_GetRxCount>
 8008a16:	4603      	mov	r3, r0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a28:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <USBD_static_malloc+0x14>)
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bc80      	pop	{r7}
 8008a32:	4770      	bx	lr
 8008a34:	20001240 	.word	0x20001240

08008a38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]

}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr
	...

08008a4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d817      	bhi.n	8008a90 <USBD_Get_USB_Status+0x44>
 8008a60:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <USBD_Get_USB_Status+0x1c>)
 8008a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a66:	bf00      	nop
 8008a68:	08008a79 	.word	0x08008a79
 8008a6c:	08008a7f 	.word	0x08008a7f
 8008a70:	08008a85 	.word	0x08008a85
 8008a74:	08008a8b 	.word	0x08008a8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7c:	e00b      	b.n	8008a96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	73fb      	strb	r3, [r7, #15]
    break;
 8008a82:	e008      	b.n	8008a96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
    break;
 8008a88:	e005      	b.n	8008a96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8e:	e002      	b.n	8008a96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a90:	2302      	movs	r3, #2
 8008a92:	73fb      	strb	r3, [r7, #15]
    break;
 8008a94:	bf00      	nop
  }
  return usb_status;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop

08008aa4 <__errno>:
 8008aa4:	4b01      	ldr	r3, [pc, #4]	; (8008aac <__errno+0x8>)
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	2000017c 	.word	0x2000017c

08008ab0 <__libc_init_array>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	4d0c      	ldr	r5, [pc, #48]	; (8008ae8 <__libc_init_array+0x38>)
 8008ab6:	4c0d      	ldr	r4, [pc, #52]	; (8008aec <__libc_init_array+0x3c>)
 8008ab8:	1b64      	subs	r4, r4, r5
 8008aba:	10a4      	asrs	r4, r4, #2
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	d109      	bne.n	8008ad4 <__libc_init_array+0x24>
 8008ac0:	f000 fc9c 	bl	80093fc <_init>
 8008ac4:	2600      	movs	r6, #0
 8008ac6:	4d0a      	ldr	r5, [pc, #40]	; (8008af0 <__libc_init_array+0x40>)
 8008ac8:	4c0a      	ldr	r4, [pc, #40]	; (8008af4 <__libc_init_array+0x44>)
 8008aca:	1b64      	subs	r4, r4, r5
 8008acc:	10a4      	asrs	r4, r4, #2
 8008ace:	42a6      	cmp	r6, r4
 8008ad0:	d105      	bne.n	8008ade <__libc_init_array+0x2e>
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad8:	4798      	blx	r3
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7ee      	b.n	8008abc <__libc_init_array+0xc>
 8008ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae2:	4798      	blx	r3
 8008ae4:	3601      	adds	r6, #1
 8008ae6:	e7f2      	b.n	8008ace <__libc_init_array+0x1e>
 8008ae8:	080094e4 	.word	0x080094e4
 8008aec:	080094e4 	.word	0x080094e4
 8008af0:	080094e4 	.word	0x080094e4
 8008af4:	080094e8 	.word	0x080094e8

08008af8 <memset>:
 8008af8:	4603      	mov	r3, r0
 8008afa:	4402      	add	r2, r0
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d100      	bne.n	8008b02 <memset+0xa>
 8008b00:	4770      	bx	lr
 8008b02:	f803 1b01 	strb.w	r1, [r3], #1
 8008b06:	e7f9      	b.n	8008afc <memset+0x4>

08008b08 <siprintf>:
 8008b08:	b40e      	push	{r1, r2, r3}
 8008b0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b0e:	b500      	push	{lr}
 8008b10:	b09c      	sub	sp, #112	; 0x70
 8008b12:	ab1d      	add	r3, sp, #116	; 0x74
 8008b14:	9002      	str	r0, [sp, #8]
 8008b16:	9006      	str	r0, [sp, #24]
 8008b18:	9107      	str	r1, [sp, #28]
 8008b1a:	9104      	str	r1, [sp, #16]
 8008b1c:	4808      	ldr	r0, [pc, #32]	; (8008b40 <siprintf+0x38>)
 8008b1e:	4909      	ldr	r1, [pc, #36]	; (8008b44 <siprintf+0x3c>)
 8008b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b24:	9105      	str	r1, [sp, #20]
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	a902      	add	r1, sp, #8
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	f000 f868 	bl	8008c00 <_svfiprintf_r>
 8008b30:	2200      	movs	r2, #0
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	b01c      	add	sp, #112	; 0x70
 8008b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b3c:	b003      	add	sp, #12
 8008b3e:	4770      	bx	lr
 8008b40:	2000017c 	.word	0x2000017c
 8008b44:	ffff0208 	.word	0xffff0208

08008b48 <__ssputs_r>:
 8008b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	688e      	ldr	r6, [r1, #8]
 8008b4e:	4682      	mov	sl, r0
 8008b50:	429e      	cmp	r6, r3
 8008b52:	460c      	mov	r4, r1
 8008b54:	4690      	mov	r8, r2
 8008b56:	461f      	mov	r7, r3
 8008b58:	d838      	bhi.n	8008bcc <__ssputs_r+0x84>
 8008b5a:	898a      	ldrh	r2, [r1, #12]
 8008b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b60:	d032      	beq.n	8008bc8 <__ssputs_r+0x80>
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	6909      	ldr	r1, [r1, #16]
 8008b66:	3301      	adds	r3, #1
 8008b68:	eba5 0901 	sub.w	r9, r5, r1
 8008b6c:	6965      	ldr	r5, [r4, #20]
 8008b6e:	444b      	add	r3, r9
 8008b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b78:	106d      	asrs	r5, r5, #1
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	bf38      	it	cc
 8008b7e:	461d      	movcc	r5, r3
 8008b80:	0553      	lsls	r3, r2, #21
 8008b82:	d531      	bpl.n	8008be8 <__ssputs_r+0xa0>
 8008b84:	4629      	mov	r1, r5
 8008b86:	f000 fb6f 	bl	8009268 <_malloc_r>
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	b950      	cbnz	r0, 8008ba4 <__ssputs_r+0x5c>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	f8ca 3000 	str.w	r3, [sl]
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba4:	464a      	mov	r2, r9
 8008ba6:	6921      	ldr	r1, [r4, #16]
 8008ba8:	f000 face 	bl	8009148 <memcpy>
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	6126      	str	r6, [r4, #16]
 8008bba:	444e      	add	r6, r9
 8008bbc:	6026      	str	r6, [r4, #0]
 8008bbe:	463e      	mov	r6, r7
 8008bc0:	6165      	str	r5, [r4, #20]
 8008bc2:	eba5 0509 	sub.w	r5, r5, r9
 8008bc6:	60a5      	str	r5, [r4, #8]
 8008bc8:	42be      	cmp	r6, r7
 8008bca:	d900      	bls.n	8008bce <__ssputs_r+0x86>
 8008bcc:	463e      	mov	r6, r7
 8008bce:	4632      	mov	r2, r6
 8008bd0:	4641      	mov	r1, r8
 8008bd2:	6820      	ldr	r0, [r4, #0]
 8008bd4:	f000 fac6 	bl	8009164 <memmove>
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	2000      	movs	r0, #0
 8008bdc:	1b9b      	subs	r3, r3, r6
 8008bde:	60a3      	str	r3, [r4, #8]
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	4433      	add	r3, r6
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	e7db      	b.n	8008ba0 <__ssputs_r+0x58>
 8008be8:	462a      	mov	r2, r5
 8008bea:	f000 fbb1 	bl	8009350 <_realloc_r>
 8008bee:	4606      	mov	r6, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d1e1      	bne.n	8008bb8 <__ssputs_r+0x70>
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	6921      	ldr	r1, [r4, #16]
 8008bf8:	f000 face 	bl	8009198 <_free_r>
 8008bfc:	e7c7      	b.n	8008b8e <__ssputs_r+0x46>
	...

08008c00 <_svfiprintf_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	4698      	mov	r8, r3
 8008c06:	898b      	ldrh	r3, [r1, #12]
 8008c08:	4607      	mov	r7, r0
 8008c0a:	061b      	lsls	r3, r3, #24
 8008c0c:	460d      	mov	r5, r1
 8008c0e:	4614      	mov	r4, r2
 8008c10:	b09d      	sub	sp, #116	; 0x74
 8008c12:	d50e      	bpl.n	8008c32 <_svfiprintf_r+0x32>
 8008c14:	690b      	ldr	r3, [r1, #16]
 8008c16:	b963      	cbnz	r3, 8008c32 <_svfiprintf_r+0x32>
 8008c18:	2140      	movs	r1, #64	; 0x40
 8008c1a:	f000 fb25 	bl	8009268 <_malloc_r>
 8008c1e:	6028      	str	r0, [r5, #0]
 8008c20:	6128      	str	r0, [r5, #16]
 8008c22:	b920      	cbnz	r0, 8008c2e <_svfiprintf_r+0x2e>
 8008c24:	230c      	movs	r3, #12
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	e0d1      	b.n	8008dd2 <_svfiprintf_r+0x1d2>
 8008c2e:	2340      	movs	r3, #64	; 0x40
 8008c30:	616b      	str	r3, [r5, #20]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9309      	str	r3, [sp, #36]	; 0x24
 8008c36:	2320      	movs	r3, #32
 8008c38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c3c:	2330      	movs	r3, #48	; 0x30
 8008c3e:	f04f 0901 	mov.w	r9, #1
 8008c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008dec <_svfiprintf_r+0x1ec>
 8008c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c4e:	4623      	mov	r3, r4
 8008c50:	469a      	mov	sl, r3
 8008c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c56:	b10a      	cbz	r2, 8008c5c <_svfiprintf_r+0x5c>
 8008c58:	2a25      	cmp	r2, #37	; 0x25
 8008c5a:	d1f9      	bne.n	8008c50 <_svfiprintf_r+0x50>
 8008c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c60:	d00b      	beq.n	8008c7a <_svfiprintf_r+0x7a>
 8008c62:	465b      	mov	r3, fp
 8008c64:	4622      	mov	r2, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff ff6d 	bl	8008b48 <__ssputs_r>
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f000 80aa 	beq.w	8008dc8 <_svfiprintf_r+0x1c8>
 8008c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c76:	445a      	add	r2, fp
 8008c78:	9209      	str	r2, [sp, #36]	; 0x24
 8008c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 80a2 	beq.w	8008dc8 <_svfiprintf_r+0x1c8>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8e:	f10a 0a01 	add.w	sl, sl, #1
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	9307      	str	r3, [sp, #28]
 8008c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c9c:	4654      	mov	r4, sl
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	4851      	ldr	r0, [pc, #324]	; (8008dec <_svfiprintf_r+0x1ec>)
 8008ca6:	f000 fa41 	bl	800912c <memchr>
 8008caa:	9a04      	ldr	r2, [sp, #16]
 8008cac:	b9d8      	cbnz	r0, 8008ce6 <_svfiprintf_r+0xe6>
 8008cae:	06d0      	lsls	r0, r2, #27
 8008cb0:	bf44      	itt	mi
 8008cb2:	2320      	movmi	r3, #32
 8008cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb8:	0711      	lsls	r1, r2, #28
 8008cba:	bf44      	itt	mi
 8008cbc:	232b      	movmi	r3, #43	; 0x2b
 8008cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc8:	d015      	beq.n	8008cf6 <_svfiprintf_r+0xf6>
 8008cca:	4654      	mov	r4, sl
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f04f 0c0a 	mov.w	ip, #10
 8008cd2:	9a07      	ldr	r2, [sp, #28]
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cda:	3b30      	subs	r3, #48	; 0x30
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d94e      	bls.n	8008d7e <_svfiprintf_r+0x17e>
 8008ce0:	b1b0      	cbz	r0, 8008d10 <_svfiprintf_r+0x110>
 8008ce2:	9207      	str	r2, [sp, #28]
 8008ce4:	e014      	b.n	8008d10 <_svfiprintf_r+0x110>
 8008ce6:	eba0 0308 	sub.w	r3, r0, r8
 8008cea:	fa09 f303 	lsl.w	r3, r9, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	46a2      	mov	sl, r4
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	e7d2      	b.n	8008c9c <_svfiprintf_r+0x9c>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	1d19      	adds	r1, r3, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	9103      	str	r1, [sp, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfbb      	ittet	lt
 8008d02:	425b      	neglt	r3, r3
 8008d04:	f042 0202 	orrlt.w	r2, r2, #2
 8008d08:	9307      	strge	r3, [sp, #28]
 8008d0a:	9307      	strlt	r3, [sp, #28]
 8008d0c:	bfb8      	it	lt
 8008d0e:	9204      	strlt	r2, [sp, #16]
 8008d10:	7823      	ldrb	r3, [r4, #0]
 8008d12:	2b2e      	cmp	r3, #46	; 0x2e
 8008d14:	d10c      	bne.n	8008d30 <_svfiprintf_r+0x130>
 8008d16:	7863      	ldrb	r3, [r4, #1]
 8008d18:	2b2a      	cmp	r3, #42	; 0x2a
 8008d1a:	d135      	bne.n	8008d88 <_svfiprintf_r+0x188>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	3402      	adds	r4, #2
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	9203      	str	r2, [sp, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	bfb8      	it	lt
 8008d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d2e:	9305      	str	r3, [sp, #20]
 8008d30:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008df0 <_svfiprintf_r+0x1f0>
 8008d34:	2203      	movs	r2, #3
 8008d36:	4650      	mov	r0, sl
 8008d38:	7821      	ldrb	r1, [r4, #0]
 8008d3a:	f000 f9f7 	bl	800912c <memchr>
 8008d3e:	b140      	cbz	r0, 8008d52 <_svfiprintf_r+0x152>
 8008d40:	2340      	movs	r3, #64	; 0x40
 8008d42:	eba0 000a 	sub.w	r0, r0, sl
 8008d46:	fa03 f000 	lsl.w	r0, r3, r0
 8008d4a:	9b04      	ldr	r3, [sp, #16]
 8008d4c:	3401      	adds	r4, #1
 8008d4e:	4303      	orrs	r3, r0
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d56:	2206      	movs	r2, #6
 8008d58:	4826      	ldr	r0, [pc, #152]	; (8008df4 <_svfiprintf_r+0x1f4>)
 8008d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d5e:	f000 f9e5 	bl	800912c <memchr>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d038      	beq.n	8008dd8 <_svfiprintf_r+0x1d8>
 8008d66:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <_svfiprintf_r+0x1f8>)
 8008d68:	bb1b      	cbnz	r3, 8008db2 <_svfiprintf_r+0x1b2>
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	3307      	adds	r3, #7
 8008d6e:	f023 0307 	bic.w	r3, r3, #7
 8008d72:	3308      	adds	r3, #8
 8008d74:	9303      	str	r3, [sp, #12]
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	4433      	add	r3, r6
 8008d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7c:	e767      	b.n	8008c4e <_svfiprintf_r+0x4e>
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2001      	movs	r0, #1
 8008d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d86:	e7a5      	b.n	8008cd4 <_svfiprintf_r+0xd4>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f04f 0c0a 	mov.w	ip, #10
 8008d8e:	4619      	mov	r1, r3
 8008d90:	3401      	adds	r4, #1
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	4620      	mov	r0, r4
 8008d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d9a:	3a30      	subs	r2, #48	; 0x30
 8008d9c:	2a09      	cmp	r2, #9
 8008d9e:	d903      	bls.n	8008da8 <_svfiprintf_r+0x1a8>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0c5      	beq.n	8008d30 <_svfiprintf_r+0x130>
 8008da4:	9105      	str	r1, [sp, #20]
 8008da6:	e7c3      	b.n	8008d30 <_svfiprintf_r+0x130>
 8008da8:	4604      	mov	r4, r0
 8008daa:	2301      	movs	r3, #1
 8008dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db0:	e7f0      	b.n	8008d94 <_svfiprintf_r+0x194>
 8008db2:	ab03      	add	r3, sp, #12
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	462a      	mov	r2, r5
 8008db8:	4638      	mov	r0, r7
 8008dba:	4b10      	ldr	r3, [pc, #64]	; (8008dfc <_svfiprintf_r+0x1fc>)
 8008dbc:	a904      	add	r1, sp, #16
 8008dbe:	f3af 8000 	nop.w
 8008dc2:	1c42      	adds	r2, r0, #1
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	d1d6      	bne.n	8008d76 <_svfiprintf_r+0x176>
 8008dc8:	89ab      	ldrh	r3, [r5, #12]
 8008dca:	065b      	lsls	r3, r3, #25
 8008dcc:	f53f af2c 	bmi.w	8008c28 <_svfiprintf_r+0x28>
 8008dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dd2:	b01d      	add	sp, #116	; 0x74
 8008dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd8:	ab03      	add	r3, sp, #12
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	462a      	mov	r2, r5
 8008dde:	4638      	mov	r0, r7
 8008de0:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <_svfiprintf_r+0x1fc>)
 8008de2:	a904      	add	r1, sp, #16
 8008de4:	f000 f87c 	bl	8008ee0 <_printf_i>
 8008de8:	e7eb      	b.n	8008dc2 <_svfiprintf_r+0x1c2>
 8008dea:	bf00      	nop
 8008dec:	080094a8 	.word	0x080094a8
 8008df0:	080094ae 	.word	0x080094ae
 8008df4:	080094b2 	.word	0x080094b2
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	08008b49 	.word	0x08008b49

08008e00 <_printf_common>:
 8008e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e04:	4616      	mov	r6, r2
 8008e06:	4699      	mov	r9, r3
 8008e08:	688a      	ldr	r2, [r1, #8]
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	bfb8      	it	lt
 8008e12:	4613      	movlt	r3, r2
 8008e14:	6033      	str	r3, [r6, #0]
 8008e16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e20:	b10a      	cbz	r2, 8008e26 <_printf_common+0x26>
 8008e22:	3301      	adds	r3, #1
 8008e24:	6033      	str	r3, [r6, #0]
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	0699      	lsls	r1, r3, #26
 8008e2a:	bf42      	ittt	mi
 8008e2c:	6833      	ldrmi	r3, [r6, #0]
 8008e2e:	3302      	addmi	r3, #2
 8008e30:	6033      	strmi	r3, [r6, #0]
 8008e32:	6825      	ldr	r5, [r4, #0]
 8008e34:	f015 0506 	ands.w	r5, r5, #6
 8008e38:	d106      	bne.n	8008e48 <_printf_common+0x48>
 8008e3a:	f104 0a19 	add.w	sl, r4, #25
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	6832      	ldr	r2, [r6, #0]
 8008e42:	1a9b      	subs	r3, r3, r2
 8008e44:	42ab      	cmp	r3, r5
 8008e46:	dc28      	bgt.n	8008e9a <_printf_common+0x9a>
 8008e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e4c:	1e13      	subs	r3, r2, #0
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	bf18      	it	ne
 8008e52:	2301      	movne	r3, #1
 8008e54:	0692      	lsls	r2, r2, #26
 8008e56:	d42d      	bmi.n	8008eb4 <_printf_common+0xb4>
 8008e58:	4649      	mov	r1, r9
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e60:	47c0      	blx	r8
 8008e62:	3001      	adds	r0, #1
 8008e64:	d020      	beq.n	8008ea8 <_printf_common+0xa8>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	68e5      	ldr	r5, [r4, #12]
 8008e6a:	f003 0306 	and.w	r3, r3, #6
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	bf18      	it	ne
 8008e72:	2500      	movne	r5, #0
 8008e74:	6832      	ldr	r2, [r6, #0]
 8008e76:	f04f 0600 	mov.w	r6, #0
 8008e7a:	68a3      	ldr	r3, [r4, #8]
 8008e7c:	bf08      	it	eq
 8008e7e:	1aad      	subeq	r5, r5, r2
 8008e80:	6922      	ldr	r2, [r4, #16]
 8008e82:	bf08      	it	eq
 8008e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	bfc4      	itt	gt
 8008e8c:	1a9b      	subgt	r3, r3, r2
 8008e8e:	18ed      	addgt	r5, r5, r3
 8008e90:	341a      	adds	r4, #26
 8008e92:	42b5      	cmp	r5, r6
 8008e94:	d11a      	bne.n	8008ecc <_printf_common+0xcc>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e008      	b.n	8008eac <_printf_common+0xac>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	47c0      	blx	r8
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d103      	bne.n	8008eb0 <_printf_common+0xb0>
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	e7c4      	b.n	8008e3e <_printf_common+0x3e>
 8008eb4:	2030      	movs	r0, #48	; 0x30
 8008eb6:	18e1      	adds	r1, r4, r3
 8008eb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ec2:	4422      	add	r2, r4
 8008ec4:	3302      	adds	r3, #2
 8008ec6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eca:	e7c5      	b.n	8008e58 <_printf_common+0x58>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4622      	mov	r2, r4
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	47c0      	blx	r8
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	d0e6      	beq.n	8008ea8 <_printf_common+0xa8>
 8008eda:	3601      	adds	r6, #1
 8008edc:	e7d9      	b.n	8008e92 <_printf_common+0x92>
	...

08008ee0 <_printf_i>:
 8008ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee4:	7e0f      	ldrb	r7, [r1, #24]
 8008ee6:	4691      	mov	r9, r2
 8008ee8:	2f78      	cmp	r7, #120	; 0x78
 8008eea:	4680      	mov	r8, r0
 8008eec:	460c      	mov	r4, r1
 8008eee:	469a      	mov	sl, r3
 8008ef0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ef6:	d807      	bhi.n	8008f08 <_printf_i+0x28>
 8008ef8:	2f62      	cmp	r7, #98	; 0x62
 8008efa:	d80a      	bhi.n	8008f12 <_printf_i+0x32>
 8008efc:	2f00      	cmp	r7, #0
 8008efe:	f000 80d9 	beq.w	80090b4 <_printf_i+0x1d4>
 8008f02:	2f58      	cmp	r7, #88	; 0x58
 8008f04:	f000 80a4 	beq.w	8009050 <_printf_i+0x170>
 8008f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f10:	e03a      	b.n	8008f88 <_printf_i+0xa8>
 8008f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f16:	2b15      	cmp	r3, #21
 8008f18:	d8f6      	bhi.n	8008f08 <_printf_i+0x28>
 8008f1a:	a101      	add	r1, pc, #4	; (adr r1, 8008f20 <_printf_i+0x40>)
 8008f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f20:	08008f79 	.word	0x08008f79
 8008f24:	08008f8d 	.word	0x08008f8d
 8008f28:	08008f09 	.word	0x08008f09
 8008f2c:	08008f09 	.word	0x08008f09
 8008f30:	08008f09 	.word	0x08008f09
 8008f34:	08008f09 	.word	0x08008f09
 8008f38:	08008f8d 	.word	0x08008f8d
 8008f3c:	08008f09 	.word	0x08008f09
 8008f40:	08008f09 	.word	0x08008f09
 8008f44:	08008f09 	.word	0x08008f09
 8008f48:	08008f09 	.word	0x08008f09
 8008f4c:	0800909b 	.word	0x0800909b
 8008f50:	08008fbd 	.word	0x08008fbd
 8008f54:	0800907d 	.word	0x0800907d
 8008f58:	08008f09 	.word	0x08008f09
 8008f5c:	08008f09 	.word	0x08008f09
 8008f60:	080090bd 	.word	0x080090bd
 8008f64:	08008f09 	.word	0x08008f09
 8008f68:	08008fbd 	.word	0x08008fbd
 8008f6c:	08008f09 	.word	0x08008f09
 8008f70:	08008f09 	.word	0x08008f09
 8008f74:	08009085 	.word	0x08009085
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	1d1a      	adds	r2, r3, #4
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	602a      	str	r2, [r5, #0]
 8008f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e0a4      	b.n	80090d6 <_printf_i+0x1f6>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	6829      	ldr	r1, [r5, #0]
 8008f90:	0606      	lsls	r6, r0, #24
 8008f92:	f101 0304 	add.w	r3, r1, #4
 8008f96:	d50a      	bpl.n	8008fae <_printf_i+0xce>
 8008f98:	680e      	ldr	r6, [r1, #0]
 8008f9a:	602b      	str	r3, [r5, #0]
 8008f9c:	2e00      	cmp	r6, #0
 8008f9e:	da03      	bge.n	8008fa8 <_printf_i+0xc8>
 8008fa0:	232d      	movs	r3, #45	; 0x2d
 8008fa2:	4276      	negs	r6, r6
 8008fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa8:	230a      	movs	r3, #10
 8008faa:	485e      	ldr	r0, [pc, #376]	; (8009124 <_printf_i+0x244>)
 8008fac:	e019      	b.n	8008fe2 <_printf_i+0x102>
 8008fae:	680e      	ldr	r6, [r1, #0]
 8008fb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fb4:	602b      	str	r3, [r5, #0]
 8008fb6:	bf18      	it	ne
 8008fb8:	b236      	sxthne	r6, r6
 8008fba:	e7ef      	b.n	8008f9c <_printf_i+0xbc>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	6820      	ldr	r0, [r4, #0]
 8008fc0:	1d19      	adds	r1, r3, #4
 8008fc2:	6029      	str	r1, [r5, #0]
 8008fc4:	0601      	lsls	r1, r0, #24
 8008fc6:	d501      	bpl.n	8008fcc <_printf_i+0xec>
 8008fc8:	681e      	ldr	r6, [r3, #0]
 8008fca:	e002      	b.n	8008fd2 <_printf_i+0xf2>
 8008fcc:	0646      	lsls	r6, r0, #25
 8008fce:	d5fb      	bpl.n	8008fc8 <_printf_i+0xe8>
 8008fd0:	881e      	ldrh	r6, [r3, #0]
 8008fd2:	2f6f      	cmp	r7, #111	; 0x6f
 8008fd4:	bf0c      	ite	eq
 8008fd6:	2308      	moveq	r3, #8
 8008fd8:	230a      	movne	r3, #10
 8008fda:	4852      	ldr	r0, [pc, #328]	; (8009124 <_printf_i+0x244>)
 8008fdc:	2100      	movs	r1, #0
 8008fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fe2:	6865      	ldr	r5, [r4, #4]
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	bfa8      	it	ge
 8008fe8:	6821      	ldrge	r1, [r4, #0]
 8008fea:	60a5      	str	r5, [r4, #8]
 8008fec:	bfa4      	itt	ge
 8008fee:	f021 0104 	bicge.w	r1, r1, #4
 8008ff2:	6021      	strge	r1, [r4, #0]
 8008ff4:	b90e      	cbnz	r6, 8008ffa <_printf_i+0x11a>
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	d04d      	beq.n	8009096 <_printf_i+0x1b6>
 8008ffa:	4615      	mov	r5, r2
 8008ffc:	fbb6 f1f3 	udiv	r1, r6, r3
 8009000:	fb03 6711 	mls	r7, r3, r1, r6
 8009004:	5dc7      	ldrb	r7, [r0, r7]
 8009006:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800900a:	4637      	mov	r7, r6
 800900c:	42bb      	cmp	r3, r7
 800900e:	460e      	mov	r6, r1
 8009010:	d9f4      	bls.n	8008ffc <_printf_i+0x11c>
 8009012:	2b08      	cmp	r3, #8
 8009014:	d10b      	bne.n	800902e <_printf_i+0x14e>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	07de      	lsls	r6, r3, #31
 800901a:	d508      	bpl.n	800902e <_printf_i+0x14e>
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	6861      	ldr	r1, [r4, #4]
 8009020:	4299      	cmp	r1, r3
 8009022:	bfde      	ittt	le
 8009024:	2330      	movle	r3, #48	; 0x30
 8009026:	f805 3c01 	strble.w	r3, [r5, #-1]
 800902a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800902e:	1b52      	subs	r2, r2, r5
 8009030:	6122      	str	r2, [r4, #16]
 8009032:	464b      	mov	r3, r9
 8009034:	4621      	mov	r1, r4
 8009036:	4640      	mov	r0, r8
 8009038:	f8cd a000 	str.w	sl, [sp]
 800903c:	aa03      	add	r2, sp, #12
 800903e:	f7ff fedf 	bl	8008e00 <_printf_common>
 8009042:	3001      	adds	r0, #1
 8009044:	d14c      	bne.n	80090e0 <_printf_i+0x200>
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	b004      	add	sp, #16
 800904c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009050:	4834      	ldr	r0, [pc, #208]	; (8009124 <_printf_i+0x244>)
 8009052:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009056:	6829      	ldr	r1, [r5, #0]
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	f851 6b04 	ldr.w	r6, [r1], #4
 800905e:	6029      	str	r1, [r5, #0]
 8009060:	061d      	lsls	r5, r3, #24
 8009062:	d514      	bpl.n	800908e <_printf_i+0x1ae>
 8009064:	07df      	lsls	r7, r3, #31
 8009066:	bf44      	itt	mi
 8009068:	f043 0320 	orrmi.w	r3, r3, #32
 800906c:	6023      	strmi	r3, [r4, #0]
 800906e:	b91e      	cbnz	r6, 8009078 <_printf_i+0x198>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	f023 0320 	bic.w	r3, r3, #32
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	2310      	movs	r3, #16
 800907a:	e7af      	b.n	8008fdc <_printf_i+0xfc>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	f043 0320 	orr.w	r3, r3, #32
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	2378      	movs	r3, #120	; 0x78
 8009086:	4828      	ldr	r0, [pc, #160]	; (8009128 <_printf_i+0x248>)
 8009088:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800908c:	e7e3      	b.n	8009056 <_printf_i+0x176>
 800908e:	0659      	lsls	r1, r3, #25
 8009090:	bf48      	it	mi
 8009092:	b2b6      	uxthmi	r6, r6
 8009094:	e7e6      	b.n	8009064 <_printf_i+0x184>
 8009096:	4615      	mov	r5, r2
 8009098:	e7bb      	b.n	8009012 <_printf_i+0x132>
 800909a:	682b      	ldr	r3, [r5, #0]
 800909c:	6826      	ldr	r6, [r4, #0]
 800909e:	1d18      	adds	r0, r3, #4
 80090a0:	6961      	ldr	r1, [r4, #20]
 80090a2:	6028      	str	r0, [r5, #0]
 80090a4:	0635      	lsls	r5, r6, #24
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	d501      	bpl.n	80090ae <_printf_i+0x1ce>
 80090aa:	6019      	str	r1, [r3, #0]
 80090ac:	e002      	b.n	80090b4 <_printf_i+0x1d4>
 80090ae:	0670      	lsls	r0, r6, #25
 80090b0:	d5fb      	bpl.n	80090aa <_printf_i+0x1ca>
 80090b2:	8019      	strh	r1, [r3, #0]
 80090b4:	2300      	movs	r3, #0
 80090b6:	4615      	mov	r5, r2
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	e7ba      	b.n	8009032 <_printf_i+0x152>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	2100      	movs	r1, #0
 80090c0:	1d1a      	adds	r2, r3, #4
 80090c2:	602a      	str	r2, [r5, #0]
 80090c4:	681d      	ldr	r5, [r3, #0]
 80090c6:	6862      	ldr	r2, [r4, #4]
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 f82f 	bl	800912c <memchr>
 80090ce:	b108      	cbz	r0, 80090d4 <_printf_i+0x1f4>
 80090d0:	1b40      	subs	r0, r0, r5
 80090d2:	6060      	str	r0, [r4, #4]
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	2300      	movs	r3, #0
 80090da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090de:	e7a8      	b.n	8009032 <_printf_i+0x152>
 80090e0:	462a      	mov	r2, r5
 80090e2:	4649      	mov	r1, r9
 80090e4:	4640      	mov	r0, r8
 80090e6:	6923      	ldr	r3, [r4, #16]
 80090e8:	47d0      	blx	sl
 80090ea:	3001      	adds	r0, #1
 80090ec:	d0ab      	beq.n	8009046 <_printf_i+0x166>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	079b      	lsls	r3, r3, #30
 80090f2:	d413      	bmi.n	800911c <_printf_i+0x23c>
 80090f4:	68e0      	ldr	r0, [r4, #12]
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	4298      	cmp	r0, r3
 80090fa:	bfb8      	it	lt
 80090fc:	4618      	movlt	r0, r3
 80090fe:	e7a4      	b.n	800904a <_printf_i+0x16a>
 8009100:	2301      	movs	r3, #1
 8009102:	4632      	mov	r2, r6
 8009104:	4649      	mov	r1, r9
 8009106:	4640      	mov	r0, r8
 8009108:	47d0      	blx	sl
 800910a:	3001      	adds	r0, #1
 800910c:	d09b      	beq.n	8009046 <_printf_i+0x166>
 800910e:	3501      	adds	r5, #1
 8009110:	68e3      	ldr	r3, [r4, #12]
 8009112:	9903      	ldr	r1, [sp, #12]
 8009114:	1a5b      	subs	r3, r3, r1
 8009116:	42ab      	cmp	r3, r5
 8009118:	dcf2      	bgt.n	8009100 <_printf_i+0x220>
 800911a:	e7eb      	b.n	80090f4 <_printf_i+0x214>
 800911c:	2500      	movs	r5, #0
 800911e:	f104 0619 	add.w	r6, r4, #25
 8009122:	e7f5      	b.n	8009110 <_printf_i+0x230>
 8009124:	080094b9 	.word	0x080094b9
 8009128:	080094ca 	.word	0x080094ca

0800912c <memchr>:
 800912c:	4603      	mov	r3, r0
 800912e:	b510      	push	{r4, lr}
 8009130:	b2c9      	uxtb	r1, r1
 8009132:	4402      	add	r2, r0
 8009134:	4293      	cmp	r3, r2
 8009136:	4618      	mov	r0, r3
 8009138:	d101      	bne.n	800913e <memchr+0x12>
 800913a:	2000      	movs	r0, #0
 800913c:	e003      	b.n	8009146 <memchr+0x1a>
 800913e:	7804      	ldrb	r4, [r0, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	428c      	cmp	r4, r1
 8009144:	d1f6      	bne.n	8009134 <memchr+0x8>
 8009146:	bd10      	pop	{r4, pc}

08009148 <memcpy>:
 8009148:	440a      	add	r2, r1
 800914a:	4291      	cmp	r1, r2
 800914c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009150:	d100      	bne.n	8009154 <memcpy+0xc>
 8009152:	4770      	bx	lr
 8009154:	b510      	push	{r4, lr}
 8009156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800915a:	4291      	cmp	r1, r2
 800915c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009160:	d1f9      	bne.n	8009156 <memcpy+0xe>
 8009162:	bd10      	pop	{r4, pc}

08009164 <memmove>:
 8009164:	4288      	cmp	r0, r1
 8009166:	b510      	push	{r4, lr}
 8009168:	eb01 0402 	add.w	r4, r1, r2
 800916c:	d902      	bls.n	8009174 <memmove+0x10>
 800916e:	4284      	cmp	r4, r0
 8009170:	4623      	mov	r3, r4
 8009172:	d807      	bhi.n	8009184 <memmove+0x20>
 8009174:	1e43      	subs	r3, r0, #1
 8009176:	42a1      	cmp	r1, r4
 8009178:	d008      	beq.n	800918c <memmove+0x28>
 800917a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800917e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009182:	e7f8      	b.n	8009176 <memmove+0x12>
 8009184:	4601      	mov	r1, r0
 8009186:	4402      	add	r2, r0
 8009188:	428a      	cmp	r2, r1
 800918a:	d100      	bne.n	800918e <memmove+0x2a>
 800918c:	bd10      	pop	{r4, pc}
 800918e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009196:	e7f7      	b.n	8009188 <memmove+0x24>

08009198 <_free_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4605      	mov	r5, r0
 800919c:	2900      	cmp	r1, #0
 800919e:	d040      	beq.n	8009222 <_free_r+0x8a>
 80091a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a4:	1f0c      	subs	r4, r1, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfb8      	it	lt
 80091aa:	18e4      	addlt	r4, r4, r3
 80091ac:	f000 f910 	bl	80093d0 <__malloc_lock>
 80091b0:	4a1c      	ldr	r2, [pc, #112]	; (8009224 <_free_r+0x8c>)
 80091b2:	6813      	ldr	r3, [r2, #0]
 80091b4:	b933      	cbnz	r3, 80091c4 <_free_r+0x2c>
 80091b6:	6063      	str	r3, [r4, #4]
 80091b8:	6014      	str	r4, [r2, #0]
 80091ba:	4628      	mov	r0, r5
 80091bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c0:	f000 b90c 	b.w	80093dc <__malloc_unlock>
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	d908      	bls.n	80091da <_free_r+0x42>
 80091c8:	6820      	ldr	r0, [r4, #0]
 80091ca:	1821      	adds	r1, r4, r0
 80091cc:	428b      	cmp	r3, r1
 80091ce:	bf01      	itttt	eq
 80091d0:	6819      	ldreq	r1, [r3, #0]
 80091d2:	685b      	ldreq	r3, [r3, #4]
 80091d4:	1809      	addeq	r1, r1, r0
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	e7ed      	b.n	80091b6 <_free_r+0x1e>
 80091da:	461a      	mov	r2, r3
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	b10b      	cbz	r3, 80091e4 <_free_r+0x4c>
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	d9fa      	bls.n	80091da <_free_r+0x42>
 80091e4:	6811      	ldr	r1, [r2, #0]
 80091e6:	1850      	adds	r0, r2, r1
 80091e8:	42a0      	cmp	r0, r4
 80091ea:	d10b      	bne.n	8009204 <_free_r+0x6c>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	4401      	add	r1, r0
 80091f0:	1850      	adds	r0, r2, r1
 80091f2:	4283      	cmp	r3, r0
 80091f4:	6011      	str	r1, [r2, #0]
 80091f6:	d1e0      	bne.n	80091ba <_free_r+0x22>
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	4401      	add	r1, r0
 80091fe:	6011      	str	r1, [r2, #0]
 8009200:	6053      	str	r3, [r2, #4]
 8009202:	e7da      	b.n	80091ba <_free_r+0x22>
 8009204:	d902      	bls.n	800920c <_free_r+0x74>
 8009206:	230c      	movs	r3, #12
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	e7d6      	b.n	80091ba <_free_r+0x22>
 800920c:	6820      	ldr	r0, [r4, #0]
 800920e:	1821      	adds	r1, r4, r0
 8009210:	428b      	cmp	r3, r1
 8009212:	bf01      	itttt	eq
 8009214:	6819      	ldreq	r1, [r3, #0]
 8009216:	685b      	ldreq	r3, [r3, #4]
 8009218:	1809      	addeq	r1, r1, r0
 800921a:	6021      	streq	r1, [r4, #0]
 800921c:	6063      	str	r3, [r4, #4]
 800921e:	6054      	str	r4, [r2, #4]
 8009220:	e7cb      	b.n	80091ba <_free_r+0x22>
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	20001460 	.word	0x20001460

08009228 <sbrk_aligned>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4e0e      	ldr	r6, [pc, #56]	; (8009264 <sbrk_aligned+0x3c>)
 800922c:	460c      	mov	r4, r1
 800922e:	6831      	ldr	r1, [r6, #0]
 8009230:	4605      	mov	r5, r0
 8009232:	b911      	cbnz	r1, 800923a <sbrk_aligned+0x12>
 8009234:	f000 f8bc 	bl	80093b0 <_sbrk_r>
 8009238:	6030      	str	r0, [r6, #0]
 800923a:	4621      	mov	r1, r4
 800923c:	4628      	mov	r0, r5
 800923e:	f000 f8b7 	bl	80093b0 <_sbrk_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	d00a      	beq.n	800925c <sbrk_aligned+0x34>
 8009246:	1cc4      	adds	r4, r0, #3
 8009248:	f024 0403 	bic.w	r4, r4, #3
 800924c:	42a0      	cmp	r0, r4
 800924e:	d007      	beq.n	8009260 <sbrk_aligned+0x38>
 8009250:	1a21      	subs	r1, r4, r0
 8009252:	4628      	mov	r0, r5
 8009254:	f000 f8ac 	bl	80093b0 <_sbrk_r>
 8009258:	3001      	adds	r0, #1
 800925a:	d101      	bne.n	8009260 <sbrk_aligned+0x38>
 800925c:	f04f 34ff 	mov.w	r4, #4294967295
 8009260:	4620      	mov	r0, r4
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	20001464 	.word	0x20001464

08009268 <_malloc_r>:
 8009268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926c:	1ccd      	adds	r5, r1, #3
 800926e:	f025 0503 	bic.w	r5, r5, #3
 8009272:	3508      	adds	r5, #8
 8009274:	2d0c      	cmp	r5, #12
 8009276:	bf38      	it	cc
 8009278:	250c      	movcc	r5, #12
 800927a:	2d00      	cmp	r5, #0
 800927c:	4607      	mov	r7, r0
 800927e:	db01      	blt.n	8009284 <_malloc_r+0x1c>
 8009280:	42a9      	cmp	r1, r5
 8009282:	d905      	bls.n	8009290 <_malloc_r+0x28>
 8009284:	230c      	movs	r3, #12
 8009286:	2600      	movs	r6, #0
 8009288:	603b      	str	r3, [r7, #0]
 800928a:	4630      	mov	r0, r6
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009290:	4e2e      	ldr	r6, [pc, #184]	; (800934c <_malloc_r+0xe4>)
 8009292:	f000 f89d 	bl	80093d0 <__malloc_lock>
 8009296:	6833      	ldr	r3, [r6, #0]
 8009298:	461c      	mov	r4, r3
 800929a:	bb34      	cbnz	r4, 80092ea <_malloc_r+0x82>
 800929c:	4629      	mov	r1, r5
 800929e:	4638      	mov	r0, r7
 80092a0:	f7ff ffc2 	bl	8009228 <sbrk_aligned>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	4604      	mov	r4, r0
 80092a8:	d14d      	bne.n	8009346 <_malloc_r+0xde>
 80092aa:	6834      	ldr	r4, [r6, #0]
 80092ac:	4626      	mov	r6, r4
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	d140      	bne.n	8009334 <_malloc_r+0xcc>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	4631      	mov	r1, r6
 80092b6:	4638      	mov	r0, r7
 80092b8:	eb04 0803 	add.w	r8, r4, r3
 80092bc:	f000 f878 	bl	80093b0 <_sbrk_r>
 80092c0:	4580      	cmp	r8, r0
 80092c2:	d13a      	bne.n	800933a <_malloc_r+0xd2>
 80092c4:	6821      	ldr	r1, [r4, #0]
 80092c6:	3503      	adds	r5, #3
 80092c8:	1a6d      	subs	r5, r5, r1
 80092ca:	f025 0503 	bic.w	r5, r5, #3
 80092ce:	3508      	adds	r5, #8
 80092d0:	2d0c      	cmp	r5, #12
 80092d2:	bf38      	it	cc
 80092d4:	250c      	movcc	r5, #12
 80092d6:	4638      	mov	r0, r7
 80092d8:	4629      	mov	r1, r5
 80092da:	f7ff ffa5 	bl	8009228 <sbrk_aligned>
 80092de:	3001      	adds	r0, #1
 80092e0:	d02b      	beq.n	800933a <_malloc_r+0xd2>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	442b      	add	r3, r5
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	e00e      	b.n	8009308 <_malloc_r+0xa0>
 80092ea:	6822      	ldr	r2, [r4, #0]
 80092ec:	1b52      	subs	r2, r2, r5
 80092ee:	d41e      	bmi.n	800932e <_malloc_r+0xc6>
 80092f0:	2a0b      	cmp	r2, #11
 80092f2:	d916      	bls.n	8009322 <_malloc_r+0xba>
 80092f4:	1961      	adds	r1, r4, r5
 80092f6:	42a3      	cmp	r3, r4
 80092f8:	6025      	str	r5, [r4, #0]
 80092fa:	bf18      	it	ne
 80092fc:	6059      	strne	r1, [r3, #4]
 80092fe:	6863      	ldr	r3, [r4, #4]
 8009300:	bf08      	it	eq
 8009302:	6031      	streq	r1, [r6, #0]
 8009304:	5162      	str	r2, [r4, r5]
 8009306:	604b      	str	r3, [r1, #4]
 8009308:	4638      	mov	r0, r7
 800930a:	f104 060b 	add.w	r6, r4, #11
 800930e:	f000 f865 	bl	80093dc <__malloc_unlock>
 8009312:	f026 0607 	bic.w	r6, r6, #7
 8009316:	1d23      	adds	r3, r4, #4
 8009318:	1af2      	subs	r2, r6, r3
 800931a:	d0b6      	beq.n	800928a <_malloc_r+0x22>
 800931c:	1b9b      	subs	r3, r3, r6
 800931e:	50a3      	str	r3, [r4, r2]
 8009320:	e7b3      	b.n	800928a <_malloc_r+0x22>
 8009322:	6862      	ldr	r2, [r4, #4]
 8009324:	42a3      	cmp	r3, r4
 8009326:	bf0c      	ite	eq
 8009328:	6032      	streq	r2, [r6, #0]
 800932a:	605a      	strne	r2, [r3, #4]
 800932c:	e7ec      	b.n	8009308 <_malloc_r+0xa0>
 800932e:	4623      	mov	r3, r4
 8009330:	6864      	ldr	r4, [r4, #4]
 8009332:	e7b2      	b.n	800929a <_malloc_r+0x32>
 8009334:	4634      	mov	r4, r6
 8009336:	6876      	ldr	r6, [r6, #4]
 8009338:	e7b9      	b.n	80092ae <_malloc_r+0x46>
 800933a:	230c      	movs	r3, #12
 800933c:	4638      	mov	r0, r7
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	f000 f84c 	bl	80093dc <__malloc_unlock>
 8009344:	e7a1      	b.n	800928a <_malloc_r+0x22>
 8009346:	6025      	str	r5, [r4, #0]
 8009348:	e7de      	b.n	8009308 <_malloc_r+0xa0>
 800934a:	bf00      	nop
 800934c:	20001460 	.word	0x20001460

08009350 <_realloc_r>:
 8009350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009354:	4680      	mov	r8, r0
 8009356:	4614      	mov	r4, r2
 8009358:	460e      	mov	r6, r1
 800935a:	b921      	cbnz	r1, 8009366 <_realloc_r+0x16>
 800935c:	4611      	mov	r1, r2
 800935e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009362:	f7ff bf81 	b.w	8009268 <_malloc_r>
 8009366:	b92a      	cbnz	r2, 8009374 <_realloc_r+0x24>
 8009368:	f7ff ff16 	bl	8009198 <_free_r>
 800936c:	4625      	mov	r5, r4
 800936e:	4628      	mov	r0, r5
 8009370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009374:	f000 f838 	bl	80093e8 <_malloc_usable_size_r>
 8009378:	4284      	cmp	r4, r0
 800937a:	4607      	mov	r7, r0
 800937c:	d802      	bhi.n	8009384 <_realloc_r+0x34>
 800937e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009382:	d812      	bhi.n	80093aa <_realloc_r+0x5a>
 8009384:	4621      	mov	r1, r4
 8009386:	4640      	mov	r0, r8
 8009388:	f7ff ff6e 	bl	8009268 <_malloc_r>
 800938c:	4605      	mov	r5, r0
 800938e:	2800      	cmp	r0, #0
 8009390:	d0ed      	beq.n	800936e <_realloc_r+0x1e>
 8009392:	42bc      	cmp	r4, r7
 8009394:	4622      	mov	r2, r4
 8009396:	4631      	mov	r1, r6
 8009398:	bf28      	it	cs
 800939a:	463a      	movcs	r2, r7
 800939c:	f7ff fed4 	bl	8009148 <memcpy>
 80093a0:	4631      	mov	r1, r6
 80093a2:	4640      	mov	r0, r8
 80093a4:	f7ff fef8 	bl	8009198 <_free_r>
 80093a8:	e7e1      	b.n	800936e <_realloc_r+0x1e>
 80093aa:	4635      	mov	r5, r6
 80093ac:	e7df      	b.n	800936e <_realloc_r+0x1e>
	...

080093b0 <_sbrk_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	2300      	movs	r3, #0
 80093b4:	4d05      	ldr	r5, [pc, #20]	; (80093cc <_sbrk_r+0x1c>)
 80093b6:	4604      	mov	r4, r0
 80093b8:	4608      	mov	r0, r1
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	f7f7 fad8 	bl	8000970 <_sbrk>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_sbrk_r+0x1a>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_sbrk_r+0x1a>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	20001468 	.word	0x20001468

080093d0 <__malloc_lock>:
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <__malloc_lock+0x8>)
 80093d2:	f000 b811 	b.w	80093f8 <__retarget_lock_acquire_recursive>
 80093d6:	bf00      	nop
 80093d8:	2000146c 	.word	0x2000146c

080093dc <__malloc_unlock>:
 80093dc:	4801      	ldr	r0, [pc, #4]	; (80093e4 <__malloc_unlock+0x8>)
 80093de:	f000 b80c 	b.w	80093fa <__retarget_lock_release_recursive>
 80093e2:	bf00      	nop
 80093e4:	2000146c 	.word	0x2000146c

080093e8 <_malloc_usable_size_r>:
 80093e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ec:	1f18      	subs	r0, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfbc      	itt	lt
 80093f2:	580b      	ldrlt	r3, [r1, r0]
 80093f4:	18c0      	addlt	r0, r0, r3
 80093f6:	4770      	bx	lr

080093f8 <__retarget_lock_acquire_recursive>:
 80093f8:	4770      	bx	lr

080093fa <__retarget_lock_release_recursive>:
 80093fa:	4770      	bx	lr

080093fc <_init>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	bf00      	nop
 8009400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009402:	bc08      	pop	{r3}
 8009404:	469e      	mov	lr, r3
 8009406:	4770      	bx	lr

08009408 <_fini>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	bf00      	nop
 800940c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940e:	bc08      	pop	{r3}
 8009410:	469e      	mov	lr, r3
 8009412:	4770      	bx	lr
