
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002198  08002198  00012198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021bc  080021bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021bc  080021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021c4  080021c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000000c  080021d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080021d8  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b41e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ce  00000000  00000000  0002b453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012df1  00000000  00000000  0002e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5a4  00000000  00000000  00041089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075edb  00000000  00000000  0004d62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3508  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c4c  00000000  00000000  000c3558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002180 	.word	0x08002180

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002180 	.word	0x08002180

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fa6f 	bl	800096a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f814 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f8e6 	bl	8000660 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000494:	f000 f8c2 	bl	800061c <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000498:	f000 f85e 	bl	8000558 <MX_I2C1_Init>
  MX_SPI1_Init();
 800049c:	f000 f88a 	bl	80005b4 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80004a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <main+0x30>)
 80004a6:	f000 fd6d 	bl	8000f84 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Insert delay 100 ms */
 80004aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ae:	f000 facb 	bl	8000a48 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80004b2:	e7f5      	b.n	80004a0 <main+0x1c>
 80004b4:	40020800 	.word	0x40020800

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b092      	sub	sp, #72	; 0x48
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2234      	movs	r2, #52	; 0x34
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fe52 	bl	8002170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004da:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <SystemClock_Config+0x9c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004e2:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <SystemClock_Config+0x9c>)
 80004e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004e8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004ea:	2303      	movs	r3, #3
 80004ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f2:	2301      	movs	r3, #1
 80004f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f6:	2310      	movs	r3, #16
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	2302      	movs	r3, #2
 80004fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000504:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000508:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800050a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800050e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4618      	mov	r0, r3
 8000516:	f000 ff71 	bl	80013fc <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000520:	f000 f8f6 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000524:	230f      	movs	r3, #15
 8000526:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000528:	2301      	movs	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fa8d 	bl	8001a5c <HAL_RCC_ClockConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000548:	f000 f8e2 	bl	8000710 <Error_Handler>
  }
}
 800054c:	bf00      	nop
 800054e:	3748      	adds	r7, #72	; 0x48
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40007000 	.word	0x40007000

08000558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_I2C1_Init+0x50>)
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <MX_I2C1_Init+0x54>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000564:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x58>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_I2C1_Init+0x50>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800057a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_I2C1_Init+0x50>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MX_I2C1_Init+0x50>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000596:	f000 fd0f 	bl	8000fb8 <HAL_I2C_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005a0:	f000 f8b6 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000028 	.word	0x20000028
 80005ac:	40005400 	.word	0x40005400
 80005b0:	000186a0 	.word	0x000186a0

080005b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_SPI1_Init+0x60>)
 80005ba:	4a17      	ldr	r2, [pc, #92]	; (8000618 <MX_SPI1_Init+0x64>)
 80005bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_SPI1_Init+0x60>)
 80005c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_SPI1_Init+0x60>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_SPI1_Init+0x60>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_SPI1_Init+0x60>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_SPI1_Init+0x60>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_SPI1_Init+0x60>)
 80005e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_SPI1_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_SPI1_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_SPI1_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_SPI1_Init+0x60>)
 80005fa:	220a      	movs	r2, #10
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_SPI1_Init+0x60>)
 8000600:	f001 fcdc 	bl	8001fbc <HAL_SPI_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 800060a:	f000 f881 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000007c 	.word	0x2000007c
 8000618:	40013000 	.word	0x40013000

0800061c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_USB_PCD_Init+0x3c>)
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <MX_USB_PCD_Init+0x40>)
 8000624:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_USB_PCD_Init+0x3c>)
 8000628:	2208      	movs	r2, #8
 800062a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_USB_PCD_Init+0x3c>)
 800062e:	2202      	movs	r2, #2
 8000630:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_USB_PCD_Init+0x3c>)
 8000634:	2202      	movs	r2, #2
 8000636:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_USB_PCD_Init+0x3c>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_USB_PCD_Init+0x3c>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_USB_PCD_Init+0x3c>)
 8000646:	f000 fdfb 	bl	8001240 <HAL_PCD_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000650:	f000 f85e 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000d4 	.word	0x200000d4
 800065c:	40005c00 	.word	0x40005c00

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <MX_GPIO_Init+0xa8>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a23      	ldr	r2, [pc, #140]	; (8000708 <MX_GPIO_Init+0xa8>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_GPIO_Init+0xa8>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_GPIO_Init+0xa8>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <MX_GPIO_Init+0xa8>)
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_GPIO_Init+0xa8>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_GPIO_Init+0xa8>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0xac>)
 80006de:	f000 fc39 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0xac>)
 80006fc:	f000 faaa 	bl	8000c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	; 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40020800 	.word	0x40020800

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_MspInit+0x58>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <HAL_MspInit+0x58>)
 8000728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <HAL_MspInit+0x58>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_MspInit+0x58>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <HAL_MspInit+0x58>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6213      	str	r3, [r2, #32]
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <HAL_MspInit+0x58>)
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_MspInit+0x58>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_MspInit+0x58>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_MspInit+0x58>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_I2C_MspInit+0x7c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d127      	bne.n	80007ea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b2:	23c0      	movs	r3, #192	; 0xc0
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b6:	2312      	movs	r3, #18
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c2:	2304      	movs	r3, #4
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <HAL_I2C_MspInit+0x84>)
 80007ce:	f000 fa41 	bl	8000c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007dc:	6253      	str	r3, [r2, #36]	; 0x24
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_I2C_MspInit+0x80>)
 80007e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40005400 	.word	0x40005400
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020400 	.word	0x40020400

08000800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_SPI_MspInit+0x7c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d127      	bne.n	8000872 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082c:	6213      	str	r3, [r2, #32]
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000830:	6a1b      	ldr	r3, [r3, #32]
 8000832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_SPI_MspInit+0x80>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000852:	23e0      	movs	r3, #224	; 0xe0
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000862:	2305      	movs	r3, #5
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <HAL_SPI_MspInit+0x84>)
 800086e:	f000 f9f1 	bl	8000c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40013000 	.word	0x40013000
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000

08000888 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_PCD_MspInit+0x34>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d10b      	bne.n	80008b2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_PCD_MspInit+0x38>)
 800089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_PCD_MspInit+0x38>)
 80008a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008a4:	6253      	str	r3, [r2, #36]	; 0x24
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_PCD_MspInit+0x38>)
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	40005c00 	.word	0x40005c00
 80008c0:	40023800 	.word	0x40023800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090a:	f000 f881 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}

08000912 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
	...

08000920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	; (8000964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000946:	f7ff ffe4 	bl	8000912 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f001 fbed 	bl	8002128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fd99 	bl	8000484 <main>
  bx lr
 8000952:	4770      	bx	lr
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800095c:	080021cc 	.word	0x080021cc
  ldr r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000964:	200003c4 	.word	0x200003c4

08000968 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_IRQHandler>

0800096a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f939 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097a:	200f      	movs	r0, #15
 800097c:	f000 f80e 	bl	800099c <HAL_InitTick>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	e001      	b.n	8000990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098c:	f7ff fec6 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000990:	79fb      	ldrb	r3, [r7, #7]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_InitTick+0x68>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d022      	beq.n	80009f6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_InitTick+0x6c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_InitTick+0x68>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f938 	bl	8000c3a <HAL_SYSTICK_Config>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10f      	bne.n	80009f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d809      	bhi.n	80009ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d6:	2200      	movs	r2, #0
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	f04f 30ff 	mov.w	r0, #4294967295
 80009de:	f000 f910 	bl	8000c02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_InitTick+0x70>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e007      	b.n	80009fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e004      	b.n	80009fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e001      	b.n	80009fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a20:	6013      	str	r3, [r2, #0]
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200003c0 	.word	0x200003c0
 8000a30:	20000008 	.word	0x20000008

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	200003c0 	.word	0x200003c0

08000a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a50:	f7ff fff0 	bl	8000a34 <HAL_GetTick>
 8000a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d004      	beq.n	8000a6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_Delay+0x40>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	4413      	add	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a6c:	bf00      	nop
 8000a6e:	f7ff ffe1 	bl	8000a34 <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d8f7      	bhi.n	8000a6e <HAL_Delay+0x26>
  {
  }
}
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000008 	.word	0x20000008

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff90 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff49 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff5e 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff90 	bl	8000b44 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5f 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffb0 	bl	8000ba8 <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c6a:	e154      	b.n	8000f16 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 8146 	beq.w	8000f10 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d005      	beq.n	8000c9c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d130      	bne.n	8000cfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	f003 0201 	and.w	r2, r3, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d017      	beq.n	8000d3a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d123      	bne.n	8000d8e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	6939      	ldr	r1, [r7, #16]
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0203 	and.w	r2, r3, #3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 80a0 	beq.w	8000f10 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd0:	4b58      	ldr	r3, [pc, #352]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	4a57      	ldr	r2, [pc, #348]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6213      	str	r3, [r2, #32]
 8000ddc:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000de8:	4a53      	ldr	r2, [pc, #332]	; (8000f38 <HAL_GPIO_Init+0x2e4>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a4b      	ldr	r2, [pc, #300]	; (8000f3c <HAL_GPIO_Init+0x2e8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d019      	beq.n	8000e48 <HAL_GPIO_Init+0x1f4>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x1f0>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a49      	ldr	r2, [pc, #292]	; (8000f44 <HAL_GPIO_Init+0x2f0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x1ec>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <HAL_GPIO_Init+0x2f4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x1e8>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a47      	ldr	r2, [pc, #284]	; (8000f4c <HAL_GPIO_Init+0x2f8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x1e4>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e008      	b.n	8000e4a <HAL_GPIO_Init+0x1f6>
 8000e38:	2305      	movs	r3, #5
 8000e3a:	e006      	b.n	8000e4a <HAL_GPIO_Init+0x1f6>
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e004      	b.n	8000e4a <HAL_GPIO_Init+0x1f6>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e002      	b.n	8000e4a <HAL_GPIO_Init+0x1f6>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <HAL_GPIO_Init+0x1f6>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	f002 0203 	and.w	r2, r2, #3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4093      	lsls	r3, r2
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e5a:	4937      	ldr	r1, [pc, #220]	; (8000f38 <HAL_GPIO_Init+0x2e4>)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e68:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e8c:	4a30      	ldr	r2, [pc, #192]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e92:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb6:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f0a:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f47f aea3 	bne.w	8000c6c <HAL_GPIO_Init+0x18>
  }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	371c      	adds	r7, #28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f70:	e003      	b.n	8000f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	041a      	lsls	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	619a      	str	r2, [r3, #24]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43d9      	mvns	r1, r3
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e12b      	b.n	8001222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d106      	bne.n	8000fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff fbca 	bl	8000778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2224      	movs	r2, #36	; 0x24
 8000fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0201 	bic.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800100a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800101a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800101c:	f000 ff5a 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8001020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4a81      	ldr	r2, [pc, #516]	; (800122c <HAL_I2C_Init+0x274>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d807      	bhi.n	800103c <HAL_I2C_Init+0x84>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a80      	ldr	r2, [pc, #512]	; (8001230 <HAL_I2C_Init+0x278>)
 8001030:	4293      	cmp	r3, r2
 8001032:	bf94      	ite	ls
 8001034:	2301      	movls	r3, #1
 8001036:	2300      	movhi	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	e006      	b.n	800104a <HAL_I2C_Init+0x92>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4a7d      	ldr	r2, [pc, #500]	; (8001234 <HAL_I2C_Init+0x27c>)
 8001040:	4293      	cmp	r3, r2
 8001042:	bf94      	ite	ls
 8001044:	2301      	movls	r3, #1
 8001046:	2300      	movhi	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0e7      	b.n	8001222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4a78      	ldr	r2, [pc, #480]	; (8001238 <HAL_I2C_Init+0x280>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	0c9b      	lsrs	r3, r3, #18
 800105c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	430a      	orrs	r2, r1
 8001070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a6a      	ldr	r2, [pc, #424]	; (800122c <HAL_I2C_Init+0x274>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d802      	bhi.n	800108c <HAL_I2C_Init+0xd4>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3301      	adds	r3, #1
 800108a:	e009      	b.n	80010a0 <HAL_I2C_Init+0xe8>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	4a69      	ldr	r2, [pc, #420]	; (800123c <HAL_I2C_Init+0x284>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	099b      	lsrs	r3, r3, #6
 800109e:	3301      	adds	r3, #1
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	430b      	orrs	r3, r1
 80010a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	495c      	ldr	r1, [pc, #368]	; (800122c <HAL_I2C_Init+0x274>)
 80010bc:	428b      	cmp	r3, r1
 80010be:	d819      	bhi.n	80010f4 <HAL_I2C_Init+0x13c>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1e59      	subs	r1, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ce:	1c59      	adds	r1, r3, #1
 80010d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010d4:	400b      	ands	r3, r1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00a      	beq.n	80010f0 <HAL_I2C_Init+0x138>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1e59      	subs	r1, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ee:	e051      	b.n	8001194 <HAL_I2C_Init+0x1dc>
 80010f0:	2304      	movs	r3, #4
 80010f2:	e04f      	b.n	8001194 <HAL_I2C_Init+0x1dc>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d111      	bne.n	8001120 <HAL_I2C_Init+0x168>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	1e58      	subs	r0, r3, #1
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6859      	ldr	r1, [r3, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	440b      	add	r3, r1
 800110a:	fbb0 f3f3 	udiv	r3, r0, r3
 800110e:	3301      	adds	r3, #1
 8001110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf0c      	ite	eq
 8001118:	2301      	moveq	r3, #1
 800111a:	2300      	movne	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	e012      	b.n	8001146 <HAL_I2C_Init+0x18e>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	1e58      	subs	r0, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6859      	ldr	r1, [r3, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	0099      	lsls	r1, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	fbb0 f3f3 	udiv	r3, r0, r3
 8001136:	3301      	adds	r3, #1
 8001138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf0c      	ite	eq
 8001140:	2301      	moveq	r3, #1
 8001142:	2300      	movne	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_I2C_Init+0x196>
 800114a:	2301      	movs	r3, #1
 800114c:	e022      	b.n	8001194 <HAL_I2C_Init+0x1dc>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10e      	bne.n	8001174 <HAL_I2C_Init+0x1bc>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1e58      	subs	r0, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6859      	ldr	r1, [r3, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	440b      	add	r3, r1
 8001164:	fbb0 f3f3 	udiv	r3, r0, r3
 8001168:	3301      	adds	r3, #1
 800116a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800116e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001172:	e00f      	b.n	8001194 <HAL_I2C_Init+0x1dc>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1e58      	subs	r0, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	0099      	lsls	r1, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	fbb0 f3f3 	udiv	r3, r0, r3
 800118a:	3301      	adds	r3, #1
 800118c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	6809      	ldr	r1, [r1, #0]
 8001198:	4313      	orrs	r3, r2
 800119a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6911      	ldr	r1, [r2, #16]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68d2      	ldr	r2, [r2, #12]
 80011ce:	4311      	orrs	r1, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2220      	movs	r2, #32
 800120e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	000186a0 	.word	0x000186a0
 8001230:	001e847f 	.word	0x001e847f
 8001234:	003d08ff 	.word	0x003d08ff
 8001238:	431bde83 	.word	0x431bde83
 800123c:	10624dd3 	.word	0x10624dd3

08001240 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af06      	add	r7, sp, #24
 8001246:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e0d0      	b.n	80013f4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fb0e 	bl	8000888 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 ff1b 	bl	80020b4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e04c      	b.n	800131e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	3301      	adds	r3, #1
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	b298      	uxth	r0, r3
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	3336      	adds	r3, #54	; 0x36
 80012c2:	4602      	mov	r2, r0
 80012c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	3303      	adds	r3, #3
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	3338      	adds	r3, #56	; 0x38
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	440b      	add	r3, r1
 80012fe:	333c      	adds	r3, #60	; 0x3c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	3340      	adds	r3, #64	; 0x40
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3301      	adds	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3ad      	bcc.n	8001284 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e044      	b.n	80013b8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	440b      	add	r3, r1
 800133c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d3b5      	bcc.n	800132e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	687e      	ldr	r6, [r7, #4]
 80013ca:	466d      	mov	r5, sp
 80013cc:	f106 0410 	add.w	r4, r6, #16
 80013d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	602b      	str	r3, [r5, #0]
 80013d8:	1d33      	adds	r3, r6, #4
 80013da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f000 fe83 	bl	80020e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e31d      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140e:	4b94      	ldr	r3, [pc, #592]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001418:	4b91      	ldr	r3, [pc, #580]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d07b      	beq.n	8001526 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d006      	beq.n	8001442 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d10f      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b87      	ldr	r3, [pc, #540]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d06a      	beq.n	8001524 <HAL_RCC_OscConfig+0x128>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d166      	bne.n	8001524 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e2f7      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <HAL_RCC_OscConfig+0x74>
 8001462:	4b7f      	ldr	r3, [pc, #508]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7e      	ldr	r2, [pc, #504]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e02d      	b.n	80014cc <HAL_RCC_OscConfig+0xd0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10c      	bne.n	8001492 <HAL_RCC_OscConfig+0x96>
 8001478:	4b79      	ldr	r3, [pc, #484]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a78      	ldr	r2, [pc, #480]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a75      	ldr	r2, [pc, #468]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e01c      	b.n	80014cc <HAL_RCC_OscConfig+0xd0>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b05      	cmp	r3, #5
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0xb8>
 800149a:	4b71      	ldr	r3, [pc, #452]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a70      	ldr	r2, [pc, #448]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6e      	ldr	r3, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6d      	ldr	r2, [pc, #436]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xd0>
 80014b4:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a69      	ldr	r2, [pc, #420]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b67      	ldr	r3, [pc, #412]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a66      	ldr	r2, [pc, #408]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff faae 	bl	8000a34 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff faaa 	bl	8000a34 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e2ad      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xe0>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa9a 	bl	8000a34 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fa96 	bl	8000a34 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e299      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x108>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d05a      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b04      	cmp	r3, #4
 8001536:	d005      	beq.n	8001544 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d119      	bne.n	8001572 <HAL_RCC_OscConfig+0x176>
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d116      	bne.n	8001572 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001544:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_OscConfig+0x160>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e276      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	493d      	ldr	r1, [pc, #244]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001570:	e03a      	b.n	80015e8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d020      	beq.n	80015bc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <HAL_RCC_OscConfig+0x268>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fa58 	bl	8000a34 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fa54 	bl	8000a34 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e257      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	492a      	ldr	r1, [pc, #168]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
 80015ba:	e015      	b.n	80015e8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_RCC_OscConfig+0x268>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa37 	bl	8000a34 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fa33 	bl	8000a34 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e236      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80b8 	beq.w	8001766 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d170      	bne.n	80016de <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x218>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e21a      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001620:	429a      	cmp	r2, r3
 8001622:	d921      	bls.n	8001668 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fc67 	bl	8001efc <RCC_SetFlashLatencyFromMSIRange>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e208      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4906      	ldr	r1, [pc, #24]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	061b      	lsls	r3, r3, #24
 8001658:	4901      	ldr	r1, [pc, #4]	; (8001660 <HAL_RCC_OscConfig+0x264>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
 800165e:	e020      	b.n	80016a2 <HAL_RCC_OscConfig+0x2a6>
 8001660:	40023800 	.word	0x40023800
 8001664:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001668:	4b99      	ldr	r3, [pc, #612]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4996      	ldr	r1, [pc, #600]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167a:	4b95      	ldr	r3, [pc, #596]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	061b      	lsls	r3, r3, #24
 8001688:	4991      	ldr	r1, [pc, #580]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fc32 	bl	8001efc <RCC_SetFlashLatencyFromMSIRange>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e1d3      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	0b5b      	lsrs	r3, r3, #13
 80016a8:	3301      	adds	r3, #1
 80016aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016b2:	4a87      	ldr	r2, [pc, #540]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80016b4:	6892      	ldr	r2, [r2, #8]
 80016b6:	0912      	lsrs	r2, r2, #4
 80016b8:	f002 020f 	and.w	r2, r2, #15
 80016bc:	4985      	ldr	r1, [pc, #532]	; (80018d4 <HAL_RCC_OscConfig+0x4d8>)
 80016be:	5c8a      	ldrb	r2, [r1, r2]
 80016c0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016c2:	4a85      	ldr	r2, [pc, #532]	; (80018d8 <HAL_RCC_OscConfig+0x4dc>)
 80016c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016c6:	4b85      	ldr	r3, [pc, #532]	; (80018dc <HAL_RCC_OscConfig+0x4e0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f966 	bl	800099c <HAL_InitTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d045      	beq.n	8001766 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	e1b5      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d029      	beq.n	800173a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016e6:	4b7e      	ldr	r3, [pc, #504]	; (80018e0 <HAL_RCC_OscConfig+0x4e4>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff f9a2 	bl	8000a34 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f4:	f7ff f99e 	bl	8000a34 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1a1      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001706:	4b72      	ldr	r3, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001712:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	496c      	ldr	r1, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	4967      	ldr	r1, [pc, #412]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e015      	b.n	8001766 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800173a:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <HAL_RCC_OscConfig+0x4e4>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff f978 	bl	8000a34 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001748:	f7ff f974 	bl	8000a34 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e177      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800175a:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d030      	beq.n	80017d4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d016      	beq.n	80017a8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b5a      	ldr	r3, [pc, #360]	; (80018e4 <HAL_RCC_OscConfig+0x4e8>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff f958 	bl	8000a34 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff f954 	bl	8000a34 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e157      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179a:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x38c>
 80017a6:	e015      	b.n	80017d4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a8:	4b4e      	ldr	r3, [pc, #312]	; (80018e4 <HAL_RCC_OscConfig+0x4e8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff f941 	bl	8000a34 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff f93d 	bl	8000a34 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e140      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80b5 	beq.w	800194c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10d      	bne.n	800180e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	4a36      	ldr	r2, [pc, #216]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6253      	str	r3, [r2, #36]	; 0x24
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <HAL_RCC_OscConfig+0x4ec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <HAL_RCC_OscConfig+0x4ec>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <HAL_RCC_OscConfig+0x4ec>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff f905 	bl	8000a34 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7ff f901 	bl	8000a34 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e104      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HAL_RCC_OscConfig+0x4ec>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x466>
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6353      	str	r3, [r2, #52]	; 0x34
 8001860:	e02d      	b.n	80018be <HAL_RCC_OscConfig+0x4c2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x488>
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001874:	6353      	str	r3, [r2, #52]	; 0x34
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800187c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001880:	6353      	str	r3, [r2, #52]	; 0x34
 8001882:	e01c      	b.n	80018be <HAL_RCC_OscConfig+0x4c2>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001896:	6353      	str	r3, [r2, #52]	; 0x34
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	6353      	str	r3, [r2, #52]	; 0x34
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x4c2>
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80018ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b0:	6353      	str	r3, [r2, #52]	; 0x34
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80018b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b6:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80018b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018bc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d024      	beq.n	8001910 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff f8b5 	bl	8000a34 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018cc:	e019      	b.n	8001902 <HAL_RCC_OscConfig+0x506>
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	080021a4 	.word	0x080021a4
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004
 80018e0:	42470020 	.word	0x42470020
 80018e4:	42470680 	.word	0x42470680
 80018e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff f8a2 	bl	8000a34 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0a3      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001902:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ee      	beq.n	80018ec <HAL_RCC_OscConfig+0x4f0>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff f890 	bl	8000a34 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff f88c 	bl	8000a34 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e08d      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800192e:	4b49      	ldr	r3, [pc, #292]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ee      	bne.n	8001918 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	4a43      	ldr	r2, [pc, #268]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	2b00      	cmp	r3, #0
 8001952:	d079      	beq.n	8001a48 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d056      	beq.n	8001a08 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	2b02      	cmp	r3, #2
 8001960:	d13b      	bne.n	80019da <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <HAL_RCC_OscConfig+0x65c>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff f864 	bl	8000a34 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f860 	bl	8000a34 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e063      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001982:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	4319      	orrs	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	430b      	orrs	r3, r1
 80019a6:	492b      	ldr	r1, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_RCC_OscConfig+0x65c>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f83f 	bl	8000a34 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f83b 	bl	8000a34 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e03e      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x5be>
 80019d8:	e036      	b.n	8001a48 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <HAL_RCC_OscConfig+0x65c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f828 	bl	8000a34 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f824 	bl	8000a34 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e027      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5ec>
 8001a06:	e01f      	b.n	8001a48 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e01a      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_RCC_OscConfig+0x658>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d10d      	bne.n	8001a44 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	42470060 	.word	0x42470060

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e11a      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d919      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x34>
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a89      	ldr	r2, [pc, #548]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b87      	ldr	r3, [pc, #540]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 0201 	bic.w	r2, r3, #1
 8001a98:	4985      	ldr	r1, [pc, #532]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa0:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0f9      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d008      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abe:	4b7d      	ldr	r3, [pc, #500]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	497a      	ldr	r1, [pc, #488]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 808e 	beq.w	8001bfa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ae6:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d121      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0d7      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001afe:	4b6d      	ldr	r3, [pc, #436]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0cb      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0bf      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0b7      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	495c      	ldr	r1, [pc, #368]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7fe ff74 	bl	8000a34 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d112      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7fe ff6c 	bl	8000a34 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e09b      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6e:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d1ee      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xfc>
 8001b7a:	e03e      	b.n	8001bfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d112      	bne.n	8001baa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7fe ff55 	bl	8000a34 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e084      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9c:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x12a>
 8001ba8:	e027      	b.n	8001bfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d11d      	bne.n	8001bee <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7fe ff3e 	bl	8000a34 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e06d      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d1ee      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x158>
 8001bd6:	e010      	b.n	8001bfa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7fe ff2c 	bl	8000a34 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e05b      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d219      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x1be>
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 0201 	bic.w	r2, r3, #1
 8001c22:	4923      	ldr	r1, [pc, #140]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_RCC_ClockConfig+0x254>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e034      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4917      	ldr	r1, [pc, #92]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	490f      	ldr	r1, [pc, #60]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7a:	f000 f823 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_RCC_ClockConfig+0x258>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	490b      	ldr	r1, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x25c>)
 8001c8c:	5ccb      	ldrb	r3, [r1, r3]
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fe7e 	bl	800099c <HAL_InitTick>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	080021a4 	.word	0x080021a4
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc8:	b092      	sub	sp, #72	; 0x48
 8001cca:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b0c      	cmp	r3, #12
 8001cda:	d00d      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	f200 80d5 	bhi.w	8001e8c <HAL_RCC_GetSysClockFreq+0x1c8>
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x28>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x2e>
 8001cea:	e0cf      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001cf0:	e0da      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf2:	4b71      	ldr	r3, [pc, #452]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001cf4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001cf6:	e0d7      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cfa:	0c9b      	lsrs	r3, r3, #18
 8001cfc:	f003 020f 	and.w	r2, r3, #15
 8001d00:	4b6e      	ldr	r3, [pc, #440]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001d02:	5c9b      	ldrb	r3, [r3, r2]
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d08:	0d9b      	lsrs	r3, r3, #22
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d12:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d05d      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d20:	2200      	movs	r2, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	4611      	mov	r1, r2
 8001d26:	4604      	mov	r4, r0
 8001d28:	460d      	mov	r5, r1
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	462b      	mov	r3, r5
 8001d2e:	f04f 0000 	mov.w	r0, #0
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	0159      	lsls	r1, r3, #5
 8001d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3c:	0150      	lsls	r0, r2, #5
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4621      	mov	r1, r4
 8001d44:	1a51      	subs	r1, r2, r1
 8001d46:	6139      	str	r1, [r7, #16]
 8001d48:	4629      	mov	r1, r5
 8001d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	018b      	lsls	r3, r1, #6
 8001d60:	4651      	mov	r1, sl
 8001d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d66:	4651      	mov	r1, sl
 8001d68:	018a      	lsls	r2, r1, #6
 8001d6a:	46d4      	mov	ip, sl
 8001d6c:	ebb2 080c 	subs.w	r8, r2, ip
 8001d70:	4659      	mov	r1, fp
 8001d72:	eb63 0901 	sbc.w	r9, r3, r1
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d8a:	4690      	mov	r8, r2
 8001d8c:	4699      	mov	r9, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	eb18 0303 	adds.w	r3, r8, r3
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	462b      	mov	r3, r5
 8001d98:	eb49 0303 	adc.w	r3, r9, r3
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001daa:	4629      	mov	r1, r5
 8001dac:	028b      	lsls	r3, r1, #10
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	4604      	mov	r4, r0
 8001db4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001db8:	4601      	mov	r1, r0
 8001dba:	028a      	lsls	r2, r1, #10
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dcc:	f7fe f9d6 	bl	800017c <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd8:	e055      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ddc:	2200      	movs	r2, #0
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	627a      	str	r2, [r7, #36]	; 0x24
 8001de2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de6:	4642      	mov	r2, r8
 8001de8:	464b      	mov	r3, r9
 8001dea:	f04f 0000 	mov.w	r0, #0
 8001dee:	f04f 0100 	mov.w	r1, #0
 8001df2:	0159      	lsls	r1, r3, #5
 8001df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df8:	0150      	lsls	r0, r2, #5
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	46c4      	mov	ip, r8
 8001e00:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001e04:	4640      	mov	r0, r8
 8001e06:	4649      	mov	r1, r9
 8001e08:	468c      	mov	ip, r1
 8001e0a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e1a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e1e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e22:	ebb2 040a 	subs.w	r4, r2, sl
 8001e26:	eb63 050b 	sbc.w	r5, r3, fp
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	00eb      	lsls	r3, r5, #3
 8001e34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e38:	00e2      	lsls	r2, r4, #3
 8001e3a:	4614      	mov	r4, r2
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	18e3      	adds	r3, r4, r3
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	460b      	mov	r3, r1
 8001e46:	eb45 0303 	adc.w	r3, r5, r3
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e58:	4629      	mov	r1, r5
 8001e5a:	028b      	lsls	r3, r1, #10
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	4604      	mov	r4, r0
 8001e62:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001e66:	4601      	mov	r1, r0
 8001e68:	028a      	lsls	r2, r1, #10
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	2200      	movs	r2, #0
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	61fa      	str	r2, [r7, #28]
 8001e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e7a:	f7fe f97f 	bl	800017c <__aeabi_uldivmod>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4613      	mov	r3, r2
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e88:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001e8a:	e00d      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0b5b      	lsrs	r3, r3, #13
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001ea6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3748      	adds	r7, #72	; 0x48
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	08002198 	.word	0x08002198

08001ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff2 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	080021b4 	.word	0x080021b4

08001efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d12c      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e016      	b.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	6253      	str	r3, [r2, #36]	; 0x24
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001f4c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001f60:	d105      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f68:	d101      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 0201 	bic.w	r2, r3, #1
 8001f88:	490b      	ldr	r1, [pc, #44]	; (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d001      	beq.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06e      	b.n	80020ac <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d108      	bne.n	8001fe8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fde:	d009      	beq.n	8001ff4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
 8001fe6:	e005      	b.n	8001ff4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fbf6 	bl	8000800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002078:	ea42 0103 	orr.w	r1, r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	0c1a      	lsrs	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f002 0204 	and.w	r2, r2, #4
 800209a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80020bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80020c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4013      	ands	r3, r2
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80020e8:	b084      	sub	sp, #16
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	f107 0014 	add.w	r0, r7, #20
 80020f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	b004      	add	sp, #16
 8002126:	4770      	bx	lr

08002128 <__libc_init_array>:
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	2600      	movs	r6, #0
 800212c:	4d0c      	ldr	r5, [pc, #48]	; (8002160 <__libc_init_array+0x38>)
 800212e:	4c0d      	ldr	r4, [pc, #52]	; (8002164 <__libc_init_array+0x3c>)
 8002130:	1b64      	subs	r4, r4, r5
 8002132:	10a4      	asrs	r4, r4, #2
 8002134:	42a6      	cmp	r6, r4
 8002136:	d109      	bne.n	800214c <__libc_init_array+0x24>
 8002138:	f000 f822 	bl	8002180 <_init>
 800213c:	2600      	movs	r6, #0
 800213e:	4d0a      	ldr	r5, [pc, #40]	; (8002168 <__libc_init_array+0x40>)
 8002140:	4c0a      	ldr	r4, [pc, #40]	; (800216c <__libc_init_array+0x44>)
 8002142:	1b64      	subs	r4, r4, r5
 8002144:	10a4      	asrs	r4, r4, #2
 8002146:	42a6      	cmp	r6, r4
 8002148:	d105      	bne.n	8002156 <__libc_init_array+0x2e>
 800214a:	bd70      	pop	{r4, r5, r6, pc}
 800214c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002150:	4798      	blx	r3
 8002152:	3601      	adds	r6, #1
 8002154:	e7ee      	b.n	8002134 <__libc_init_array+0xc>
 8002156:	f855 3b04 	ldr.w	r3, [r5], #4
 800215a:	4798      	blx	r3
 800215c:	3601      	adds	r6, #1
 800215e:	e7f2      	b.n	8002146 <__libc_init_array+0x1e>
 8002160:	080021c4 	.word	0x080021c4
 8002164:	080021c4 	.word	0x080021c4
 8002168:	080021c4 	.word	0x080021c4
 800216c:	080021c8 	.word	0x080021c8

08002170 <memset>:
 8002170:	4603      	mov	r3, r0
 8002172:	4402      	add	r2, r0
 8002174:	4293      	cmp	r3, r2
 8002176:	d100      	bne.n	800217a <memset+0xa>
 8002178:	4770      	bx	lr
 800217a:	f803 1b01 	strb.w	r1, [r3], #1
 800217e:	e7f9      	b.n	8002174 <memset+0x4>

08002180 <_init>:
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	bf00      	nop
 8002184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002186:	bc08      	pop	{r3}
 8002188:	469e      	mov	lr, r3
 800218a:	4770      	bx	lr

0800218c <_fini>:
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	bf00      	nop
 8002190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002192:	bc08      	pop	{r3}
 8002194:	469e      	mov	lr, r3
 8002196:	4770      	bx	lr
