
Wireless Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000919c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a0  080093a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080093a0  080093a0  000193a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a8  080093a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080093b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  200001e0  08009590  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  08009590  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d24  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030de  00000000  00000000  00031f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00035010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00035f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acc  00000000  00000000  00036d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143df  00000000  00000000  0004d80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c497  00000000  00000000  00061beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de082  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  000de0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	080092c0 	.word	0x080092c0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	080092c0 	.word	0x080092c0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0c2      	sub	sp, #264	; 0x108
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fad2 	bl	8000a42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f853 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f905 	bl	80006b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f8a1 	bl	80005ec <MX_I2C1_Init>
  MX_SPI1_Init();
 80004aa:	f000 f8cd 	bl	8000648 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ae:	f007 fdab 	bl	8008008 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* initialize the LoRa chip */
  LoRa_Init(&hspi1);
 80004b2:	4821      	ldr	r0, [pc, #132]	; (8000538 <main+0xa4>)
 80004b4:	f007 fcd4 	bl	8007e60 <LoRa_Init>

  /* Send a status message to USB port */
  uint8_t buffer[256];
  sprintf((char *)buffer, "Entering transmit loop\r\n");
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	4920      	ldr	r1, [pc, #128]	; (800053c <main+0xa8>)
 80004bc:	4618      	mov	r0, r3
 80004be:	f008 fa85 	bl	80089cc <siprintf>
  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe59 	bl	800017c <strlen>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f007 fe56 	bl	8008184 <CDC_Transmit_FS>

  int count = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 80004de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80004e2:	3301      	adds	r3, #1
 80004e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  sprintf((char *)buffer, "Count = %d", count);
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80004ee:	4914      	ldr	r1, [pc, #80]	; (8000540 <main+0xac>)
 80004f0:	4618      	mov	r0, r3
 80004f2:	f008 fa6b 	bl	80089cc <siprintf>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); /* Turn on the LED */
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fc:	4811      	ldr	r0, [pc, #68]	; (8000544 <main+0xb0>)
 80004fe:	f000 fdd6 	bl	80010ae <HAL_GPIO_WritePin>
//	  LoRaTransmit(buffer, strlen((char *)buffer));
	  HAL_Delay(500);
 8000502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000506:	f000 fb0b 	bl	8000b20 <HAL_Delay>
	  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off the LED */
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0xb0>)
 8000512:	f000 fdcc 	bl	80010ae <HAL_GPIO_WritePin>
//	  LoRaReceive(buffer, 0); /* go to receive mode with timeout = 0 (wait forever for one message) */
	  CDC_Transmit_FS(buffer, strlen((char *)buffer)); /* Send the message on USB */
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff fe2f 	bl	800017c <strlen>
 800051e:	4603      	mov	r3, r0
 8000520:	b29a      	uxth	r2, r3
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4611      	mov	r1, r2
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fe2c 	bl	8008184 <CDC_Transmit_FS>
	  HAL_Delay(500);
 800052c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000530:	f000 faf6 	bl	8000b20 <HAL_Delay>
	  count++;
 8000534:	e7d3      	b.n	80004de <main+0x4a>
 8000536:	bf00      	nop
 8000538:	20000250 	.word	0x20000250
 800053c:	080092d8 	.word	0x080092d8
 8000540:	080092f4 	.word	0x080092f4
 8000544:	40020800 	.word	0x40020800

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b092      	sub	sp, #72	; 0x48
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2234      	movs	r2, #52	; 0x34
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f008 fa30 	bl	80089bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xa0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000572:	4a1d      	ldr	r2, [pc, #116]	; (80005e8 <SystemClock_Config+0xa0>)
 8000574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000578:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800057a:	2303      	movs	r3, #3
 800057c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000594:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fb0b 	bl	8002bc0 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005b0:	f000 f8f8 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	2301      	movs	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fe26 	bl	8003220 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 f8e3 	bl	80007a4 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3748      	adds	r7, #72	; 0x48
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C1_Init+0x50>)
 800062a:	f000 fd59 	bl	80010e0 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f8b6 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200001fc 	.word	0x200001fc
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_SPI1_Init+0x60>)
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <MX_SPI1_Init+0x64>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_SPI1_Init+0x60>)
 8000654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_SPI1_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_SPI1_Init+0x60>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_SPI1_Init+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_SPI1_Init+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_SPI1_Init+0x60>)
 8000674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000678:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_SPI1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_SPI1_Init+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_SPI1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_SPI1_Init+0x60>)
 800068e:	220a      	movs	r2, #10
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_SPI1_Init+0x60>)
 8000694:	f003 f874 	bl	8003780 <HAL_SPI_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 800069e:	f000 f881 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000250 	.word	0x20000250
 80006ac:	40013000 	.word	0x40013000

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b34      	ldr	r3, [pc, #208]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a2d      	ldr	r2, [pc, #180]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006e4:	f043 0320 	orr.w	r3, r3, #32
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a27      	ldr	r2, [pc, #156]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_GPIO_Init+0xe8>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_GPIO_Init+0xe8>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_GPIO_Init+0xe8>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_GPIO_Init+0xe8>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	481b      	ldr	r0, [pc, #108]	; (800079c <MX_GPIO_Init+0xec>)
 800072e:	f000 fcbe 	bl	80010ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_NRST_Pin|LoRa_NSS_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2111      	movs	r1, #17
 8000736:	481a      	ldr	r0, [pc, #104]	; (80007a0 <MX_GPIO_Init+0xf0>)
 8000738:	f000 fcb9 	bl	80010ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800073c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_GPIO_Init+0xec>)
 8000756:	f000 fb13 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_NRST_Pin LoRa_NSS_Pin */
  GPIO_InitStruct.Pin = LoRa_NRST_Pin|LoRa_NSS_Pin;
 800075a:	2311      	movs	r3, #17
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0xf0>)
 8000772:	f000 fb05 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_DIO3_Pin LoRa_DIO2_Pin LoRa_DIO1_Pin LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO3_Pin|LoRa_DIO2_Pin|LoRa_DIO1_Pin|LoRa_BUSY_Pin;
 8000776:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_GPIO_Init+0xf0>)
 800078c:	f000 faf8 	bl	8000d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_MspInit+0x58>)
 80007b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <HAL_MspInit+0x58>)
 80007bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c0:	6253      	str	r3, [r2, #36]	; 0x24
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_MspInit+0x58>)
 80007c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_MspInit+0x58>)
 80007d0:	6a1b      	ldr	r3, [r3, #32]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <HAL_MspInit+0x58>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6213      	str	r3, [r2, #32]
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_MspInit+0x58>)
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_MspInit+0x58>)
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_MspInit+0x58>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6253      	str	r3, [r2, #36]	; 0x24
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_MspInit+0x58>)
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <HAL_I2C_MspInit+0x7c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d127      	bne.n	800087e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_I2C_MspInit+0x80>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <HAL_I2C_MspInit+0x80>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_I2C_MspInit+0x80>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000846:	23c0      	movs	r3, #192	; 0xc0
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084a:	2312      	movs	r3, #18
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000856:	2304      	movs	r3, #4
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <HAL_I2C_MspInit+0x84>)
 8000862:	f000 fa8d 	bl	8000d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_I2C_MspInit+0x80>)
 8000868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_I2C_MspInit+0x80>)
 800086c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000870:	6253      	str	r3, [r2, #36]	; 0x24
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_I2C_MspInit+0x80>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40005400 	.word	0x40005400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400

08000894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_SPI_MspInit+0x7c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d127      	bne.n	8000906 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_SPI_MspInit+0x80>)
 80008b8:	6a1b      	ldr	r3, [r3, #32]
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <HAL_SPI_MspInit+0x80>)
 80008bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c0:	6213      	str	r3, [r2, #32]
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_SPI_MspInit+0x80>)
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_SPI_MspInit+0x80>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_SPI_MspInit+0x80>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_SPI_MspInit+0x80>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e6:	23e0      	movs	r3, #224	; 0xe0
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f6:	2305      	movs	r3, #5
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_SPI_MspInit+0x84>)
 8000902:	f000 fa3d 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000962:	f000 f8c1 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <USB_LP_IRQHandler+0x10>)
 8000972:	f000 fdfd 	bl	8001570 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000f54 	.word	0x20000f54

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f007 ffda 	bl	8008968 <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20002800 	.word	0x20002800
 80009e0:	00000400 	.word	0x00000400
 80009e4:	200002a8 	.word	0x200002a8
 80009e8:	20001470 	.word	0x20001470

080009ec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	; (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	; (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a1e:	f7ff ffe5 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a22:	f007 ffa7 	bl	8008974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff fd35 	bl	8000494 <main>
  bx lr
 8000a2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a34:	080093b0 	.word	0x080093b0
  ldr r2, =_sbss
 8000a38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a3c:	20001470 	.word	0x20001470

08000a40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_IRQHandler>

08000a42 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f955 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a52:	200f      	movs	r0, #15
 8000a54:	f000 f80e 	bl	8000a74 <HAL_InitTick>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	e001      	b.n	8000a68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a64:	f7ff fea4 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a68:	79fb      	ldrb	r3, [r7, #7]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_InitTick+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d022      	beq.n	8000ace <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_InitTick+0x6c>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <HAL_InitTick+0x68>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f962 	bl	8000d66 <HAL_SYSTICK_Config>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10f      	bne.n	8000ac8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d809      	bhi.n	8000ac2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab6:	f000 f92c 	bl	8000d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_InitTick+0x70>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e007      	b.n	8000ad2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e004      	b.n	8000ad2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e001      	b.n	8000ad2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x20>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <HAL_IncTick+0x1c>)
 8000af8:	6013      	str	r3, [r2, #0]
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200002ac 	.word	0x200002ac
 8000b08:	20000008 	.word	0x20000008

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <HAL_GetTick+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	200002ac 	.word	0x200002ac

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff fff0 	bl	8000b0c <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d004      	beq.n	8000b44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_Delay+0x40>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b44:	bf00      	nop
 8000b46:	f7ff ffe1 	bl	8000b0c <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d8f7      	bhi.n	8000b46 <HAL_Delay+0x26>
  {
  }
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000008 	.word	0x20000008

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4906      	ldr	r1, [pc, #24]	; (8000bfc <__NVIC_EnableIRQ+0x34>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff90 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff2d 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff42 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff35 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d96:	e154      	b.n	8001042 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8146 	beq.w	800103c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d005      	beq.n	8000dc8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d130      	bne.n	8000e2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000dfe:	2201      	movs	r2, #1
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	f003 0201 	and.w	r2, r3, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d017      	beq.n	8000e66 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d123      	bne.n	8000eba <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	691a      	ldr	r2, [r3, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	6939      	ldr	r1, [r7, #16]
 8000eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0203 	and.w	r2, r3, #3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80a0 	beq.w	800103c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	4b58      	ldr	r3, [pc, #352]	; (8001060 <HAL_GPIO_Init+0x2e0>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a57      	ldr	r2, [pc, #348]	; (8001060 <HAL_GPIO_Init+0x2e0>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	4b55      	ldr	r3, [pc, #340]	; (8001060 <HAL_GPIO_Init+0x2e0>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f14:	4a53      	ldr	r2, [pc, #332]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4b      	ldr	r2, [pc, #300]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d019      	beq.n	8000f74 <HAL_GPIO_Init+0x1f4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4a      	ldr	r2, [pc, #296]	; (800106c <HAL_GPIO_Init+0x2ec>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d013      	beq.n	8000f70 <HAL_GPIO_Init+0x1f0>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a49      	ldr	r2, [pc, #292]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00d      	beq.n	8000f6c <HAL_GPIO_Init+0x1ec>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a48      	ldr	r2, [pc, #288]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0x1e8>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a47      	ldr	r2, [pc, #284]	; (8001078 <HAL_GPIO_Init+0x2f8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d101      	bne.n	8000f64 <HAL_GPIO_Init+0x1e4>
 8000f60:	2304      	movs	r3, #4
 8000f62:	e008      	b.n	8000f76 <HAL_GPIO_Init+0x1f6>
 8000f64:	2305      	movs	r3, #5
 8000f66:	e006      	b.n	8000f76 <HAL_GPIO_Init+0x1f6>
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e004      	b.n	8000f76 <HAL_GPIO_Init+0x1f6>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x1f6>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <HAL_GPIO_Init+0x1f6>
 8000f74:	2300      	movs	r3, #0
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	f002 0203 	and.w	r2, r2, #3
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	4093      	lsls	r3, r2
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f86:	4937      	ldr	r1, [pc, #220]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fb8:	4a30      	ldr	r2, [pc, #192]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fe2:	4a26      	ldr	r2, [pc, #152]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <HAL_GPIO_Init+0x2fc>)
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	f47f aea3 	bne.w	8000d98 <HAL_GPIO_Init+0x18>
  }
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40010000 	.word	0x40010000
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e001      	b.n	80010a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	807b      	strh	r3, [r7, #2]
 80010ba:	4613      	mov	r3, r2
 80010bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010be:	787b      	ldrb	r3, [r7, #1]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010ca:	e003      	b.n	80010d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	041a      	lsls	r2, r3, #16
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e12b      	b.n	800134a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fb80 	bl	800080c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2224      	movs	r2, #36	; 0x24
 8001110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001144:	f002 faa8 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8001148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a81      	ldr	r2, [pc, #516]	; (8001354 <HAL_I2C_Init+0x274>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d807      	bhi.n	8001164 <HAL_I2C_Init+0x84>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a80      	ldr	r2, [pc, #512]	; (8001358 <HAL_I2C_Init+0x278>)
 8001158:	4293      	cmp	r3, r2
 800115a:	bf94      	ite	ls
 800115c:	2301      	movls	r3, #1
 800115e:	2300      	movhi	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	e006      	b.n	8001172 <HAL_I2C_Init+0x92>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a7d      	ldr	r2, [pc, #500]	; (800135c <HAL_I2C_Init+0x27c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	bf94      	ite	ls
 800116c:	2301      	movls	r3, #1
 800116e:	2300      	movhi	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0e7      	b.n	800134a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4a78      	ldr	r2, [pc, #480]	; (8001360 <HAL_I2C_Init+0x280>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	430a      	orrs	r2, r1
 8001198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a6a      	ldr	r2, [pc, #424]	; (8001354 <HAL_I2C_Init+0x274>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d802      	bhi.n	80011b4 <HAL_I2C_Init+0xd4>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3301      	adds	r3, #1
 80011b2:	e009      	b.n	80011c8 <HAL_I2C_Init+0xe8>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	4a69      	ldr	r2, [pc, #420]	; (8001364 <HAL_I2C_Init+0x284>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	099b      	lsrs	r3, r3, #6
 80011c6:	3301      	adds	r3, #1
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	430b      	orrs	r3, r1
 80011ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	495c      	ldr	r1, [pc, #368]	; (8001354 <HAL_I2C_Init+0x274>)
 80011e4:	428b      	cmp	r3, r1
 80011e6:	d819      	bhi.n	800121c <HAL_I2C_Init+0x13c>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1e59      	subs	r1, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f6:	1c59      	adds	r1, r3, #1
 80011f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011fc:	400b      	ands	r3, r1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <HAL_I2C_Init+0x138>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1e59      	subs	r1, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001210:	3301      	adds	r3, #1
 8001212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001216:	e051      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 8001218:	2304      	movs	r3, #4
 800121a:	e04f      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d111      	bne.n	8001248 <HAL_I2C_Init+0x168>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	440b      	add	r3, r1
 8001232:	fbb0 f3f3 	udiv	r3, r0, r3
 8001236:	3301      	adds	r3, #1
 8001238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	e012      	b.n	800126e <HAL_I2C_Init+0x18e>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	0099      	lsls	r1, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_I2C_Init+0x196>
 8001272:	2301      	movs	r3, #1
 8001274:	e022      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10e      	bne.n	800129c <HAL_I2C_Init+0x1bc>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1e58      	subs	r0, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6859      	ldr	r1, [r3, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	440b      	add	r3, r1
 800128c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001290:	3301      	adds	r3, #1
 8001292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129a:	e00f      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	6809      	ldr	r1, [r1, #0]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69da      	ldr	r2, [r3, #28]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6911      	ldr	r1, [r2, #16]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68d2      	ldr	r2, [r2, #12]
 80012f6:	4311      	orrs	r1, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	000186a0 	.word	0x000186a0
 8001358:	001e847f 	.word	0x001e847f
 800135c:	003d08ff 	.word	0x003d08ff
 8001360:	431bde83 	.word	0x431bde83
 8001364:	10624dd3 	.word	0x10624dd3

08001368 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b08b      	sub	sp, #44	; 0x2c
 800136c:	af06      	add	r7, sp, #24
 800136e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e0d0      	b.n	800151c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f007 f84a 	bl	8008428 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fc85 	bl	8003cb0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	e04c      	b.n	8001446 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	3301      	adds	r3, #1
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b298      	uxth	r0, r3
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	3336      	adds	r3, #54	; 0x36
 80013ea:	4602      	mov	r2, r0
 80013ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	3303      	adds	r3, #3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	3338      	adds	r3, #56	; 0x38
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	333c      	adds	r3, #60	; 0x3c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3340      	adds	r3, #64	; 0x40
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3ad      	bcc.n	80013ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e044      	b.n	80014e0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	3301      	adds	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3b5      	bcc.n	8001456 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	687e      	ldr	r6, [r7, #4]
 80014f2:	466d      	mov	r5, sp
 80014f4:	f106 0410 	add.w	r4, r6, #16
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	602b      	str	r3, [r5, #0]
 8001500:	1d33      	adds	r3, r6, #4
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f002 fbed 	bl	8003ce4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001524 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_PCD_Start+0x16>
 8001536:	2302      	movs	r3, #2
 8001538:	e016      	b.n	8001568 <HAL_PCD_Start+0x44>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fb9c 	bl	8003c84 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800154c:	2101      	movs	r1, #1
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f006 ff4c 	bl	80083ec <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f005 f881 	bl	8006660 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f005 f879 	bl	8006674 <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158c:	d102      	bne.n	8001594 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 faf5 	bl	8001b7e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f005 f86b 	bl	8006674 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	d112      	bne.n	80015d0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015bc:	b292      	uxth	r2, r2
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f006 ffab 	bl	800851e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015c8:	2100      	movs	r1, #0
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f8c7 	bl	800175e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 f84d 	bl	8006674 <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015e4:	d10b      	bne.n	80015fe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015f8:	b292      	uxth	r2, r2
 80015fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f005 f836 	bl	8006674 <USB_ReadInterrupts>
 8001608:	4603      	mov	r3, r0
 800160a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800160e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001612:	d10b      	bne.n	800162c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001626:	b292      	uxth	r2, r2
 8001628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f005 f81f 	bl	8006674 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001640:	d126      	bne.n	8001690 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0204 	bic.w	r2, r2, #4
 8001654:	b292      	uxth	r2, r2
 8001656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0208 	bic.w	r2, r2, #8
 800166c:	b292      	uxth	r2, r2
 800166e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f006 ff8c 	bl	8008590 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001680:	b29a      	uxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800168a:	b292      	uxth	r2, r2
 800168c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f004 ffed 	bl	8006674 <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a4:	d126      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0208 	orr.w	r2, r2, #8
 80016b8:	b292      	uxth	r2, r2
 80016ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d0:	b292      	uxth	r2, r2
 80016d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0204 	orr.w	r2, r2, #4
 80016e8:	b292      	uxth	r2, r2
 80016ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f006 ff34 	bl	800855c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 ffbb 	bl	8006674 <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001708:	d10e      	bne.n	8001728 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800171c:	b292      	uxth	r2, r2
 800171e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f006 feed 	bl	8008502 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f004 ffa1 	bl	8006674 <USB_ReadInterrupts>
 8001732:	4603      	mov	r3, r0
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800173c:	d10b      	bne.n	8001756 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001750:	b292      	uxth	r2, r2
 8001752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_PCD_SetAddress+0x1a>
 8001774:	2302      	movs	r3, #2
 8001776:	e013      	b.n	80017a0 <HAL_PCD_SetAddress+0x42>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f004 ff52 	bl	800663a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	70fb      	strb	r3, [r7, #3]
 80017ba:	460b      	mov	r3, r1
 80017bc:	803b      	strh	r3, [r7, #0]
 80017be:	4613      	mov	r3, r2
 80017c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da0e      	bge.n	80017ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	705a      	strb	r2, [r3, #1]
 80017ea:	e00e      	b.n	800180a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	f003 0207 	and.w	r2, r3, #7
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	b2da      	uxtb	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001816:	883a      	ldrh	r2, [r7, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	78ba      	ldrb	r2, [r7, #2]
 8001820:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	785b      	ldrb	r3, [r3, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001834:	78bb      	ldrb	r3, [r7, #2]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d102      	bne.n	8001840 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_PCD_EP_Open+0xa6>
 800184a:	2302      	movs	r3, #2
 800184c:	e00e      	b.n	800186c <HAL_PCD_EP_Open+0xc4>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68f9      	ldr	r1, [r7, #12]
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fa61 	bl	8003d24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800186a:	7afb      	ldrb	r3, [r7, #11]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da0e      	bge.n	80018a6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	705a      	strb	r2, [r3, #1]
 80018a4:	e00e      	b.n	80018c4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 0207 	and.w	r2, r3, #7
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_PCD_EP_Close+0x6a>
 80018da:	2302      	movs	r3, #2
 80018dc:	e00e      	b.n	80018fc <HAL_PCD_EP_Close+0x88>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68f9      	ldr	r1, [r7, #12]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fd83 	bl	80043f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	460b      	mov	r3, r1
 8001912:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001914:	7afb      	ldrb	r3, [r7, #11]
 8001916:	f003 0207 	and.w	r2, r3, #7
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2200      	movs	r2, #0
 8001942:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	b2da      	uxtb	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6979      	ldr	r1, [r7, #20]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 ff35 	bl	80047d0 <USB_EPStartXfer>
 8001966:	e005      	b.n	8001974 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6979      	ldr	r1, [r7, #20]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 ff2e 	bl	80047d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	f003 0207 	and.w	r2, r3, #7
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019a0:	681b      	ldr	r3, [r3, #0]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	460b      	mov	r3, r1
 80019ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2201      	movs	r2, #1
 80019f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a04:	7afb      	ldrb	r3, [r7, #11]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6979      	ldr	r1, [r7, #20]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 fedb 	bl	80047d0 <USB_EPStartXfer>
 8001a1a:	e005      	b.n	8001a28 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6979      	ldr	r1, [r7, #20]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fed4 	bl	80047d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	f003 0207 	and.w	r2, r3, #7
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d901      	bls.n	8001a50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e03e      	b.n	8001ace <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	da0e      	bge.n	8001a76 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2201      	movs	r2, #1
 8001a72:	705a      	strb	r2, [r3, #1]
 8001a74:	e00c      	b.n	8001a90 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_PCD_EP_SetStall+0x7e>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e00e      	b.n	8001ace <HAL_PCD_EP_SetStall+0x9c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 fcbe 	bl	8006440 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 020f 	and.w	r2, r3, #15
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d901      	bls.n	8001af4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e040      	b.n	8001b76 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da0e      	bge.n	8001b1a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	705a      	strb	r2, [r3, #1]
 8001b18:	e00e      	b.n	8001b38 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	f003 0207 	and.w	r2, r3, #7
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_EP_ClrStall+0x82>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e00e      	b.n	8001b76 <HAL_PCD_EP_ClrStall+0xa0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 fcba 	bl	80064e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b08e      	sub	sp, #56	; 0x38
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b86:	e2ec      	b.n	8002162 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b90:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 8161 	bne.w	8001e6a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ba8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d152      	bne.n	8001c58 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc2:	81fb      	strh	r3, [r7, #14]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3328      	adds	r3, #40	; 0x28
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	441a      	add	r2, r3
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c16:	2100      	movs	r1, #0
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f006 fc58 	bl	80084ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 829b 	beq.w	8002162 <PCD_EP_ISR_Handler+0x5e4>
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 8296 	bne.w	8002162 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c56:	e284      	b.n	8002162 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d034      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	3306      	adds	r3, #6
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	f004 fd33 	bl	800671c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	823b      	strh	r3, [r7, #16]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	8a3a      	ldrh	r2, [r7, #16]
 8001ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f006 fbcd 	bl	8008474 <HAL_PCD_SetupStageCallback>
 8001cda:	e242      	b.n	8002162 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cdc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f280 823e 	bge.w	8002162 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	83bb      	strh	r3, [r7, #28]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	8bba      	ldrh	r2, [r7, #28]
 8001cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d00:	b292      	uxth	r2, r2
 8001d02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	3306      	adds	r3, #6
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d019      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x1ee>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d015      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	6959      	ldr	r1, [r3, #20]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f004 fce3 	bl	800671c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	441a      	add	r2, r3
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d64:	2100      	movs	r1, #0
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f006 fb96 	bl	8008498 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 81f2 	bne.w	8002162 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	4413      	add	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d112      	bne.n	8001dcc <PCD_EP_ISR_Handler+0x24e>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	801a      	strh	r2, [r3, #0]
 8001dca:	e02f      	b.n	8001e2c <PCD_EP_ISR_Handler+0x2ae>
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8001dd2:	d813      	bhi.n	8001dfc <PCD_EP_ISR_Handler+0x27e>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <PCD_EP_ISR_Handler+0x270>
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	3301      	adds	r3, #1
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
 8001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	029b      	lsls	r3, r3, #10
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	e017      	b.n	8001e2c <PCD_EP_ISR_Handler+0x2ae>
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <PCD_EP_ISR_Handler+0x298>
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	3b01      	subs	r3, #1
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3c:	827b      	strh	r3, [r7, #18]
 8001e3e:	8a7b      	ldrh	r3, [r7, #18]
 8001e40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e44:	827b      	strh	r3, [r7, #18]
 8001e46:	8a7b      	ldrh	r3, [r7, #18]
 8001e48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e4c:	827b      	strh	r3, [r7, #18]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	8a7b      	ldrh	r3, [r7, #18]
 8001e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	8013      	strh	r3, [r2, #0]
 8001e68:	e17b      	b.n	8002162 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e7c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f280 80ea 	bge.w	800205a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001eb8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	7b1b      	ldrb	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d122      	bne.n	8001f1c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3306      	adds	r3, #6
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8087 	beq.w	8002016 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	6959      	ldr	r1, [r3, #20]
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	88da      	ldrh	r2, [r3, #6]
 8001f14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f16:	f004 fc01 	bl	800671c <USB_ReadPMA>
 8001f1a:	e07c      	b.n	8002016 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	78db      	ldrb	r3, [r3, #3]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d108      	bne.n	8001f36 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f26:	461a      	mov	r2, r3
 8001f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f927 	bl	800217e <HAL_PCD_EP_DB_Receive>
 8001f30:	4603      	mov	r3, r0
 8001f32:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f34:	e06f      	b.n	8002016 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f50:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	441a      	add	r2, r3
 8001f60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d021      	beq.n	8001fd4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d02a      	beq.n	8002016 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	6959      	ldr	r1, [r3, #20]
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	891a      	ldrh	r2, [r3, #8]
 8001fcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fce:	f004 fba5 	bl	800671c <USB_ReadPMA>
 8001fd2:	e020      	b.n	8002016 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3306      	adds	r3, #6
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ffe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	6959      	ldr	r1, [r3, #20]
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	895a      	ldrh	r2, [r3, #10]
 8002010:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002012:	f004 fb83 	bl	800671c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800201c:	441a      	add	r2, r3
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002028:	441a      	add	r2, r3
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d004      	beq.n	8002040 <PCD_EP_ISR_Handler+0x4c2>
 8002036:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d206      	bcs.n	800204e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f006 fa26 	bl	8008498 <HAL_PCD_DataOutStageCallback>
 800204c:	e005      	b.n	800205a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fbbb 	bl	80047d0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800205a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b00      	cmp	r3, #0
 8002062:	d07e      	beq.n	8002162 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002064:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	843b      	strh	r3, [r7, #32]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	441a      	add	r2, r3
 80020a2:	8c3b      	ldrh	r3, [r7, #32]
 80020a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	78db      	ldrb	r3, [r3, #3]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d00c      	beq.n	80020d2 <PCD_EP_ISR_Handler+0x554>
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	78db      	ldrb	r3, [r3, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d146      	bne.n	8002156 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d141      	bne.n	8002156 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	3302      	adds	r3, #2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	8bfb      	ldrh	r3, [r7, #30]
 8002102:	429a      	cmp	r2, r3
 8002104:	d906      	bls.n	8002114 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	8bfb      	ldrh	r3, [r7, #30]
 800210c:	1ad2      	subs	r2, r2, r3
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	619a      	str	r2, [r3, #24]
 8002112:	e002      	b.n	800211a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f006 f9d0 	bl	80084ce <HAL_PCD_DataInStageCallback>
 800212e:	e018      	b.n	8002162 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	8bfb      	ldrh	r3, [r7, #30]
 8002136:	441a      	add	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	8bfb      	ldrh	r3, [r7, #30]
 8002142:	441a      	add	r2, r3
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800214e:	4618      	mov	r0, r3
 8002150:	f002 fb3e 	bl	80047d0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002154:	e005      	b.n	8002162 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002156:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002158:	461a      	mov	r2, r3
 800215a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f91b 	bl	8002398 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216a:	b29b      	uxth	r3, r3
 800216c:	b21b      	sxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f6ff ad0a 	blt.w	8001b88 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3738      	adds	r7, #56	; 0x38
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b088      	sub	sp, #32
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	4613      	mov	r3, r2
 800218a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d07e      	beq.n	8002294 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	3302      	adds	r3, #2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	8b7b      	ldrh	r3, [r7, #26]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d306      	bcc.n	80021d8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	1ad2      	subs	r2, r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	619a      	str	r2, [r3, #24]
 80021d6:	e002      	b.n	80021de <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d123      	bne.n	800222e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002200:	833b      	strh	r3, [r7, #24]
 8002202:	8b3b      	ldrh	r3, [r7, #24]
 8002204:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002208:	833b      	strh	r3, [r7, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	441a      	add	r2, r3
 8002218:	8b3b      	ldrh	r3, [r7, #24]
 800221a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222a:	b29b      	uxth	r3, r3
 800222c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01f      	beq.n	8002278 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	82fb      	strh	r3, [r7, #22]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	441a      	add	r2, r3
 8002262:	8afb      	ldrh	r3, [r7, #22]
 8002264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800226c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002274:	b29b      	uxth	r3, r3
 8002276:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002278:	8b7b      	ldrh	r3, [r7, #26]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8087 	beq.w	800238e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	6959      	ldr	r1, [r3, #20]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	891a      	ldrh	r2, [r3, #8]
 800228c:	8b7b      	ldrh	r3, [r7, #26]
 800228e:	f004 fa45 	bl	800671c <USB_ReadPMA>
 8002292:	e07c      	b.n	800238e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	3306      	adds	r3, #6
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	8b7b      	ldrh	r3, [r7, #26]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d306      	bcc.n	80022d6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	8b7b      	ldrh	r3, [r7, #26]
 80022ce:	1ad2      	subs	r2, r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	619a      	str	r2, [r3, #24]
 80022d4:	e002      	b.n	80022dc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d123      	bne.n	800232c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	83fb      	strh	r3, [r7, #30]
 8002300:	8bfb      	ldrh	r3, [r7, #30]
 8002302:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002306:	83fb      	strh	r3, [r7, #30]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	8bfb      	ldrh	r3, [r7, #30]
 8002318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002328:	b29b      	uxth	r3, r3
 800232a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11f      	bne.n	8002376 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002350:	83bb      	strh	r3, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	441a      	add	r2, r3
 8002360:	8bbb      	ldrh	r3, [r7, #28]
 8002362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002372:	b29b      	uxth	r3, r3
 8002374:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002376:	8b7b      	ldrh	r3, [r7, #26]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6959      	ldr	r1, [r3, #20]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	895a      	ldrh	r2, [r3, #10]
 8002388:	8b7b      	ldrh	r3, [r7, #26]
 800238a:	f004 f9c7 	bl	800671c <USB_ReadPMA>
    }
  }

  return count;
 800238e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b0a2      	sub	sp, #136	; 0x88
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 81c7 	beq.w	8002740 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	3302      	adds	r3, #2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d907      	bls.n	80023fa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023f2:	1ad2      	subs	r2, r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	619a      	str	r2, [r3, #24]
 80023f8:	e002      	b.n	8002400 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 80b9 	bne.w	800257c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d126      	bne.n	8002460 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	4413      	add	r3, r2
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	011a      	lsls	r2, r3, #4
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	4413      	add	r3, r2
 8002434:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002444:	b29a      	uxth	r2, r3
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002458:	b29a      	uxth	r2, r3
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e01a      	b.n	8002496 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d116      	bne.n	8002496 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	4413      	add	r3, r2
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	011a      	lsls	r2, r3, #4
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	4413      	add	r3, r2
 800248a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	2200      	movs	r2, #0
 8002494:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	623b      	str	r3, [r7, #32]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	785b      	ldrb	r3, [r3, #1]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d126      	bne.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x15a>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	011a      	lsls	r2, r3, #4
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	801a      	strh	r2, [r3, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	801a      	strh	r2, [r3, #0]
 80024f0:	e017      	b.n	8002522 <HAL_PCD_EP_DB_Transmit+0x18a>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d113      	bne.n	8002522 <HAL_PCD_EP_DB_Transmit+0x18a>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	4413      	add	r3, r2
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	011a      	lsls	r2, r3, #4
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	4413      	add	r3, r2
 8002516:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2200      	movs	r2, #0
 8002520:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f005 ffd0 	bl	80084ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 82d4 	beq.w	8002ae2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002554:	827b      	strh	r3, [r7, #18]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	441a      	add	r2, r3
 8002564:	8a7b      	ldrh	r3, [r7, #18]
 8002566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800256a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800256e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002576:	b29b      	uxth	r3, r3
 8002578:	8013      	strh	r3, [r2, #0]
 800257a:	e2b2      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d021      	beq.n	80025ca <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	441a      	add	r2, r3
 80025b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	f040 8286 	bne.w	8002ae2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025de:	441a      	add	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ec:	441a      	add	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d309      	bcc.n	8002612 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260a:	1ad2      	subs	r2, r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	621a      	str	r2, [r3, #32]
 8002610:	e015      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d107      	bne.n	800262a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800261a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800261e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002628:	e009      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d155      	bne.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	63bb      	str	r3, [r7, #56]	; 0x38
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002654:	b29b      	uxth	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	4413      	add	r3, r2
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	011a      	lsls	r2, r3, #4
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	4413      	add	r3, r2
 8002668:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
 800266e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002670:	2b00      	cmp	r3, #0
 8002672:	d112      	bne.n	800269a <HAL_PCD_EP_DB_Transmit+0x302>
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800267e:	b29a      	uxth	r2, r3
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002692:	b29a      	uxth	r2, r3
 8002694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002696:	801a      	strh	r2, [r3, #0]
 8002698:	e047      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x392>
 800269a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269c:	2b3e      	cmp	r3, #62	; 0x3e
 800269e:	d811      	bhi.n	80026c4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80026a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80026b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b2:	3301      	adds	r3, #1
 80026b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	e032      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x392>
 80026c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <HAL_PCD_EP_DB_Transmit+0x342>
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	3b01      	subs	r3, #1
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026dc:	b29b      	uxth	r3, r3
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	e01b      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x392>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d117      	bne.n	800272a <HAL_PCD_EP_DB_Transmit+0x392>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270e:	4413      	add	r3, r2
 8002710:	643b      	str	r3, [r7, #64]	; 0x40
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	011a      	lsls	r2, r3, #4
 8002718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271a:	4413      	add	r3, r2
 800271c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002724:	b29a      	uxth	r2, r3
 8002726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002728:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6959      	ldr	r1, [r3, #20]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	891a      	ldrh	r2, [r3, #8]
 8002736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	f003 ffaa 	bl	8006692 <USB_WritePMA>
 800273e:	e1d0      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	3306      	adds	r3, #6
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002768:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002774:	429a      	cmp	r2, r3
 8002776:	d307      	bcc.n	8002788 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	619a      	str	r2, [r3, #24]
 8002786:	e002      	b.n	800278e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 80c4 	bne.w	8002920 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d126      	bne.n	80027ee <HAL_PCD_EP_DB_Transmit+0x456>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	4413      	add	r3, r2
 80027b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	011a      	lsls	r2, r3, #4
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	4413      	add	r3, r2
 80027c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d6:	801a      	strh	r2, [r3, #0]
 80027d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	e01a      	b.n	8002824 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d116      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	677b      	str	r3, [r7, #116]	; 0x74
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280a:	4413      	add	r3, r2
 800280c:	677b      	str	r3, [r7, #116]	; 0x74
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	011a      	lsls	r2, r3, #4
 8002814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002816:	4413      	add	r3, r2
 8002818:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800281c:	673b      	str	r3, [r7, #112]	; 0x70
 800281e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002820:	2200      	movs	r2, #0
 8002822:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	67bb      	str	r3, [r7, #120]	; 0x78
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d12f      	bne.n	8002892 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284a:	4413      	add	r3, r2
 800284c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	011a      	lsls	r2, r3, #4
 8002856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800285a:	4413      	add	r3, r2
 800285c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002870:	b29a      	uxth	r2, r3
 8002872:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002876:	801a      	strh	r2, [r3, #0]
 8002878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002888:	b29a      	uxth	r2, r3
 800288a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	e017      	b.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	785b      	ldrb	r3, [r3, #1]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d113      	bne.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x52a>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a8:	4413      	add	r3, r2
 80028aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	011a      	lsls	r2, r3, #4
 80028b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028be:	2200      	movs	r2, #0
 80028c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	4619      	mov	r1, r3
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f005 fe00 	bl	80084ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 8104 	bne.w	8002ae2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	441a      	add	r2, r3
 8002906:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800290a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800290e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291a:	b29b      	uxth	r3, r3
 800291c:	8013      	strh	r3, [r2, #0]
 800291e:	e0e0      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d121      	bne.n	800296e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002944:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800295a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800295e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296a:	b29b      	uxth	r3, r3
 800296c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002974:	2b01      	cmp	r3, #1
 8002976:	f040 80b4 	bne.w	8002ae2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002982:	441a      	add	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002990:	441a      	add	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6a1a      	ldr	r2, [r3, #32]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d309      	bcc.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ae:	1ad2      	subs	r2, r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	621a      	str	r2, [r3, #32]
 80029b4:	e015      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d107      	bne.n	80029ce <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80029be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029cc:	e009      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	667b      	str	r3, [r7, #100]	; 0x64
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d155      	bne.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x704>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a04:	4413      	add	r3, r2
 8002a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	011a      	lsls	r2, r3, #4
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a10:	4413      	add	r3, r2
 8002a12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d112      	bne.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	e044      	b.n	8002ace <HAL_PCD_EP_DB_Transmit+0x736>
 8002a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a46:	2b3e      	cmp	r3, #62	; 0x3e
 8002a48:	d811      	bhi.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	029b      	lsls	r3, r3, #10
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	e02f      	b.n	8002ace <HAL_PCD_EP_DB_Transmit+0x736>
 8002a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	657b      	str	r3, [r7, #84]	; 0x54
 8002a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a80:	3b01      	subs	r3, #1
 8002a82:	657b      	str	r3, [r7, #84]	; 0x54
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	029b      	lsls	r3, r3, #10
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a98:	801a      	strh	r2, [r3, #0]
 8002a9a:	e018      	b.n	8002ace <HAL_PCD_EP_DB_Transmit+0x736>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d114      	bne.n	8002ace <HAL_PCD_EP_DB_Transmit+0x736>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab2:	4413      	add	r3, r2
 8002ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	011a      	lsls	r2, r3, #4
 8002abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abe:	4413      	add	r3, r2
 8002ac0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002acc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6959      	ldr	r1, [r3, #20]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	895a      	ldrh	r2, [r3, #10]
 8002ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f003 fdd8 	bl	8006692 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002afc:	823b      	strh	r3, [r7, #16]
 8002afe:	8a3b      	ldrh	r3, [r7, #16]
 8002b00:	f083 0310 	eor.w	r3, r3, #16
 8002b04:	823b      	strh	r3, [r7, #16]
 8002b06:	8a3b      	ldrh	r3, [r7, #16]
 8002b08:	f083 0320 	eor.w	r3, r3, #32
 8002b0c:	823b      	strh	r3, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	441a      	add	r2, r3
 8002b1c:	8a3b      	ldrh	r3, [r7, #16]
 8002b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3788      	adds	r7, #136	; 0x88
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	817b      	strh	r3, [r7, #10]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e009      	b.n	8002b86 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b72:	897a      	ldrh	r2, [r7, #10]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b86:	893b      	ldrh	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	80da      	strh	r2, [r3, #6]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e31d      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd2:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bdc:	4b91      	ldr	r3, [pc, #580]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d07b      	beq.n	8002cea <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d006      	beq.n	8002c06 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d10f      	bne.n	8002c1e <HAL_RCC_OscConfig+0x5e>
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d10b      	bne.n	8002c1e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c06:	4b87      	ldr	r3, [pc, #540]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d06a      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x128>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d166      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e2f7      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x74>
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7e      	ldr	r2, [pc, #504]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e02d      	b.n	8002c90 <HAL_RCC_OscConfig+0xd0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x96>
 8002c3c:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a78      	ldr	r2, [pc, #480]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a75      	ldr	r2, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0xd0>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0xb8>
 8002c5e:	4b71      	ldr	r3, [pc, #452]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a70      	ldr	r2, [pc, #448]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6d      	ldr	r2, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xd0>
 8002c78:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a66      	ldr	r2, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fd ff38 	bl	8000b0c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fd ff34 	bl	8000b0c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e2ad      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb2:	4b5c      	ldr	r3, [pc, #368]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xe0>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fd ff24 	bl	8000b0c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fd ff20 	bl	8000b0c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e299      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cda:	4b52      	ldr	r3, [pc, #328]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x108>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d05a      	beq.n	8002dac <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d119      	bne.n	8002d36 <HAL_RCC_OscConfig+0x176>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d08:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x160>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e276      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	493d      	ldr	r1, [pc, #244]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d34:	e03a      	b.n	8002dac <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d020      	beq.n	8002d80 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <HAL_RCC_OscConfig+0x268>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fd fee2 	bl	8000b0c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7fd fede 	bl	8000b0c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e257      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	492a      	ldr	r1, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	e015      	b.n	8002dac <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d80:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <HAL_RCC_OscConfig+0x268>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fd fec1 	bl	8000b0c <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fd febd 	bl	8000b0c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e236      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80b8 	beq.w	8002f2a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d170      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x218>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e21a      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1a      	ldr	r2, [r3, #32]
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d921      	bls.n	8002e2c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fc67 	bl	80036c0 <RCC_SetFlashLatencyFromMSIRange>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e208      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4906      	ldr	r1, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	4901      	ldr	r1, [pc, #4]	; (8002e24 <HAL_RCC_OscConfig+0x264>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
 8002e22:	e020      	b.n	8002e66 <HAL_RCC_OscConfig+0x2a6>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2c:	4b99      	ldr	r3, [pc, #612]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4996      	ldr	r1, [pc, #600]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3e:	4b95      	ldr	r3, [pc, #596]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	4991      	ldr	r1, [pc, #580]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fc32 	bl	80036c0 <RCC_SetFlashLatencyFromMSIRange>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1d3      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	0b5b      	lsrs	r3, r3, #13
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e76:	4a87      	ldr	r2, [pc, #540]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002e78:	6892      	ldr	r2, [r2, #8]
 8002e7a:	0912      	lsrs	r2, r2, #4
 8002e7c:	f002 020f 	and.w	r2, r2, #15
 8002e80:	4985      	ldr	r1, [pc, #532]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002e82:	5c8a      	ldrb	r2, [r1, r2]
 8002e84:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e86:	4a85      	ldr	r2, [pc, #532]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002e88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e8a:	4b85      	ldr	r3, [pc, #532]	; (80030a0 <HAL_RCC_OscConfig+0x4e0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fdf0 	bl	8000a74 <HAL_InitTick>
 8002e94:	4603      	mov	r3, r0
 8002e96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d045      	beq.n	8002f2a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	e1b5      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d029      	beq.n	8002efe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eaa:	4b7e      	ldr	r3, [pc, #504]	; (80030a4 <HAL_RCC_OscConfig+0x4e4>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fd fe2c 	bl	8000b0c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb8:	f7fd fe28 	bl	8000b0c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1a1      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eca:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	496c      	ldr	r1, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee8:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	4967      	ldr	r1, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
 8002efc:	e015      	b.n	8002f2a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002efe:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <HAL_RCC_OscConfig+0x4e4>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fd fe02 	bl	8000b0c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f0c:	f7fd fdfe 	bl	8000b0c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e177      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d030      	beq.n	8002f98 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d016      	beq.n	8002f6c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f3e:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <HAL_RCC_OscConfig+0x4e8>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7fd fde2 	bl	8000b0c <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4c:	f7fd fdde 	bl	8000b0c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e157      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f5e:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x38c>
 8002f6a:	e015      	b.n	8002f98 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6c:	4b4e      	ldr	r3, [pc, #312]	; (80030a8 <HAL_RCC_OscConfig+0x4e8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fd fdcb 	bl	8000b0c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7fd fdc7 	bl	8000b0c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e140      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f8c:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80b5 	beq.w	8003110 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002faa:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b37      	ldr	r3, [pc, #220]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	4a36      	ldr	r2, [pc, #216]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6253      	str	r3, [r2, #36]	; 0x24
 8002fc2:	4b34      	ldr	r3, [pc, #208]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCC_OscConfig+0x4ec>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d118      	bne.n	8003010 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b33      	ldr	r3, [pc, #204]	; (80030ac <HAL_RCC_OscConfig+0x4ec>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a32      	ldr	r2, [pc, #200]	; (80030ac <HAL_RCC_OscConfig+0x4ec>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7fd fd8f 	bl	8000b0c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7fd fd8b 	bl	8000b0c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b64      	cmp	r3, #100	; 0x64
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e104      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_RCC_OscConfig+0x4ec>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x466>
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6353      	str	r3, [r2, #52]	; 0x34
 8003024:	e02d      	b.n	8003082 <HAL_RCC_OscConfig+0x4c2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x488>
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8003034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003038:	6353      	str	r3, [r2, #52]	; 0x34
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8003040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003044:	6353      	str	r3, [r2, #52]	; 0x34
 8003046:	e01c      	b.n	8003082 <HAL_RCC_OscConfig+0x4c2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x4aa>
 8003050:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8003056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305a:	6353      	str	r3, [r2, #52]	; 0x34
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8003062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003066:	6353      	str	r3, [r2, #52]	; 0x34
 8003068:	e00b      	b.n	8003082 <HAL_RCC_OscConfig+0x4c2>
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8003070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003074:	6353      	str	r3, [r2, #52]	; 0x34
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	4a06      	ldr	r2, [pc, #24]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 800307c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003080:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d024      	beq.n	80030d4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308a:	f7fd fd3f 	bl	8000b0c <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003090:	e019      	b.n	80030c6 <HAL_RCC_OscConfig+0x506>
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	08009354 	.word	0x08009354
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000004 	.word	0x20000004
 80030a4:	42470020 	.word	0x42470020
 80030a8:	42470680 	.word	0x42470680
 80030ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fd fd2c 	bl	8000b0c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0a3      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030c6:	4b54      	ldr	r3, [pc, #336]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ee      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4f0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d4:	f7fd fd1a 	bl	8000b0c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030dc:	f7fd fd16 	bl	8000b0c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e08d      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030f2:	4b49      	ldr	r3, [pc, #292]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1ee      	bne.n	80030dc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003104:	4b44      	ldr	r3, [pc, #272]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	4a43      	ldr	r2, [pc, #268]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d079      	beq.n	800320c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d056      	beq.n	80031cc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b02      	cmp	r3, #2
 8003124:	d13b      	bne.n	800319e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b3d      	ldr	r3, [pc, #244]	; (800321c <HAL_RCC_OscConfig+0x65c>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fd fcee 	bl	8000b0c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fd fcea 	bl	8000b0c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e063      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003146:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003152:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	4319      	orrs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	430b      	orrs	r3, r1
 800316a:	492b      	ldr	r1, [pc, #172]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 800316c:	4313      	orrs	r3, r2
 800316e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b2a      	ldr	r3, [pc, #168]	; (800321c <HAL_RCC_OscConfig+0x65c>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fd fcc9 	bl	8000b0c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317e:	f7fd fcc5 	bl	8000b0c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e03e      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x5be>
 800319c:	e036      	b.n	800320c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_RCC_OscConfig+0x65c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fd fcb2 	bl	8000b0c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd fcae 	bl	8000b0c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e027      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x5ec>
 80031ca:	e01f      	b.n	800320c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e01a      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_RCC_OscConfig+0x658>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d10d      	bne.n	8003208 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	42470060 	.word	0x42470060

08003220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e11a      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b8f      	ldr	r3, [pc, #572]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d919      	bls.n	8003276 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d105      	bne.n	8003254 <HAL_RCC_ClockConfig+0x34>
 8003248:	4b8a      	ldr	r3, [pc, #552]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a89      	ldr	r2, [pc, #548]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b87      	ldr	r3, [pc, #540]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 0201 	bic.w	r2, r3, #1
 800325c:	4985      	ldr	r1, [pc, #532]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003264:	4b83      	ldr	r3, [pc, #524]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d001      	beq.n	8003276 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0f9      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003282:	4b7d      	ldr	r3, [pc, #500]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	497a      	ldr	r1, [pc, #488]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 808e 	beq.w	80033be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032aa:	4b73      	ldr	r3, [pc, #460]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d121      	bne.n	80032fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0d7      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c2:	4b6d      	ldr	r3, [pc, #436]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d115      	bne.n	80032fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0cb      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032da:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0bf      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032ea:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0b7      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	495c      	ldr	r1, [pc, #368]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fd fbfe 	bl	8000b0c <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d112      	bne.n	8003340 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fd fbf6 	bl	8000b0c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e09b      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003332:	4b51      	ldr	r3, [pc, #324]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b08      	cmp	r3, #8
 800333c:	d1ee      	bne.n	800331c <HAL_RCC_ClockConfig+0xfc>
 800333e:	e03e      	b.n	80033be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d112      	bne.n	800336e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334a:	f7fd fbdf 	bl	8000b0c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e084      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003360:	4b45      	ldr	r3, [pc, #276]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d1ee      	bne.n	800334a <HAL_RCC_ClockConfig+0x12a>
 800336c:	e027      	b.n	80033be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d11d      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fd fbc8 	bl	8000b0c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e06d      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800338e:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_ClockConfig+0x158>
 800339a:	e010      	b.n	80033be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339c:	f7fd fbb6 	bl	8000b0c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e05b      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033b2:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ee      	bne.n	800339c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033be:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d219      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <HAL_RCC_ClockConfig+0x1be>
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a27      	ldr	r2, [pc, #156]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b25      	ldr	r3, [pc, #148]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0201 	bic.w	r2, r3, #1
 80033e6:	4923      	ldr	r1, [pc, #140]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b21      	ldr	r3, [pc, #132]	; (8003474 <HAL_RCC_ClockConfig+0x254>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e034      	b.n	800346a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4917      	ldr	r1, [pc, #92]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	490f      	ldr	r1, [pc, #60]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800343e:	f000 f823 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8003442:	4602      	mov	r2, r0
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_RCC_ClockConfig+0x258>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	490b      	ldr	r1, [pc, #44]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003450:	5ccb      	ldrb	r3, [r1, r3]
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_ClockConfig+0x264>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fb08 	bl	8000a74 <HAL_InitTick>
 8003464:	4603      	mov	r3, r0
 8003466:	72fb      	strb	r3, [r7, #11]

  return status;
 8003468:	7afb      	ldrb	r3, [r7, #11]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023c00 	.word	0x40023c00
 8003478:	40023800 	.word	0x40023800
 800347c:	08009354 	.word	0x08009354
 8003480:	20000000 	.word	0x20000000
 8003484:	20000004 	.word	0x20000004

08003488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800348c:	b092      	sub	sp, #72	; 0x48
 800348e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003490:	4b79      	ldr	r3, [pc, #484]	; (8003678 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d00d      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x34>
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	f200 80d5 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x1c8>
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x28>
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0x2e>
 80034ae:	e0cf      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b72      	ldr	r3, [pc, #456]	; (800367c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034b2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034b4:	e0da      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034b6:	4b71      	ldr	r3, [pc, #452]	; (800367c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034b8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034ba:	e0d7      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034be:	0c9b      	lsrs	r3, r3, #18
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	4b6e      	ldr	r3, [pc, #440]	; (8003680 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034c6:	5c9b      	ldrb	r3, [r3, r2]
 80034c8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034cc:	0d9b      	lsrs	r3, r3, #22
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	3301      	adds	r3, #1
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d6:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d05d      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2200      	movs	r2, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	4611      	mov	r1, r2
 80034ea:	4604      	mov	r4, r0
 80034ec:	460d      	mov	r5, r1
 80034ee:	4622      	mov	r2, r4
 80034f0:	462b      	mov	r3, r5
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f04f 0100 	mov.w	r1, #0
 80034fa:	0159      	lsls	r1, r3, #5
 80034fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003500:	0150      	lsls	r0, r2, #5
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4621      	mov	r1, r4
 8003508:	1a51      	subs	r1, r2, r1
 800350a:	6139      	str	r1, [r7, #16]
 800350c:	4629      	mov	r1, r5
 800350e:	eb63 0301 	sbc.w	r3, r3, r1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003520:	4659      	mov	r1, fp
 8003522:	018b      	lsls	r3, r1, #6
 8003524:	4651      	mov	r1, sl
 8003526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800352a:	4651      	mov	r1, sl
 800352c:	018a      	lsls	r2, r1, #6
 800352e:	46d4      	mov	ip, sl
 8003530:	ebb2 080c 	subs.w	r8, r2, ip
 8003534:	4659      	mov	r1, fp
 8003536:	eb63 0901 	sbc.w	r9, r3, r1
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354e:	4690      	mov	r8, r2
 8003550:	4699      	mov	r9, r3
 8003552:	4623      	mov	r3, r4
 8003554:	eb18 0303 	adds.w	r3, r8, r3
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	462b      	mov	r3, r5
 800355c:	eb49 0303 	adc.w	r3, r9, r3
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800356e:	4629      	mov	r1, r5
 8003570:	028b      	lsls	r3, r1, #10
 8003572:	4620      	mov	r0, r4
 8003574:	4629      	mov	r1, r5
 8003576:	4604      	mov	r4, r0
 8003578:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800357c:	4601      	mov	r1, r0
 800357e:	028a      	lsls	r2, r1, #10
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	2200      	movs	r2, #0
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
 800358a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800358c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003590:	f7fc fdfc 	bl	800018c <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	647b      	str	r3, [r7, #68]	; 0x44
 800359c:	e055      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2200      	movs	r2, #0
 80035a2:	623b      	str	r3, [r7, #32]
 80035a4:	627a      	str	r2, [r7, #36]	; 0x24
 80035a6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035aa:	4642      	mov	r2, r8
 80035ac:	464b      	mov	r3, r9
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035bc:	0150      	lsls	r0, r2, #5
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	46c4      	mov	ip, r8
 80035c4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80035c8:	4640      	mov	r0, r8
 80035ca:	4649      	mov	r1, r9
 80035cc:	468c      	mov	ip, r1
 80035ce:	eb63 0b0c 	sbc.w	fp, r3, ip
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035de:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035e2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035e6:	ebb2 040a 	subs.w	r4, r2, sl
 80035ea:	eb63 050b 	sbc.w	r5, r3, fp
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	00eb      	lsls	r3, r5, #3
 80035f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fc:	00e2      	lsls	r2, r4, #3
 80035fe:	4614      	mov	r4, r2
 8003600:	461d      	mov	r5, r3
 8003602:	4603      	mov	r3, r0
 8003604:	18e3      	adds	r3, r4, r3
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	460b      	mov	r3, r1
 800360a:	eb45 0303 	adc.w	r3, r5, r3
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361c:	4629      	mov	r1, r5
 800361e:	028b      	lsls	r3, r1, #10
 8003620:	4620      	mov	r0, r4
 8003622:	4629      	mov	r1, r5
 8003624:	4604      	mov	r4, r0
 8003626:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800362a:	4601      	mov	r1, r0
 800362c:	028a      	lsls	r2, r1, #10
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003634:	2200      	movs	r2, #0
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	61fa      	str	r2, [r7, #28]
 800363a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800363e:	f7fc fda5 	bl	800018c <__aeabi_uldivmod>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4613      	mov	r3, r2
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800364a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800364e:	e00d      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	0b5b      	lsrs	r3, r3, #13
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	3301      	adds	r3, #1
 8003660:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800366a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800366e:	4618      	mov	r0, r3
 8003670:	3748      	adds	r7, #72	; 0x48
 8003672:	46bd      	mov	sp, r7
 8003674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	00f42400 	.word	0x00f42400
 8003680:	08009348 	.word	0x08009348

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <HAL_RCC_GetHCLKFreq+0x10>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000000 	.word	0x20000000

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff2 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08009364 	.word	0x08009364

080036c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036cc:	4b29      	ldr	r3, [pc, #164]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d12c      	bne.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036d8:	4b26      	ldr	r3, [pc, #152]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e016      	b.n	800371e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b20      	ldr	r3, [pc, #128]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fa:	6253      	str	r3, [r2, #36]	; 0x24
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003710:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003724:	d105      	bne.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800372c:	d101      	bne.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800372e:	2301      	movs	r3, #1
 8003730:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0f      	ldr	r2, [pc, #60]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 0201 	bic.w	r2, r3, #1
 800374c:	490b      	ldr	r1, [pc, #44]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000
 800377c:	40023c00 	.word	0x40023c00

08003780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06e      	b.n	8003870 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b00      	cmp	r3, #0
 8003798:	d108      	bne.n	80037ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a2:	d009      	beq.n	80037b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	61da      	str	r2, [r3, #28]
 80037aa:	e005      	b.n	80037b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd f85e 	bl	8000894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	ea42 0103 	orr.w	r1, r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	0c1a      	lsrs	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f002 0204 	and.w	r2, r2, #4
 800385e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_SPI_Transmit+0x22>
 8003896:	2302      	movs	r3, #2
 8003898:	e126      	b.n	8003ae8 <HAL_SPI_Transmit+0x270>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a2:	f7fd f933 	bl	8000b0c <HAL_GetTick>
 80038a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d002      	beq.n	80038be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
 80038ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038bc:	e10b      	b.n	8003ad6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_SPI_Transmit+0x52>
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ce:	e102      	b.n	8003ad6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2203      	movs	r2, #3
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003916:	d10f      	bne.n	8003938 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003926:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003936:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d007      	beq.n	8003956 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395e:	d14b      	bne.n	80039f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_SPI_Transmit+0xf6>
 8003968:	8afb      	ldrh	r3, [r7, #22]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d13e      	bne.n	80039ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	881a      	ldrh	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	1c9a      	adds	r2, r3, #2
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003992:	e02b      	b.n	80039ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d112      	bne.n	80039c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	881a      	ldrh	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	1c9a      	adds	r2, r3, #2
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c6:	e011      	b.n	80039ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c8:	f7fd f8a0 	bl	8000b0c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d803      	bhi.n	80039e0 <HAL_SPI_Transmit+0x168>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d102      	bne.n	80039e6 <HAL_SPI_Transmit+0x16e>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039ea:	e074      	b.n	8003ad6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ce      	bne.n	8003994 <HAL_SPI_Transmit+0x11c>
 80039f6:	e04c      	b.n	8003a92 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_Transmit+0x18e>
 8003a00:	8afb      	ldrh	r3, [r7, #22]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d140      	bne.n	8003a88 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	7812      	ldrb	r2, [r2, #0]
 8003a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a2c:	e02c      	b.n	8003a88 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d113      	bne.n	8003a64 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a62:	e011      	b.n	8003a88 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a64:	f7fd f852 	bl	8000b0c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d803      	bhi.n	8003a7c <HAL_SPI_Transmit+0x204>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d102      	bne.n	8003a82 <HAL_SPI_Transmit+0x20a>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a86:	e026      	b.n	8003ad6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1cd      	bne.n	8003a2e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f8b2 	bl	8003c00 <SPI_EndRxTxTransaction>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e000      	b.n	8003ad6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ad4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b00:	f7fd f804 	bl	8000b0c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b10:	f7fc fffc 	bl	8000b0c <HAL_GetTick>
 8003b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b16:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	015b      	lsls	r3, r3, #5
 8003b1c:	0d1b      	lsrs	r3, r3, #20
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b26:	e054      	b.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d050      	beq.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b30:	f7fc ffec 	bl	8000b0c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d902      	bls.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d13d      	bne.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b5e:	d111      	bne.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b68:	d004      	beq.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b72:	d107      	bne.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8c:	d10f      	bne.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e017      	b.n	8003bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d19b      	bne.n	8003b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000000 	.word	0x20000000

08003c00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <SPI_EndRxTxTransaction+0x7c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <SPI_EndRxTxTransaction+0x80>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0d5b      	lsrs	r3, r3, #21
 8003c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2a:	d112      	bne.n	8003c52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff ff5a 	bl	8003af0 <SPI_WaitFlagStateUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e00f      	b.n	8003c72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	2b80      	cmp	r3, #128	; 0x80
 8003c6a:	d0f2      	beq.n	8003c52 <SPI_EndRxTxTransaction+0x52>
 8003c6c:	e000      	b.n	8003c70 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c6e:	bf00      	nop
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	165e9f81 	.word	0x165e9f81

08003c84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	f107 0014 	add.w	r0, r7, #20
 8003cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	b004      	add	sp, #16
 8003d22:	4770      	bx	lr

08003d24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b09b      	sub	sp, #108	; 0x6c
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	78db      	ldrb	r3, [r3, #3]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d81f      	bhi.n	8003d96 <USB_ActivateEndpoint+0x72>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <USB_ActivateEndpoint+0x38>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d9f 	.word	0x08003d9f
 8003d68:	08003d7b 	.word	0x08003d7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d6c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d78:	e012      	b.n	8003da0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d7e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d86:	e00b      	b.n	8003da0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d94:	e004      	b.n	8003da0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003d9c:	e000      	b.n	8003da0 <USB_ActivateEndpoint+0x7c>
      break;
 8003d9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	7b1b      	ldrb	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 8149 	bne.w	80040a4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8084 	beq.w	8003f24 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	011a      	lsls	r2, r3, #4
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	88db      	ldrh	r3, [r3, #6]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	81fb      	strh	r3, [r7, #14]
 8003e5e:	89fb      	ldrh	r3, [r7, #14]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01b      	beq.n	8003ea0 <USB_ActivateEndpoint+0x17c>
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	81bb      	strh	r3, [r7, #12]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	441a      	add	r2, r3
 8003e8a:	89bb      	ldrh	r3, [r7, #12]
 8003e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	78db      	ldrb	r3, [r3, #3]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d020      	beq.n	8003eea <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebe:	813b      	strh	r3, [r7, #8]
 8003ec0:	893b      	ldrh	r3, [r7, #8]
 8003ec2:	f083 0320 	eor.w	r3, r3, #32
 8003ec6:	813b      	strh	r3, [r7, #8]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	893b      	ldrh	r3, [r7, #8]
 8003ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	8013      	strh	r3, [r2, #0]
 8003ee8:	e27f      	b.n	80043ea <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f00:	817b      	strh	r3, [r7, #10]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	897b      	ldrh	r3, [r7, #10]
 8003f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	8013      	strh	r3, [r2, #0]
 8003f22:	e262      	b.n	80043ea <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	4413      	add	r3, r2
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	011a      	lsls	r2, r3, #4
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	88db      	ldrh	r3, [r3, #6]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	4413      	add	r3, r2
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	011a      	lsls	r2, r3, #4
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	4413      	add	r3, r2
 8003f76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d112      	bne.n	8003faa <USB_ActivateEndpoint+0x286>
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	801a      	strh	r2, [r3, #0]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	e02f      	b.n	800400a <USB_ActivateEndpoint+0x2e6>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b3e      	cmp	r3, #62	; 0x3e
 8003fb0:	d813      	bhi.n	8003fda <USB_ActivateEndpoint+0x2b6>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <USB_ActivateEndpoint+0x2a8>
 8003fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc8:	3301      	adds	r3, #1
 8003fca:	663b      	str	r3, [r7, #96]	; 0x60
 8003fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	029b      	lsls	r3, r3, #10
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e017      	b.n	800400a <USB_ActivateEndpoint+0x2e6>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <USB_ActivateEndpoint+0x2d0>
 8003fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	029b      	lsls	r3, r3, #10
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004004:	b29a      	uxth	r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	83fb      	strh	r3, [r7, #30]
 8004018:	8bfb      	ldrh	r3, [r7, #30]
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01b      	beq.n	800405a <USB_ActivateEndpoint+0x336>
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	83bb      	strh	r3, [r7, #28]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	8bbb      	ldrh	r3, [r7, #28]
 8004046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800404a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800404e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800406c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004070:	837b      	strh	r3, [r7, #26]
 8004072:	8b7b      	ldrh	r3, [r7, #26]
 8004074:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004078:	837b      	strh	r3, [r7, #26]
 800407a:	8b7b      	ldrh	r3, [r7, #26]
 800407c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004080:	837b      	strh	r3, [r7, #26]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	8b7b      	ldrh	r3, [r7, #26]
 800408e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409e:	b29b      	uxth	r3, r3
 80040a0:	8013      	strh	r3, [r2, #0]
 80040a2:	e1a2      	b.n	80043ea <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	441a      	add	r2, r3
 80040c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040dc:	b29b      	uxth	r3, r3
 80040de:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f0:	4413      	add	r3, r2
 80040f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	011a      	lsls	r2, r3, #4
 80040fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004102:	657b      	str	r3, [r7, #84]	; 0x54
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	891b      	ldrh	r3, [r3, #8]
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	b29b      	uxth	r3, r3
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	653b      	str	r3, [r7, #80]	; 0x50
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411e:	b29b      	uxth	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004124:	4413      	add	r3, r2
 8004126:	653b      	str	r3, [r7, #80]	; 0x50
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	011a      	lsls	r2, r3, #4
 800412e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004130:	4413      	add	r3, r2
 8004132:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	895b      	ldrh	r3, [r3, #10]
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	b29b      	uxth	r3, r3
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004146:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f040 8091 	bne.w	8004274 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004160:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01b      	beq.n	80041a2 <USB_ActivateEndpoint+0x47e>
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004180:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800418e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800419a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419e:	b29b      	uxth	r3, r3
 80041a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80041b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01b      	beq.n	80041f2 <USB_ActivateEndpoint+0x4ce>
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	86bb      	strh	r3, [r7, #52]	; 0x34
 800420a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800420c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004210:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004212:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004214:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004218:	86bb      	strh	r3, [r7, #52]	; 0x34
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	441a      	add	r2, r3
 8004224:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800422a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004236:	b29b      	uxth	r3, r3
 8004238:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004250:	867b      	strh	r3, [r7, #50]	; 0x32
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	441a      	add	r2, r3
 800425c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800425e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	b29b      	uxth	r3, r3
 8004270:	8013      	strh	r3, [r2, #0]
 8004272:	e0ba      	b.n	80043ea <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004284:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01d      	beq.n	80042cc <USB_ActivateEndpoint+0x5a8>
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01d      	beq.n	8004324 <USB_ActivateEndpoint+0x600>
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	441a      	add	r2, r3
 800430c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004320:	b29b      	uxth	r3, r3
 8004322:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	78db      	ldrb	r3, [r3, #3]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d024      	beq.n	8004376 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004342:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004346:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800434a:	f083 0320 	eor.w	r3, r3, #32
 800434e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]
 8004374:	e01d      	b.n	80043b2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800439e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	441a      	add	r2, r3
 80043d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80043ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	376c      	adds	r7, #108	; 0x6c
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b08d      	sub	sp, #52	; 0x34
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	7b1b      	ldrb	r3, [r3, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 808e 	bne.w	8004528 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d044      	beq.n	800449e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	81bb      	strh	r3, [r7, #12]
 8004422:	89bb      	ldrh	r3, [r7, #12]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <USB_DeactivateEndpoint+0x6c>
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	817b      	strh	r3, [r7, #10]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004460:	b29b      	uxth	r3, r3
 8004462:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447a:	813b      	strh	r3, [r7, #8]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	893b      	ldrh	r3, [r7, #8]
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]
 800449c:	e192      	b.n	80047c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	827b      	strh	r3, [r7, #18]
 80044ac:	8a7b      	ldrh	r3, [r7, #18]
 80044ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01b      	beq.n	80044ee <USB_DeactivateEndpoint+0xf6>
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044cc:	823b      	strh	r3, [r7, #16]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	8a3b      	ldrh	r3, [r7, #16]
 80044da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004504:	81fb      	strh	r3, [r7, #14]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	441a      	add	r2, r3
 8004510:	89fb      	ldrh	r3, [r7, #14]
 8004512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]
 8004526:	e14d      	b.n	80047c4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 80a5 	bne.w	800467c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	843b      	strh	r3, [r7, #32]
 8004540:	8c3b      	ldrh	r3, [r7, #32]
 8004542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01b      	beq.n	8004582 <USB_DeactivateEndpoint+0x18a>
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004560:	83fb      	strh	r3, [r7, #30]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	441a      	add	r2, r3
 800456c:	8bfb      	ldrh	r3, [r7, #30]
 800456e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800457a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457e:	b29b      	uxth	r3, r3
 8004580:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	83bb      	strh	r3, [r7, #28]
 8004590:	8bbb      	ldrh	r3, [r7, #28]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01b      	beq.n	80045d2 <USB_DeactivateEndpoint+0x1da>
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	837b      	strh	r3, [r7, #26]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	8b7b      	ldrh	r3, [r7, #26]
 80045be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	833b      	strh	r3, [r7, #24]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	8b3b      	ldrh	r3, [r7, #24]
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800461c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004620:	82fb      	strh	r3, [r7, #22]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	441a      	add	r2, r3
 800462c:	8afb      	ldrh	r3, [r7, #22]
 800462e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463e:	b29b      	uxth	r3, r3
 8004640:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004658:	82bb      	strh	r3, [r7, #20]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	441a      	add	r2, r3
 8004664:	8abb      	ldrh	r3, [r7, #20]
 8004666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004676:	b29b      	uxth	r3, r3
 8004678:	8013      	strh	r3, [r2, #0]
 800467a:	e0a3      	b.n	80047c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800468a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800468c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <USB_DeactivateEndpoint+0x2d4>
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <USB_DeactivateEndpoint+0x324>
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004714:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004718:	b29b      	uxth	r3, r3
 800471a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b29b      	uxth	r3, r3
 800472a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	441a      	add	r2, r3
 800473e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800474c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004750:	b29b      	uxth	r3, r3
 8004752:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	441a      	add	r2, r3
 80047ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3734      	adds	r7, #52	; 0x34
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b0cc      	sub	sp, #304	; 0x130
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047de:	6018      	str	r0, [r3, #0]
 80047e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	f041 817d 	bne.w	8005af6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80047fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	429a      	cmp	r2, r3
 8004816:	d908      	bls.n	800482a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004828:	e007      	b.n	800483a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800482a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800482e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800483a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	7b1b      	ldrb	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d152      	bne.n	80048f0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800484a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6959      	ldr	r1, [r3, #20]
 8004856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	88da      	ldrh	r2, [r3, #6]
 8004862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004866:	b29b      	uxth	r3, r3
 8004868:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800486c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004870:	6800      	ldr	r0, [r0, #0]
 8004872:	f001 ff0e 	bl	8006692 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800487e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004882:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800488e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	4619      	mov	r1, r3
 800489c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048a8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	440a      	add	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	011a      	lsls	r2, r3, #4
 80048c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4413      	add	r3, r2
 80048cc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048de:	b29a      	uxth	r2, r3
 80048e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	801a      	strh	r2, [r3, #0]
 80048ec:	f001 b8b5 	b.w	8005a5a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	78db      	ldrb	r3, [r3, #3]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	f040 84c6 	bne.w	800528e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	429a      	cmp	r2, r3
 800491c:	f240 8443 	bls.w	80051a6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800492e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800494a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800494e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	441a      	add	r2, r3
 8004964:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004970:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004978:	b29b      	uxth	r3, r3
 800497a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800497c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498c:	1ad2      	subs	r2, r2, r3
 800498e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800499a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 823e 	beq.w	8004e3e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049ce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	785b      	ldrb	r3, [r3, #1]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f040 809a 	bne.w	8004b1c <USB_EPStartXfer+0x34c>
 80049e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a1a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	440a      	add	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	011a      	lsls	r2, r3, #4
 8004a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d122      	bne.n	8004a9a <USB_EPStartXfer+0x2ca>
 8004a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	801a      	strh	r2, [r3, #0]
 8004a98:	e079      	b.n	8004b8e <USB_EPStartXfer+0x3be>
 8004a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9e:	2b3e      	cmp	r3, #62	; 0x3e
 8004aa0:	d81b      	bhi.n	8004ada <USB_EPStartXfer+0x30a>
 8004aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d004      	beq.n	8004ac2 <USB_EPStartXfer+0x2f2>
 8004ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004abc:	3301      	adds	r3, #1
 8004abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	029b      	lsls	r3, r3, #10
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	801a      	strh	r2, [r3, #0]
 8004ad8:	e059      	b.n	8004b8e <USB_EPStartXfer+0x3be>
 8004ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <USB_EPStartXfer+0x32a>
 8004af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004af4:	3b01      	subs	r3, #1
 8004af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	029b      	lsls	r3, r3, #10
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	e038      	b.n	8004b8e <USB_EPStartXfer+0x3be>
 8004b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d130      	bne.n	8004b8e <USB_EPStartXfer+0x3be>
 8004b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b4a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	440a      	add	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	011a      	lsls	r2, r3, #4
 8004b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b66:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	895b      	ldrh	r3, [r3, #10]
 8004b9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6959      	ldr	r1, [r3, #20]
 8004baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bb4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004bb8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bbc:	6800      	ldr	r0, [r0, #0]
 8004bbe:	f001 fd68 	bl	8006692 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd2:	441a      	add	r2, r3
 8004bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a1a      	ldr	r2, [r3, #32]
 8004bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d90f      	bls.n	8004c1c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0c:	1ad2      	subs	r2, r2, r3
 8004c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	621a      	str	r2, [r3, #32]
 8004c1a:	e00e      	b.n	8004c3a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 809a 	bne.w	8004d80 <USB_EPStartXfer+0x5b0>
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c58:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	4619      	mov	r1, r3
 8004c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c7e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	440a      	add	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	011a      	lsls	r2, r3, #4
 8004c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004caa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d122      	bne.n	8004cfe <USB_EPStartXfer+0x52e>
 8004cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cdc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	801a      	strh	r2, [r3, #0]
 8004cfc:	e083      	b.n	8004e06 <USB_EPStartXfer+0x636>
 8004cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d02:	2b3e      	cmp	r3, #62	; 0x3e
 8004d04:	d81b      	bhi.n	8004d3e <USB_EPStartXfer+0x56e>
 8004d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <USB_EPStartXfer+0x556>
 8004d1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d20:	3301      	adds	r3, #1
 8004d22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	e063      	b.n	8004e06 <USB_EPStartXfer+0x636>
 8004d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <USB_EPStartXfer+0x58e>
 8004d54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	e042      	b.n	8004e06 <USB_EPStartXfer+0x636>
 8004d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d13a      	bne.n	8004e06 <USB_EPStartXfer+0x636>
 8004d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d9c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dc2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	440a      	add	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	011a      	lsls	r2, r3, #4
 8004dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	891b      	ldrh	r3, [r3, #8]
 8004e12:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6959      	ldr	r1, [r3, #20]
 8004e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e2c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e30:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e34:	6800      	ldr	r0, [r0, #0]
 8004e36:	f001 fc2c 	bl	8006692 <USB_WritePMA>
 8004e3a:	f000 be0e 	b.w	8005a5a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d16d      	bne.n	8004f2a <USB_EPStartXfer+0x75a>
 8004e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6e:	4413      	add	r3, r2
 8004e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	011a      	lsls	r2, r3, #4
 8004e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e82:	4413      	add	r3, r2
 8004e84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d112      	bne.n	8004eb8 <USB_EPStartXfer+0x6e8>
 8004e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb4:	801a      	strh	r2, [r3, #0]
 8004eb6:	e063      	b.n	8004f80 <USB_EPStartXfer+0x7b0>
 8004eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ebe:	d817      	bhi.n	8004ef0 <USB_EPStartXfer+0x720>
 8004ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <USB_EPStartXfer+0x710>
 8004ed6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004eda:	3301      	adds	r3, #1
 8004edc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ee0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	e047      	b.n	8004f80 <USB_EPStartXfer+0x7b0>
 8004ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d104      	bne.n	8004f10 <USB_EPStartXfer+0x740>
 8004f06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	029b      	lsls	r3, r3, #10
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	e02a      	b.n	8004f80 <USB_EPStartXfer+0x7b0>
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d122      	bne.n	8004f80 <USB_EPStartXfer+0x7b0>
 8004f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	653b      	str	r3, [r7, #80]	; 0x50
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5a:	4413      	add	r3, r2
 8004f5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	011a      	lsls	r2, r3, #4
 8004f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f6e:	4413      	add	r3, r2
 8004f70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	891b      	ldrh	r3, [r3, #8]
 8004f8c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6959      	ldr	r1, [r3, #20]
 8004f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fa6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004faa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fae:	6800      	ldr	r0, [r0, #0]
 8004fb0:	f001 fb6f 	bl	8006692 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc4:	441a      	add	r2, r3
 8004fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d90f      	bls.n	800500e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a1a      	ldr	r2, [r3, #32]
 8004ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	621a      	str	r2, [r3, #32]
 800500c:	e00e      	b.n	800502c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800500e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800501e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2200      	movs	r2, #0
 800502a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	643b      	str	r3, [r7, #64]	; 0x40
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d16d      	bne.n	8005124 <USB_EPStartXfer+0x954>
 8005048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	63bb      	str	r3, [r7, #56]	; 0x38
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005062:	b29b      	uxth	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	4413      	add	r3, r2
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
 800506c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	011a      	lsls	r2, r3, #4
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	4413      	add	r3, r2
 800507e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
 8005084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d112      	bne.n	80050b2 <USB_EPStartXfer+0x8e2>
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005096:	b29a      	uxth	r2, r3
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ae:	801a      	strh	r2, [r3, #0]
 80050b0:	e05d      	b.n	800516e <USB_EPStartXfer+0x99e>
 80050b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b6:	2b3e      	cmp	r3, #62	; 0x3e
 80050b8:	d817      	bhi.n	80050ea <USB_EPStartXfer+0x91a>
 80050ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <USB_EPStartXfer+0x90a>
 80050d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050d4:	3301      	adds	r3, #1
 80050d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050de:	b29b      	uxth	r3, r3
 80050e0:	029b      	lsls	r3, r3, #10
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	e041      	b.n	800516e <USB_EPStartXfer+0x99e>
 80050ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <USB_EPStartXfer+0x93a>
 8005100:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005104:	3b01      	subs	r3, #1
 8005106:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800510a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800510e:	b29b      	uxth	r3, r3
 8005110:	029b      	lsls	r3, r3, #10
 8005112:	b29b      	uxth	r3, r3
 8005114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511c:	b29a      	uxth	r2, r3
 800511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	e024      	b.n	800516e <USB_EPStartXfer+0x99e>
 8005124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d11c      	bne.n	800516e <USB_EPStartXfer+0x99e>
 8005134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005138:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005142:	b29b      	uxth	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005148:	4413      	add	r3, r2
 800514a:	643b      	str	r3, [r7, #64]	; 0x40
 800514c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	011a      	lsls	r2, r3, #4
 800515a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515c:	4413      	add	r3, r2
 800515e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005168:	b29a      	uxth	r2, r3
 800516a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	895b      	ldrh	r3, [r3, #10]
 800517a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800517e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6959      	ldr	r1, [r3, #20]
 800518a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518e:	b29b      	uxth	r3, r3
 8005190:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005194:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005198:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800519c:	6800      	ldr	r0, [r0, #0]
 800519e:	f001 fa78 	bl	8006692 <USB_WritePMA>
 80051a2:	f000 bc5a 	b.w	8005a5a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80051e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80051fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520e:	b29b      	uxth	r3, r3
 8005210:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522c:	b29b      	uxth	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005232:	4413      	add	r3, r2
 8005234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	011a      	lsls	r2, r3, #4
 8005244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005246:	4413      	add	r3, r2
 8005248:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800524c:	65bb      	str	r3, [r7, #88]	; 0x58
 800524e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005252:	b29a      	uxth	r2, r3
 8005254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005256:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	891b      	ldrh	r3, [r3, #8]
 8005264:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6959      	ldr	r1, [r3, #20]
 8005274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005278:	b29b      	uxth	r3, r3
 800527a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800527e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005282:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005286:	6800      	ldr	r0, [r0, #0]
 8005288:	f001 fa03 	bl	8006692 <USB_WritePMA>
 800528c:	e3e5      	b.n	8005a5a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800528e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80052b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80052d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80052ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a1a      	ldr	r2, [r3, #32]
 80052f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fa:	1ad2      	subs	r2, r2, r3
 80052fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 81bc 	beq.w	80056a8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800533e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d16d      	bne.n	800542a <USB_EPStartXfer+0xc5a>
 800534e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005352:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	67bb      	str	r3, [r7, #120]	; 0x78
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	4413      	add	r3, r2
 8005370:	67bb      	str	r3, [r7, #120]	; 0x78
 8005372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	011a      	lsls	r2, r3, #4
 8005380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005382:	4413      	add	r3, r2
 8005384:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005388:	677b      	str	r3, [r7, #116]	; 0x74
 800538a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d112      	bne.n	80053b8 <USB_EPStartXfer+0xbe8>
 8005392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800539c:	b29a      	uxth	r2, r3
 800539e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	e060      	b.n	800547a <USB_EPStartXfer+0xcaa>
 80053b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053bc:	2b3e      	cmp	r3, #62	; 0x3e
 80053be:	d817      	bhi.n	80053f0 <USB_EPStartXfer+0xc20>
 80053c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <USB_EPStartXfer+0xc10>
 80053d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053da:	3301      	adds	r3, #1
 80053dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	029b      	lsls	r3, r3, #10
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e044      	b.n	800547a <USB_EPStartXfer+0xcaa>
 80053f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <USB_EPStartXfer+0xc40>
 8005406:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800540a:	3b01      	subs	r3, #1
 800540c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005410:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005414:	b29b      	uxth	r3, r3
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	b29b      	uxth	r3, r3
 800541a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005422:	b29a      	uxth	r2, r3
 8005424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	e027      	b.n	800547a <USB_EPStartXfer+0xcaa>
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d11f      	bne.n	800547a <USB_EPStartXfer+0xcaa>
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005448:	b29b      	uxth	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005450:	4413      	add	r3, r2
 8005452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	011a      	lsls	r2, r3, #4
 8005464:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005468:	4413      	add	r3, r2
 800546a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800546e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005474:	b29a      	uxth	r2, r3
 8005476:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005478:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800547a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	895b      	ldrh	r3, [r3, #10]
 8005486:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800548a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6959      	ldr	r1, [r3, #20]
 8005496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549a:	b29b      	uxth	r3, r3
 800549c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054a8:	6800      	ldr	r0, [r0, #0]
 80054aa:	f001 f8f2 	bl	8006692 <USB_WritePMA>
          ep->xfer_buff += len;
 80054ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054be:	441a      	add	r2, r3
 80054c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6a1a      	ldr	r2, [r3, #32]
 80054d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d90f      	bls.n	8005508 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80054e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a1a      	ldr	r2, [r3, #32]
 80054f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	621a      	str	r2, [r3, #32]
 8005506:	e00e      	b.n	8005526 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 8295 	beq.w	8005a5a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d16d      	bne.n	800561c <USB_EPStartXfer+0xe4c>
 8005540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	66bb      	str	r3, [r7, #104]	; 0x68
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005560:	4413      	add	r3, r2
 8005562:	66bb      	str	r3, [r7, #104]	; 0x68
 8005564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	011a      	lsls	r2, r3, #4
 8005572:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005574:	4413      	add	r3, r2
 8005576:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800557a:	667b      	str	r3, [r7, #100]	; 0x64
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d112      	bne.n	80055aa <USB_EPStartXfer+0xdda>
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800558e:	b29a      	uxth	r2, r3
 8005590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	e063      	b.n	8005672 <USB_EPStartXfer+0xea2>
 80055aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ae:	2b3e      	cmp	r3, #62	; 0x3e
 80055b0:	d817      	bhi.n	80055e2 <USB_EPStartXfer+0xe12>
 80055b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <USB_EPStartXfer+0xe02>
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055cc:	3301      	adds	r3, #1
 80055ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	029b      	lsls	r3, r3, #10
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	e047      	b.n	8005672 <USB_EPStartXfer+0xea2>
 80055e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <USB_EPStartXfer+0xe32>
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fc:	3b01      	subs	r3, #1
 80055fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005606:	b29b      	uxth	r3, r3
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	b29b      	uxth	r3, r3
 800560c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005614:	b29a      	uxth	r2, r3
 8005616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	e02a      	b.n	8005672 <USB_EPStartXfer+0xea2>
 800561c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d122      	bne.n	8005672 <USB_EPStartXfer+0xea2>
 800562c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	673b      	str	r3, [r7, #112]	; 0x70
 8005638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005646:	b29b      	uxth	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800564c:	4413      	add	r3, r2
 800564e:	673b      	str	r3, [r7, #112]	; 0x70
 8005650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	011a      	lsls	r2, r3, #4
 800565e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005660:	4413      	add	r3, r2
 8005662:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566c:	b29a      	uxth	r2, r3
 800566e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005670:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	891b      	ldrh	r3, [r3, #8]
 800567e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005692:	b29b      	uxth	r3, r3
 8005694:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005698:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800569c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056a0:	6800      	ldr	r0, [r0, #0]
 80056a2:	f000 fff6 	bl	8006692 <USB_WritePMA>
 80056a6:	e1d8      	b.n	8005a5a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d178      	bne.n	80057aa <USB_EPStartXfer+0xfda>
 80056b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056dc:	4413      	add	r3, r2
 80056de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	011a      	lsls	r2, r3, #4
 80056f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056f4:	4413      	add	r3, r2
 80056f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d116      	bne.n	8005734 <USB_EPStartXfer+0xf64>
 8005706:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005712:	b29a      	uxth	r2, r3
 8005714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572a:	b29a      	uxth	r2, r3
 800572c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e06b      	b.n	800580c <USB_EPStartXfer+0x103c>
 8005734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005738:	2b3e      	cmp	r3, #62	; 0x3e
 800573a:	d818      	bhi.n	800576e <USB_EPStartXfer+0xf9e>
 800573c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <USB_EPStartXfer+0xf8c>
 8005752:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005756:	3301      	adds	r3, #1
 8005758:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800575c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29a      	uxth	r2, r3
 8005766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e04e      	b.n	800580c <USB_EPStartXfer+0x103c>
 800576e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <USB_EPStartXfer+0xfbe>
 8005784:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005788:	3b01      	subs	r3, #1
 800578a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800578e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005792:	b29b      	uxth	r3, r3
 8005794:	029b      	lsls	r3, r3, #10
 8005796:	b29b      	uxth	r3, r3
 8005798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e030      	b.n	800580c <USB_EPStartXfer+0x103c>
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	785b      	ldrb	r3, [r3, #1]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d128      	bne.n	800580c <USB_EPStartXfer+0x103c>
 80057ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057de:	4413      	add	r3, r2
 80057e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	011a      	lsls	r2, r3, #4
 80057f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057f6:	4413      	add	r3, r2
 80057f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	b29a      	uxth	r2, r3
 8005806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800580a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800580c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	891b      	ldrh	r3, [r3, #8]
 8005818:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800581c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6959      	ldr	r1, [r3, #20]
 8005828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582c:	b29b      	uxth	r3, r3
 800582e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005832:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005836:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	f000 ff29 	bl	8006692 <USB_WritePMA>
          ep->xfer_buff += len;
 8005840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005850:	441a      	add	r2, r3
 8005852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a1a      	ldr	r2, [r3, #32]
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d90f      	bls.n	800589a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	621a      	str	r2, [r3, #32]
 8005898:	e00e      	b.n	80058b8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2200      	movs	r2, #0
 80058b6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80058b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80cc 	beq.w	8005a5a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d178      	bne.n	80059d2 <USB_EPStartXfer+0x1202>
 80058e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005904:	4413      	add	r3, r2
 8005906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	011a      	lsls	r2, r3, #4
 8005918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800591c:	4413      	add	r3, r2
 800591e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d116      	bne.n	800595c <USB_EPStartXfer+0x118c>
 800592e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800593a:	b29a      	uxth	r2, r3
 800593c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005952:	b29a      	uxth	r2, r3
 8005954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e064      	b.n	8005a26 <USB_EPStartXfer+0x1256>
 800595c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005960:	2b3e      	cmp	r3, #62	; 0x3e
 8005962:	d818      	bhi.n	8005996 <USB_EPStartXfer+0x11c6>
 8005964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800596e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <USB_EPStartXfer+0x11b4>
 800597a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800597e:	3301      	adds	r3, #1
 8005980:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005988:	b29b      	uxth	r3, r3
 800598a:	029b      	lsls	r3, r3, #10
 800598c:	b29a      	uxth	r2, r3
 800598e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e047      	b.n	8005a26 <USB_EPStartXfer+0x1256>
 8005996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <USB_EPStartXfer+0x11e6>
 80059ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b0:	3b01      	subs	r3, #1
 80059b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29b      	uxth	r3, r3
 80059c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e029      	b.n	8005a26 <USB_EPStartXfer+0x1256>
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d121      	bne.n	8005a26 <USB_EPStartXfer+0x1256>
 80059e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059f8:	4413      	add	r3, r2
 80059fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	011a      	lsls	r2, r3, #4
 8005a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	895b      	ldrh	r3, [r3, #10]
 8005a32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6959      	ldr	r1, [r3, #20]
 8005a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	f000 fe1c 	bl	8006692 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a7c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a88:	8013      	strh	r3, [r2, #0]
 8005a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005a92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a96:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a9a:	8812      	ldrh	r2, [r2, #0]
 8005a9c:	f082 0210 	eor.w	r2, r2, #16
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005aaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aae:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ab2:	8812      	ldrh	r2, [r2, #0]
 8005ab4:	f082 0220 	eor.w	r2, r2, #32
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	441a      	add	r2, r3
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]
 8005af2:	f000 bc9f 	b.w	8006434 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	7b1b      	ldrb	r3, [r3, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 80ae 	bne.w	8005c64 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d917      	bls.n	8005b54 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	619a      	str	r2, [r3, #24]
 8005b52:	e00e      	b.n	8005b72 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b96:	4413      	add	r3, r2
 8005b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	011a      	lsls	r2, r3, #4
 8005baa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bae:	4413      	add	r3, r2
 8005bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d116      	bne.n	8005bee <USB_EPStartXfer+0x141e>
 8005bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	e3e8      	b.n	80063c0 <USB_EPStartXfer+0x1bf0>
 8005bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf4:	d818      	bhi.n	8005c28 <USB_EPStartXfer+0x1458>
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <USB_EPStartXfer+0x1446>
 8005c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c10:	3301      	adds	r3, #1
 8005c12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	e3cb      	b.n	80063c0 <USB_EPStartXfer+0x1bf0>
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <USB_EPStartXfer+0x1478>
 8005c3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c42:	3b01      	subs	r3, #1
 8005c44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e3ad      	b.n	80063c0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	78db      	ldrb	r3, [r3, #3]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	f040 8200 	bne.w	8006076 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	785b      	ldrb	r3, [r3, #1]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 8091 	bne.w	8005daa <USB_EPStartXfer+0x15da>
 8005c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cac:	4413      	add	r3, r2
 8005cae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	011a      	lsls	r2, r3, #4
 8005cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d116      	bne.n	8005d0c <USB_EPStartXfer+0x153c>
 8005cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	e083      	b.n	8005e14 <USB_EPStartXfer+0x1644>
 8005d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b3e      	cmp	r3, #62	; 0x3e
 8005d1a:	d820      	bhi.n	8005d5e <USB_EPStartXfer+0x158e>
 8005d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <USB_EPStartXfer+0x157c>
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d46:	3301      	adds	r3, #1
 8005d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	029b      	lsls	r3, r3, #10
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	e05a      	b.n	8005e14 <USB_EPStartXfer+0x1644>
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <USB_EPStartXfer+0x15be>
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	e034      	b.n	8005e14 <USB_EPStartXfer+0x1644>
 8005daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d12c      	bne.n	8005e14 <USB_EPStartXfer+0x1644>
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dde:	4413      	add	r3, r2
 8005de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	011a      	lsls	r2, r3, #4
 8005df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 8091 	bne.w	8005f56 <USB_EPStartXfer+0x1786>
 8005e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e58:	4413      	add	r3, r2
 8005e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	011a      	lsls	r2, r3, #4
 8005e6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e70:	4413      	add	r3, r2
 8005e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d116      	bne.n	8005eb8 <USB_EPStartXfer+0x16e8>
 8005e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e07c      	b.n	8005fb2 <USB_EPStartXfer+0x17e2>
 8005eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ec6:	d820      	bhi.n	8005f0a <USB_EPStartXfer+0x173a>
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <USB_EPStartXfer+0x1728>
 8005eee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ef8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	029b      	lsls	r3, r3, #10
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	e053      	b.n	8005fb2 <USB_EPStartXfer+0x17e2>
 8005f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <USB_EPStartXfer+0x176a>
 8005f30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f34:	3b01      	subs	r3, #1
 8005f36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	029b      	lsls	r3, r3, #10
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	e02d      	b.n	8005fb2 <USB_EPStartXfer+0x17e2>
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d125      	bne.n	8005fb2 <USB_EPStartXfer+0x17e2>
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	011a      	lsls	r2, r3, #4
 8005f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fb0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 81fe 	beq.w	80063c0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fe4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <USB_EPStartXfer+0x182c>
 8005ff0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10d      	bne.n	8006018 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ffc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 81db 	bne.w	80063c0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800600a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	f040 81d4 	bne.w	80063c0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	441a      	add	r2, r3
 800605c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006070:	b29b      	uxth	r3, r3
 8006072:	8013      	strh	r3, [r2, #0]
 8006074:	e1a4      	b.n	80063c0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	78db      	ldrb	r3, [r3, #3]
 8006082:	2b01      	cmp	r3, #1
 8006084:	f040 819a 	bne.w	80063bc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d917      	bls.n	80060d4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80060b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	619a      	str	r2, [r3, #24]
 80060d2:	e00e      	b.n	80060f2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2200      	movs	r2, #0
 80060f0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d178      	bne.n	80061f4 <USB_EPStartXfer+0x1a24>
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800611e:	b29b      	uxth	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006126:	4413      	add	r3, r2
 8006128:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	011a      	lsls	r2, r3, #4
 800613a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800613e:	4413      	add	r3, r2
 8006140:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006144:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d116      	bne.n	800617e <USB_EPStartXfer+0x19ae>
 8006150:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800615c:	b29a      	uxth	r2, r3
 800615e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006174:	b29a      	uxth	r2, r3
 8006176:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	e06b      	b.n	8006256 <USB_EPStartXfer+0x1a86>
 800617e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006182:	2b3e      	cmp	r3, #62	; 0x3e
 8006184:	d818      	bhi.n	80061b8 <USB_EPStartXfer+0x19e8>
 8006186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <USB_EPStartXfer+0x19d6>
 800619c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a0:	3301      	adds	r3, #1
 80061a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e04e      	b.n	8006256 <USB_EPStartXfer+0x1a86>
 80061b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <USB_EPStartXfer+0x1a08>
 80061ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d2:	3b01      	subs	r3, #1
 80061d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061dc:	b29b      	uxth	r3, r3
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e030      	b.n	8006256 <USB_EPStartXfer+0x1a86>
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d128      	bne.n	8006256 <USB_EPStartXfer+0x1a86>
 8006204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006220:	b29b      	uxth	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	4413      	add	r3, r2
 800622a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	011a      	lsls	r2, r3, #4
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	4413      	add	r3, r2
 8006242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006246:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800624a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d178      	bne.n	8006366 <USB_EPStartXfer+0x1b96>
 8006274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006298:	4413      	add	r3, r2
 800629a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	011a      	lsls	r2, r3, #4
 80062ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d116      	bne.n	80062f0 <USB_EPStartXfer+0x1b20>
 80062c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e067      	b.n	80063c0 <USB_EPStartXfer+0x1bf0>
 80062f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f4:	2b3e      	cmp	r3, #62	; 0x3e
 80062f6:	d818      	bhi.n	800632a <USB_EPStartXfer+0x1b5a>
 80062f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d004      	beq.n	8006318 <USB_EPStartXfer+0x1b48>
 800630e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006312:	3301      	adds	r3, #1
 8006314:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006318:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800631c:	b29b      	uxth	r3, r3
 800631e:	029b      	lsls	r3, r3, #10
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e04a      	b.n	80063c0 <USB_EPStartXfer+0x1bf0>
 800632a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <USB_EPStartXfer+0x1b7a>
 8006340:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006344:	3b01      	subs	r3, #1
 8006346:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800634a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800634e:	b29b      	uxth	r3, r3
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	b29b      	uxth	r3, r3
 8006354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635c:	b29a      	uxth	r2, r3
 800635e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	e02c      	b.n	80063c0 <USB_EPStartXfer+0x1bf0>
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d124      	bne.n	80063c0 <USB_EPStartXfer+0x1bf0>
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006384:	b29b      	uxth	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638c:	4413      	add	r3, r2
 800638e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	011a      	lsls	r2, r3, #4
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e001      	b.n	80063c0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e03a      	b.n	8006436 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063f6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006406:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d020      	beq.n	8006494 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	81bb      	strh	r3, [r7, #12]
 800646a:	89bb      	ldrh	r3, [r7, #12]
 800646c:	f083 0310 	eor.w	r3, r3, #16
 8006470:	81bb      	strh	r3, [r7, #12]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	441a      	add	r2, r3
 800647c:	89bb      	ldrh	r3, [r7, #12]
 800647e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648e:	b29b      	uxth	r3, r3
 8006490:	8013      	strh	r3, [r2, #0]
 8006492:	e01f      	b.n	80064d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	81fb      	strh	r3, [r7, #14]
 80064ac:	89fb      	ldrh	r3, [r7, #14]
 80064ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064b2:	81fb      	strh	r3, [r7, #14]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	89fb      	ldrh	r3, [r7, #14]
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	7b1b      	ldrb	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 809d 	bne.w	800662e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d04c      	beq.n	8006596 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	823b      	strh	r3, [r7, #16]
 800650a:	8a3b      	ldrh	r3, [r7, #16]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01b      	beq.n	800654c <USB_EPClearStall+0x6c>
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	81fb      	strh	r3, [r7, #14]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	89fb      	ldrh	r3, [r7, #14]
 8006538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006548:	b29b      	uxth	r3, r3
 800654a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	78db      	ldrb	r3, [r3, #3]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d06c      	beq.n	800662e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656a:	81bb      	strh	r3, [r7, #12]
 800656c:	89bb      	ldrh	r3, [r7, #12]
 800656e:	f083 0320 	eor.w	r3, r3, #32
 8006572:	81bb      	strh	r3, [r7, #12]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	89bb      	ldrh	r3, [r7, #12]
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]
 8006594:	e04b      	b.n	800662e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	82fb      	strh	r3, [r7, #22]
 80065a4:	8afb      	ldrh	r3, [r7, #22]
 80065a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01b      	beq.n	80065e6 <USB_EPClearStall+0x106>
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c4:	82bb      	strh	r3, [r7, #20]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	441a      	add	r2, r3
 80065d0:	8abb      	ldrh	r3, [r7, #20]
 80065d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fc:	827b      	strh	r3, [r7, #18]
 80065fe:	8a7b      	ldrh	r3, [r7, #18]
 8006600:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006604:	827b      	strh	r3, [r7, #18]
 8006606:	8a7b      	ldrh	r3, [r7, #18]
 8006608:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800660c:	827b      	strh	r3, [r7, #18]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	441a      	add	r2, r3
 8006618:	8a7b      	ldrh	r3, [r7, #18]
 800661a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800661e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662a:	b29b      	uxth	r3, r3
 800662c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr

0800663a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2280      	movs	r2, #128	; 0x80
 8006650:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006682:	b29b      	uxth	r3, r3
 8006684:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006686:	68fb      	ldr	r3, [r7, #12]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006692:	b480      	push	{r7}
 8006694:	b08d      	sub	sp, #52	; 0x34
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	4611      	mov	r1, r2
 800669e:	461a      	mov	r2, r3
 80066a0:	460b      	mov	r3, r1
 80066a2:	80fb      	strh	r3, [r7, #6]
 80066a4:	4613      	mov	r3, r2
 80066a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066a8:	88bb      	ldrh	r3, [r7, #4]
 80066aa:	3301      	adds	r3, #1
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	005a      	lsls	r2, r3, #1
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ca:	e01e      	b.n	800670a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	3301      	adds	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	3302      	adds	r3, #2
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	3302      	adds	r3, #2
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	3301      	adds	r3, #1
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	3b01      	subs	r3, #1
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1dd      	bne.n	80066cc <USB_WritePMA+0x3a>
  }
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	3734      	adds	r7, #52	; 0x34
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800671c:	b480      	push	{r7}
 800671e:	b08b      	sub	sp, #44	; 0x2c
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4611      	mov	r1, r2
 8006728:	461a      	mov	r2, r3
 800672a:	460b      	mov	r3, r1
 800672c:	80fb      	strh	r3, [r7, #6]
 800672e:	4613      	mov	r3, r2
 8006730:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006732:	88bb      	ldrh	r3, [r7, #4]
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	005a      	lsls	r2, r3, #1
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
 8006754:	e01b      	b.n	800678e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	3302      	adds	r3, #2
 8006762:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	3301      	adds	r3, #1
 8006770:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	0a1b      	lsrs	r3, r3, #8
 8006776:	b2da      	uxtb	r2, r3
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	3301      	adds	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	3302      	adds	r3, #2
 8006786:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	3b01      	subs	r3, #1
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e0      	bne.n	8006756 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006794:	88bb      	ldrh	r3, [r7, #4]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	701a      	strb	r2, [r3, #0]
  }
}
 80067b0:	bf00      	nop
 80067b2:	372c      	adds	r7, #44	; 0x2c
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	7c1b      	ldrb	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d115      	bne.n	80067fe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d6:	2202      	movs	r2, #2
 80067d8:	2181      	movs	r1, #129	; 0x81
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 ff5b 	bl	8008696 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ea:	2202      	movs	r2, #2
 80067ec:	2101      	movs	r1, #1
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 ff51 	bl	8008696 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80067fc:	e012      	b.n	8006824 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067fe:	2340      	movs	r3, #64	; 0x40
 8006800:	2202      	movs	r2, #2
 8006802:	2181      	movs	r1, #129	; 0x81
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 ff46 	bl	8008696 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	2202      	movs	r2, #2
 8006814:	2101      	movs	r1, #1
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 ff3d 	bl	8008696 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006824:	2308      	movs	r3, #8
 8006826:	2203      	movs	r2, #3
 8006828:	2182      	movs	r1, #130	; 0x82
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 ff33 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006836:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800683a:	f002 f853 	bl	80088e4 <USBD_static_malloc>
 800683e:	4602      	mov	r2, r0
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	e026      	b.n	80068a4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800685c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7c1b      	ldrb	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fff3 	bl	8008878 <USBD_LL_PrepareReceive>
 8006892:	e007      	b.n	80068a4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800689a:	2340      	movs	r3, #64	; 0x40
 800689c:	2101      	movs	r1, #1
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 ffea 	bl	8008878 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068be:	2181      	movs	r1, #129	; 0x81
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 ff0e 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068cc:	2101      	movs	r1, #1
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 ff07 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068dc:	2182      	movs	r1, #130	; 0x82
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 feff 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fff9 	bl	80088fc <USBD_static_free>
    pdev->pClassData = NULL;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800692c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006942:	2b00      	cmp	r3, #0
 8006944:	d039      	beq.n	80069ba <USBD_CDC_Setup+0x9e>
 8006946:	2b20      	cmp	r3, #32
 8006948:	d17f      	bne.n	8006a4a <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d029      	beq.n	80069a6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	b25b      	sxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	da11      	bge.n	8006980 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006968:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	88d2      	ldrh	r2, [r2, #6]
 800696e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006970:	6939      	ldr	r1, [r7, #16]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	88db      	ldrh	r3, [r3, #6]
 8006976:	461a      	mov	r2, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 f994 	bl	8007ca6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800697e:	e06b      	b.n	8006a58 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	785a      	ldrb	r2, [r3, #1]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	b2da      	uxtb	r2, r3
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006996:	6939      	ldr	r1, [r7, #16]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	88db      	ldrh	r3, [r3, #6]
 800699c:	461a      	mov	r2, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 f9af 	bl	8007d02 <USBD_CtlPrepareRx>
    break;
 80069a4:	e058      	b.n	8006a58 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	7850      	ldrb	r0, [r2, #1]
 80069b2:	2200      	movs	r2, #0
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	4798      	blx	r3
    break;
 80069b8:	e04e      	b.n	8006a58 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b0b      	cmp	r3, #11
 80069c0:	d02e      	beq.n	8006a20 <USBD_CDC_Setup+0x104>
 80069c2:	2b0b      	cmp	r3, #11
 80069c4:	dc38      	bgt.n	8006a38 <USBD_CDC_Setup+0x11c>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <USBD_CDC_Setup+0xb4>
 80069ca:	2b0a      	cmp	r3, #10
 80069cc:	d014      	beq.n	80069f8 <USBD_CDC_Setup+0xdc>
 80069ce:	e033      	b.n	8006a38 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d107      	bne.n	80069ea <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80069da:	f107 030c 	add.w	r3, r7, #12
 80069de:	2202      	movs	r2, #2
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 f95f 	bl	8007ca6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80069e8:	e02e      	b.n	8006a48 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 f8f0 	bl	8007bd2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80069f2:	2302      	movs	r3, #2
 80069f4:	75fb      	strb	r3, [r7, #23]
      break;
 80069f6:	e027      	b.n	8006a48 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d107      	bne.n	8006a12 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006a02:	f107 030f 	add.w	r3, r7, #15
 8006a06:	2201      	movs	r2, #1
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 f94b 	bl	8007ca6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006a10:	e01a      	b.n	8006a48 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 f8dc 	bl	8007bd2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1e:	e013      	b.n	8006a48 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d00d      	beq.n	8006a46 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f8d0 	bl	8007bd2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a32:	2302      	movs	r3, #2
 8006a34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a36:	e006      	b.n	8006a46 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 f8c9 	bl	8007bd2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a40:	2302      	movs	r3, #2
 8006a42:	75fb      	strb	r3, [r7, #23]
      break;
 8006a44:	e000      	b.n	8006a48 <USBD_CDC_Setup+0x12c>
      break;
 8006a46:	bf00      	nop
    }
    break;
 8006a48:	e006      	b.n	8006a58 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f8c0 	bl	8007bd2 <USBD_CtlError>
    ret = USBD_FAIL;
 8006a52:	2302      	movs	r3, #2
 8006a54:	75fb      	strb	r3, [r7, #23]
    break;
 8006a56:	bf00      	nop
  }

  return ret;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a74:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a7c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d03a      	beq.n	8006afe <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	331c      	adds	r3, #28
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d029      	beq.n	8006af2 <USBD_CDC_DataIn+0x90>
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	331c      	adds	r3, #28
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	78f9      	ldrb	r1, [r7, #3]
 8006ab2:	68b8      	ldr	r0, [r7, #8]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4403      	add	r3, r0
 8006abe:	3338      	adds	r3, #56	; 0x38
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ac6:	fb01 f303 	mul.w	r3, r1, r3
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d110      	bne.n	8006af2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	331c      	adds	r3, #28
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006ae4:	78f9      	ldrb	r1, [r7, #3]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2200      	movs	r2, #0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fea1 	bl	8008832 <USBD_LL_Transmit>
 8006af0:	e003      	b.n	8006afa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e000      	b.n	8006b00 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006afe:	2302      	movs	r3, #2
  }
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 fecc 	bl	80088be <USBD_LL_GetRxDataSize>
 8006b26:	4602      	mov	r2, r0
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4798      	blx	r3

    return USBD_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e000      	b.n	8006b56 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b6c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d015      	beq.n	8006ba4 <USBD_CDC_EP0_RxReady+0x46>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b7e:	2bff      	cmp	r3, #255	; 0xff
 8006b80:	d010      	beq.n	8006ba4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b98:	b292      	uxth	r2, r2
 8006b9a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	22ff      	movs	r2, #255	; 0xff
 8006ba0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2243      	movs	r2, #67	; 0x43
 8006bbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000094 	.word	0x20000094

08006bd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2243      	movs	r2, #67	; 0x43
 8006bdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006bde:	4b03      	ldr	r3, [pc, #12]	; (8006bec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000050 	.word	0x20000050

08006bf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2243      	movs	r2, #67	; 0x43
 8006bfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	200000d8 	.word	0x200000d8

08006c10 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	220a      	movs	r2, #10
 8006c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c1e:	4b03      	ldr	r3, [pc, #12]	; (8006c2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	2000000c 	.word	0x2000000c

08006c30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr

08006c8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cc2:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01c      	beq.n	8006d08 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d115      	bne.n	8006d04 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2181      	movs	r1, #129	; 0x81
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 fd99 	bl	8008832 <USBD_LL_Transmit>

      return USBD_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	e002      	b.n	8006d0a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d017      	beq.n	8006d5c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7c1b      	ldrb	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d109      	bne.n	8006d48 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d3e:	2101      	movs	r1, #1
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fd99 	bl	8008878 <USBD_LL_PrepareReceive>
 8006d46:	e007      	b.n	8006d58 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d4e:	2340      	movs	r3, #64	; 0x40
 8006d50:	2101      	movs	r1, #1
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fd90 	bl	8008878 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	4613      	mov	r3, r2
 8006d72:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e01a      	b.n	8006db4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	79fa      	ldrb	r2, [r7, #7]
 8006daa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f001 fbfd 	bl	80085ac <USBD_LL_Init>

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d006      	beq.n	8006dde <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]
 8006ddc:	e001      	b.n	8006de2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fc32 	bl	8008660 <USBD_LL_Start>

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc80      	pop	{r7}
 8006e18:	4770      	bx	lr

08006e1a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006e26:	2302      	movs	r3, #2
 8006e28:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00c      	beq.n	8006e4e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	78fa      	ldrb	r2, [r7, #3]
 8006e6e:	4611      	mov	r1, r2
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fe62 	bl	8007b5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d016      	beq.n	8006ee8 <USBD_LL_SetupStage+0x6a>
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d81c      	bhi.n	8006ef8 <USBD_LL_SetupStage+0x7a>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <USBD_LL_SetupStage+0x4a>
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d008      	beq.n	8006ed8 <USBD_LL_SetupStage+0x5a>
 8006ec6:	e017      	b.n	8006ef8 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f9c5 	bl	8007260 <USBD_StdDevReq>
    break;
 8006ed6:	e01a      	b.n	8006f0e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fa27 	bl	8007334 <USBD_StdItfReq>
    break;
 8006ee6:	e012      	b.n	8006f0e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fa67 	bl	80073c4 <USBD_StdEPReq>
    break;
 8006ef6:	e00a      	b.n	8006f0e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006efe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fc0a 	bl	8008720 <USBD_LL_StallEP>
    break;
 8006f0c:	bf00      	nop
  }

  return USBD_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	460b      	mov	r3, r1
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d14b      	bne.n	8006fc4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006f32:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d134      	bne.n	8006fa8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d919      	bls.n	8006f7e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d203      	bcs.n	8006f6c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	e002      	b.n	8006f72 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 fee1 	bl	8007d3e <USBD_CtlContinueRx>
 8006f7c:	e038      	b.n	8006ff0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d105      	bne.n	8006fa0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 fede 	bl	8007d62 <USBD_CtlSendStatus>
 8006fa6:	e023      	b.n	8006ff0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	d11e      	bne.n	8006ff0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006fba:	2100      	movs	r1, #0
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f001 fbaf 	bl	8008720 <USBD_LL_StallEP>
 8006fc2:	e015      	b.n	8006ff0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00d      	beq.n	8006fec <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d108      	bne.n	8006fec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	7afa      	ldrb	r2, [r7, #11]
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	4798      	blx	r3
 8006fea:	e001      	b.n	8006ff0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fec:	2302      	movs	r3, #2
 8006fee:	e000      	b.n	8006ff2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	460b      	mov	r3, r1
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d17f      	bne.n	800710e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3314      	adds	r3, #20
 8007012:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800701a:	2b02      	cmp	r3, #2
 800701c:	d15c      	bne.n	80070d8 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	429a      	cmp	r2, r3
 8007028:	d915      	bls.n	8007056 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	1ad2      	subs	r2, r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	b29b      	uxth	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fe4b 	bl	8007cde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007048:	2300      	movs	r3, #0
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 fc12 	bl	8008878 <USBD_LL_PrepareReceive>
 8007054:	e04e      	b.n	80070f4 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	6912      	ldr	r2, [r2, #16]
 800705e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007062:	fb01 f202 	mul.w	r2, r1, r2
 8007066:	1a9b      	subs	r3, r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d11c      	bne.n	80070a6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007074:	429a      	cmp	r2, r3
 8007076:	d316      	bcc.n	80070a6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007082:	429a      	cmp	r2, r3
 8007084:	d20f      	bcs.n	80070a6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fe27 	bl	8007cde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007098:	2300      	movs	r3, #0
 800709a:	2200      	movs	r2, #0
 800709c:	2100      	movs	r1, #0
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 fbea 	bl	8008878 <USBD_LL_PrepareReceive>
 80070a4:	e026      	b.n	80070f4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d105      	bne.n	80070c8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80070c8:	2180      	movs	r1, #128	; 0x80
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f001 fb28 	bl	8008720 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 fe59 	bl	8007d88 <USBD_CtlReceiveStatus>
 80070d6:	e00d      	b.n	80070f4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d004      	beq.n	80070ec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d103      	bne.n	80070f4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f001 fb16 	bl	8008720 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d11d      	bne.n	800713a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fe81 	bl	8006e06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800710c:	e015      	b.n	800713a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007120:	2b03      	cmp	r3, #3
 8007122:	d108      	bne.n	8007136 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	7afa      	ldrb	r2, [r7, #11]
 800712e:	4611      	mov	r1, r2
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	4798      	blx	r3
 8007134:	e001      	b.n	800713a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007136:	2302      	movs	r3, #2
 8007138:	e000      	b.n	800713c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800714c:	2340      	movs	r3, #64	; 0x40
 800714e:	2200      	movs	r2, #0
 8007150:	2100      	movs	r1, #0
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fa9f 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2240      	movs	r2, #64	; 0x40
 8007164:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	2200      	movs	r2, #0
 800716c:	2180      	movs	r1, #128	; 0x80
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fa91 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2240      	movs	r2, #64	; 0x40
 800717e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d009      	beq.n	80071bc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6852      	ldr	r2, [r2, #4]
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	4611      	mov	r1, r2
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	4798      	blx	r3
  }

  return USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	78fa      	ldrb	r2, [r7, #3]
 80071d6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2204      	movs	r2, #4
 80071fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr

0800720c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr

0800722c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800723a:	2b03      	cmp	r3, #3
 800723c:	d10b      	bne.n	8007256 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d005      	beq.n	8007286 <USBD_StdDevReq+0x26>
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d84f      	bhi.n	800731e <USBD_StdDevReq+0xbe>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d009      	beq.n	8007296 <USBD_StdDevReq+0x36>
 8007282:	2b20      	cmp	r3, #32
 8007284:	d14b      	bne.n	800731e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
    break;
 8007294:	e048      	b.n	8007328 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	2b09      	cmp	r3, #9
 800729c:	d839      	bhi.n	8007312 <USBD_StdDevReq+0xb2>
 800729e:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <USBD_StdDevReq+0x44>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072f5 	.word	0x080072f5
 80072a8:	08007309 	.word	0x08007309
 80072ac:	08007313 	.word	0x08007313
 80072b0:	080072ff 	.word	0x080072ff
 80072b4:	08007313 	.word	0x08007313
 80072b8:	080072d7 	.word	0x080072d7
 80072bc:	080072cd 	.word	0x080072cd
 80072c0:	08007313 	.word	0x08007313
 80072c4:	080072eb 	.word	0x080072eb
 80072c8:	080072e1 	.word	0x080072e1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f9da 	bl	8007688 <USBD_GetDescriptor>
      break;
 80072d4:	e022      	b.n	800731c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 facf 	bl	800787c <USBD_SetAddress>
      break;
 80072de:	e01d      	b.n	800731c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fb0e 	bl	8007904 <USBD_SetConfig>
      break;
 80072e8:	e018      	b.n	800731c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fb97 	bl	8007a20 <USBD_GetConfig>
      break;
 80072f2:	e013      	b.n	800731c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fbc7 	bl	8007a8a <USBD_GetStatus>
      break;
 80072fc:	e00e      	b.n	800731c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbf5 	bl	8007af0 <USBD_SetFeature>
      break;
 8007306:	e009      	b.n	800731c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fc04 	bl	8007b18 <USBD_ClrFeature>
      break;
 8007310:	e004      	b.n	800731c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fc5c 	bl	8007bd2 <USBD_CtlError>
      break;
 800731a:	bf00      	nop
    }
    break;
 800731c:	e004      	b.n	8007328 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fc56 	bl	8007bd2 <USBD_CtlError>
    break;
 8007326:	bf00      	nop
  }

  return ret;
 8007328:	7bfb      	ldrb	r3, [r7, #15]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop

08007334 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800734a:	2b40      	cmp	r3, #64	; 0x40
 800734c:	d005      	beq.n	800735a <USBD_StdItfReq+0x26>
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d82e      	bhi.n	80073b0 <USBD_StdItfReq+0x7c>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <USBD_StdItfReq+0x26>
 8007356:	2b20      	cmp	r3, #32
 8007358:	d12a      	bne.n	80073b0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007360:	3b01      	subs	r3, #1
 8007362:	2b02      	cmp	r3, #2
 8007364:	d81d      	bhi.n	80073a2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	889b      	ldrh	r3, [r3, #4]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b01      	cmp	r3, #1
 800736e:	d813      	bhi.n	8007398 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
 800737e:	4603      	mov	r3, r0
 8007380:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	88db      	ldrh	r3, [r3, #6]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d110      	bne.n	80073ac <USBD_StdItfReq+0x78>
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10d      	bne.n	80073ac <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fce6 	bl	8007d62 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007396:	e009      	b.n	80073ac <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fc19 	bl	8007bd2 <USBD_CtlError>
      break;
 80073a0:	e004      	b.n	80073ac <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc14 	bl	8007bd2 <USBD_CtlError>
      break;
 80073aa:	e000      	b.n	80073ae <USBD_StdItfReq+0x7a>
      break;
 80073ac:	bf00      	nop
    }
    break;
 80073ae:	e004      	b.n	80073ba <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fc0d 	bl	8007bd2 <USBD_CtlError>
    break;
 80073b8:	bf00      	nop
  }

  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	889b      	ldrh	r3, [r3, #4]
 80073d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d007      	beq.n	80073f4 <USBD_StdEPReq+0x30>
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	f200 8144 	bhi.w	8007672 <USBD_StdEPReq+0x2ae>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <USBD_StdEPReq+0x40>
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	f040 813f 	bne.w	8007672 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
    break;
 8007402:	e13b      	b.n	800767c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800740c:	2b20      	cmp	r3, #32
 800740e:	d10a      	bne.n	8007426 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	e12b      	b.n	800767e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	2b03      	cmp	r3, #3
 800742c:	d007      	beq.n	800743e <USBD_StdEPReq+0x7a>
 800742e:	2b03      	cmp	r3, #3
 8007430:	f300 8119 	bgt.w	8007666 <USBD_StdEPReq+0x2a2>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d072      	beq.n	800751e <USBD_StdEPReq+0x15a>
 8007438:	2b01      	cmp	r3, #1
 800743a:	d03a      	beq.n	80074b2 <USBD_StdEPReq+0xee>
 800743c:	e113      	b.n	8007666 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007444:	2b02      	cmp	r3, #2
 8007446:	d002      	beq.n	800744e <USBD_StdEPReq+0x8a>
 8007448:	2b03      	cmp	r3, #3
 800744a:	d015      	beq.n	8007478 <USBD_StdEPReq+0xb4>
 800744c:	e02b      	b.n	80074a6 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00c      	beq.n	800746e <USBD_StdEPReq+0xaa>
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	d009      	beq.n	800746e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 f95e 	bl	8008720 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007464:	2180      	movs	r1, #128	; 0x80
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 f95a 	bl	8008720 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800746c:	e020      	b.n	80074b0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fbae 	bl	8007bd2 <USBD_CtlError>
        break;
 8007476:	e01b      	b.n	80074b0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	885b      	ldrh	r3, [r3, #2]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10e      	bne.n	800749e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <USBD_StdEPReq+0xda>
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b80      	cmp	r3, #128	; 0x80
 800748a:	d008      	beq.n	800749e <USBD_StdEPReq+0xda>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	88db      	ldrh	r3, [r3, #6]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 f941 	bl	8008720 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fc5f 	bl	8007d62 <USBD_CtlSendStatus>

        break;
 80074a4:	e004      	b.n	80074b0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fb92 	bl	8007bd2 <USBD_CtlError>
        break;
 80074ae:	bf00      	nop
      }
      break;
 80074b0:	e0de      	b.n	8007670 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d002      	beq.n	80074c2 <USBD_StdEPReq+0xfe>
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d015      	beq.n	80074ec <USBD_StdEPReq+0x128>
 80074c0:	e026      	b.n	8007510 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00c      	beq.n	80074e2 <USBD_StdEPReq+0x11e>
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d009      	beq.n	80074e2 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 f924 	bl	8008720 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80074d8:	2180      	movs	r1, #128	; 0x80
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 f920 	bl	8008720 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80074e0:	e01c      	b.n	800751c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fb74 	bl	8007bd2 <USBD_CtlError>
        break;
 80074ea:	e017      	b.n	800751c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	885b      	ldrh	r3, [r3, #2]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d112      	bne.n	800751a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 f92b 	bl	800875e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fc2a 	bl	8007d62 <USBD_CtlSendStatus>
        }
        break;
 800750e:	e004      	b.n	800751a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fb5d 	bl	8007bd2 <USBD_CtlError>
        break;
 8007518:	e000      	b.n	800751c <USBD_StdEPReq+0x158>
        break;
 800751a:	bf00      	nop
      }
      break;
 800751c:	e0a8      	b.n	8007670 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007524:	2b02      	cmp	r3, #2
 8007526:	d002      	beq.n	800752e <USBD_StdEPReq+0x16a>
 8007528:	2b03      	cmp	r3, #3
 800752a:	d031      	beq.n	8007590 <USBD_StdEPReq+0x1cc>
 800752c:	e095      	b.n	800765a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <USBD_StdEPReq+0x180>
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	2b80      	cmp	r3, #128	; 0x80
 8007538:	d004      	beq.n	8007544 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fb48 	bl	8007bd2 <USBD_CtlError>
          break;
 8007542:	e08f      	b.n	8007664 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007548:	2b00      	cmp	r3, #0
 800754a:	da0b      	bge.n	8007564 <USBD_StdEPReq+0x1a0>
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	3310      	adds	r3, #16
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	4413      	add	r3, r2
 8007560:	3304      	adds	r3, #4
 8007562:	e00a      	b.n	800757a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	4413      	add	r3, r2
 800757a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2202      	movs	r2, #2
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fb8c 	bl	8007ca6 <USBD_CtlSendData>
          break;
 800758e:	e069      	b.n	8007664 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	da11      	bge.n	80075bc <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	f003 020f 	and.w	r2, r3, #15
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	3318      	adds	r3, #24
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d117      	bne.n	80075e2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fb0c 	bl	8007bd2 <USBD_CtlError>
            break;
 80075ba:	e053      	b.n	8007664 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	f003 020f 	and.w	r2, r3, #15
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 faf9 	bl	8007bd2 <USBD_CtlError>
            break;
 80075e0:	e040      	b.n	8007664 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80075e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	da0b      	bge.n	8007602 <USBD_StdEPReq+0x23e>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	3310      	adds	r3, #16
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	4413      	add	r3, r2
 80075fe:	3304      	adds	r3, #4
 8007600:	e00a      	b.n	8007618 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4413      	add	r3, r2
 8007618:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <USBD_StdEPReq+0x262>
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b80      	cmp	r3, #128	; 0x80
 8007624:	d103      	bne.n	800762e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	e00e      	b.n	800764c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 f8b2 	bl	800879c <USBD_LL_IsStallEP>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2201      	movs	r2, #1
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e002      	b.n	800764c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2202      	movs	r2, #2
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fb27 	bl	8007ca6 <USBD_CtlSendData>
          break;
 8007658:	e004      	b.n	8007664 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fab8 	bl	8007bd2 <USBD_CtlError>
        break;
 8007662:	bf00      	nop
      }
      break;
 8007664:	e004      	b.n	8007670 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fab2 	bl	8007bd2 <USBD_CtlError>
      break;
 800766e:	bf00      	nop
    }
    break;
 8007670:	e004      	b.n	800767c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 faac 	bl	8007bd2 <USBD_CtlError>
    break;
 800767a:	bf00      	nop
  }

  return ret;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	885b      	ldrh	r3, [r3, #2]
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	2b06      	cmp	r3, #6
 800769e:	f200 80c9 	bhi.w	8007834 <USBD_GetDescriptor+0x1ac>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <USBD_GetDescriptor+0x20>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076c5 	.word	0x080076c5
 80076ac:	080076dd 	.word	0x080076dd
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	08007835 	.word	0x08007835
 80076b8:	08007835 	.word	0x08007835
 80076bc:	080077e1 	.word	0x080077e1
 80076c0:	08007807 	.word	0x08007807
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7c12      	ldrb	r2, [r2, #16]
 80076d0:	f107 010a 	add.w	r1, r7, #10
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
    break;
 80076da:	e0b0      	b.n	800783e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	7c1b      	ldrb	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10d      	bne.n	8007700 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f107 020a 	add.w	r2, r7, #10
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
 80076f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3301      	adds	r3, #1
 80076fa:	2202      	movs	r2, #2
 80076fc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80076fe:	e09e      	b.n	800783e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f107 020a 	add.w	r2, r7, #10
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3301      	adds	r3, #1
 8007716:	2202      	movs	r2, #2
 8007718:	701a      	strb	r2, [r3, #0]
    break;
 800771a:	e090      	b.n	800783e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	885b      	ldrh	r3, [r3, #2]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b05      	cmp	r3, #5
 8007724:	d856      	bhi.n	80077d4 <USBD_GetDescriptor+0x14c>
 8007726:	a201      	add	r2, pc, #4	; (adr r2, 800772c <USBD_GetDescriptor+0xa4>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007745 	.word	0x08007745
 8007730:	0800775d 	.word	0x0800775d
 8007734:	08007775 	.word	0x08007775
 8007738:	0800778d 	.word	0x0800778d
 800773c:	080077a5 	.word	0x080077a5
 8007740:	080077bd 	.word	0x080077bd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	7c12      	ldrb	r2, [r2, #16]
 8007750:	f107 010a 	add.w	r1, r7, #10
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
      break;
 800775a:	e040      	b.n	80077de <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	7c12      	ldrb	r2, [r2, #16]
 8007768:	f107 010a 	add.w	r1, r7, #10
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
      break;
 8007772:	e034      	b.n	80077de <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	7c12      	ldrb	r2, [r2, #16]
 8007780:	f107 010a 	add.w	r1, r7, #10
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
      break;
 800778a:	e028      	b.n	80077de <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	7c12      	ldrb	r2, [r2, #16]
 8007798:	f107 010a 	add.w	r1, r7, #10
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
      break;
 80077a2:	e01c      	b.n	80077de <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 010a 	add.w	r1, r7, #10
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
      break;
 80077ba:	e010      	b.n	80077de <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 010a 	add.w	r1, r7, #10
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
      break;
 80077d2:	e004      	b.n	80077de <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9fb 	bl	8007bd2 <USBD_CtlError>
      return;
 80077dc:	e04b      	b.n	8007876 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80077de:	e02e      	b.n	800783e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7c1b      	ldrb	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f0:	f107 020a 	add.w	r2, r7, #10
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
      break;
 80077fa:	e020      	b.n	800783e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f9e7 	bl	8007bd2 <USBD_CtlError>
      return;
 8007804:	e037      	b.n	8007876 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7c1b      	ldrb	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10d      	bne.n	800782a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	f107 020a 	add.w	r2, r7, #10
 800781a:	4610      	mov	r0, r2
 800781c:	4798      	blx	r3
 800781e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	2207      	movs	r2, #7
 8007826:	701a      	strb	r2, [r3, #0]
      break;
 8007828:	e009      	b.n	800783e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f9d0 	bl	8007bd2 <USBD_CtlError>
      return;
 8007832:	e020      	b.n	8007876 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f9cb 	bl	8007bd2 <USBD_CtlError>
    return;
 800783c:	e01b      	b.n	8007876 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800783e:	897b      	ldrh	r3, [r7, #10]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d011      	beq.n	8007868 <USBD_GetDescriptor+0x1e0>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88db      	ldrh	r3, [r3, #6]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00d      	beq.n	8007868 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	88da      	ldrh	r2, [r3, #6]
 8007850:	897b      	ldrh	r3, [r7, #10]
 8007852:	4293      	cmp	r3, r2
 8007854:	bf28      	it	cs
 8007856:	4613      	movcs	r3, r2
 8007858:	b29b      	uxth	r3, r3
 800785a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800785c:	897b      	ldrh	r3, [r7, #10]
 800785e:	461a      	mov	r2, r3
 8007860:	68f9      	ldr	r1, [r7, #12]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa1f 	bl	8007ca6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	88db      	ldrh	r3, [r3, #6]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fa76 	bl	8007d62 <USBD_CtlSendStatus>
  }
}
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	889b      	ldrh	r3, [r3, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d130      	bne.n	80078f0 <USBD_SetAddress+0x74>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88db      	ldrh	r3, [r3, #6]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d12c      	bne.n	80078f0 <USBD_SetAddress+0x74>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	885b      	ldrh	r3, [r3, #2]
 800789a:	2b7f      	cmp	r3, #127	; 0x7f
 800789c:	d828      	bhi.n	80078f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	885b      	ldrh	r3, [r3, #2]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d104      	bne.n	80078be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f98b 	bl	8007bd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078bc:	e01d      	b.n	80078fa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7bfa      	ldrb	r2, [r7, #15]
 80078c2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 ff92 	bl	80087f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa46 	bl	8007d62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e4:	e009      	b.n	80078fa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	e004      	b.n	80078fa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f96d 	bl	8007bd2 <USBD_CtlError>
  }
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	885b      	ldrh	r3, [r3, #2]
 8007912:	b2da      	uxtb	r2, r3
 8007914:	4b41      	ldr	r3, [pc, #260]	; (8007a1c <USBD_SetConfig+0x118>)
 8007916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007918:	4b40      	ldr	r3, [pc, #256]	; (8007a1c <USBD_SetConfig+0x118>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d904      	bls.n	800792a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f955 	bl	8007bd2 <USBD_CtlError>
 8007928:	e075      	b.n	8007a16 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007930:	2b02      	cmp	r3, #2
 8007932:	d002      	beq.n	800793a <USBD_SetConfig+0x36>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d023      	beq.n	8007980 <USBD_SetConfig+0x7c>
 8007938:	e062      	b.n	8007a00 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800793a:	4b38      	ldr	r3, [pc, #224]	; (8007a1c <USBD_SetConfig+0x118>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01a      	beq.n	8007978 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007942:	4b36      	ldr	r3, [pc, #216]	; (8007a1c <USBD_SetConfig+0x118>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2203      	movs	r2, #3
 8007950:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007954:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <USBD_SetConfig+0x118>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fa5d 	bl	8006e1a <USBD_SetClassConfig>
 8007960:	4603      	mov	r3, r0
 8007962:	2b02      	cmp	r3, #2
 8007964:	d104      	bne.n	8007970 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f932 	bl	8007bd2 <USBD_CtlError>
          return;
 800796e:	e052      	b.n	8007a16 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f9f6 	bl	8007d62 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007976:	e04e      	b.n	8007a16 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f9f2 	bl	8007d62 <USBD_CtlSendStatus>
      break;
 800797e:	e04a      	b.n	8007a16 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007980:	4b26      	ldr	r3, [pc, #152]	; (8007a1c <USBD_SetConfig+0x118>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d112      	bne.n	80079ae <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007990:	4b22      	ldr	r3, [pc, #136]	; (8007a1c <USBD_SetConfig+0x118>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800799a:	4b20      	ldr	r3, [pc, #128]	; (8007a1c <USBD_SetConfig+0x118>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff fa59 	bl	8006e58 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f9db 	bl	8007d62 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80079ac:	e033      	b.n	8007a16 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80079ae:	4b1b      	ldr	r3, [pc, #108]	; (8007a1c <USBD_SetConfig+0x118>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d01d      	beq.n	80079f8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fa47 	bl	8006e58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ca:	4b14      	ldr	r3, [pc, #80]	; (8007a1c <USBD_SetConfig+0x118>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079d4:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <USBD_SetConfig+0x118>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff fa1d 	bl	8006e1a <USBD_SetClassConfig>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d104      	bne.n	80079f0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f8f2 	bl	8007bd2 <USBD_CtlError>
          return;
 80079ee:	e012      	b.n	8007a16 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f9b6 	bl	8007d62 <USBD_CtlSendStatus>
      break;
 80079f6:	e00e      	b.n	8007a16 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f9b2 	bl	8007d62 <USBD_CtlSendStatus>
      break;
 80079fe:	e00a      	b.n	8007a16 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f8e5 	bl	8007bd2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <USBD_SetConfig+0x118>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fa22 	bl	8006e58 <USBD_ClrClassConfig>
      break;
 8007a14:	bf00      	nop
    }
  }
}
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	200002b0 	.word	0x200002b0

08007a20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	88db      	ldrh	r3, [r3, #6]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d004      	beq.n	8007a3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f8cc 	bl	8007bd2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007a3a:	e022      	b.n	8007a82 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	dc02      	bgt.n	8007a4c <USBD_GetConfig+0x2c>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dc03      	bgt.n	8007a52 <USBD_GetConfig+0x32>
 8007a4a:	e015      	b.n	8007a78 <USBD_GetConfig+0x58>
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetConfig+0x48>
 8007a50:	e012      	b.n	8007a78 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f920 	bl	8007ca6 <USBD_CtlSendData>
      break;
 8007a66:	e00c      	b.n	8007a82 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f918 	bl	8007ca6 <USBD_CtlSendData>
      break;
 8007a76:	e004      	b.n	8007a82 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8a9 	bl	8007bd2 <USBD_CtlError>
      break;
 8007a80:	bf00      	nop
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d81e      	bhi.n	8007ade <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d004      	beq.n	8007ab2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f891 	bl	8007bd2 <USBD_CtlError>
      break;
 8007ab0:	e01a      	b.n	8007ae8 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f043 0202 	orr.w	r2, r3, #2
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	330c      	adds	r3, #12
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8e5 	bl	8007ca6 <USBD_CtlSendData>
    break;
 8007adc:	e004      	b.n	8007ae8 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f876 	bl	8007bd2 <USBD_CtlError>
    break;
 8007ae6:	bf00      	nop
  }
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d106      	bne.n	8007b10 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f929 	bl	8007d62 <USBD_CtlSendStatus>
  }

}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d80b      	bhi.n	8007b46 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d10c      	bne.n	8007b50 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f90f 	bl	8007d62 <USBD_CtlSendStatus>
    }
    break;
 8007b44:	e004      	b.n	8007b50 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f842 	bl	8007bd2 <USBD_CtlError>
    break;
 8007b4e:	e000      	b.n	8007b52 <USBD_ClrFeature+0x3a>
    break;
 8007b50:	bf00      	nop
  }
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	785a      	ldrb	r2, [r3, #1]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	3302      	adds	r3, #2
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	3303      	adds	r3, #3
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4413      	add	r3, r2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	3304      	adds	r3, #4
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	3305      	adds	r3, #5
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	3306      	adds	r3, #6
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	3307      	adds	r3, #7
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	80da      	strh	r2, [r3, #6]

}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bc80      	pop	{r7}
 8007bd0:	4770      	bx	lr

08007bd2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007bdc:	2180      	movs	r1, #128	; 0x80
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fd9e 	bl	8008720 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007be4:	2100      	movs	r1, #0
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fd9a 	bl	8008720 <USBD_LL_StallEP>
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d032      	beq.n	8007c70 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f834 	bl	8007c78 <USBD_GetLen>
 8007c10:	4603      	mov	r3, r0
 8007c12:	3301      	adds	r3, #1
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	75fa      	strb	r2, [r7, #23]
 8007c24:	461a      	mov	r2, r3
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4413      	add	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	75fa      	strb	r2, [r7, #23]
 8007c36:	461a      	mov	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c40:	e012      	b.n	8007c68 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	60fa      	str	r2, [r7, #12]
 8007c48:	7dfa      	ldrb	r2, [r7, #23]
 8007c4a:	1c51      	adds	r1, r2, #1
 8007c4c:	75f9      	strb	r1, [r7, #23]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	440a      	add	r2, r1
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	75fa      	strb	r2, [r7, #23]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4413      	add	r3, r2
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e8      	bne.n	8007c42 <USBD_GetString+0x4e>
    }
  }
}
 8007c70:	bf00      	nop
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007c84:	e005      	b.n	8007c92 <USBD_GetLen+0x1a>
    {
        len++;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f5      	bne.n	8007c86 <USBD_GetLen+0xe>
    }

    return len;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr

08007ca6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007cbc:	88fa      	ldrh	r2, [r7, #6]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cc2:	88fa      	ldrh	r2, [r7, #6]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	2100      	movs	r1, #0
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fdaf 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fd9d 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2203      	movs	r2, #3
 8007d14:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007d18:	88fa      	ldrh	r2, [r7, #6]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fda2 	bl	8008878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	2100      	movs	r1, #0
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fd90 	bl	8008878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d72:	2300      	movs	r3, #0
 8007d74:	2200      	movs	r2, #0
 8007d76:	2100      	movs	r1, #0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fd5a 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2205      	movs	r2, #5
 8007d94:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fd6a 	bl	8008878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <WaitWhileBusy>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_TIMEOUT for timeout
 */
static LoRa_Status WaitWhileBusy(uint16_t timeout)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	80fb      	strh	r3, [r7, #6]

	uint32_t startTime;

	startTime = HAL_GetTick();
 8007dba:	f7f8 fea7 	bl	8000b0c <HAL_GetTick>
 8007dbe:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8007dc0:	e009      	b.n	8007dd6 <WaitWhileBusy+0x26>
	{
		if((HAL_GetTick() - startTime) > timeout)
 8007dc2:	f7f8 fea3 	bl	8000b0c <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d901      	bls.n	8007dd6 <WaitWhileBusy+0x26>
		{
			return(LoRa_TIMEOUT);
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e008      	b.n	8007de8 <WaitWhileBusy+0x38>
	while(HAL_GPIO_ReadPin(LoRa_BUSY_GPIO_Port, LoRa_BUSY_Pin) == GPIO_PIN_SET)
 8007dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dda:	4805      	ldr	r0, [pc, #20]	; (8007df0 <WaitWhileBusy+0x40>)
 8007ddc:	f7f9 f950 	bl	8001080 <HAL_GPIO_ReadPin>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d0ed      	beq.n	8007dc2 <WaitWhileBusy+0x12>
		}
	}

	return(LoRa_OK);
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40020000 	.word	0x40020000

08007df4 <SPI_Send>:
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 *
 */
static LoRa_Status SPI_Send(uint8_t* buffer, uint16_t numBytes, bool moreToCome)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	807b      	strh	r3, [r7, #2]
 8007e00:	4613      	mov	r3, r2
 8007e02:	707b      	strb	r3, [r7, #1]

	/* make sure chip isn't busy */
	if(WaitWhileBusy(10) != LoRa_OK)
 8007e04:	200a      	movs	r0, #10
 8007e06:	f7ff ffd3 	bl	8007db0 <WaitWhileBusy>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <SPI_Send+0x20>
	{
		return(LoRa_ERROR);
 8007e10:	2301      	movs	r3, #1
 8007e12:	e01c      	b.n	8007e4e <SPI_Send+0x5a>
	}

	/* Set NSS low */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8007e14:	2200      	movs	r2, #0
 8007e16:	2110      	movs	r1, #16
 8007e18:	480f      	ldr	r0, [pc, #60]	; (8007e58 <SPI_Send+0x64>)
 8007e1a:	f7f9 f948 	bl	80010ae <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, buffer, numBytes, 100) != HAL_OK)
 8007e1e:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <SPI_Send+0x68>)
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	887a      	ldrh	r2, [r7, #2]
 8007e24:	2364      	movs	r3, #100	; 0x64
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	f7fb fd26 	bl	8003878 <HAL_SPI_Transmit>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <SPI_Send+0x42>
	{
		return(LoRa_ERROR);
 8007e32:	2301      	movs	r3, #1
 8007e34:	e00b      	b.n	8007e4e <SPI_Send+0x5a>
	}

	if(moreToCome != true)
 8007e36:	787b      	ldrb	r3, [r7, #1]
 8007e38:	f083 0301 	eor.w	r3, r3, #1
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <SPI_Send+0x58>
	{
		/* Set NSS high */
		HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8007e42:	2201      	movs	r2, #1
 8007e44:	2110      	movs	r1, #16
 8007e46:	4804      	ldr	r0, [pc, #16]	; (8007e58 <SPI_Send+0x64>)
 8007e48:	f7f9 f931 	bl	80010ae <HAL_GPIO_WritePin>
	}

	return(LoRa_OK);
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	40020000 	.word	0x40020000
 8007e5c:	200002b4 	.word	0x200002b4

08007e60 <LoRa_Init>:
 * Return Value
 *  LoRa_OK for success
 *  LoRa_ERROR in case of error
 */
LoRa_Status LoRa_Init(SPI_HandleTypeDef *hspiPtr)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	uint8_t xmitBuffer[10];

  /* store the hspi pointer for future use */
  hspi = hspiPtr;
 8007e68:	4a65      	ldr	r2, [pc, #404]	; (8008000 <LoRa_Init+0x1a0>)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6013      	str	r3, [r2, #0]

  /* Set NSS high */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8007e6e:	2201      	movs	r2, #1
 8007e70:	2110      	movs	r1, #16
 8007e72:	4864      	ldr	r0, [pc, #400]	; (8008004 <LoRa_Init+0x1a4>)
 8007e74:	f7f9 f91b 	bl	80010ae <HAL_GPIO_WritePin>

  /* Reset SX1262 chip */
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_RESET); 	/* Pull NRST low */
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4861      	ldr	r0, [pc, #388]	; (8008004 <LoRa_Init+0x1a4>)
 8007e7e:	f7f9 f916 	bl	80010ae <HAL_GPIO_WritePin>
  HAL_Delay(1); 															/* delay 1mS */
 8007e82:	2001      	movs	r0, #1
 8007e84:	f7f8 fe4c 	bl	8000b20 <HAL_Delay>
  HAL_GPIO_WritePin(LoRa_NRST_GPIO_Port, LoRa_NRST_Pin, GPIO_PIN_SET);		/* Set NRST high */
 8007e88:	2201      	movs	r2, #1
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	485d      	ldr	r0, [pc, #372]	; (8008004 <LoRa_Init+0x1a4>)
 8007e8e:	f7f9 f90e 	bl	80010ae <HAL_GPIO_WritePin>

  /* Set the chip to Standby mode and using the internal oscillator */
  xmitBuffer[0] = LORA_SET_STANDBY_OPCODE;
 8007e92:	2380      	movs	r3, #128	; 0x80
 8007e94:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_STDBY_RC;
 8007e96:	2300      	movs	r3, #0
 8007e98:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007e9a:	f107 030c 	add.w	r3, r7, #12
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff ffa6 	bl	8007df4 <SPI_Send>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <LoRa_Init+0x52>
  {
	  return(LoRa_ERROR);
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0a2      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  /* Set the packet type to LoRa */
  xmitBuffer[0] = LORA_SET_PACKET_TYPE_OPCODE;
 8007eb2:	238a      	movs	r3, #138	; 0x8a
 8007eb4:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = LORA_PACKET_TYPE_LORA;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007eba:	f107 030c 	add.w	r3, r7, #12
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff ff96 	bl	8007df4 <SPI_Send>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <LoRa_Init+0x72>
  {
	  return(LoRa_ERROR);
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e092      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  /* Set the frequency to 915 MHz  */
  /* See datasheet for calculation */
  xmitBuffer[0] = LORA_SET_RF_FREQUENCY_OPCODE;
 8007ed2:	2386      	movs	r3, #134	; 0x86
 8007ed4:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x39;
 8007ed6:	2339      	movs	r3, #57	; 0x39
 8007ed8:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x30;
 8007eda:	2330      	movs	r3, #48	; 0x30
 8007edc:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x00;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	2200      	movs	r2, #0
 8007eec:	2105      	movs	r1, #5
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff ff80 	bl	8007df4 <SPI_Send>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <LoRa_Init+0x9e>
  {
	  return(LoRa_ERROR);
 8007efa:	2301      	movs	r3, #1
 8007efc:	e07c      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  /* Set the power amplifier configuration */
  /* See datasheet page 74                 */
  xmitBuffer[0] = LORA_SET_PA_CONFIG_OPCODE;
 8007efe:	2395      	movs	r3, #149	; 0x95
 8007f00:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x04; /* paDutyCycle */
 8007f02:	2304      	movs	r3, #4
 8007f04:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x07; /* hpMax */
 8007f06:	2307      	movs	r3, #7
 8007f08:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x00; /* devSel */
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x01; /* paLut */
 8007f0e:	2301      	movs	r3, #1
 8007f10:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	2200      	movs	r2, #0
 8007f18:	2105      	movs	r1, #5
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff ff6a 	bl	8007df4 <SPI_Send>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <LoRa_Init+0xca>
  {
	  return(LoRa_ERROR);
 8007f26:	2301      	movs	r3, #1
 8007f28:	e066      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  /* Set the TX parameters */
  xmitBuffer[0] = LORA_SET_TX_PARAMS_OPCODE;
 8007f2a:	238e      	movs	r3, #142	; 0x8e
 8007f2c:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 22; /* power +22 dBm   */
 8007f2e:	2316      	movs	r3, #22
 8007f30:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = LORA_STANDARD_RAMPTIME;
 8007f32:	2304      	movs	r3, #4
 8007f34:	73bb      	strb	r3, [r7, #14]
  if(SPI_Send(xmitBuffer, 3, false) != LoRa_OK)
 8007f36:	f107 030c 	add.w	r3, r7, #12
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2103      	movs	r1, #3
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff ff58 	bl	8007df4 <SPI_Send>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <LoRa_Init+0xee>
  {
	  return(LoRa_ERROR);
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e054      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  /* Set DIO2 as the control for the RF switch */
  xmitBuffer[0] = LORA_SET_DIO2_AS_RF_SWITCH_CTRL_OPCODE;
 8007f4e:	239d      	movs	r3, #157	; 0x9d
 8007f50:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* enable */
 8007f52:	2301      	movs	r3, #1
 8007f54:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007f56:	f107 030c 	add.w	r3, r7, #12
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff ff48 	bl	8007df4 <SPI_Send>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <LoRa_Init+0x10e>
  {
	  return(LoRa_ERROR);
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e044      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  /* Set regulator mode to use the DC-DC converter */
  xmitBuffer[0] = LORA_SET_REGULATOR_MODE_OPCODE;
 8007f6e:	2396      	movs	r3, #150	; 0x96
 8007f70:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 1; /* Use DC-DC converter */
 8007f72:	2301      	movs	r3, #1
 8007f74:	737b      	strb	r3, [r7, #13]
  if(SPI_Send(xmitBuffer, 2, false) != LoRa_OK)
 8007f76:	f107 030c 	add.w	r3, r7, #12
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff ff38 	bl	8007df4 <SPI_Send>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <LoRa_Init+0x12e>
  {
	  return(LoRa_ERROR);
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e034      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  /* Set LoRa modulation parameters */
  xmitBuffer[0] = LORA_SET_MODULATION_PARAMS_OPCODE;
 8007f8e:	238b      	movs	r3, #139	; 0x8b
 8007f90:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 7; 		/* Spreading factor */
 8007f92:	2307      	movs	r3, #7
 8007f94:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x04; 	/* BW = 125 KHz */
 8007f96:	2304      	movs	r3, #4
 8007f98:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x01;		/* Coding Rate = 4/5 */
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0;		/* Low data rate optimization off */
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	743b      	strb	r3, [r7, #16]
  if(SPI_Send(xmitBuffer, 5, false) != LoRa_OK)
 8007fa2:	f107 030c 	add.w	r3, r7, #12
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2105      	movs	r1, #5
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff ff22 	bl	8007df4 <SPI_Send>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <LoRa_Init+0x15a>
  {
	  return(LoRa_ERROR);
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e01e      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  /* Set DIO IRQ parameters */
  xmitBuffer[0] = LORA_SET_DIO_IRQ_PARAMS_OPCODE;
 8007fba:	2308      	movs	r3, #8
 8007fbc:	733b      	strb	r3, [r7, #12]
  xmitBuffer[1] = 0x02;	/* Enable timeout interrupt */
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	737b      	strb	r3, [r7, #13]
  xmitBuffer[2] = 0x02;	/* Enable RX done interrupt */
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	73bb      	strb	r3, [r7, #14]
  xmitBuffer[3] = 0x02;	/* Map timeout to DIO1 */
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	73fb      	strb	r3, [r7, #15]
  xmitBuffer[4] = 0x02; /* Map RX done to DIO1 */
 8007fca:	2302      	movs	r3, #2
 8007fcc:	743b      	strb	r3, [r7, #16]
  xmitBuffer[5] = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	747b      	strb	r3, [r7, #17]
  xmitBuffer[6] = 0;	/* No interrupts to DIO2 */
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	74bb      	strb	r3, [r7, #18]
  xmitBuffer[7]	= 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	74fb      	strb	r3, [r7, #19]
  xmitBuffer[8]	= 0;	/* No interrupts to DIO3 */
 8007fda:	2300      	movs	r3, #0
 8007fdc:	753b      	strb	r3, [r7, #20]
  if(SPI_Send(xmitBuffer, 9, false) != LoRa_OK)
 8007fde:	f107 030c 	add.w	r3, r7, #12
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2109      	movs	r1, #9
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff ff04 	bl	8007df4 <SPI_Send>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <LoRa_Init+0x196>
  {
	  return(LoRa_ERROR);
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <LoRa_Init+0x198>
  }

  return(LoRa_OK);
 8007ff6:	2300      	movs	r3, #0

}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200002b4 	.word	0x200002b4
 8008004:	40020000 	.word	0x40020000

08008008 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800800c:	2200      	movs	r2, #0
 800800e:	4912      	ldr	r1, [pc, #72]	; (8008058 <MX_USB_DEVICE_Init+0x50>)
 8008010:	4812      	ldr	r0, [pc, #72]	; (800805c <MX_USB_DEVICE_Init+0x54>)
 8008012:	f7fe fea8 	bl	8006d66 <USBD_Init>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800801c:	f7f8 fbc2 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008020:	490f      	ldr	r1, [pc, #60]	; (8008060 <MX_USB_DEVICE_Init+0x58>)
 8008022:	480e      	ldr	r0, [pc, #56]	; (800805c <MX_USB_DEVICE_Init+0x54>)
 8008024:	f7fe feca 	bl	8006dbc <USBD_RegisterClass>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800802e:	f7f8 fbb9 	bl	80007a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008032:	490c      	ldr	r1, [pc, #48]	; (8008064 <MX_USB_DEVICE_Init+0x5c>)
 8008034:	4809      	ldr	r0, [pc, #36]	; (800805c <MX_USB_DEVICE_Init+0x54>)
 8008036:	f7fe fdfb 	bl	8006c30 <USBD_CDC_RegisterInterface>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008040:	f7f8 fbb0 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008044:	4805      	ldr	r0, [pc, #20]	; (800805c <MX_USB_DEVICE_Init+0x54>)
 8008046:	f7fe fed2 	bl	8006dee <USBD_Start>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008050:	f7f8 fba8 	bl	80007a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008054:	bf00      	nop
 8008056:	bd80      	pop	{r7, pc}
 8008058:	2000012c 	.word	0x2000012c
 800805c:	200002b8 	.word	0x200002b8
 8008060:	20000018 	.word	0x20000018
 8008064:	2000011c 	.word	0x2000011c

08008068 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800806c:	2200      	movs	r2, #0
 800806e:	4905      	ldr	r1, [pc, #20]	; (8008084 <CDC_Init_FS+0x1c>)
 8008070:	4805      	ldr	r0, [pc, #20]	; (8008088 <CDC_Init_FS+0x20>)
 8008072:	f7fe fdf3 	bl	8006c5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008076:	4905      	ldr	r1, [pc, #20]	; (800808c <CDC_Init_FS+0x24>)
 8008078:	4803      	ldr	r0, [pc, #12]	; (8008088 <CDC_Init_FS+0x20>)
 800807a:	f7fe fe08 	bl	8006c8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800807e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008080:	4618      	mov	r0, r3
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20000954 	.word	0x20000954
 8008088:	200002b8 	.word	0x200002b8
 800808c:	20000554 	.word	0x20000554

08008090 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008090:	b480      	push	{r7}
 8008092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008094:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008096:	4618      	mov	r0, r3
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr
	...

080080a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	6039      	str	r1, [r7, #0]
 80080aa:	71fb      	strb	r3, [r7, #7]
 80080ac:	4613      	mov	r3, r2
 80080ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	2b23      	cmp	r3, #35	; 0x23
 80080b4:	d84a      	bhi.n	800814c <CDC_Control_FS+0xac>
 80080b6:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <CDC_Control_FS+0x1c>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	0800814d 	.word	0x0800814d
 80080c0:	0800814d 	.word	0x0800814d
 80080c4:	0800814d 	.word	0x0800814d
 80080c8:	0800814d 	.word	0x0800814d
 80080cc:	0800814d 	.word	0x0800814d
 80080d0:	0800814d 	.word	0x0800814d
 80080d4:	0800814d 	.word	0x0800814d
 80080d8:	0800814d 	.word	0x0800814d
 80080dc:	0800814d 	.word	0x0800814d
 80080e0:	0800814d 	.word	0x0800814d
 80080e4:	0800814d 	.word	0x0800814d
 80080e8:	0800814d 	.word	0x0800814d
 80080ec:	0800814d 	.word	0x0800814d
 80080f0:	0800814d 	.word	0x0800814d
 80080f4:	0800814d 	.word	0x0800814d
 80080f8:	0800814d 	.word	0x0800814d
 80080fc:	0800814d 	.word	0x0800814d
 8008100:	0800814d 	.word	0x0800814d
 8008104:	0800814d 	.word	0x0800814d
 8008108:	0800814d 	.word	0x0800814d
 800810c:	0800814d 	.word	0x0800814d
 8008110:	0800814d 	.word	0x0800814d
 8008114:	0800814d 	.word	0x0800814d
 8008118:	0800814d 	.word	0x0800814d
 800811c:	0800814d 	.word	0x0800814d
 8008120:	0800814d 	.word	0x0800814d
 8008124:	0800814d 	.word	0x0800814d
 8008128:	0800814d 	.word	0x0800814d
 800812c:	0800814d 	.word	0x0800814d
 8008130:	0800814d 	.word	0x0800814d
 8008134:	0800814d 	.word	0x0800814d
 8008138:	0800814d 	.word	0x0800814d
 800813c:	0800814d 	.word	0x0800814d
 8008140:	0800814d 	.word	0x0800814d
 8008144:	0800814d 	.word	0x0800814d
 8008148:	0800814d 	.word	0x0800814d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800814c:	bf00      	nop
  }

  return (USBD_OK);
 800814e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	bc80      	pop	{r7}
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop

0800815c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	4805      	ldr	r0, [pc, #20]	; (8008180 <CDC_Receive_FS+0x24>)
 800816a:	f7fe fd90 	bl	8006c8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800816e:	4804      	ldr	r0, [pc, #16]	; (8008180 <CDC_Receive_FS+0x24>)
 8008170:	f7fe fdcf 	bl	8006d12 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008174:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	200002b8 	.word	0x200002b8

08008184 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008194:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <CDC_Transmit_FS+0x48>)
 8008196:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800819a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e00b      	b.n	80081c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081aa:	887b      	ldrh	r3, [r7, #2]
 80081ac:	461a      	mov	r2, r3
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	4806      	ldr	r0, [pc, #24]	; (80081cc <CDC_Transmit_FS+0x48>)
 80081b2:	f7fe fd53 	bl	8006c5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081b6:	4805      	ldr	r0, [pc, #20]	; (80081cc <CDC_Transmit_FS+0x48>)
 80081b8:	f7fe fd7c 	bl	8006cb4 <USBD_CDC_TransmitPacket>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	200002b8 	.word	0x200002b8

080081d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2212      	movs	r2, #18
 80081e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081e2:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000148 	.word	0x20000148

080081f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	6039      	str	r1, [r7, #0]
 80081fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2204      	movs	r2, #4
 8008204:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008206:	4b03      	ldr	r3, [pc, #12]	; (8008214 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	bc80      	pop	{r7}
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	2000015c 	.word	0x2000015c

08008218 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4907      	ldr	r1, [pc, #28]	; (800824c <USBD_FS_ProductStrDescriptor+0x34>)
 800822e:	4808      	ldr	r0, [pc, #32]	; (8008250 <USBD_FS_ProductStrDescriptor+0x38>)
 8008230:	f7ff fce0 	bl	8007bf4 <USBD_GetString>
 8008234:	e004      	b.n	8008240 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	4904      	ldr	r1, [pc, #16]	; (800824c <USBD_FS_ProductStrDescriptor+0x34>)
 800823a:	4805      	ldr	r0, [pc, #20]	; (8008250 <USBD_FS_ProductStrDescriptor+0x38>)
 800823c:	f7ff fcda 	bl	8007bf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008240:	4b02      	ldr	r3, [pc, #8]	; (800824c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000d54 	.word	0x20000d54
 8008250:	08009300 	.word	0x08009300

08008254 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	4904      	ldr	r1, [pc, #16]	; (8008274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008264:	4804      	ldr	r0, [pc, #16]	; (8008278 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008266:	f7ff fcc5 	bl	8007bf4 <USBD_GetString>
  return USBD_StrDesc;
 800826a:	4b02      	ldr	r3, [pc, #8]	; (8008274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20000d54 	.word	0x20000d54
 8008278:	08009318 	.word	0x08009318

0800827c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	221a      	movs	r2, #26
 800828c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800828e:	f000 f843 	bl	8008318 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008292:	4b02      	ldr	r3, [pc, #8]	; (800829c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20000160 	.word	0x20000160

080082a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d105      	bne.n	80082be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	4907      	ldr	r1, [pc, #28]	; (80082d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082b6:	4808      	ldr	r0, [pc, #32]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082b8:	f7ff fc9c 	bl	8007bf4 <USBD_GetString>
 80082bc:	e004      	b.n	80082c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4904      	ldr	r1, [pc, #16]	; (80082d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082c2:	4805      	ldr	r0, [pc, #20]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082c4:	f7ff fc96 	bl	8007bf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000d54 	.word	0x20000d54
 80082d8:	0800932c 	.word	0x0800932c

080082dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	6039      	str	r1, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	4907      	ldr	r1, [pc, #28]	; (8008310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082f2:	4808      	ldr	r0, [pc, #32]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082f4:	f7ff fc7e 	bl	8007bf4 <USBD_GetString>
 80082f8:	e004      	b.n	8008304 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4904      	ldr	r1, [pc, #16]	; (8008310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082fe:	4805      	ldr	r0, [pc, #20]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008300:	f7ff fc78 	bl	8007bf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008304:	4b02      	ldr	r3, [pc, #8]	; (8008310 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20000d54 	.word	0x20000d54
 8008314:	08009338 	.word	0x08009338

08008318 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <Get_SerialNum+0x44>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008324:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <Get_SerialNum+0x48>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800832a:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <Get_SerialNum+0x4c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4413      	add	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800833e:	2208      	movs	r2, #8
 8008340:	4909      	ldr	r1, [pc, #36]	; (8008368 <Get_SerialNum+0x50>)
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 f814 	bl	8008370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008348:	2204      	movs	r2, #4
 800834a:	4908      	ldr	r1, [pc, #32]	; (800836c <Get_SerialNum+0x54>)
 800834c:	68b8      	ldr	r0, [r7, #8]
 800834e:	f000 f80f 	bl	8008370 <IntToUnicode>
  }
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	1ff80050 	.word	0x1ff80050
 8008360:	1ff80054 	.word	0x1ff80054
 8008364:	1ff80058 	.word	0x1ff80058
 8008368:	20000162 	.word	0x20000162
 800836c:	20000172 	.word	0x20000172

08008370 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]
 8008386:	e027      	b.n	80083d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	0f1b      	lsrs	r3, r3, #28
 800838c:	2b09      	cmp	r3, #9
 800838e:	d80b      	bhi.n	80083a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	0f1b      	lsrs	r3, r3, #28
 8008394:	b2da      	uxtb	r2, r3
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	4619      	mov	r1, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	440b      	add	r3, r1
 80083a0:	3230      	adds	r2, #48	; 0x30
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]
 80083a6:	e00a      	b.n	80083be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	0f1b      	lsrs	r3, r3, #28
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	4619      	mov	r1, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	440b      	add	r3, r1
 80083b8:	3237      	adds	r2, #55	; 0x37
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	3301      	adds	r3, #1
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4413      	add	r3, r2
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	3301      	adds	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
 80083d8:	7dfa      	ldrb	r2, [r7, #23]
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d3d3      	bcc.n	8008388 <IntToUnicode+0x18>
  }
}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bc80      	pop	{r7}
 80083ea:	4770      	bx	lr

080083ec <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d106      	bne.n	800840c <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <HAL_PCDEx_SetConnectionState+0x38>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	4a08      	ldr	r2, [pc, #32]	; (8008424 <HAL_PCDEx_SetConnectionState+0x38>)
 8008404:	f043 0301 	orr.w	r3, r3, #1
 8008408:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800840a:	e005      	b.n	8008418 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <HAL_PCDEx_SetConnectionState+0x38>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4a04      	ldr	r2, [pc, #16]	; (8008424 <HAL_PCDEx_SetConnectionState+0x38>)
 8008412:	f023 0301 	bic.w	r3, r3, #1
 8008416:	6053      	str	r3, [r2, #4]
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	40010000 	.word	0x40010000

08008428 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a0d      	ldr	r2, [pc, #52]	; (800846c <HAL_PCD_MspInit+0x44>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d113      	bne.n	8008462 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800843a:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <HAL_PCD_MspInit+0x48>)
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	4a0c      	ldr	r2, [pc, #48]	; (8008470 <HAL_PCD_MspInit+0x48>)
 8008440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008444:	6253      	str	r3, [r2, #36]	; 0x24
 8008446:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <HAL_PCD_MspInit+0x48>)
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	2014      	movs	r0, #20
 8008458:	f7f8 fc5b 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800845c:	2014      	movs	r0, #20
 800845e:	f7f8 fc74 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40005c00 	.word	0x40005c00
 8008470:	40023800 	.word	0x40023800

08008474 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008488:	4619      	mov	r1, r3
 800848a:	4610      	mov	r0, r2
 800848c:	f7fe fcf7 	bl	8006e7e <USBD_LL_SetupStage>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80084aa:	78fa      	ldrb	r2, [r7, #3]
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	440b      	add	r3, r1
 80084b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	4619      	mov	r1, r3
 80084c2:	f7fe fd29 	bl	8006f18 <USBD_LL_DataOutStage>
}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80084e0:	78fa      	ldrb	r2, [r7, #3]
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	440b      	add	r3, r1
 80084ee:	333c      	adds	r3, #60	; 0x3c
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	4619      	mov	r1, r3
 80084f6:	f7fe fd80 	bl	8006ffa <USBD_LL_DataInStage>
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fe8b 	bl	800722c <USBD_LL_SOF>
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008526:	2301      	movs	r3, #1
 8008528:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d001      	beq.n	8008536 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008532:	f7f8 f937 	bl	80007a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800853c:	7bfa      	ldrb	r2, [r7, #15]
 800853e:	4611      	mov	r1, r2
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe fe40 	bl	80071c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe fdf9 	bl	8007144 <USBD_LL_Reset>
}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fe3a 	bl	80071e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <HAL_PCD_SuspendCallback+0x30>)
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	4a03      	ldr	r2, [pc, #12]	; (800858c <HAL_PCD_SuspendCallback+0x30>)
 800857e:	f043 0306 	orr.w	r3, r3, #6
 8008582:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	e000ed00 	.word	0xe000ed00

08008590 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fe34 	bl	800720c <USBD_LL_Resume>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80085b4:	4a28      	ldr	r2, [pc, #160]	; (8008658 <USBD_LL_Init+0xac>)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a26      	ldr	r2, [pc, #152]	; (8008658 <USBD_LL_Init+0xac>)
 80085c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80085c4:	4b24      	ldr	r3, [pc, #144]	; (8008658 <USBD_LL_Init+0xac>)
 80085c6:	4a25      	ldr	r2, [pc, #148]	; (800865c <USBD_LL_Init+0xb0>)
 80085c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80085ca:	4b23      	ldr	r3, [pc, #140]	; (8008658 <USBD_LL_Init+0xac>)
 80085cc:	2208      	movs	r2, #8
 80085ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80085d0:	4b21      	ldr	r3, [pc, #132]	; (8008658 <USBD_LL_Init+0xac>)
 80085d2:	2202      	movs	r2, #2
 80085d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80085d6:	4b20      	ldr	r3, [pc, #128]	; (8008658 <USBD_LL_Init+0xac>)
 80085d8:	2202      	movs	r2, #2
 80085da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80085dc:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <USBD_LL_Init+0xac>)
 80085de:	2200      	movs	r2, #0
 80085e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80085e2:	4b1d      	ldr	r3, [pc, #116]	; (8008658 <USBD_LL_Init+0xac>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80085e8:	481b      	ldr	r0, [pc, #108]	; (8008658 <USBD_LL_Init+0xac>)
 80085ea:	f7f8 febd 	bl	8001368 <HAL_PCD_Init>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80085f4:	f7f8 f8d6 	bl	80007a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085fe:	2318      	movs	r3, #24
 8008600:	2200      	movs	r2, #0
 8008602:	2100      	movs	r1, #0
 8008604:	f7fa fa9a 	bl	8002b3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800860e:	2358      	movs	r3, #88	; 0x58
 8008610:	2200      	movs	r2, #0
 8008612:	2180      	movs	r1, #128	; 0x80
 8008614:	f7fa fa92 	bl	8002b3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800861e:	23c0      	movs	r3, #192	; 0xc0
 8008620:	2200      	movs	r2, #0
 8008622:	2181      	movs	r1, #129	; 0x81
 8008624:	f7fa fa8a 	bl	8002b3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800862e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008632:	2200      	movs	r2, #0
 8008634:	2101      	movs	r1, #1
 8008636:	f7fa fa81 	bl	8002b3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008644:	2200      	movs	r2, #0
 8008646:	2182      	movs	r1, #130	; 0x82
 8008648:	f7fa fa78 	bl	8002b3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000f54 	.word	0x20000f54
 800865c:	40005c00 	.word	0x40005c00

08008660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008676:	4618      	mov	r0, r3
 8008678:	f7f8 ff54 	bl	8001524 <HAL_PCD_Start>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f944 	bl	8008910 <USBD_Get_USB_Status>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800868c:	7bbb      	ldrb	r3, [r7, #14]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	461a      	mov	r2, r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	70fb      	strb	r3, [r7, #3]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70bb      	strb	r3, [r7, #2]
 80086ac:	4613      	mov	r3, r2
 80086ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80086be:	78bb      	ldrb	r3, [r7, #2]
 80086c0:	883a      	ldrh	r2, [r7, #0]
 80086c2:	78f9      	ldrb	r1, [r7, #3]
 80086c4:	f7f9 f870 	bl	80017a8 <HAL_PCD_EP_Open>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f91e 	bl	8008910 <USBD_Get_USB_Status>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7f9 f8b7 	bl	8001874 <HAL_PCD_EP_Close>
 8008706:	4603      	mov	r3, r0
 8008708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f8ff 	bl	8008910 <USBD_Get_USB_Status>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008716:	7bbb      	ldrb	r3, [r7, #14]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f7f9 f977 	bl	8001a32 <HAL_PCD_EP_SetStall>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	4618      	mov	r0, r3
 800874c:	f000 f8e0 	bl	8008910 <USBD_Get_USB_Status>
 8008750:	4603      	mov	r3, r0
 8008752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008754:	7bbb      	ldrb	r3, [r7, #14]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7f9 f9aa 	bl	8001ad6 <HAL_PCD_EP_ClrStall>
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f8c1 	bl	8008910 <USBD_Get_USB_Status>
 800878e:	4603      	mov	r3, r0
 8008790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008792:	7bbb      	ldrb	r3, [r7, #14]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da0c      	bge.n	80087d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	440b      	add	r3, r1
 80087cc:	3302      	adds	r3, #2
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	e00b      	b.n	80087ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d2:	78fb      	ldrb	r3, [r7, #3]
 80087d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087d8:	68f9      	ldr	r1, [r7, #12]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80087e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bc80      	pop	{r7}
 80087f2:	4770      	bx	lr

080087f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	4611      	mov	r1, r2
 8008812:	4618      	mov	r0, r3
 8008814:	f7f8 ffa3 	bl	800175e <HAL_PCD_SetAddress>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 f876 	bl	8008910 <USBD_Get_USB_Status>
 8008824:	4603      	mov	r3, r0
 8008826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008828:	7bbb      	ldrb	r3, [r7, #14]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b086      	sub	sp, #24
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	461a      	mov	r2, r3
 800883e:	460b      	mov	r3, r1
 8008840:	72fb      	strb	r3, [r7, #11]
 8008842:	4613      	mov	r3, r2
 8008844:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008854:	893b      	ldrh	r3, [r7, #8]
 8008856:	7af9      	ldrb	r1, [r7, #11]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	f7f9 f8a7 	bl	80019ac <HAL_PCD_EP_Transmit>
 800885e:	4603      	mov	r3, r0
 8008860:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f853 	bl	8008910 <USBD_Get_USB_Status>
 800886a:	4603      	mov	r3, r0
 800886c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800886e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	607a      	str	r2, [r7, #4]
 8008882:	461a      	mov	r2, r3
 8008884:	460b      	mov	r3, r1
 8008886:	72fb      	strb	r3, [r7, #11]
 8008888:	4613      	mov	r3, r2
 800888a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800889a:	893b      	ldrh	r3, [r7, #8]
 800889c:	7af9      	ldrb	r1, [r7, #11]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	f7f9 f830 	bl	8001904 <HAL_PCD_EP_Receive>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 f830 	bl	8008910 <USBD_Get_USB_Status>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7f9 f852 	bl	800197e <HAL_PCD_EP_GetRxCount>
 80088da:	4603      	mov	r3, r0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088ec:	4b02      	ldr	r3, [pc, #8]	; (80088f8 <USBD_static_malloc+0x14>)
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr
 80088f8:	20001240 	.word	0x20001240

080088fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]

}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	bc80      	pop	{r7}
 800890c:	4770      	bx	lr
	...

08008910 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	2b03      	cmp	r3, #3
 8008922:	d817      	bhi.n	8008954 <USBD_Get_USB_Status+0x44>
 8008924:	a201      	add	r2, pc, #4	; (adr r2, 800892c <USBD_Get_USB_Status+0x1c>)
 8008926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892a:	bf00      	nop
 800892c:	0800893d 	.word	0x0800893d
 8008930:	08008943 	.word	0x08008943
 8008934:	08008949 	.word	0x08008949
 8008938:	0800894f 	.word	0x0800894f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
    break;
 8008940:	e00b      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008942:	2302      	movs	r3, #2
 8008944:	73fb      	strb	r3, [r7, #15]
    break;
 8008946:	e008      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
    break;
 800894c:	e005      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800894e:	2302      	movs	r3, #2
 8008950:	73fb      	strb	r3, [r7, #15]
    break;
 8008952:	e002      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	bf00      	nop
  }
  return usb_status;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop

08008968 <__errno>:
 8008968:	4b01      	ldr	r3, [pc, #4]	; (8008970 <__errno+0x8>)
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	2000017c 	.word	0x2000017c

08008974 <__libc_init_array>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	2600      	movs	r6, #0
 8008978:	4d0c      	ldr	r5, [pc, #48]	; (80089ac <__libc_init_array+0x38>)
 800897a:	4c0d      	ldr	r4, [pc, #52]	; (80089b0 <__libc_init_array+0x3c>)
 800897c:	1b64      	subs	r4, r4, r5
 800897e:	10a4      	asrs	r4, r4, #2
 8008980:	42a6      	cmp	r6, r4
 8008982:	d109      	bne.n	8008998 <__libc_init_array+0x24>
 8008984:	f000 fc9c 	bl	80092c0 <_init>
 8008988:	2600      	movs	r6, #0
 800898a:	4d0a      	ldr	r5, [pc, #40]	; (80089b4 <__libc_init_array+0x40>)
 800898c:	4c0a      	ldr	r4, [pc, #40]	; (80089b8 <__libc_init_array+0x44>)
 800898e:	1b64      	subs	r4, r4, r5
 8008990:	10a4      	asrs	r4, r4, #2
 8008992:	42a6      	cmp	r6, r4
 8008994:	d105      	bne.n	80089a2 <__libc_init_array+0x2e>
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	f855 3b04 	ldr.w	r3, [r5], #4
 800899c:	4798      	blx	r3
 800899e:	3601      	adds	r6, #1
 80089a0:	e7ee      	b.n	8008980 <__libc_init_array+0xc>
 80089a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a6:	4798      	blx	r3
 80089a8:	3601      	adds	r6, #1
 80089aa:	e7f2      	b.n	8008992 <__libc_init_array+0x1e>
 80089ac:	080093a8 	.word	0x080093a8
 80089b0:	080093a8 	.word	0x080093a8
 80089b4:	080093a8 	.word	0x080093a8
 80089b8:	080093ac 	.word	0x080093ac

080089bc <memset>:
 80089bc:	4603      	mov	r3, r0
 80089be:	4402      	add	r2, r0
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d100      	bne.n	80089c6 <memset+0xa>
 80089c4:	4770      	bx	lr
 80089c6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ca:	e7f9      	b.n	80089c0 <memset+0x4>

080089cc <siprintf>:
 80089cc:	b40e      	push	{r1, r2, r3}
 80089ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089d2:	b500      	push	{lr}
 80089d4:	b09c      	sub	sp, #112	; 0x70
 80089d6:	ab1d      	add	r3, sp, #116	; 0x74
 80089d8:	9002      	str	r0, [sp, #8]
 80089da:	9006      	str	r0, [sp, #24]
 80089dc:	9107      	str	r1, [sp, #28]
 80089de:	9104      	str	r1, [sp, #16]
 80089e0:	4808      	ldr	r0, [pc, #32]	; (8008a04 <siprintf+0x38>)
 80089e2:	4909      	ldr	r1, [pc, #36]	; (8008a08 <siprintf+0x3c>)
 80089e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e8:	9105      	str	r1, [sp, #20]
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	a902      	add	r1, sp, #8
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	f000 f868 	bl	8008ac4 <_svfiprintf_r>
 80089f4:	2200      	movs	r2, #0
 80089f6:	9b02      	ldr	r3, [sp, #8]
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	b01c      	add	sp, #112	; 0x70
 80089fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a00:	b003      	add	sp, #12
 8008a02:	4770      	bx	lr
 8008a04:	2000017c 	.word	0x2000017c
 8008a08:	ffff0208 	.word	0xffff0208

08008a0c <__ssputs_r>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	688e      	ldr	r6, [r1, #8]
 8008a12:	4682      	mov	sl, r0
 8008a14:	429e      	cmp	r6, r3
 8008a16:	460c      	mov	r4, r1
 8008a18:	4690      	mov	r8, r2
 8008a1a:	461f      	mov	r7, r3
 8008a1c:	d838      	bhi.n	8008a90 <__ssputs_r+0x84>
 8008a1e:	898a      	ldrh	r2, [r1, #12]
 8008a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a24:	d032      	beq.n	8008a8c <__ssputs_r+0x80>
 8008a26:	6825      	ldr	r5, [r4, #0]
 8008a28:	6909      	ldr	r1, [r1, #16]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	eba5 0901 	sub.w	r9, r5, r1
 8008a30:	6965      	ldr	r5, [r4, #20]
 8008a32:	444b      	add	r3, r9
 8008a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a3c:	106d      	asrs	r5, r5, #1
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	bf38      	it	cc
 8008a42:	461d      	movcc	r5, r3
 8008a44:	0553      	lsls	r3, r2, #21
 8008a46:	d531      	bpl.n	8008aac <__ssputs_r+0xa0>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f000 fb6f 	bl	800912c <_malloc_r>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	b950      	cbnz	r0, 8008a68 <__ssputs_r+0x5c>
 8008a52:	230c      	movs	r3, #12
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	f8ca 3000 	str.w	r3, [sl]
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	464a      	mov	r2, r9
 8008a6a:	6921      	ldr	r1, [r4, #16]
 8008a6c:	f000 face 	bl	800900c <memcpy>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	6126      	str	r6, [r4, #16]
 8008a7e:	444e      	add	r6, r9
 8008a80:	6026      	str	r6, [r4, #0]
 8008a82:	463e      	mov	r6, r7
 8008a84:	6165      	str	r5, [r4, #20]
 8008a86:	eba5 0509 	sub.w	r5, r5, r9
 8008a8a:	60a5      	str	r5, [r4, #8]
 8008a8c:	42be      	cmp	r6, r7
 8008a8e:	d900      	bls.n	8008a92 <__ssputs_r+0x86>
 8008a90:	463e      	mov	r6, r7
 8008a92:	4632      	mov	r2, r6
 8008a94:	4641      	mov	r1, r8
 8008a96:	6820      	ldr	r0, [r4, #0]
 8008a98:	f000 fac6 	bl	8009028 <memmove>
 8008a9c:	68a3      	ldr	r3, [r4, #8]
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	1b9b      	subs	r3, r3, r6
 8008aa2:	60a3      	str	r3, [r4, #8]
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	4433      	add	r3, r6
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	e7db      	b.n	8008a64 <__ssputs_r+0x58>
 8008aac:	462a      	mov	r2, r5
 8008aae:	f000 fbb1 	bl	8009214 <_realloc_r>
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d1e1      	bne.n	8008a7c <__ssputs_r+0x70>
 8008ab8:	4650      	mov	r0, sl
 8008aba:	6921      	ldr	r1, [r4, #16]
 8008abc:	f000 face 	bl	800905c <_free_r>
 8008ac0:	e7c7      	b.n	8008a52 <__ssputs_r+0x46>
	...

08008ac4 <_svfiprintf_r>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	4698      	mov	r8, r3
 8008aca:	898b      	ldrh	r3, [r1, #12]
 8008acc:	4607      	mov	r7, r0
 8008ace:	061b      	lsls	r3, r3, #24
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	4614      	mov	r4, r2
 8008ad4:	b09d      	sub	sp, #116	; 0x74
 8008ad6:	d50e      	bpl.n	8008af6 <_svfiprintf_r+0x32>
 8008ad8:	690b      	ldr	r3, [r1, #16]
 8008ada:	b963      	cbnz	r3, 8008af6 <_svfiprintf_r+0x32>
 8008adc:	2140      	movs	r1, #64	; 0x40
 8008ade:	f000 fb25 	bl	800912c <_malloc_r>
 8008ae2:	6028      	str	r0, [r5, #0]
 8008ae4:	6128      	str	r0, [r5, #16]
 8008ae6:	b920      	cbnz	r0, 8008af2 <_svfiprintf_r+0x2e>
 8008ae8:	230c      	movs	r3, #12
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	e0d1      	b.n	8008c96 <_svfiprintf_r+0x1d2>
 8008af2:	2340      	movs	r3, #64	; 0x40
 8008af4:	616b      	str	r3, [r5, #20]
 8008af6:	2300      	movs	r3, #0
 8008af8:	9309      	str	r3, [sp, #36]	; 0x24
 8008afa:	2320      	movs	r3, #32
 8008afc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b00:	2330      	movs	r3, #48	; 0x30
 8008b02:	f04f 0901 	mov.w	r9, #1
 8008b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008cb0 <_svfiprintf_r+0x1ec>
 8008b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b12:	4623      	mov	r3, r4
 8008b14:	469a      	mov	sl, r3
 8008b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b1a:	b10a      	cbz	r2, 8008b20 <_svfiprintf_r+0x5c>
 8008b1c:	2a25      	cmp	r2, #37	; 0x25
 8008b1e:	d1f9      	bne.n	8008b14 <_svfiprintf_r+0x50>
 8008b20:	ebba 0b04 	subs.w	fp, sl, r4
 8008b24:	d00b      	beq.n	8008b3e <_svfiprintf_r+0x7a>
 8008b26:	465b      	mov	r3, fp
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7ff ff6d 	bl	8008a0c <__ssputs_r>
 8008b32:	3001      	adds	r0, #1
 8008b34:	f000 80aa 	beq.w	8008c8c <_svfiprintf_r+0x1c8>
 8008b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b3a:	445a      	add	r2, fp
 8008b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 80a2 	beq.w	8008c8c <_svfiprintf_r+0x1c8>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b52:	f10a 0a01 	add.w	sl, sl, #1
 8008b56:	9304      	str	r3, [sp, #16]
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b60:	4654      	mov	r4, sl
 8008b62:	2205      	movs	r2, #5
 8008b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b68:	4851      	ldr	r0, [pc, #324]	; (8008cb0 <_svfiprintf_r+0x1ec>)
 8008b6a:	f000 fa41 	bl	8008ff0 <memchr>
 8008b6e:	9a04      	ldr	r2, [sp, #16]
 8008b70:	b9d8      	cbnz	r0, 8008baa <_svfiprintf_r+0xe6>
 8008b72:	06d0      	lsls	r0, r2, #27
 8008b74:	bf44      	itt	mi
 8008b76:	2320      	movmi	r3, #32
 8008b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b7c:	0711      	lsls	r1, r2, #28
 8008b7e:	bf44      	itt	mi
 8008b80:	232b      	movmi	r3, #43	; 0x2b
 8008b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b86:	f89a 3000 	ldrb.w	r3, [sl]
 8008b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b8c:	d015      	beq.n	8008bba <_svfiprintf_r+0xf6>
 8008b8e:	4654      	mov	r4, sl
 8008b90:	2000      	movs	r0, #0
 8008b92:	f04f 0c0a 	mov.w	ip, #10
 8008b96:	9a07      	ldr	r2, [sp, #28]
 8008b98:	4621      	mov	r1, r4
 8008b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b9e:	3b30      	subs	r3, #48	; 0x30
 8008ba0:	2b09      	cmp	r3, #9
 8008ba2:	d94e      	bls.n	8008c42 <_svfiprintf_r+0x17e>
 8008ba4:	b1b0      	cbz	r0, 8008bd4 <_svfiprintf_r+0x110>
 8008ba6:	9207      	str	r2, [sp, #28]
 8008ba8:	e014      	b.n	8008bd4 <_svfiprintf_r+0x110>
 8008baa:	eba0 0308 	sub.w	r3, r0, r8
 8008bae:	fa09 f303 	lsl.w	r3, r9, r3
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	46a2      	mov	sl, r4
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	e7d2      	b.n	8008b60 <_svfiprintf_r+0x9c>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	1d19      	adds	r1, r3, #4
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	9103      	str	r1, [sp, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	bfbb      	ittet	lt
 8008bc6:	425b      	neglt	r3, r3
 8008bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bcc:	9307      	strge	r3, [sp, #28]
 8008bce:	9307      	strlt	r3, [sp, #28]
 8008bd0:	bfb8      	it	lt
 8008bd2:	9204      	strlt	r2, [sp, #16]
 8008bd4:	7823      	ldrb	r3, [r4, #0]
 8008bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8008bd8:	d10c      	bne.n	8008bf4 <_svfiprintf_r+0x130>
 8008bda:	7863      	ldrb	r3, [r4, #1]
 8008bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bde:	d135      	bne.n	8008c4c <_svfiprintf_r+0x188>
 8008be0:	9b03      	ldr	r3, [sp, #12]
 8008be2:	3402      	adds	r4, #2
 8008be4:	1d1a      	adds	r2, r3, #4
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	9203      	str	r2, [sp, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	bfb8      	it	lt
 8008bee:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008cb4 <_svfiprintf_r+0x1f0>
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	7821      	ldrb	r1, [r4, #0]
 8008bfe:	f000 f9f7 	bl	8008ff0 <memchr>
 8008c02:	b140      	cbz	r0, 8008c16 <_svfiprintf_r+0x152>
 8008c04:	2340      	movs	r3, #64	; 0x40
 8008c06:	eba0 000a 	sub.w	r0, r0, sl
 8008c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	3401      	adds	r4, #1
 8008c12:	4303      	orrs	r3, r0
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1a:	2206      	movs	r2, #6
 8008c1c:	4826      	ldr	r0, [pc, #152]	; (8008cb8 <_svfiprintf_r+0x1f4>)
 8008c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c22:	f000 f9e5 	bl	8008ff0 <memchr>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d038      	beq.n	8008c9c <_svfiprintf_r+0x1d8>
 8008c2a:	4b24      	ldr	r3, [pc, #144]	; (8008cbc <_svfiprintf_r+0x1f8>)
 8008c2c:	bb1b      	cbnz	r3, 8008c76 <_svfiprintf_r+0x1b2>
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	3307      	adds	r3, #7
 8008c32:	f023 0307 	bic.w	r3, r3, #7
 8008c36:	3308      	adds	r3, #8
 8008c38:	9303      	str	r3, [sp, #12]
 8008c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c3c:	4433      	add	r3, r6
 8008c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c40:	e767      	b.n	8008b12 <_svfiprintf_r+0x4e>
 8008c42:	460c      	mov	r4, r1
 8008c44:	2001      	movs	r0, #1
 8008c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c4a:	e7a5      	b.n	8008b98 <_svfiprintf_r+0xd4>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f04f 0c0a 	mov.w	ip, #10
 8008c52:	4619      	mov	r1, r3
 8008c54:	3401      	adds	r4, #1
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c5e:	3a30      	subs	r2, #48	; 0x30
 8008c60:	2a09      	cmp	r2, #9
 8008c62:	d903      	bls.n	8008c6c <_svfiprintf_r+0x1a8>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0c5      	beq.n	8008bf4 <_svfiprintf_r+0x130>
 8008c68:	9105      	str	r1, [sp, #20]
 8008c6a:	e7c3      	b.n	8008bf4 <_svfiprintf_r+0x130>
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	2301      	movs	r3, #1
 8008c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c74:	e7f0      	b.n	8008c58 <_svfiprintf_r+0x194>
 8008c76:	ab03      	add	r3, sp, #12
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	462a      	mov	r2, r5
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	4b10      	ldr	r3, [pc, #64]	; (8008cc0 <_svfiprintf_r+0x1fc>)
 8008c80:	a904      	add	r1, sp, #16
 8008c82:	f3af 8000 	nop.w
 8008c86:	1c42      	adds	r2, r0, #1
 8008c88:	4606      	mov	r6, r0
 8008c8a:	d1d6      	bne.n	8008c3a <_svfiprintf_r+0x176>
 8008c8c:	89ab      	ldrh	r3, [r5, #12]
 8008c8e:	065b      	lsls	r3, r3, #25
 8008c90:	f53f af2c 	bmi.w	8008aec <_svfiprintf_r+0x28>
 8008c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c96:	b01d      	add	sp, #116	; 0x74
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9c:	ab03      	add	r3, sp, #12
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	4b06      	ldr	r3, [pc, #24]	; (8008cc0 <_svfiprintf_r+0x1fc>)
 8008ca6:	a904      	add	r1, sp, #16
 8008ca8:	f000 f87c 	bl	8008da4 <_printf_i>
 8008cac:	e7eb      	b.n	8008c86 <_svfiprintf_r+0x1c2>
 8008cae:	bf00      	nop
 8008cb0:	0800936c 	.word	0x0800936c
 8008cb4:	08009372 	.word	0x08009372
 8008cb8:	08009376 	.word	0x08009376
 8008cbc:	00000000 	.word	0x00000000
 8008cc0:	08008a0d 	.word	0x08008a0d

08008cc4 <_printf_common>:
 8008cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	4616      	mov	r6, r2
 8008cca:	4699      	mov	r9, r3
 8008ccc:	688a      	ldr	r2, [r1, #8]
 8008cce:	690b      	ldr	r3, [r1, #16]
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	bfb8      	it	lt
 8008cd6:	4613      	movlt	r3, r2
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cde:	460c      	mov	r4, r1
 8008ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ce4:	b10a      	cbz	r2, 8008cea <_printf_common+0x26>
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	6033      	str	r3, [r6, #0]
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	0699      	lsls	r1, r3, #26
 8008cee:	bf42      	ittt	mi
 8008cf0:	6833      	ldrmi	r3, [r6, #0]
 8008cf2:	3302      	addmi	r3, #2
 8008cf4:	6033      	strmi	r3, [r6, #0]
 8008cf6:	6825      	ldr	r5, [r4, #0]
 8008cf8:	f015 0506 	ands.w	r5, r5, #6
 8008cfc:	d106      	bne.n	8008d0c <_printf_common+0x48>
 8008cfe:	f104 0a19 	add.w	sl, r4, #25
 8008d02:	68e3      	ldr	r3, [r4, #12]
 8008d04:	6832      	ldr	r2, [r6, #0]
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	42ab      	cmp	r3, r5
 8008d0a:	dc28      	bgt.n	8008d5e <_printf_common+0x9a>
 8008d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d10:	1e13      	subs	r3, r2, #0
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	bf18      	it	ne
 8008d16:	2301      	movne	r3, #1
 8008d18:	0692      	lsls	r2, r2, #26
 8008d1a:	d42d      	bmi.n	8008d78 <_printf_common+0xb4>
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	4638      	mov	r0, r7
 8008d20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d24:	47c0      	blx	r8
 8008d26:	3001      	adds	r0, #1
 8008d28:	d020      	beq.n	8008d6c <_printf_common+0xa8>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	68e5      	ldr	r5, [r4, #12]
 8008d2e:	f003 0306 	and.w	r3, r3, #6
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	bf18      	it	ne
 8008d36:	2500      	movne	r5, #0
 8008d38:	6832      	ldr	r2, [r6, #0]
 8008d3a:	f04f 0600 	mov.w	r6, #0
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	bf08      	it	eq
 8008d42:	1aad      	subeq	r5, r5, r2
 8008d44:	6922      	ldr	r2, [r4, #16]
 8008d46:	bf08      	it	eq
 8008d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	bfc4      	itt	gt
 8008d50:	1a9b      	subgt	r3, r3, r2
 8008d52:	18ed      	addgt	r5, r5, r3
 8008d54:	341a      	adds	r4, #26
 8008d56:	42b5      	cmp	r5, r6
 8008d58:	d11a      	bne.n	8008d90 <_printf_common+0xcc>
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	e008      	b.n	8008d70 <_printf_common+0xac>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4652      	mov	r2, sl
 8008d62:	4649      	mov	r1, r9
 8008d64:	4638      	mov	r0, r7
 8008d66:	47c0      	blx	r8
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d103      	bne.n	8008d74 <_printf_common+0xb0>
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d74:	3501      	adds	r5, #1
 8008d76:	e7c4      	b.n	8008d02 <_printf_common+0x3e>
 8008d78:	2030      	movs	r0, #48	; 0x30
 8008d7a:	18e1      	adds	r1, r4, r3
 8008d7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d86:	4422      	add	r2, r4
 8008d88:	3302      	adds	r3, #2
 8008d8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d8e:	e7c5      	b.n	8008d1c <_printf_common+0x58>
 8008d90:	2301      	movs	r3, #1
 8008d92:	4622      	mov	r2, r4
 8008d94:	4649      	mov	r1, r9
 8008d96:	4638      	mov	r0, r7
 8008d98:	47c0      	blx	r8
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d0e6      	beq.n	8008d6c <_printf_common+0xa8>
 8008d9e:	3601      	adds	r6, #1
 8008da0:	e7d9      	b.n	8008d56 <_printf_common+0x92>
	...

08008da4 <_printf_i>:
 8008da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008da8:	7e0f      	ldrb	r7, [r1, #24]
 8008daa:	4691      	mov	r9, r2
 8008dac:	2f78      	cmp	r7, #120	; 0x78
 8008dae:	4680      	mov	r8, r0
 8008db0:	460c      	mov	r4, r1
 8008db2:	469a      	mov	sl, r3
 8008db4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008db6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dba:	d807      	bhi.n	8008dcc <_printf_i+0x28>
 8008dbc:	2f62      	cmp	r7, #98	; 0x62
 8008dbe:	d80a      	bhi.n	8008dd6 <_printf_i+0x32>
 8008dc0:	2f00      	cmp	r7, #0
 8008dc2:	f000 80d9 	beq.w	8008f78 <_printf_i+0x1d4>
 8008dc6:	2f58      	cmp	r7, #88	; 0x58
 8008dc8:	f000 80a4 	beq.w	8008f14 <_printf_i+0x170>
 8008dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dd4:	e03a      	b.n	8008e4c <_printf_i+0xa8>
 8008dd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dda:	2b15      	cmp	r3, #21
 8008ddc:	d8f6      	bhi.n	8008dcc <_printf_i+0x28>
 8008dde:	a101      	add	r1, pc, #4	; (adr r1, 8008de4 <_printf_i+0x40>)
 8008de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008de4:	08008e3d 	.word	0x08008e3d
 8008de8:	08008e51 	.word	0x08008e51
 8008dec:	08008dcd 	.word	0x08008dcd
 8008df0:	08008dcd 	.word	0x08008dcd
 8008df4:	08008dcd 	.word	0x08008dcd
 8008df8:	08008dcd 	.word	0x08008dcd
 8008dfc:	08008e51 	.word	0x08008e51
 8008e00:	08008dcd 	.word	0x08008dcd
 8008e04:	08008dcd 	.word	0x08008dcd
 8008e08:	08008dcd 	.word	0x08008dcd
 8008e0c:	08008dcd 	.word	0x08008dcd
 8008e10:	08008f5f 	.word	0x08008f5f
 8008e14:	08008e81 	.word	0x08008e81
 8008e18:	08008f41 	.word	0x08008f41
 8008e1c:	08008dcd 	.word	0x08008dcd
 8008e20:	08008dcd 	.word	0x08008dcd
 8008e24:	08008f81 	.word	0x08008f81
 8008e28:	08008dcd 	.word	0x08008dcd
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08008dcd 	.word	0x08008dcd
 8008e34:	08008dcd 	.word	0x08008dcd
 8008e38:	08008f49 	.word	0x08008f49
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	1d1a      	adds	r2, r3, #4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	602a      	str	r2, [r5, #0]
 8008e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e0a4      	b.n	8008f9a <_printf_i+0x1f6>
 8008e50:	6820      	ldr	r0, [r4, #0]
 8008e52:	6829      	ldr	r1, [r5, #0]
 8008e54:	0606      	lsls	r6, r0, #24
 8008e56:	f101 0304 	add.w	r3, r1, #4
 8008e5a:	d50a      	bpl.n	8008e72 <_printf_i+0xce>
 8008e5c:	680e      	ldr	r6, [r1, #0]
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	2e00      	cmp	r6, #0
 8008e62:	da03      	bge.n	8008e6c <_printf_i+0xc8>
 8008e64:	232d      	movs	r3, #45	; 0x2d
 8008e66:	4276      	negs	r6, r6
 8008e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e6c:	230a      	movs	r3, #10
 8008e6e:	485e      	ldr	r0, [pc, #376]	; (8008fe8 <_printf_i+0x244>)
 8008e70:	e019      	b.n	8008ea6 <_printf_i+0x102>
 8008e72:	680e      	ldr	r6, [r1, #0]
 8008e74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e78:	602b      	str	r3, [r5, #0]
 8008e7a:	bf18      	it	ne
 8008e7c:	b236      	sxthne	r6, r6
 8008e7e:	e7ef      	b.n	8008e60 <_printf_i+0xbc>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	6820      	ldr	r0, [r4, #0]
 8008e84:	1d19      	adds	r1, r3, #4
 8008e86:	6029      	str	r1, [r5, #0]
 8008e88:	0601      	lsls	r1, r0, #24
 8008e8a:	d501      	bpl.n	8008e90 <_printf_i+0xec>
 8008e8c:	681e      	ldr	r6, [r3, #0]
 8008e8e:	e002      	b.n	8008e96 <_printf_i+0xf2>
 8008e90:	0646      	lsls	r6, r0, #25
 8008e92:	d5fb      	bpl.n	8008e8c <_printf_i+0xe8>
 8008e94:	881e      	ldrh	r6, [r3, #0]
 8008e96:	2f6f      	cmp	r7, #111	; 0x6f
 8008e98:	bf0c      	ite	eq
 8008e9a:	2308      	moveq	r3, #8
 8008e9c:	230a      	movne	r3, #10
 8008e9e:	4852      	ldr	r0, [pc, #328]	; (8008fe8 <_printf_i+0x244>)
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ea6:	6865      	ldr	r5, [r4, #4]
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	bfa8      	it	ge
 8008eac:	6821      	ldrge	r1, [r4, #0]
 8008eae:	60a5      	str	r5, [r4, #8]
 8008eb0:	bfa4      	itt	ge
 8008eb2:	f021 0104 	bicge.w	r1, r1, #4
 8008eb6:	6021      	strge	r1, [r4, #0]
 8008eb8:	b90e      	cbnz	r6, 8008ebe <_printf_i+0x11a>
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	d04d      	beq.n	8008f5a <_printf_i+0x1b6>
 8008ebe:	4615      	mov	r5, r2
 8008ec0:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ec4:	fb03 6711 	mls	r7, r3, r1, r6
 8008ec8:	5dc7      	ldrb	r7, [r0, r7]
 8008eca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ece:	4637      	mov	r7, r6
 8008ed0:	42bb      	cmp	r3, r7
 8008ed2:	460e      	mov	r6, r1
 8008ed4:	d9f4      	bls.n	8008ec0 <_printf_i+0x11c>
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d10b      	bne.n	8008ef2 <_printf_i+0x14e>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	07de      	lsls	r6, r3, #31
 8008ede:	d508      	bpl.n	8008ef2 <_printf_i+0x14e>
 8008ee0:	6923      	ldr	r3, [r4, #16]
 8008ee2:	6861      	ldr	r1, [r4, #4]
 8008ee4:	4299      	cmp	r1, r3
 8008ee6:	bfde      	ittt	le
 8008ee8:	2330      	movle	r3, #48	; 0x30
 8008eea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008eee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ef2:	1b52      	subs	r2, r2, r5
 8008ef4:	6122      	str	r2, [r4, #16]
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4640      	mov	r0, r8
 8008efc:	f8cd a000 	str.w	sl, [sp]
 8008f00:	aa03      	add	r2, sp, #12
 8008f02:	f7ff fedf 	bl	8008cc4 <_printf_common>
 8008f06:	3001      	adds	r0, #1
 8008f08:	d14c      	bne.n	8008fa4 <_printf_i+0x200>
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	b004      	add	sp, #16
 8008f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f14:	4834      	ldr	r0, [pc, #208]	; (8008fe8 <_printf_i+0x244>)
 8008f16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f1a:	6829      	ldr	r1, [r5, #0]
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f22:	6029      	str	r1, [r5, #0]
 8008f24:	061d      	lsls	r5, r3, #24
 8008f26:	d514      	bpl.n	8008f52 <_printf_i+0x1ae>
 8008f28:	07df      	lsls	r7, r3, #31
 8008f2a:	bf44      	itt	mi
 8008f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8008f30:	6023      	strmi	r3, [r4, #0]
 8008f32:	b91e      	cbnz	r6, 8008f3c <_printf_i+0x198>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	f023 0320 	bic.w	r3, r3, #32
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	e7af      	b.n	8008ea0 <_printf_i+0xfc>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	f043 0320 	orr.w	r3, r3, #32
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	2378      	movs	r3, #120	; 0x78
 8008f4a:	4828      	ldr	r0, [pc, #160]	; (8008fec <_printf_i+0x248>)
 8008f4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f50:	e7e3      	b.n	8008f1a <_printf_i+0x176>
 8008f52:	0659      	lsls	r1, r3, #25
 8008f54:	bf48      	it	mi
 8008f56:	b2b6      	uxthmi	r6, r6
 8008f58:	e7e6      	b.n	8008f28 <_printf_i+0x184>
 8008f5a:	4615      	mov	r5, r2
 8008f5c:	e7bb      	b.n	8008ed6 <_printf_i+0x132>
 8008f5e:	682b      	ldr	r3, [r5, #0]
 8008f60:	6826      	ldr	r6, [r4, #0]
 8008f62:	1d18      	adds	r0, r3, #4
 8008f64:	6961      	ldr	r1, [r4, #20]
 8008f66:	6028      	str	r0, [r5, #0]
 8008f68:	0635      	lsls	r5, r6, #24
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	d501      	bpl.n	8008f72 <_printf_i+0x1ce>
 8008f6e:	6019      	str	r1, [r3, #0]
 8008f70:	e002      	b.n	8008f78 <_printf_i+0x1d4>
 8008f72:	0670      	lsls	r0, r6, #25
 8008f74:	d5fb      	bpl.n	8008f6e <_printf_i+0x1ca>
 8008f76:	8019      	strh	r1, [r3, #0]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4615      	mov	r5, r2
 8008f7c:	6123      	str	r3, [r4, #16]
 8008f7e:	e7ba      	b.n	8008ef6 <_printf_i+0x152>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	2100      	movs	r1, #0
 8008f84:	1d1a      	adds	r2, r3, #4
 8008f86:	602a      	str	r2, [r5, #0]
 8008f88:	681d      	ldr	r5, [r3, #0]
 8008f8a:	6862      	ldr	r2, [r4, #4]
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f000 f82f 	bl	8008ff0 <memchr>
 8008f92:	b108      	cbz	r0, 8008f98 <_printf_i+0x1f4>
 8008f94:	1b40      	subs	r0, r0, r5
 8008f96:	6060      	str	r0, [r4, #4]
 8008f98:	6863      	ldr	r3, [r4, #4]
 8008f9a:	6123      	str	r3, [r4, #16]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa2:	e7a8      	b.n	8008ef6 <_printf_i+0x152>
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	4640      	mov	r0, r8
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	47d0      	blx	sl
 8008fae:	3001      	adds	r0, #1
 8008fb0:	d0ab      	beq.n	8008f0a <_printf_i+0x166>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	079b      	lsls	r3, r3, #30
 8008fb6:	d413      	bmi.n	8008fe0 <_printf_i+0x23c>
 8008fb8:	68e0      	ldr	r0, [r4, #12]
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	4298      	cmp	r0, r3
 8008fbe:	bfb8      	it	lt
 8008fc0:	4618      	movlt	r0, r3
 8008fc2:	e7a4      	b.n	8008f0e <_printf_i+0x16a>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4632      	mov	r2, r6
 8008fc8:	4649      	mov	r1, r9
 8008fca:	4640      	mov	r0, r8
 8008fcc:	47d0      	blx	sl
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d09b      	beq.n	8008f0a <_printf_i+0x166>
 8008fd2:	3501      	adds	r5, #1
 8008fd4:	68e3      	ldr	r3, [r4, #12]
 8008fd6:	9903      	ldr	r1, [sp, #12]
 8008fd8:	1a5b      	subs	r3, r3, r1
 8008fda:	42ab      	cmp	r3, r5
 8008fdc:	dcf2      	bgt.n	8008fc4 <_printf_i+0x220>
 8008fde:	e7eb      	b.n	8008fb8 <_printf_i+0x214>
 8008fe0:	2500      	movs	r5, #0
 8008fe2:	f104 0619 	add.w	r6, r4, #25
 8008fe6:	e7f5      	b.n	8008fd4 <_printf_i+0x230>
 8008fe8:	0800937d 	.word	0x0800937d
 8008fec:	0800938e 	.word	0x0800938e

08008ff0 <memchr>:
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	b2c9      	uxtb	r1, r1
 8008ff6:	4402      	add	r2, r0
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	d101      	bne.n	8009002 <memchr+0x12>
 8008ffe:	2000      	movs	r0, #0
 8009000:	e003      	b.n	800900a <memchr+0x1a>
 8009002:	7804      	ldrb	r4, [r0, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	428c      	cmp	r4, r1
 8009008:	d1f6      	bne.n	8008ff8 <memchr+0x8>
 800900a:	bd10      	pop	{r4, pc}

0800900c <memcpy>:
 800900c:	440a      	add	r2, r1
 800900e:	4291      	cmp	r1, r2
 8009010:	f100 33ff 	add.w	r3, r0, #4294967295
 8009014:	d100      	bne.n	8009018 <memcpy+0xc>
 8009016:	4770      	bx	lr
 8009018:	b510      	push	{r4, lr}
 800901a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800901e:	4291      	cmp	r1, r2
 8009020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009024:	d1f9      	bne.n	800901a <memcpy+0xe>
 8009026:	bd10      	pop	{r4, pc}

08009028 <memmove>:
 8009028:	4288      	cmp	r0, r1
 800902a:	b510      	push	{r4, lr}
 800902c:	eb01 0402 	add.w	r4, r1, r2
 8009030:	d902      	bls.n	8009038 <memmove+0x10>
 8009032:	4284      	cmp	r4, r0
 8009034:	4623      	mov	r3, r4
 8009036:	d807      	bhi.n	8009048 <memmove+0x20>
 8009038:	1e43      	subs	r3, r0, #1
 800903a:	42a1      	cmp	r1, r4
 800903c:	d008      	beq.n	8009050 <memmove+0x28>
 800903e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009046:	e7f8      	b.n	800903a <memmove+0x12>
 8009048:	4601      	mov	r1, r0
 800904a:	4402      	add	r2, r0
 800904c:	428a      	cmp	r2, r1
 800904e:	d100      	bne.n	8009052 <memmove+0x2a>
 8009050:	bd10      	pop	{r4, pc}
 8009052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800905a:	e7f7      	b.n	800904c <memmove+0x24>

0800905c <_free_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4605      	mov	r5, r0
 8009060:	2900      	cmp	r1, #0
 8009062:	d040      	beq.n	80090e6 <_free_r+0x8a>
 8009064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009068:	1f0c      	subs	r4, r1, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	bfb8      	it	lt
 800906e:	18e4      	addlt	r4, r4, r3
 8009070:	f000 f910 	bl	8009294 <__malloc_lock>
 8009074:	4a1c      	ldr	r2, [pc, #112]	; (80090e8 <_free_r+0x8c>)
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	b933      	cbnz	r3, 8009088 <_free_r+0x2c>
 800907a:	6063      	str	r3, [r4, #4]
 800907c:	6014      	str	r4, [r2, #0]
 800907e:	4628      	mov	r0, r5
 8009080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009084:	f000 b90c 	b.w	80092a0 <__malloc_unlock>
 8009088:	42a3      	cmp	r3, r4
 800908a:	d908      	bls.n	800909e <_free_r+0x42>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	1821      	adds	r1, r4, r0
 8009090:	428b      	cmp	r3, r1
 8009092:	bf01      	itttt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	1809      	addeq	r1, r1, r0
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	e7ed      	b.n	800907a <_free_r+0x1e>
 800909e:	461a      	mov	r2, r3
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	b10b      	cbz	r3, 80090a8 <_free_r+0x4c>
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d9fa      	bls.n	800909e <_free_r+0x42>
 80090a8:	6811      	ldr	r1, [r2, #0]
 80090aa:	1850      	adds	r0, r2, r1
 80090ac:	42a0      	cmp	r0, r4
 80090ae:	d10b      	bne.n	80090c8 <_free_r+0x6c>
 80090b0:	6820      	ldr	r0, [r4, #0]
 80090b2:	4401      	add	r1, r0
 80090b4:	1850      	adds	r0, r2, r1
 80090b6:	4283      	cmp	r3, r0
 80090b8:	6011      	str	r1, [r2, #0]
 80090ba:	d1e0      	bne.n	800907e <_free_r+0x22>
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4401      	add	r1, r0
 80090c2:	6011      	str	r1, [r2, #0]
 80090c4:	6053      	str	r3, [r2, #4]
 80090c6:	e7da      	b.n	800907e <_free_r+0x22>
 80090c8:	d902      	bls.n	80090d0 <_free_r+0x74>
 80090ca:	230c      	movs	r3, #12
 80090cc:	602b      	str	r3, [r5, #0]
 80090ce:	e7d6      	b.n	800907e <_free_r+0x22>
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	1821      	adds	r1, r4, r0
 80090d4:	428b      	cmp	r3, r1
 80090d6:	bf01      	itttt	eq
 80090d8:	6819      	ldreq	r1, [r3, #0]
 80090da:	685b      	ldreq	r3, [r3, #4]
 80090dc:	1809      	addeq	r1, r1, r0
 80090de:	6021      	streq	r1, [r4, #0]
 80090e0:	6063      	str	r3, [r4, #4]
 80090e2:	6054      	str	r4, [r2, #4]
 80090e4:	e7cb      	b.n	800907e <_free_r+0x22>
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20001460 	.word	0x20001460

080090ec <sbrk_aligned>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	4e0e      	ldr	r6, [pc, #56]	; (8009128 <sbrk_aligned+0x3c>)
 80090f0:	460c      	mov	r4, r1
 80090f2:	6831      	ldr	r1, [r6, #0]
 80090f4:	4605      	mov	r5, r0
 80090f6:	b911      	cbnz	r1, 80090fe <sbrk_aligned+0x12>
 80090f8:	f000 f8bc 	bl	8009274 <_sbrk_r>
 80090fc:	6030      	str	r0, [r6, #0]
 80090fe:	4621      	mov	r1, r4
 8009100:	4628      	mov	r0, r5
 8009102:	f000 f8b7 	bl	8009274 <_sbrk_r>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d00a      	beq.n	8009120 <sbrk_aligned+0x34>
 800910a:	1cc4      	adds	r4, r0, #3
 800910c:	f024 0403 	bic.w	r4, r4, #3
 8009110:	42a0      	cmp	r0, r4
 8009112:	d007      	beq.n	8009124 <sbrk_aligned+0x38>
 8009114:	1a21      	subs	r1, r4, r0
 8009116:	4628      	mov	r0, r5
 8009118:	f000 f8ac 	bl	8009274 <_sbrk_r>
 800911c:	3001      	adds	r0, #1
 800911e:	d101      	bne.n	8009124 <sbrk_aligned+0x38>
 8009120:	f04f 34ff 	mov.w	r4, #4294967295
 8009124:	4620      	mov	r0, r4
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	20001464 	.word	0x20001464

0800912c <_malloc_r>:
 800912c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009130:	1ccd      	adds	r5, r1, #3
 8009132:	f025 0503 	bic.w	r5, r5, #3
 8009136:	3508      	adds	r5, #8
 8009138:	2d0c      	cmp	r5, #12
 800913a:	bf38      	it	cc
 800913c:	250c      	movcc	r5, #12
 800913e:	2d00      	cmp	r5, #0
 8009140:	4607      	mov	r7, r0
 8009142:	db01      	blt.n	8009148 <_malloc_r+0x1c>
 8009144:	42a9      	cmp	r1, r5
 8009146:	d905      	bls.n	8009154 <_malloc_r+0x28>
 8009148:	230c      	movs	r3, #12
 800914a:	2600      	movs	r6, #0
 800914c:	603b      	str	r3, [r7, #0]
 800914e:	4630      	mov	r0, r6
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009154:	4e2e      	ldr	r6, [pc, #184]	; (8009210 <_malloc_r+0xe4>)
 8009156:	f000 f89d 	bl	8009294 <__malloc_lock>
 800915a:	6833      	ldr	r3, [r6, #0]
 800915c:	461c      	mov	r4, r3
 800915e:	bb34      	cbnz	r4, 80091ae <_malloc_r+0x82>
 8009160:	4629      	mov	r1, r5
 8009162:	4638      	mov	r0, r7
 8009164:	f7ff ffc2 	bl	80090ec <sbrk_aligned>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	4604      	mov	r4, r0
 800916c:	d14d      	bne.n	800920a <_malloc_r+0xde>
 800916e:	6834      	ldr	r4, [r6, #0]
 8009170:	4626      	mov	r6, r4
 8009172:	2e00      	cmp	r6, #0
 8009174:	d140      	bne.n	80091f8 <_malloc_r+0xcc>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	4631      	mov	r1, r6
 800917a:	4638      	mov	r0, r7
 800917c:	eb04 0803 	add.w	r8, r4, r3
 8009180:	f000 f878 	bl	8009274 <_sbrk_r>
 8009184:	4580      	cmp	r8, r0
 8009186:	d13a      	bne.n	80091fe <_malloc_r+0xd2>
 8009188:	6821      	ldr	r1, [r4, #0]
 800918a:	3503      	adds	r5, #3
 800918c:	1a6d      	subs	r5, r5, r1
 800918e:	f025 0503 	bic.w	r5, r5, #3
 8009192:	3508      	adds	r5, #8
 8009194:	2d0c      	cmp	r5, #12
 8009196:	bf38      	it	cc
 8009198:	250c      	movcc	r5, #12
 800919a:	4638      	mov	r0, r7
 800919c:	4629      	mov	r1, r5
 800919e:	f7ff ffa5 	bl	80090ec <sbrk_aligned>
 80091a2:	3001      	adds	r0, #1
 80091a4:	d02b      	beq.n	80091fe <_malloc_r+0xd2>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	442b      	add	r3, r5
 80091aa:	6023      	str	r3, [r4, #0]
 80091ac:	e00e      	b.n	80091cc <_malloc_r+0xa0>
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	1b52      	subs	r2, r2, r5
 80091b2:	d41e      	bmi.n	80091f2 <_malloc_r+0xc6>
 80091b4:	2a0b      	cmp	r2, #11
 80091b6:	d916      	bls.n	80091e6 <_malloc_r+0xba>
 80091b8:	1961      	adds	r1, r4, r5
 80091ba:	42a3      	cmp	r3, r4
 80091bc:	6025      	str	r5, [r4, #0]
 80091be:	bf18      	it	ne
 80091c0:	6059      	strne	r1, [r3, #4]
 80091c2:	6863      	ldr	r3, [r4, #4]
 80091c4:	bf08      	it	eq
 80091c6:	6031      	streq	r1, [r6, #0]
 80091c8:	5162      	str	r2, [r4, r5]
 80091ca:	604b      	str	r3, [r1, #4]
 80091cc:	4638      	mov	r0, r7
 80091ce:	f104 060b 	add.w	r6, r4, #11
 80091d2:	f000 f865 	bl	80092a0 <__malloc_unlock>
 80091d6:	f026 0607 	bic.w	r6, r6, #7
 80091da:	1d23      	adds	r3, r4, #4
 80091dc:	1af2      	subs	r2, r6, r3
 80091de:	d0b6      	beq.n	800914e <_malloc_r+0x22>
 80091e0:	1b9b      	subs	r3, r3, r6
 80091e2:	50a3      	str	r3, [r4, r2]
 80091e4:	e7b3      	b.n	800914e <_malloc_r+0x22>
 80091e6:	6862      	ldr	r2, [r4, #4]
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	bf0c      	ite	eq
 80091ec:	6032      	streq	r2, [r6, #0]
 80091ee:	605a      	strne	r2, [r3, #4]
 80091f0:	e7ec      	b.n	80091cc <_malloc_r+0xa0>
 80091f2:	4623      	mov	r3, r4
 80091f4:	6864      	ldr	r4, [r4, #4]
 80091f6:	e7b2      	b.n	800915e <_malloc_r+0x32>
 80091f8:	4634      	mov	r4, r6
 80091fa:	6876      	ldr	r6, [r6, #4]
 80091fc:	e7b9      	b.n	8009172 <_malloc_r+0x46>
 80091fe:	230c      	movs	r3, #12
 8009200:	4638      	mov	r0, r7
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	f000 f84c 	bl	80092a0 <__malloc_unlock>
 8009208:	e7a1      	b.n	800914e <_malloc_r+0x22>
 800920a:	6025      	str	r5, [r4, #0]
 800920c:	e7de      	b.n	80091cc <_malloc_r+0xa0>
 800920e:	bf00      	nop
 8009210:	20001460 	.word	0x20001460

08009214 <_realloc_r>:
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009218:	4680      	mov	r8, r0
 800921a:	4614      	mov	r4, r2
 800921c:	460e      	mov	r6, r1
 800921e:	b921      	cbnz	r1, 800922a <_realloc_r+0x16>
 8009220:	4611      	mov	r1, r2
 8009222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009226:	f7ff bf81 	b.w	800912c <_malloc_r>
 800922a:	b92a      	cbnz	r2, 8009238 <_realloc_r+0x24>
 800922c:	f7ff ff16 	bl	800905c <_free_r>
 8009230:	4625      	mov	r5, r4
 8009232:	4628      	mov	r0, r5
 8009234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009238:	f000 f838 	bl	80092ac <_malloc_usable_size_r>
 800923c:	4284      	cmp	r4, r0
 800923e:	4607      	mov	r7, r0
 8009240:	d802      	bhi.n	8009248 <_realloc_r+0x34>
 8009242:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009246:	d812      	bhi.n	800926e <_realloc_r+0x5a>
 8009248:	4621      	mov	r1, r4
 800924a:	4640      	mov	r0, r8
 800924c:	f7ff ff6e 	bl	800912c <_malloc_r>
 8009250:	4605      	mov	r5, r0
 8009252:	2800      	cmp	r0, #0
 8009254:	d0ed      	beq.n	8009232 <_realloc_r+0x1e>
 8009256:	42bc      	cmp	r4, r7
 8009258:	4622      	mov	r2, r4
 800925a:	4631      	mov	r1, r6
 800925c:	bf28      	it	cs
 800925e:	463a      	movcs	r2, r7
 8009260:	f7ff fed4 	bl	800900c <memcpy>
 8009264:	4631      	mov	r1, r6
 8009266:	4640      	mov	r0, r8
 8009268:	f7ff fef8 	bl	800905c <_free_r>
 800926c:	e7e1      	b.n	8009232 <_realloc_r+0x1e>
 800926e:	4635      	mov	r5, r6
 8009270:	e7df      	b.n	8009232 <_realloc_r+0x1e>
	...

08009274 <_sbrk_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	2300      	movs	r3, #0
 8009278:	4d05      	ldr	r5, [pc, #20]	; (8009290 <_sbrk_r+0x1c>)
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	602b      	str	r3, [r5, #0]
 8009280:	f7f7 fb7e 	bl	8000980 <_sbrk>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_sbrk_r+0x1a>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_sbrk_r+0x1a>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	20001468 	.word	0x20001468

08009294 <__malloc_lock>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__malloc_lock+0x8>)
 8009296:	f000 b811 	b.w	80092bc <__retarget_lock_acquire_recursive>
 800929a:	bf00      	nop
 800929c:	2000146c 	.word	0x2000146c

080092a0 <__malloc_unlock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_unlock+0x8>)
 80092a2:	f000 b80c 	b.w	80092be <__retarget_lock_release_recursive>
 80092a6:	bf00      	nop
 80092a8:	2000146c 	.word	0x2000146c

080092ac <_malloc_usable_size_r>:
 80092ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b0:	1f18      	subs	r0, r3, #4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	bfbc      	itt	lt
 80092b6:	580b      	ldrlt	r3, [r1, r0]
 80092b8:	18c0      	addlt	r0, r0, r3
 80092ba:	4770      	bx	lr

080092bc <__retarget_lock_acquire_recursive>:
 80092bc:	4770      	bx	lr

080092be <__retarget_lock_release_recursive>:
 80092be:	4770      	bx	lr

080092c0 <_init>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr

080092cc <_fini>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr
